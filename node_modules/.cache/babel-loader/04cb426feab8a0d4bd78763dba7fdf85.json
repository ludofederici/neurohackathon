{"ast":null,"code":"var _jsxFileName = \"/Users/ludofederici/neurohackathon/src/pages/Focus.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { notion, useNotion } from \"../services/notion\";\nimport { Nav } from \"../components/Nav\";\nexport function Focus() {\n  const {\n    user\n  } = useNotion();\n  const [focus, setFocus] = useState(0);\n  const [color, setColor] = useState('');\n  const [focusScores, setFocusScores] = useState([]); // Step 1: Initialize state for focus scores list\n  const [averageFocusScore, setAverageFocusScore] = useState(0);\n  const [newFocusScores, setNewFocusScores] = useState(0);\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/login\");\n    }\n  }, [user]);\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    const subscription = notion.focus().subscribe(focus => {\n      const focusScore = Math.trunc(focus.probability * 100);\n      setFocus(focusScore);\n\n      // Append the new focus score to the focusScores list\n      setFocusScores(prevScores => {\n        const newFocusScores = [...prevScores, focusScore];\n\n        // Calculate the average using the new array\n        const averageFocusScore = Math.round(newFocusScores.slice(-20).reduce((acc, score) => acc + score, 0) / Math.min(newFocusScores.length, 20));\n        setAverageFocusScore(averageFocusScore);\n        if (averageFocusScore < 30) {\n          alert('Your average focus score over the last 20 entries is below 30%. Consider taking a break or changing tasks.');\n        }\n      });\n      if (focusScore < 30) {\n        setColor('red');\n      } else {\n        setColor('green');\n      }\n    });\n    return newFocusScores;\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [user]);\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: \"main-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, user ? /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-score\",\n    style: {\n      borderColor: color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"\\xA0\", focus, \"% \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-word\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 24\n    }\n  }, \"Focus\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Average of last 20 scores: \", averageFocusScore, \"%\"));\n}","map":{"version":3,"names":["React","useState","useEffect","navigate","notion","useNotion","Nav","Focus","user","focus","setFocus","color","setColor","focusScores","setFocusScores","averageFocusScore","setAverageFocusScore","newFocusScores","setNewFocusScores","subscription","subscribe","focusScore","Math","trunc","probability","prevScores","round","slice","reduce","acc","score","min","length","alert","unsubscribe","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","borderColor"],"sources":["/Users/ludofederici/neurohackathon/src/pages/Focus.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\n\nimport { notion, useNotion } from \"../services/notion\";\nimport { Nav } from \"../components/Nav\";\n\nexport function Focus() {\n  const { user } = useNotion();\n  const [focus, setFocus] = useState(0);\n  const [color, setColor] = useState('');\n  const [focusScores, setFocusScores] = useState([]); // Step 1: Initialize state for focus scores list\n  const [averageFocusScore, setAverageFocusScore] = useState(0);\n  const [newFocusScores, setNewFocusScores] = useState(0);\n\n\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/login\");\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    const subscription = notion.focus().subscribe((focus) => {\n      const focusScore = Math.trunc(focus.probability * 100);\n      setFocus(focusScore);\n\n      // Append the new focus score to the focusScores list\n      setFocusScores((prevScores) => {\n      const newFocusScores = [...prevScores, focusScore];\n\n\n      // Calculate the average using the new array\n      const averageFocusScore = Math.round(newFocusScores.slice(-20).reduce((acc, score) => acc + score, 0) / Math.min(newFocusScores.length, 20));\n      setAverageFocusScore(averageFocusScore);\n      if (averageFocusScore < 30) {\n        alert('Your average focus score over the last 20 entries is below 30%. Consider taking a break or changing tasks.');\n        \n      }\n    });\n\n      if (focusScore < 30) {\n        setColor('red');\n      } else {\n        setColor('green');\n      }\n    });\n      \n    return newFocusScores;\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [user]);\n\n  return (\n    <main className=\"main-container\">\n      {user ? <Nav /> : null}\n      <div className=\"metric-score\" style={{ borderColor: color }}>\n        &nbsp;{focus}% <div className=\"metric-word\">Focus</div>\n      </div>\n      <div>Average of last 20 scores: {averageFocusScore}%</div>\n    </main>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}