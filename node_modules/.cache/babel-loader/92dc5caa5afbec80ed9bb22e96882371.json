{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction setOptions(chart, nextOptions) {\n  const options = chart.options;\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return {\n        ...nextDataset\n      };\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n    intersect: true\n  }, false);\n}\nfunction ChartComponent(props, ref) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef(null);\n  const chartRef = useRef();\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && {\n        ...options\n      },\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/forwardRef(ChartComponent);\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n    ref: ref,\n    type: type\n  })));\n}\nconst Line = /* #__PURE__ */createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */createTypedChart(\"scatter\", ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"sources":["../src/utils.ts","../src/chart.tsx","../src/typedCharts.tsx"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","Object","assign","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","width","redraw","type","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"mappings":"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","sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}