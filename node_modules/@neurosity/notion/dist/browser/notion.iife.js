var Notion = (function (exports) {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isFunction(x) {
      return typeof x === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var _enable_super_gross_mode_that_will_cause_bad_things = false;
  var config = {
      Promise: undefined,
      set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
              var error = /*@__PURE__*/ new Error();
              /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
          }
          else if (_enable_super_gross_mode_that_will_cause_bad_things) {
              /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
          }
          _enable_super_gross_mode_that_will_cause_bad_things = value;
      },
      get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
      },
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function hostReportError(err) {
      setTimeout(function () { throw err; }, 0);
  }

  /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
  var empty = {
      closed: true,
      next: function (value) { },
      error: function (err) {
          if (config.useDeprecatedSynchronousErrorHandling) {
              throw err;
          }
          else {
              hostReportError(err);
          }
      },
      complete: function () { }
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isObject(x) {
      return x !== null && typeof x === 'object';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function UnsubscriptionErrorImpl(errors) {
      Error.call(this);
      this.message = errors ?
          errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
      this.name = 'UnsubscriptionError';
      this.errors = errors;
      return this;
  }
  UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var UnsubscriptionError = UnsubscriptionErrorImpl;

  /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
  var Subscription = /*@__PURE__*/ (function () {
      function Subscription(unsubscribe) {
          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (unsubscribe) {
              this._unsubscribe = unsubscribe;
          }
      }
      Subscription.prototype.unsubscribe = function () {
          var errors;
          if (this.closed) {
              return;
          }
          var _a = this, _parentOrParents = _a._parentOrParents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
          this.closed = true;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (_parentOrParents instanceof Subscription) {
              _parentOrParents.remove(this);
          }
          else if (_parentOrParents !== null) {
              for (var index = 0; index < _parentOrParents.length; ++index) {
                  var parent_1 = _parentOrParents[index];
                  parent_1.remove(this);
              }
          }
          if (isFunction(_unsubscribe)) {
              try {
                  _unsubscribe.call(this);
              }
              catch (e) {
                  errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
              }
          }
          if (isArray(_subscriptions)) {
              var index = -1;
              var len = _subscriptions.length;
              while (++index < len) {
                  var sub = _subscriptions[index];
                  if (isObject(sub)) {
                      try {
                          sub.unsubscribe();
                      }
                      catch (e) {
                          errors = errors || [];
                          if (e instanceof UnsubscriptionError) {
                              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                          }
                          else {
                              errors.push(e);
                          }
                      }
                  }
              }
          }
          if (errors) {
              throw new UnsubscriptionError(errors);
          }
      };
      Subscription.prototype.add = function (teardown) {
          var subscription = teardown;
          switch (typeof teardown) {
              case 'function':
                  subscription = new Subscription(teardown);
              case 'object':
                  if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                      return subscription;
                  }
                  else if (this.closed) {
                      subscription.unsubscribe();
                      return subscription;
                  }
                  else if (!(subscription instanceof Subscription)) {
                      var tmp = subscription;
                      subscription = new Subscription();
                      subscription._subscriptions = [tmp];
                  }
                  break;
              default: {
                  if (!teardown) {
                      return Subscription.EMPTY;
                  }
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
              }
          }
          var _parentOrParents = subscription._parentOrParents;
          if (_parentOrParents === null) {
              subscription._parentOrParents = this;
          }
          else if (_parentOrParents instanceof Subscription) {
              if (_parentOrParents === this) {
                  return subscription;
              }
              subscription._parentOrParents = [_parentOrParents, this];
          }
          else if (_parentOrParents.indexOf(this) === -1) {
              _parentOrParents.push(this);
          }
          else {
              return subscription;
          }
          var subscriptions = this._subscriptions;
          if (subscriptions === null) {
              this._subscriptions = [subscription];
          }
          else {
              subscriptions.push(subscription);
          }
          return subscription;
      };
      Subscription.prototype.remove = function (subscription) {
          var subscriptions = this._subscriptions;
          if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);
              if (subscriptionIndex !== -1) {
                  subscriptions.splice(subscriptionIndex, 1);
              }
          }
      };
      Subscription.EMPTY = (function (empty) {
          empty.closed = true;
          return empty;
      }(new Subscription()));
      return Subscription;
  }());
  function flattenUnsubscriptionErrors(errors) {
      return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var rxSubscriber = typeof Symbol === 'function'
      ? /*@__PURE__*/ Symbol('rxSubscriber')
      : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();

  /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
  var Subscriber = /*@__PURE__*/ (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destinationOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this.syncErrorValue = null;
          _this.syncErrorThrown = false;
          _this.syncErrorThrowable = false;
          _this.isStopped = false;
          switch (arguments.length) {
              case 0:
                  _this.destination = empty;
                  break;
              case 1:
                  if (!destinationOrNext) {
                      _this.destination = empty;
                      break;
                  }
                  if (typeof destinationOrNext === 'object') {
                      if (destinationOrNext instanceof Subscriber) {
                          _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                          _this.destination = destinationOrNext;
                          destinationOrNext.add(_this);
                      }
                      else {
                          _this.syncErrorThrowable = true;
                          _this.destination = new SafeSubscriber(_this, destinationOrNext);
                      }
                      break;
                  }
              default:
                  _this.syncErrorThrowable = true;
                  _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                  break;
          }
          return _this;
      }
      Subscriber.prototype[rxSubscriber] = function () { return this; };
      Subscriber.create = function (next, error, complete) {
          var subscriber = new Subscriber(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
      };
      Subscriber.prototype.next = function (value) {
          if (!this.isStopped) {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (!this.isStopped) {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          this.destination.error(err);
          this.unsubscribe();
      };
      Subscriber.prototype._complete = function () {
          this.destination.complete();
          this.unsubscribe();
      };
      Subscriber.prototype._unsubscribeAndRecycle = function () {
          var _parentOrParents = this._parentOrParents;
          this._parentOrParents = null;
          this.unsubscribe();
          this.closed = false;
          this.isStopped = false;
          this._parentOrParents = _parentOrParents;
          return this;
      };
      return Subscriber;
  }(Subscription));
  var SafeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this._parentSubscriber = _parentSubscriber;
          var next;
          var context = _this;
          if (isFunction(observerOrNext)) {
              next = observerOrNext;
          }
          else if (observerOrNext) {
              next = observerOrNext.next;
              error = observerOrNext.error;
              complete = observerOrNext.complete;
              if (observerOrNext !== empty) {
                  context = Object.create(observerOrNext);
                  if (isFunction(context.unsubscribe)) {
                      _this.add(context.unsubscribe.bind(context));
                  }
                  context.unsubscribe = _this.unsubscribe.bind(_this);
              }
          }
          _this._context = context;
          _this._next = next;
          _this._error = error;
          _this._complete = complete;
          return _this;
      }
      SafeSubscriber.prototype.next = function (value) {
          if (!this.isStopped && this._next) {
              var _parentSubscriber = this._parentSubscriber;
              if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(this._next, value);
              }
              else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
              if (this._error) {
                  if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(this._error, err);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, this._error, err);
                      this.unsubscribe();
                  }
              }
              else if (!_parentSubscriber.syncErrorThrowable) {
                  this.unsubscribe();
                  if (useDeprecatedSynchronousErrorHandling) {
                      throw err;
                  }
                  hostReportError(err);
              }
              else {
                  if (useDeprecatedSynchronousErrorHandling) {
                      _parentSubscriber.syncErrorValue = err;
                      _parentSubscriber.syncErrorThrown = true;
                  }
                  else {
                      hostReportError(err);
                  }
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.complete = function () {
          var _this = this;
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              if (this._complete) {
                  var wrappedComplete = function () { return _this._complete.call(_this._context); };
                  if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(wrappedComplete);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                      this.unsubscribe();
                  }
              }
              else {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              this.unsubscribe();
              if (config.useDeprecatedSynchronousErrorHandling) {
                  throw err;
              }
              else {
                  hostReportError(err);
              }
          }
      };
      SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
          if (!config.useDeprecatedSynchronousErrorHandling) {
              throw new Error('bad call');
          }
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  parent.syncErrorValue = err;
                  parent.syncErrorThrown = true;
                  return true;
              }
              else {
                  hostReportError(err);
                  return true;
              }
          }
          return false;
      };
      SafeSubscriber.prototype._unsubscribe = function () {
          var _parentSubscriber = this._parentSubscriber;
          this._context = null;
          this._parentSubscriber = null;
          _parentSubscriber.unsubscribe();
      };
      return SafeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
  function canReportError(observer) {
      while (observer) {
          var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
          if (closed_1 || isStopped) {
              return false;
          }
          else if (destination && destination instanceof Subscriber) {
              observer = destination;
          }
          else {
              observer = null;
          }
      }
      return true;
  }

  /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
  function toSubscriber(nextOrObserver, error, complete) {
      if (nextOrObserver) {
          if (nextOrObserver instanceof Subscriber) {
              return nextOrObserver;
          }
          if (nextOrObserver[rxSubscriber]) {
              return nextOrObserver[rxSubscriber]();
          }
      }
      if (!nextOrObserver && !error && !complete) {
          return new Subscriber(empty);
      }
      return new Subscriber(nextOrObserver, error, complete);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function noop() { }

  /** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
  function pipe() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          fns[_i] = arguments[_i];
      }
      return pipeFromArray(fns);
  }
  function pipeFromArray(fns) {
      if (!fns) {
          return noop;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }

  /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
  var Observable = /*@__PURE__*/ (function () {
      function Observable(subscribe) {
          this._isScalar = false;
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable$$1 = new Observable();
          observable$$1.source = this;
          observable$$1.operator = operator;
          return observable$$1;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var operator = this.operator;
          var sink = toSubscriber(observerOrNext, error, complete);
          if (operator) {
              sink.add(operator.call(sink, this.source));
          }
          else {
              sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                  this._subscribe(sink) :
                  this._trySubscribe(sink));
          }
          if (config.useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                  sink.syncErrorThrowable = false;
                  if (sink.syncErrorThrown) {
                      throw sink.syncErrorValue;
                  }
              }
          }
          return sink;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  sink.syncErrorThrown = true;
                  sink.syncErrorValue = err;
              }
              if (canReportError(sink)) {
                  sink.error(err);
              }
              else {
                  console.warn(err);
              }
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this.subscribe(function (value) {
                  try {
                      next(value);
                  }
                  catch (err) {
                      reject(err);
                      if (subscription) {
                          subscription.unsubscribe();
                      }
                  }
              }, reject, resolve);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var source = this.source;
          return source && source.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          if (operations.length === 0) {
              return this;
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  function getPromiseCtor(promiseCtor) {
      if (!promiseCtor) {
          promiseCtor = Promise;
      }
      if (!promiseCtor) {
          throw new Error('no Promise impl found');
      }
      return promiseCtor;
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function ObjectUnsubscribedErrorImpl() {
      Error.call(this);
      this.message = 'object unsubscribed';
      this.name = 'ObjectUnsubscribedError';
      return this;
  }
  ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
  var SubjectSubscription = /*@__PURE__*/ (function (_super) {
      __extends(SubjectSubscription, _super);
      function SubjectSubscription(subject, subscriber) {
          var _this = _super.call(this) || this;
          _this.subject = subject;
          _this.subscriber = subscriber;
          _this.closed = false;
          return _this;
      }
      SubjectSubscription.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.closed = true;
          var subject = this.subject;
          var observers = subject.observers;
          this.subject = null;
          if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
              return;
          }
          var subscriberIndex = observers.indexOf(this.subscriber);
          if (subscriberIndex !== -1) {
              observers.splice(subscriberIndex, 1);
          }
      };
      return SubjectSubscription;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
  var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SubjectSubscriber, _super);
      function SubjectSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          return _this;
      }
      return SubjectSubscriber;
  }(Subscriber));
  var Subject = /*@__PURE__*/ (function (_super) {
      __extends(Subject, _super);
      function Subject() {
          var _this = _super.call(this) || this;
          _this.observers = [];
          _this.closed = false;
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
      }
      Subject.prototype[rxSubscriber] = function () {
          return new SubjectSubscriber(this);
      };
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype.next = function (value) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          if (!this.isStopped) {
              var observers = this.observers;
              var len = observers.length;
              var copy = observers.slice();
              for (var i = 0; i < len; i++) {
                  copy[i].next(value);
              }
          }
      };
      Subject.prototype.error = function (err) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          this.hasError = true;
          this.thrownError = err;
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].error(err);
          }
          this.observers.length = 0;
      };
      Subject.prototype.complete = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].complete();
          }
          this.observers.length = 0;
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = true;
          this.closed = true;
          this.observers = null;
      };
      Subject.prototype._trySubscribe = function (subscriber) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else {
              return _super.prototype._trySubscribe.call(this, subscriber);
          }
      };
      Subject.prototype._subscribe = function (subscriber) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else if (this.hasError) {
              subscriber.error(this.thrownError);
              return Subscription.EMPTY;
          }
          else if (this.isStopped) {
              subscriber.complete();
              return Subscription.EMPTY;
          }
          else {
              this.observers.push(subscriber);
              return new SubjectSubscription(this, subscriber);
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable));
  var AnonymousSubject = /*@__PURE__*/ (function (_super) {
      __extends(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
      }
      AnonymousSubject.prototype.next = function (value) {
          var destination = this.destination;
          if (destination && destination.next) {
              destination.next(value);
          }
      };
      AnonymousSubject.prototype.error = function (err) {
          var destination = this.destination;
          if (destination && destination.error) {
              this.destination.error(err);
          }
      };
      AnonymousSubject.prototype.complete = function () {
          var destination = this.destination;
          if (destination && destination.complete) {
              this.destination.complete();
          }
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var source = this.source;
          if (source) {
              return this.source.subscribe(subscriber);
          }
          else {
              return Subscription.EMPTY;
          }
      };
      return AnonymousSubject;
  }(Subject));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function refCount() {
      return function refCountOperatorFunction(source) {
          return source.lift(new RefCountOperator(source));
      };
  }
  var RefCountOperator = /*@__PURE__*/ (function () {
      function RefCountOperator(connectable) {
          this.connectable = connectable;
      }
      RefCountOperator.prototype.call = function (subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);
          if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
          }
          return subscription;
      };
      return RefCountOperator;
  }());
  var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RefCountSubscriber, _super);
      function RefCountSubscriber(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
      }
      RefCountSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
              this.connection = null;
              return;
          }
          this.connectable = null;
          var refCount = connectable._refCount;
          if (refCount <= 0) {
              this.connection = null;
              return;
          }
          connectable._refCount = refCount - 1;
          if (refCount > 1) {
              this.connection = null;
              return;
          }
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
          }
      };
      return RefCountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
  var ConnectableObservable = /*@__PURE__*/ (function (_super) {
      __extends(ConnectableObservable, _super);
      function ConnectableObservable(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._refCount = 0;
          _this._isComplete = false;
          return _this;
      }
      ConnectableObservable.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
          }
          return this._subject;
      };
      ConnectableObservable.prototype.connect = function () {
          var connection = this._connection;
          if (!connection) {
              this._isComplete = false;
              connection = this._connection = new Subscription();
              connection.add(this.source
                  .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
              if (connection.closed) {
                  this._connection = null;
                  connection = Subscription.EMPTY;
              }
          }
          return connection;
      };
      ConnectableObservable.prototype.refCount = function () {
          return refCount()(this);
      };
      return ConnectableObservable;
  }(Observable));
  var connectableProto = ConnectableObservable.prototype;
  var connectableObservableDescriptor = {
      operator: { value: null },
      _refCount: { value: 0, writable: true },
      _subject: { value: null, writable: true },
      _connection: { value: null, writable: true },
      _subscribe: { value: connectableProto._subscribe },
      _isComplete: { value: connectableProto._isComplete, writable: true },
      getSubject: { value: connectableProto.getSubject },
      connect: { value: connectableProto.connect },
      refCount: { value: connectableProto.refCount }
  };
  var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ConnectableSubscriber, _super);
      function ConnectableSubscriber(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
      }
      ConnectableSubscriber.prototype._error = function (err) {
          this._unsubscribe();
          _super.prototype._error.call(this, err);
      };
      ConnectableSubscriber.prototype._complete = function () {
          this.connectable._isComplete = true;
          this._unsubscribe();
          _super.prototype._complete.call(this);
      };
      ConnectableSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (connectable) {
              this.connectable = null;
              var connection = connectable._connection;
              connectable._refCount = 0;
              connectable._subject = null;
              connectable._connection = null;
              if (connection) {
                  connection.unsubscribe();
              }
          }
      };
      return ConnectableSubscriber;
  }(SubjectSubscriber));
  var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
      __extends(RefCountSubscriber, _super);
      function RefCountSubscriber(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
      }
      RefCountSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
              this.connection = null;
              return;
          }
          this.connectable = null;
          var refCount$$1 = connectable._refCount;
          if (refCount$$1 <= 0) {
              this.connection = null;
              return;
          }
          connectable._refCount = refCount$$1 - 1;
          if (refCount$$1 > 1) {
              this.connection = null;
              return;
          }
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
          }
      };
      return RefCountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
  var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(GroupBySubscriber, _super);
      function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.elementSelector = elementSelector;
          _this.durationSelector = durationSelector;
          _this.subjectSelector = subjectSelector;
          _this.groups = null;
          _this.attemptedToUnsubscribe = false;
          _this.count = 0;
          return _this;
      }
      GroupBySubscriber.prototype._next = function (value) {
          var key;
          try {
              key = this.keySelector(value);
          }
          catch (err) {
              this.error(err);
              return;
          }
          this._group(value, key);
      };
      GroupBySubscriber.prototype._group = function (value, key) {
          var groups = this.groups;
          if (!groups) {
              groups = this.groups = new Map();
          }
          var group = groups.get(key);
          var element;
          if (this.elementSelector) {
              try {
                  element = this.elementSelector(value);
              }
              catch (err) {
                  this.error(err);
              }
          }
          else {
              element = value;
          }
          if (!group) {
              group = (this.subjectSelector ? this.subjectSelector() : new Subject());
              groups.set(key, group);
              var groupedObservable = new GroupedObservable(key, group, this);
              this.destination.next(groupedObservable);
              if (this.durationSelector) {
                  var duration = void 0;
                  try {
                      duration = this.durationSelector(new GroupedObservable(key, group));
                  }
                  catch (err) {
                      this.error(err);
                      return;
                  }
                  this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
              }
          }
          if (!group.closed) {
              group.next(element);
          }
      };
      GroupBySubscriber.prototype._error = function (err) {
          var groups = this.groups;
          if (groups) {
              groups.forEach(function (group, key) {
                  group.error(err);
              });
              groups.clear();
          }
          this.destination.error(err);
      };
      GroupBySubscriber.prototype._complete = function () {
          var groups = this.groups;
          if (groups) {
              groups.forEach(function (group, key) {
                  group.complete();
              });
              groups.clear();
          }
          this.destination.complete();
      };
      GroupBySubscriber.prototype.removeGroup = function (key) {
          this.groups.delete(key);
      };
      GroupBySubscriber.prototype.unsubscribe = function () {
          if (!this.closed) {
              this.attemptedToUnsubscribe = true;
              if (this.count === 0) {
                  _super.prototype.unsubscribe.call(this);
              }
          }
      };
      return GroupBySubscriber;
  }(Subscriber));
  var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(GroupDurationSubscriber, _super);
      function GroupDurationSubscriber(key, group, parent) {
          var _this = _super.call(this, group) || this;
          _this.key = key;
          _this.group = group;
          _this.parent = parent;
          return _this;
      }
      GroupDurationSubscriber.prototype._next = function (value) {
          this.complete();
      };
      GroupDurationSubscriber.prototype._unsubscribe = function () {
          var _a = this, parent = _a.parent, key = _a.key;
          this.key = this.parent = null;
          if (parent) {
              parent.removeGroup(key);
          }
      };
      return GroupDurationSubscriber;
  }(Subscriber));
  var GroupedObservable = /*@__PURE__*/ (function (_super) {
      __extends(GroupedObservable, _super);
      function GroupedObservable(key, groupSubject, refCountSubscription) {
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.groupSubject = groupSubject;
          _this.refCountSubscription = refCountSubscription;
          return _this;
      }
      GroupedObservable.prototype._subscribe = function (subscriber) {
          var subscription = new Subscription();
          var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
          if (refCountSubscription && !refCountSubscription.closed) {
              subscription.add(new InnerRefCountSubscription(refCountSubscription));
          }
          subscription.add(groupSubject.subscribe(subscriber));
          return subscription;
      };
      return GroupedObservable;
  }(Observable));
  var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
      __extends(InnerRefCountSubscription, _super);
      function InnerRefCountSubscription(parent) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          parent.count++;
          return _this;
      }
      InnerRefCountSubscription.prototype.unsubscribe = function () {
          var parent = this.parent;
          if (!parent.closed && !this.closed) {
              _super.prototype.unsubscribe.call(this);
              parent.count -= 1;
              if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                  parent.unsubscribe();
              }
          }
      };
      return InnerRefCountSubscription;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
  var BehaviorSubject = /*@__PURE__*/ (function (_super) {
      __extends(BehaviorSubject, _super);
      function BehaviorSubject(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
      }
      Object.defineProperty(BehaviorSubject.prototype, "value", {
          get: function () {
              return this.getValue();
          },
          enumerable: true,
          configurable: true
      });
      BehaviorSubject.prototype._subscribe = function (subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          if (subscription && !subscription.closed) {
              subscriber.next(this._value);
          }
          return subscription;
      };
      BehaviorSubject.prototype.getValue = function () {
          if (this.hasError) {
              throw this.thrownError;
          }
          else if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else {
              return this._value;
          }
      };
      BehaviorSubject.prototype.next = function (value) {
          _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject;
  }(Subject));

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
  var Action = /*@__PURE__*/ (function (_super) {
      __extends(Action, _super);
      function Action(scheduler, work) {
          return _super.call(this) || this;
      }
      Action.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return this;
      };
      return Action;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
  var AsyncAction = /*@__PURE__*/ (function (_super) {
      __extends(AsyncAction, _super);
      function AsyncAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
      }
      AsyncAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (this.closed) {
              return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
      };
      AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && this.delay === delay && this.pending === false) {
              return id;
          }
          clearInterval(id);
          return undefined;
      };
      AsyncAction.prototype.execute = function (state, delay) {
          if (this.closed) {
              return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
              return error;
          }
          else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
      };
      AsyncAction.prototype._execute = function (state, delay) {
          var errored = false;
          var errorValue = undefined;
          try {
              this.work(state);
          }
          catch (e) {
              errored = true;
              errorValue = !!e && e || new Error(e);
          }
          if (errored) {
              this.unsubscribe();
              return errorValue;
          }
      };
      AsyncAction.prototype._unsubscribe = function () {
          var id = this.id;
          var scheduler = this.scheduler;
          var actions = scheduler.actions;
          var index = actions.indexOf(this);
          this.work = null;
          this.state = null;
          this.pending = false;
          this.scheduler = null;
          if (index !== -1) {
              actions.splice(index, 1);
          }
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
      };
      return AsyncAction;
  }(Action));

  /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
  var QueueAction = /*@__PURE__*/ (function (_super) {
      __extends(QueueAction, _super);
      function QueueAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      QueueAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay > 0) {
              return _super.prototype.schedule.call(this, state, delay);
          }
          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
      };
      QueueAction.prototype.execute = function (state, delay) {
          return (delay > 0 || this.closed) ?
              _super.prototype.execute.call(this, state, delay) :
              this._execute(state, delay);
      };
      QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          return scheduler.flush(this);
      };
      return QueueAction;
  }(AsyncAction));

  var Scheduler = /*@__PURE__*/ (function () {
      function Scheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          this.SchedulerAction = SchedulerAction;
          this.now = now;
      }
      Scheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          return new this.SchedulerAction(this, work).schedule(state, delay);
      };
      Scheduler.now = function () { return Date.now(); };
      return Scheduler;
  }());

  /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
  var AsyncScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AsyncScheduler, _super);
      function AsyncScheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          var _this = _super.call(this, SchedulerAction, function () {
              if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                  return AsyncScheduler.delegate.now();
              }
              else {
                  return now();
              }
          }) || this;
          _this.actions = [];
          _this.active = false;
          _this.scheduled = undefined;
          return _this;
      }
      AsyncScheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
              return AsyncScheduler.delegate.schedule(work, delay, state);
          }
          else {
              return _super.prototype.schedule.call(this, work, delay, state);
          }
      };
      AsyncScheduler.prototype.flush = function (action) {
          var actions = this.actions;
          if (this.active) {
              actions.push(action);
              return;
          }
          var error;
          this.active = true;
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (action = actions.shift());
          this.active = false;
          if (error) {
              while (action = actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsyncScheduler;
  }(Scheduler));

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
  var QueueScheduler = /*@__PURE__*/ (function (_super) {
      __extends(QueueScheduler, _super);
      function QueueScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler;
  }(AsyncScheduler));

  /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
  var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
  function empty$1(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : EMPTY;
  }
  function emptyScheduled(scheduler) {
      return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isScheduler(value) {
      return value && typeof value.schedule === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var subscribeToArray = function (array) {
      return function (subscriber) {
          for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          subscriber.complete();
      };
  };

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
  function scheduleArray(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          var i = 0;
          sub.add(scheduler.schedule(function () {
              if (i === input.length) {
                  subscriber.complete();
                  return;
              }
              subscriber.next(input[i++]);
              if (!subscriber.closed) {
                  sub.add(this.schedule());
              }
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
  function fromArray(input, scheduler) {
      if (!scheduler) {
          return new Observable(subscribeToArray(input));
      }
      else {
          return scheduleArray(input, scheduler);
      }
  }

  /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
  function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = args[args.length - 1];
      if (isScheduler(scheduler)) {
          args.pop();
          return scheduleArray(args, scheduler);
      }
      else {
          return fromArray(args);
      }
  }

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  function throwError(error, scheduler) {
      if (!scheduler) {
          return new Observable(function (subscriber) { return subscriber.error(error); });
      }
      else {
          return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
      }
  }
  function dispatch(_a) {
      var error = _a.error, subscriber = _a.subscriber;
      subscriber.error(error);
  }

  /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
  var NotificationKind;
  /*@__PURE__*/ (function (NotificationKind) {
      NotificationKind["NEXT"] = "N";
      NotificationKind["ERROR"] = "E";
      NotificationKind["COMPLETE"] = "C";
  })(NotificationKind || (NotificationKind = {}));
  var Notification$1 = /*@__PURE__*/ (function () {
      function Notification(kind, value, error) {
          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
      }
      Notification.prototype.observe = function (observer) {
          switch (this.kind) {
              case 'N':
                  return observer.next && observer.next(this.value);
              case 'E':
                  return observer.error && observer.error(this.error);
              case 'C':
                  return observer.complete && observer.complete();
          }
      };
      Notification.prototype.do = function (next, error, complete) {
          var kind = this.kind;
          switch (kind) {
              case 'N':
                  return next && next(this.value);
              case 'E':
                  return error && error(this.error);
              case 'C':
                  return complete && complete();
          }
      };
      Notification.prototype.accept = function (nextOrObserver, error, complete) {
          if (nextOrObserver && typeof nextOrObserver.next === 'function') {
              return this.observe(nextOrObserver);
          }
          else {
              return this.do(nextOrObserver, error, complete);
          }
      };
      Notification.prototype.toObservable = function () {
          var kind = this.kind;
          switch (kind) {
              case 'N':
                  return of(this.value);
              case 'E':
                  return throwError(this.error);
              case 'C':
                  return empty$1();
          }
          throw new Error('unexpected notification kind value');
      };
      Notification.createNext = function (value) {
          if (typeof value !== 'undefined') {
              return new Notification('N', value);
          }
          return Notification.undefinedValueNotification;
      };
      Notification.createError = function (err) {
          return new Notification('E', undefined, err);
      };
      Notification.createComplete = function () {
          return Notification.completeNotification;
      };
      Notification.completeNotification = new Notification('C');
      Notification.undefinedValueNotification = new Notification('N', undefined);
      return Notification;
  }());

  /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
  var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ObserveOnSubscriber, _super);
      function ObserveOnSubscriber(destination, scheduler, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          var _this = _super.call(this, destination) || this;
          _this.scheduler = scheduler;
          _this.delay = delay;
          return _this;
      }
      ObserveOnSubscriber.dispatch = function (arg) {
          var notification = arg.notification, destination = arg.destination;
          notification.observe(destination);
          this.unsubscribe();
      };
      ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
          var destination = this.destination;
          destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
      };
      ObserveOnSubscriber.prototype._next = function (value) {
          this.scheduleMessage(Notification$1.createNext(value));
      };
      ObserveOnSubscriber.prototype._error = function (err) {
          this.scheduleMessage(Notification$1.createError(err));
          this.unsubscribe();
      };
      ObserveOnSubscriber.prototype._complete = function () {
          this.scheduleMessage(Notification$1.createComplete());
          this.unsubscribe();
      };
      return ObserveOnSubscriber;
  }(Subscriber));
  var ObserveOnMessage = /*@__PURE__*/ (function () {
      function ObserveOnMessage(notification, destination) {
          this.notification = notification;
          this.destination = destination;
      }
      return ObserveOnMessage;
  }());

  /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
  var ReplaySubject = /*@__PURE__*/ (function (_super) {
      __extends(ReplaySubject, _super);
      function ReplaySubject(bufferSize, windowTime, scheduler) {
          if (bufferSize === void 0) {
              bufferSize = Number.POSITIVE_INFINITY;
          }
          if (windowTime === void 0) {
              windowTime = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this) || this;
          _this.scheduler = scheduler;
          _this._events = [];
          _this._infiniteTimeWindow = false;
          _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
          _this._windowTime = windowTime < 1 ? 1 : windowTime;
          if (windowTime === Number.POSITIVE_INFINITY) {
              _this._infiniteTimeWindow = true;
              _this.next = _this.nextInfiniteTimeWindow;
          }
          else {
              _this.next = _this.nextTimeWindow;
          }
          return _this;
      }
      ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
          var _events = this._events;
          _events.push(value);
          if (_events.length > this._bufferSize) {
              _events.shift();
          }
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype.nextTimeWindow = function (value) {
          this._events.push(new ReplayEvent(this._getNow(), value));
          this._trimBufferThenGetEvents();
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype._subscribe = function (subscriber) {
          var _infiniteTimeWindow = this._infiniteTimeWindow;
          var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
          var scheduler = this.scheduler;
          var len = _events.length;
          var subscription;
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else if (this.isStopped || this.hasError) {
              subscription = Subscription.EMPTY;
          }
          else {
              this.observers.push(subscriber);
              subscription = new SubjectSubscription(this, subscriber);
          }
          if (scheduler) {
              subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
          }
          if (_infiniteTimeWindow) {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                  subscriber.next(_events[i]);
              }
          }
          else {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                  subscriber.next(_events[i].value);
              }
          }
          if (this.hasError) {
              subscriber.error(this.thrownError);
          }
          else if (this.isStopped) {
              subscriber.complete();
          }
          return subscription;
      };
      ReplaySubject.prototype._getNow = function () {
          return (this.scheduler || queue).now();
      };
      ReplaySubject.prototype._trimBufferThenGetEvents = function () {
          var now = this._getNow();
          var _bufferSize = this._bufferSize;
          var _windowTime = this._windowTime;
          var _events = this._events;
          var eventsCount = _events.length;
          var spliceCount = 0;
          while (spliceCount < eventsCount) {
              if ((now - _events[spliceCount].time) < _windowTime) {
                  break;
              }
              spliceCount++;
          }
          if (eventsCount > _bufferSize) {
              spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
          }
          if (spliceCount > 0) {
              _events.splice(0, spliceCount);
          }
          return _events;
      };
      return ReplaySubject;
  }(Subject));
  var ReplayEvent = /*@__PURE__*/ (function () {
      function ReplayEvent(time, value) {
          this.time = time;
          this.value = value;
      }
      return ReplayEvent;
  }());

  /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
  var AsyncSubject = /*@__PURE__*/ (function (_super) {
      __extends(AsyncSubject, _super);
      function AsyncSubject() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.value = null;
          _this.hasNext = false;
          _this.hasCompleted = false;
          return _this;
      }
      AsyncSubject.prototype._subscribe = function (subscriber) {
          if (this.hasError) {
              subscriber.error(this.thrownError);
              return Subscription.EMPTY;
          }
          else if (this.hasCompleted && this.hasNext) {
              subscriber.next(this.value);
              subscriber.complete();
              return Subscription.EMPTY;
          }
          return _super.prototype._subscribe.call(this, subscriber);
      };
      AsyncSubject.prototype.next = function (value) {
          if (!this.hasCompleted) {
              this.value = value;
              this.hasNext = true;
          }
      };
      AsyncSubject.prototype.error = function (error) {
          if (!this.hasCompleted) {
              _super.prototype.error.call(this, error);
          }
      };
      AsyncSubject.prototype.complete = function () {
          this.hasCompleted = true;
          if (this.hasNext) {
              _super.prototype.next.call(this, this.value);
          }
          _super.prototype.complete.call(this);
      };
      return AsyncSubject;
  }(Subject));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var nextHandle = 1;
  var tasksByHandle = {};
  function runIfPresent(handle) {
      var cb = tasksByHandle[handle];
      if (cb) {
          cb();
      }
  }
  var Immediate = {
      setImmediate: function (cb) {
          var handle = nextHandle++;
          tasksByHandle[handle] = cb;
          Promise.resolve().then(function () { return runIfPresent(handle); });
          return handle;
      },
      clearImmediate: function (handle) {
          delete tasksByHandle[handle];
      },
  };

  /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
  var AsapAction = /*@__PURE__*/ (function (_super) {
      __extends(AsapAction, _super);
      function AsapAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
      };
      AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (scheduler.actions.length === 0) {
              Immediate.clearImmediate(id);
              scheduler.scheduled = undefined;
          }
          return undefined;
      };
      return AsapAction;
  }(AsyncAction));

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
  var AsapScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AsapScheduler, _super);
      function AsapScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler.prototype.flush = function (action) {
          this.active = true;
          this.scheduled = undefined;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (++index < count && (action = actions.shift()));
          this.active = false;
          if (error) {
              while (++index < count && (action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsapScheduler;
  }(AsyncScheduler));

  /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
  var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);

  /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
  var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

  /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
  var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
      __extends(AnimationFrameAction, _super);
      function AnimationFrameAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
      };
      AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (scheduler.actions.length === 0) {
              cancelAnimationFrame(id);
              scheduler.scheduled = undefined;
          }
          return undefined;
      };
      return AnimationFrameAction;
  }(AsyncAction));

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
  var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AnimationFrameScheduler, _super);
      function AnimationFrameScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler.prototype.flush = function (action) {
          this.active = true;
          this.scheduled = undefined;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (++index < count && (action = actions.shift()));
          this.active = false;
          if (error) {
              while (++index < count && (action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AnimationFrameScheduler;
  }(AsyncScheduler));

  /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
  var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);

  /** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
  var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
      __extends(VirtualTimeScheduler, _super);
      function VirtualTimeScheduler(SchedulerAction, maxFrames) {
          if (SchedulerAction === void 0) {
              SchedulerAction = VirtualAction;
          }
          if (maxFrames === void 0) {
              maxFrames = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
          _this.maxFrames = maxFrames;
          _this.frame = 0;
          _this.index = -1;
          return _this;
      }
      VirtualTimeScheduler.prototype.flush = function () {
          var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
          var error, action;
          while ((action = actions[0]) && action.delay <= maxFrames) {
              actions.shift();
              this.frame = action.delay;
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          }
          if (error) {
              while (action = actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      VirtualTimeScheduler.frameTimeFactor = 10;
      return VirtualTimeScheduler;
  }(AsyncScheduler));
  var VirtualAction = /*@__PURE__*/ (function (_super) {
      __extends(VirtualAction, _super);
      function VirtualAction(scheduler, work, index) {
          if (index === void 0) {
              index = scheduler.index += 1;
          }
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.index = index;
          _this.active = true;
          _this.index = scheduler.index = index;
          return _this;
      }
      VirtualAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (!this.id) {
              return _super.prototype.schedule.call(this, state, delay);
          }
          this.active = false;
          var action = new VirtualAction(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay);
      };
      VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          this.delay = scheduler.frame + delay;
          var actions = scheduler.actions;
          actions.push(this);
          actions.sort(VirtualAction.sortActions);
          return true;
      };
      VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return undefined;
      };
      VirtualAction.prototype._execute = function (state, delay) {
          if (this.active === true) {
              return _super.prototype._execute.call(this, state, delay);
          }
      };
      VirtualAction.sortActions = function (a, b) {
          if (a.delay === b.delay) {
              if (a.index === b.index) {
                  return 0;
              }
              else if (a.index > b.index) {
                  return 1;
              }
              else {
                  return -1;
              }
          }
          else if (a.delay > b.delay) {
              return 1;
          }
          else {
              return -1;
          }
      };
      return VirtualAction;
  }(AsyncAction));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function identity(x) {
      return x;
  }

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function ArgumentOutOfRangeErrorImpl() {
      Error.call(this);
      this.message = 'argument out of range';
      this.name = 'ArgumentOutOfRangeError';
      return this;
  }
  ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function EmptyErrorImpl() {
      Error.call(this);
      this.message = 'no elements in sequence';
      this.name = 'EmptyError';
      return this;
  }
  EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var EmptyError = EmptyErrorImpl;

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function map(project, thisArg) {
      return function mapOperation(source) {
          if (typeof project !== 'function') {
              throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          }
          return source.lift(new MapOperator(project, thisArg));
      };
  }
  var MapOperator = /*@__PURE__*/ (function () {
      function MapOperator(project, thisArg) {
          this.project = project;
          this.thisArg = thisArg;
      }
      MapOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
      };
      return MapOperator;
  }());
  var MapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MapSubscriber, _super);
      function MapSubscriber(destination, project, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.count = 0;
          _this.thisArg = thisArg || _this;
          return _this;
      }
      MapSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.project.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return MapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var OuterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(OuterSubscriber, _super);
      function OuterSubscriber() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      OuterSubscriber.prototype.notifyError = function (error, innerSub) {
          this.destination.error(error);
      };
      OuterSubscriber.prototype.notifyComplete = function (innerSub) {
          this.destination.complete();
      };
      return OuterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var InnerSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(InnerSubscriber, _super);
      function InnerSubscriber(parent, outerValue, outerIndex) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.outerValue = outerValue;
          _this.outerIndex = outerIndex;
          _this.index = 0;
          return _this;
      }
      InnerSubscriber.prototype._next = function (value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
      };
      InnerSubscriber.prototype._error = function (error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
      };
      InnerSubscriber.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
      };
      return InnerSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
  var subscribeToPromise = function (promise) {
      return function (subscriber) {
          promise.then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, hostReportError);
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator = /*@__PURE__*/ getSymbolIterator();

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  var subscribeToIterable = function (iterable) {
      return function (subscriber) {
          var iterator$$1 = iterable[iterator]();
          do {
              var item = iterator$$1.next();
              if (item.done) {
                  subscriber.complete();
                  break;
              }
              subscriber.next(item.value);
              if (subscriber.closed) {
                  break;
              }
          } while (true);
          if (typeof iterator$$1.return === 'function') {
              subscriber.add(function () {
                  if (iterator$$1.return) {
                      iterator$$1.return();
                  }
              });
          }
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  var subscribeToObservable = function (obj) {
      return function (subscriber) {
          var obs = obj[observable]();
          if (typeof obs.subscribe !== 'function') {
              throw new TypeError('Provided object does not correctly implement Symbol.observable');
          }
          else {
              return obs.subscribe(subscriber);
          }
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isPromise(value) {
      return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  }

  /** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
  var subscribeTo = function (result) {
      if (!!result && typeof result[observable] === 'function') {
          return subscribeToObservable(result);
      }
      else if (isArrayLike(result)) {
          return subscribeToArray(result);
      }
      else if (isPromise(result)) {
          return subscribeToPromise(result);
      }
      else if (!!result && typeof result[iterator] === 'function') {
          return subscribeToIterable(result);
      }
      else {
          var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
          var msg = "You provided " + value + " where a stream was expected."
              + ' You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
      }
  };

  /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
      if (destination === void 0) {
          destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
      }
      if (destination.closed) {
          return undefined;
      }
      if (result instanceof Observable) {
          return result.subscribe(destination);
      }
      return subscribeTo(result)(destination);
  }

  /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
  var NONE = {};
  var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(CombineLatestSubscriber, _super);
      function CombineLatestSubscriber(destination, resultSelector) {
          var _this = _super.call(this, destination) || this;
          _this.resultSelector = resultSelector;
          _this.active = 0;
          _this.values = [];
          _this.observables = [];
          return _this;
      }
      CombineLatestSubscriber.prototype._next = function (observable) {
          this.values.push(NONE);
          this.observables.push(observable);
      };
      CombineLatestSubscriber.prototype._complete = function () {
          var observables = this.observables;
          var len = observables.length;
          if (len === 0) {
              this.destination.complete();
          }
          else {
              this.active = len;
              this.toRespond = len;
              for (var i = 0; i < len; i++) {
                  var observable = observables[i];
                  this.add(subscribeToResult(this, observable, observable, i));
              }
          }
      };
      CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
          if ((this.active -= 1) === 0) {
              this.destination.complete();
          }
      };
      CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var values = this.values;
          var oldVal = values[outerIndex];
          var toRespond = !this.toRespond
              ? 0
              : oldVal === NONE ? --this.toRespond : this.toRespond;
          values[outerIndex] = innerValue;
          if (toRespond === 0) {
              if (this.resultSelector) {
                  this._tryResultSelector(values);
              }
              else {
                  this.destination.next(values.slice());
              }
          }
      };
      CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
          var result;
          try {
              result = this.resultSelector.apply(this, values);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return CombineLatestSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
  function scheduleObservable(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          sub.add(scheduler.schedule(function () {
              var observable$$1 = input[observable]();
              sub.add(observable$$1.subscribe({
                  next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                  error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                  complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
              }));
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
  function schedulePromise(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          sub.add(scheduler.schedule(function () {
              return input.then(function (value) {
                  sub.add(scheduler.schedule(function () {
                      subscriber.next(value);
                      sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                  }));
              }, function (err) {
                  sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
              });
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
  function scheduleIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          var iterator$$1;
          sub.add(function () {
              if (iterator$$1 && typeof iterator$$1.return === 'function') {
                  iterator$$1.return();
              }
          });
          sub.add(scheduler.schedule(function () {
              iterator$$1 = input[iterator]();
              sub.add(scheduler.schedule(function () {
                  if (subscriber.closed) {
                      return;
                  }
                  var value;
                  var done;
                  try {
                      var result = iterator$$1.next();
                      value = result.value;
                      done = result.done;
                  }
                  catch (err) {
                      subscriber.error(err);
                      return;
                  }
                  if (done) {
                      subscriber.complete();
                  }
                  else {
                      subscriber.next(value);
                      this.schedule();
                  }
              }));
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  function isInteropObservable(input) {
      return input && typeof input[observable] === 'function';
  }

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  function isIterable(input) {
      return input && typeof input[iterator] === 'function';
  }

  /** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
  function scheduled(input, scheduler) {
      if (input != null) {
          if (isInteropObservable(input)) {
              return scheduleObservable(input, scheduler);
          }
          else if (isPromise(input)) {
              return schedulePromise(input, scheduler);
          }
          else if (isArrayLike(input)) {
              return scheduleArray(input, scheduler);
          }
          else if (isIterable(input) || typeof input === 'string') {
              return scheduleIterable(input, scheduler);
          }
      }
      throw new TypeError((input !== null && typeof input || input) + ' is not observable');
  }

  /** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
  function from(input, scheduler) {
      if (!scheduler) {
          if (input instanceof Observable) {
              return input;
          }
          return new Observable(subscribeTo(input));
      }
      else {
          return scheduled(input, scheduler);
      }
  }

  /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      if (typeof resultSelector === 'function') {
          return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
  }
  var MergeMapOperator = /*@__PURE__*/ (function () {
      function MergeMapOperator(project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          this.project = project;
          this.concurrent = concurrent;
      }
      MergeMapOperator.prototype.call = function (observer, source) {
          return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
      };
      return MergeMapOperator;
  }());
  var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MergeMapSubscriber, _super);
      function MergeMapSubscriber(destination, project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
      }
      MergeMapSubscriber.prototype._next = function (value) {
          if (this.active < this.concurrent) {
              this._tryNext(value);
          }
          else {
              this.buffer.push(value);
          }
      };
      MergeMapSubscriber.prototype._tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.active++;
          this._innerSub(result, value, index);
      };
      MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
          var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
          var destination = this.destination;
          destination.add(innerSubscriber);
          subscribeToResult(this, ish, value, index, innerSubscriber);
      };
      MergeMapSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
          }
          this.unsubscribe();
      };
      MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
          var buffer = this.buffer;
          this.remove(innerSub);
          this.active--;
          if (buffer.length > 0) {
              this._next(buffer.shift());
          }
          else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
          }
      };
      return MergeMapSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
  function mergeAll(concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      return mergeMap(identity, concurrent);
  }

  /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
  function concatAll() {
      return mergeAll(1);
  }

  /** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
  function concat() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
      }
      return concatAll()(of.apply(void 0, observables));
  }

  /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_util_isObservable,_from PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
  function fromEventPattern(addHandler, removeHandler, resultSelector) {
      if (resultSelector) {
          return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
      }
      return new Observable(function (subscriber) {
          var handler = function () {
              var e = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  e[_i] = arguments[_i];
              }
              return subscriber.next(e.length === 1 ? e[0] : e);
          };
          var retValue;
          try {
              retValue = addHandler(handler);
          }
          catch (err) {
              subscriber.error(err);
              return undefined;
          }
          if (!isFunction(removeHandler)) {
              return undefined;
          }
          return function () { return removeHandler(handler, retValue); };
      });
  }

  /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
  function isNumeric(val) {
      return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
  }

  /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
  var NEVER = /*@__PURE__*/ new Observable(noop);

  /** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function filter(predicate, thisArg) {
      return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
      };
  }
  var FilterOperator = /*@__PURE__*/ (function () {
      function FilterOperator(predicate, thisArg) {
          this.predicate = predicate;
          this.thisArg = thisArg;
      }
      FilterOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
      };
      return FilterOperator;
  }());
  var FilterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(FilterSubscriber, _super);
      function FilterSubscriber(destination, predicate, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.count = 0;
          return _this;
      }
      FilterSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.predicate.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          if (result) {
              this.destination.next(value);
          }
      };
      return FilterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var RaceSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RaceSubscriber, _super);
      function RaceSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasFirst = false;
          _this.observables = [];
          _this.subscriptions = [];
          return _this;
      }
      RaceSubscriber.prototype._next = function (observable) {
          this.observables.push(observable);
      };
      RaceSubscriber.prototype._complete = function () {
          var observables = this.observables;
          var len = observables.length;
          if (len === 0) {
              this.destination.complete();
          }
          else {
              for (var i = 0; i < len && !this.hasFirst; i++) {
                  var observable = observables[i];
                  var subscription = subscribeToResult(this, observable, observable, i);
                  if (this.subscriptions) {
                      this.subscriptions.push(subscription);
                  }
                  this.add(subscription);
              }
              this.observables = null;
          }
      };
      RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          if (!this.hasFirst) {
              this.hasFirst = true;
              for (var i = 0; i < this.subscriptions.length; i++) {
                  if (i !== outerIndex) {
                      var subscription = this.subscriptions[i];
                      subscription.unsubscribe();
                      this.remove(subscription);
                  }
              }
              this.subscriptions = null;
          }
          this.destination.next(innerValue);
      };
      return RaceSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  function range(start, count, scheduler) {
      if (start === void 0) {
          start = 0;
      }
      return new Observable(function (subscriber) {
          if (count === undefined) {
              count = start;
              start = 0;
          }
          var index = 0;
          var current = start;
          if (scheduler) {
              return scheduler.schedule(dispatch$6, 0, {
                  index: index, count: count, start: start, subscriber: subscriber
              });
          }
          else {
              do {
                  if (index++ >= count) {
                      subscriber.complete();
                      break;
                  }
                  subscriber.next(current++);
                  if (subscriber.closed) {
                      break;
                  }
              } while (true);
          }
          return undefined;
      });
  }
  function dispatch$6(state) {
      var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
      if (index >= count) {
          subscriber.complete();
          return;
      }
      subscriber.next(start);
      if (subscriber.closed) {
          return;
      }
      state.index = index + 1;
      state.start = start + 1;
      this.schedule(state);
  }

  /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
  function timer(dueTime, periodOrScheduler, scheduler) {
      if (dueTime === void 0) {
          dueTime = 0;
      }
      var period = -1;
      if (isNumeric(periodOrScheduler)) {
          period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
      }
      else if (isScheduler(periodOrScheduler)) {
          scheduler = periodOrScheduler;
      }
      if (!isScheduler(scheduler)) {
          scheduler = async;
      }
      return new Observable(function (subscriber) {
          var due = isNumeric(dueTime)
              ? dueTime
              : (+dueTime - scheduler.now());
          return scheduler.schedule(dispatch$7, due, {
              index: 0, period: period, subscriber: subscriber
          });
      });
  }
  function dispatch$7(state) {
      var index = state.index, period = state.period, subscriber = state.subscriber;
      subscriber.next(index);
      if (subscriber.closed) {
          return;
      }
      else if (period === -1) {
          return subscriber.complete();
      }
      state.index = index + 1;
      this.schedule(state, period);
  }

  /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
  var ZipSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ZipSubscriber, _super);
      function ZipSubscriber(destination, resultSelector, values) {
          if (values === void 0) {
              values = Object.create(null);
          }
          var _this = _super.call(this, destination) || this;
          _this.iterators = [];
          _this.active = 0;
          _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
          _this.values = values;
          return _this;
      }
      ZipSubscriber.prototype._next = function (value) {
          var iterators = this.iterators;
          if (isArray(value)) {
              iterators.push(new StaticArrayIterator(value));
          }
          else if (typeof value[iterator] === 'function') {
              iterators.push(new StaticIterator(value[iterator]()));
          }
          else {
              iterators.push(new ZipBufferIterator(this.destination, this, value));
          }
      };
      ZipSubscriber.prototype._complete = function () {
          var iterators = this.iterators;
          var len = iterators.length;
          this.unsubscribe();
          if (len === 0) {
              this.destination.complete();
              return;
          }
          this.active = len;
          for (var i = 0; i < len; i++) {
              var iterator$$1 = iterators[i];
              if (iterator$$1.stillUnsubscribed) {
                  var destination = this.destination;
                  destination.add(iterator$$1.subscribe(iterator$$1, i));
              }
              else {
                  this.active--;
              }
          }
      };
      ZipSubscriber.prototype.notifyInactive = function () {
          this.active--;
          if (this.active === 0) {
              this.destination.complete();
          }
      };
      ZipSubscriber.prototype.checkIterators = function () {
          var iterators = this.iterators;
          var len = iterators.length;
          var destination = this.destination;
          for (var i = 0; i < len; i++) {
              var iterator$$1 = iterators[i];
              if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                  return;
              }
          }
          var shouldComplete = false;
          var args = [];
          for (var i = 0; i < len; i++) {
              var iterator$$1 = iterators[i];
              var result = iterator$$1.next();
              if (iterator$$1.hasCompleted()) {
                  shouldComplete = true;
              }
              if (result.done) {
                  destination.complete();
                  return;
              }
              args.push(result.value);
          }
          if (this.resultSelector) {
              this._tryresultSelector(args);
          }
          else {
              destination.next(args);
          }
          if (shouldComplete) {
              destination.complete();
          }
      };
      ZipSubscriber.prototype._tryresultSelector = function (args) {
          var result;
          try {
              result = this.resultSelector.apply(this, args);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return ZipSubscriber;
  }(Subscriber));
  var StaticIterator = /*@__PURE__*/ (function () {
      function StaticIterator(iterator$$1) {
          this.iterator = iterator$$1;
          this.nextResult = iterator$$1.next();
      }
      StaticIterator.prototype.hasValue = function () {
          return true;
      };
      StaticIterator.prototype.next = function () {
          var result = this.nextResult;
          this.nextResult = this.iterator.next();
          return result;
      };
      StaticIterator.prototype.hasCompleted = function () {
          var nextResult = this.nextResult;
          return nextResult && nextResult.done;
      };
      return StaticIterator;
  }());
  var StaticArrayIterator = /*@__PURE__*/ (function () {
      function StaticArrayIterator(array) {
          this.array = array;
          this.index = 0;
          this.length = 0;
          this.length = array.length;
      }
      StaticArrayIterator.prototype[iterator] = function () {
          return this;
      };
      StaticArrayIterator.prototype.next = function (value) {
          var i = this.index++;
          var array = this.array;
          return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
      };
      StaticArrayIterator.prototype.hasValue = function () {
          return this.array.length > this.index;
      };
      StaticArrayIterator.prototype.hasCompleted = function () {
          return this.array.length === this.index;
      };
      return StaticArrayIterator;
  }());
  var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
      __extends(ZipBufferIterator, _super);
      function ZipBufferIterator(destination, parent, observable) {
          var _this = _super.call(this, destination) || this;
          _this.parent = parent;
          _this.observable = observable;
          _this.stillUnsubscribed = true;
          _this.buffer = [];
          _this.isComplete = false;
          return _this;
      }
      ZipBufferIterator.prototype[iterator] = function () {
          return this;
      };
      ZipBufferIterator.prototype.next = function () {
          var buffer = this.buffer;
          if (buffer.length === 0 && this.isComplete) {
              return { value: null, done: true };
          }
          else {
              return { value: buffer.shift(), done: false };
          }
      };
      ZipBufferIterator.prototype.hasValue = function () {
          return this.buffer.length > 0;
      };
      ZipBufferIterator.prototype.hasCompleted = function () {
          return this.buffer.length === 0 && this.isComplete;
      };
      ZipBufferIterator.prototype.notifyComplete = function () {
          if (this.buffer.length > 0) {
              this.isComplete = true;
              this.parent.notifyInactive();
          }
          else {
              this.destination.complete();
          }
      };
      ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.buffer.push(innerValue);
          this.parent.checkIterators();
      };
      ZipBufferIterator.prototype.subscribe = function (value, index) {
          return subscribeToResult(this, this.observable, this, index);
      };
      return ZipBufferIterator;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var AuditSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(AuditSubscriber, _super);
      function AuditSubscriber(destination, durationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.durationSelector = durationSelector;
          _this.hasValue = false;
          return _this;
      }
      AuditSubscriber.prototype._next = function (value) {
          this.value = value;
          this.hasValue = true;
          if (!this.throttled) {
              var duration = void 0;
              try {
                  var durationSelector = this.durationSelector;
                  duration = durationSelector(value);
              }
              catch (err) {
                  return this.destination.error(err);
              }
              var innerSubscription = subscribeToResult(this, duration);
              if (!innerSubscription || innerSubscription.closed) {
                  this.clearThrottle();
              }
              else {
                  this.add(this.throttled = innerSubscription);
              }
          }
      };
      AuditSubscriber.prototype.clearThrottle = function () {
          var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
          if (throttled) {
              this.remove(throttled);
              this.throttled = null;
              throttled.unsubscribe();
          }
          if (hasValue) {
              this.value = null;
              this.hasValue = false;
              this.destination.next(value);
          }
      };
      AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
          this.clearThrottle();
      };
      AuditSubscriber.prototype.notifyComplete = function () {
          this.clearThrottle();
      };
      return AuditSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var BufferSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferSubscriber, _super);
      function BufferSubscriber(destination, closingNotifier) {
          var _this = _super.call(this, destination) || this;
          _this.buffer = [];
          _this.add(subscribeToResult(_this, closingNotifier));
          return _this;
      }
      BufferSubscriber.prototype._next = function (value) {
          this.buffer.push(value);
      };
      BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var buffer = this.buffer;
          this.buffer = [];
          this.destination.next(buffer);
      };
      return BufferSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function bufferCount(bufferSize, startBufferEvery) {
      if (startBufferEvery === void 0) {
          startBufferEvery = null;
      }
      return function bufferCountOperatorFunction(source) {
          return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
      };
  }
  var BufferCountOperator = /*@__PURE__*/ (function () {
      function BufferCountOperator(bufferSize, startBufferEvery) {
          this.bufferSize = bufferSize;
          this.startBufferEvery = startBufferEvery;
          if (!startBufferEvery || bufferSize === startBufferEvery) {
              this.subscriberClass = BufferCountSubscriber;
          }
          else {
              this.subscriberClass = BufferSkipCountSubscriber;
          }
      }
      BufferCountOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
      };
      return BufferCountOperator;
  }());
  var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferCountSubscriber, _super);
      function BufferCountSubscriber(destination, bufferSize) {
          var _this = _super.call(this, destination) || this;
          _this.bufferSize = bufferSize;
          _this.buffer = [];
          return _this;
      }
      BufferCountSubscriber.prototype._next = function (value) {
          var buffer = this.buffer;
          buffer.push(value);
          if (buffer.length == this.bufferSize) {
              this.destination.next(buffer);
              this.buffer = [];
          }
      };
      BufferCountSubscriber.prototype._complete = function () {
          var buffer = this.buffer;
          if (buffer.length > 0) {
              this.destination.next(buffer);
          }
          _super.prototype._complete.call(this);
      };
      return BufferCountSubscriber;
  }(Subscriber));
  var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferSkipCountSubscriber, _super);
      function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
          var _this = _super.call(this, destination) || this;
          _this.bufferSize = bufferSize;
          _this.startBufferEvery = startBufferEvery;
          _this.buffers = [];
          _this.count = 0;
          return _this;
      }
      BufferSkipCountSubscriber.prototype._next = function (value) {
          var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
          this.count++;
          if (count % startBufferEvery === 0) {
              buffers.push([]);
          }
          for (var i = buffers.length; i--;) {
              var buffer = buffers[i];
              buffer.push(value);
              if (buffer.length === bufferSize) {
                  buffers.splice(i, 1);
                  this.destination.next(buffer);
              }
          }
      };
      BufferSkipCountSubscriber.prototype._complete = function () {
          var _a = this, buffers = _a.buffers, destination = _a.destination;
          while (buffers.length > 0) {
              var buffer = buffers.shift();
              if (buffer.length > 0) {
                  destination.next(buffer);
              }
          }
          _super.prototype._complete.call(this);
      };
      return BufferSkipCountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
  var Context = /*@__PURE__*/ (function () {
      function Context() {
          this.buffer = [];
      }
      return Context;
  }());
  var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferTimeSubscriber, _super);
      function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.bufferTimeSpan = bufferTimeSpan;
          _this.bufferCreationInterval = bufferCreationInterval;
          _this.maxBufferSize = maxBufferSize;
          _this.scheduler = scheduler;
          _this.contexts = [];
          var context = _this.openContext();
          _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
          if (_this.timespanOnly) {
              var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
              _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
          }
          else {
              var closeState = { subscriber: _this, context: context };
              var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
              _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
              _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
          }
          return _this;
      }
      BufferTimeSubscriber.prototype._next = function (value) {
          var contexts = this.contexts;
          var len = contexts.length;
          var filledBufferContext;
          for (var i = 0; i < len; i++) {
              var context_1 = contexts[i];
              var buffer = context_1.buffer;
              buffer.push(value);
              if (buffer.length == this.maxBufferSize) {
                  filledBufferContext = context_1;
              }
          }
          if (filledBufferContext) {
              this.onBufferFull(filledBufferContext);
          }
      };
      BufferTimeSubscriber.prototype._error = function (err) {
          this.contexts.length = 0;
          _super.prototype._error.call(this, err);
      };
      BufferTimeSubscriber.prototype._complete = function () {
          var _a = this, contexts = _a.contexts, destination = _a.destination;
          while (contexts.length > 0) {
              var context_2 = contexts.shift();
              destination.next(context_2.buffer);
          }
          _super.prototype._complete.call(this);
      };
      BufferTimeSubscriber.prototype._unsubscribe = function () {
          this.contexts = null;
      };
      BufferTimeSubscriber.prototype.onBufferFull = function (context) {
          this.closeContext(context);
          var closeAction = context.closeAction;
          closeAction.unsubscribe();
          this.remove(closeAction);
          if (!this.closed && this.timespanOnly) {
              context = this.openContext();
              var bufferTimeSpan = this.bufferTimeSpan;
              var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
              this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
          }
      };
      BufferTimeSubscriber.prototype.openContext = function () {
          var context = new Context();
          this.contexts.push(context);
          return context;
      };
      BufferTimeSubscriber.prototype.closeContext = function (context) {
          this.destination.next(context.buffer);
          var contexts = this.contexts;
          var spliceIndex = contexts ? contexts.indexOf(context) : -1;
          if (spliceIndex >= 0) {
              contexts.splice(contexts.indexOf(context), 1);
          }
      };
      return BufferTimeSubscriber;
  }(Subscriber));
  function dispatchBufferTimeSpanOnly(state) {
      var subscriber = state.subscriber;
      var prevContext = state.context;
      if (prevContext) {
          subscriber.closeContext(prevContext);
      }
      if (!subscriber.closed) {
          state.context = subscriber.openContext();
          state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
      }
  }
  function dispatchBufferCreation(state) {
      var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
      var context = subscriber.openContext();
      var action = this;
      if (!subscriber.closed) {
          subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
          action.schedule(state, bufferCreationInterval);
      }
  }
  function dispatchBufferClose(arg) {
      var subscriber = arg.subscriber, context = arg.context;
      subscriber.closeContext(context);
  }

  /** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
  var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferToggleSubscriber, _super);
      function BufferToggleSubscriber(destination, openings, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.openings = openings;
          _this.closingSelector = closingSelector;
          _this.contexts = [];
          _this.add(subscribeToResult(_this, openings));
          return _this;
      }
      BufferToggleSubscriber.prototype._next = function (value) {
          var contexts = this.contexts;
          var len = contexts.length;
          for (var i = 0; i < len; i++) {
              contexts[i].buffer.push(value);
          }
      };
      BufferToggleSubscriber.prototype._error = function (err) {
          var contexts = this.contexts;
          while (contexts.length > 0) {
              var context_1 = contexts.shift();
              context_1.subscription.unsubscribe();
              context_1.buffer = null;
              context_1.subscription = null;
          }
          this.contexts = null;
          _super.prototype._error.call(this, err);
      };
      BufferToggleSubscriber.prototype._complete = function () {
          var contexts = this.contexts;
          while (contexts.length > 0) {
              var context_2 = contexts.shift();
              this.destination.next(context_2.buffer);
              context_2.subscription.unsubscribe();
              context_2.buffer = null;
              context_2.subscription = null;
          }
          this.contexts = null;
          _super.prototype._complete.call(this);
      };
      BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
      };
      BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
          this.closeBuffer(innerSub.context);
      };
      BufferToggleSubscriber.prototype.openBuffer = function (value) {
          try {
              var closingSelector = this.closingSelector;
              var closingNotifier = closingSelector.call(this, value);
              if (closingNotifier) {
                  this.trySubscribe(closingNotifier);
              }
          }
          catch (err) {
              this._error(err);
          }
      };
      BufferToggleSubscriber.prototype.closeBuffer = function (context) {
          var contexts = this.contexts;
          if (contexts && context) {
              var buffer = context.buffer, subscription = context.subscription;
              this.destination.next(buffer);
              contexts.splice(contexts.indexOf(context), 1);
              this.remove(subscription);
              subscription.unsubscribe();
          }
      };
      BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
          var contexts = this.contexts;
          var buffer = [];
          var subscription = new Subscription();
          var context = { buffer: buffer, subscription: subscription };
          contexts.push(context);
          var innerSubscription = subscribeToResult(this, closingNotifier, context);
          if (!innerSubscription || innerSubscription.closed) {
              this.closeBuffer(context);
          }
          else {
              innerSubscription.context = context;
              this.add(innerSubscription);
              subscription.add(innerSubscription);
          }
      };
      return BufferToggleSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(BufferWhenSubscriber, _super);
      function BufferWhenSubscriber(destination, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.closingSelector = closingSelector;
          _this.subscribing = false;
          _this.openBuffer();
          return _this;
      }
      BufferWhenSubscriber.prototype._next = function (value) {
          this.buffer.push(value);
      };
      BufferWhenSubscriber.prototype._complete = function () {
          var buffer = this.buffer;
          if (buffer) {
              this.destination.next(buffer);
          }
          _super.prototype._complete.call(this);
      };
      BufferWhenSubscriber.prototype._unsubscribe = function () {
          this.buffer = null;
          this.subscribing = false;
      };
      BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openBuffer();
      };
      BufferWhenSubscriber.prototype.notifyComplete = function () {
          if (this.subscribing) {
              this.complete();
          }
          else {
              this.openBuffer();
          }
      };
      BufferWhenSubscriber.prototype.openBuffer = function () {
          var closingSubscription = this.closingSubscription;
          if (closingSubscription) {
              this.remove(closingSubscription);
              closingSubscription.unsubscribe();
          }
          var buffer = this.buffer;
          if (this.buffer) {
              this.destination.next(buffer);
          }
          this.buffer = [];
          var closingNotifier;
          try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector();
          }
          catch (err) {
              return this.error(err);
          }
          closingSubscription = new Subscription();
          this.closingSubscription = closingSubscription;
          this.add(closingSubscription);
          this.subscribing = true;
          closingSubscription.add(subscribeToResult(this, closingNotifier));
          this.subscribing = false;
      };
      return BufferWhenSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var CatchSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(CatchSubscriber, _super);
      function CatchSubscriber(destination, selector, caught) {
          var _this = _super.call(this, destination) || this;
          _this.selector = selector;
          _this.caught = caught;
          return _this;
      }
      CatchSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var result = void 0;
              try {
                  result = this.selector(err, this.caught);
              }
              catch (err2) {
                  _super.prototype.error.call(this, err2);
                  return;
              }
              this._unsubscribeAndRecycle();
              var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
              this.add(innerSubscriber);
              subscribeToResult(this, result, undefined, undefined, innerSubscriber);
          }
      };
      return CatchSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */
  function concat$1() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
      }
      return function (source) { return source.lift.call(concat.apply(void 0, [source].concat(observables))); };
  }

  /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
  function concatMap(project, resultSelector) {
      return mergeMap(project, resultSelector, 1);
  }

  /** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var CountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(CountSubscriber, _super);
      function CountSubscriber(destination, predicate, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.count = 0;
          _this.index = 0;
          return _this;
      }
      CountSubscriber.prototype._next = function (value) {
          if (this.predicate) {
              this._tryPredicate(value);
          }
          else {
              this.count++;
          }
      };
      CountSubscriber.prototype._tryPredicate = function (value) {
          var result;
          try {
              result = this.predicate(value, this.index++, this.source);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          if (result) {
              this.count++;
          }
      };
      CountSubscriber.prototype._complete = function () {
          this.destination.next(this.count);
          this.destination.complete();
      };
      return CountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DebounceSubscriber, _super);
      function DebounceSubscriber(destination, durationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.durationSelector = durationSelector;
          _this.hasValue = false;
          _this.durationSubscription = null;
          return _this;
      }
      DebounceSubscriber.prototype._next = function (value) {
          try {
              var result = this.durationSelector.call(this, value);
              if (result) {
                  this._tryNext(value, result);
              }
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      DebounceSubscriber.prototype._complete = function () {
          this.emitValue();
          this.destination.complete();
      };
      DebounceSubscriber.prototype._tryNext = function (value, duration) {
          var subscription = this.durationSubscription;
          this.value = value;
          this.hasValue = true;
          if (subscription) {
              subscription.unsubscribe();
              this.remove(subscription);
          }
          subscription = subscribeToResult(this, duration);
          if (subscription && !subscription.closed) {
              this.add(this.durationSubscription = subscription);
          }
      };
      DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.emitValue();
      };
      DebounceSubscriber.prototype.notifyComplete = function () {
          this.emitValue();
      };
      DebounceSubscriber.prototype.emitValue = function () {
          if (this.hasValue) {
              var value = this.value;
              var subscription = this.durationSubscription;
              if (subscription) {
                  this.durationSubscription = null;
                  subscription.unsubscribe();
                  this.remove(subscription);
              }
              this.value = null;
              this.hasValue = false;
              _super.prototype._next.call(this, value);
          }
      };
      return DebounceSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
  var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DebounceTimeSubscriber, _super);
      function DebounceTimeSubscriber(destination, dueTime, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.dueTime = dueTime;
          _this.scheduler = scheduler;
          _this.debouncedSubscription = null;
          _this.lastValue = null;
          _this.hasValue = false;
          return _this;
      }
      DebounceTimeSubscriber.prototype._next = function (value) {
          this.clearDebounce();
          this.lastValue = value;
          this.hasValue = true;
          this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
      };
      DebounceTimeSubscriber.prototype._complete = function () {
          this.debouncedNext();
          this.destination.complete();
      };
      DebounceTimeSubscriber.prototype.debouncedNext = function () {
          this.clearDebounce();
          if (this.hasValue) {
              var lastValue = this.lastValue;
              this.lastValue = null;
              this.hasValue = false;
              this.destination.next(lastValue);
          }
      };
      DebounceTimeSubscriber.prototype.clearDebounce = function () {
          var debouncedSubscription = this.debouncedSubscription;
          if (debouncedSubscription !== null) {
              this.remove(debouncedSubscription);
              debouncedSubscription.unsubscribe();
              this.debouncedSubscription = null;
          }
      };
      return DebounceTimeSubscriber;
  }(Subscriber));
  function dispatchNext$2(subscriber) {
      subscriber.debouncedNext();
  }

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DefaultIfEmptySubscriber, _super);
      function DefaultIfEmptySubscriber(destination, defaultValue) {
          var _this = _super.call(this, destination) || this;
          _this.defaultValue = defaultValue;
          _this.isEmpty = true;
          return _this;
      }
      DefaultIfEmptySubscriber.prototype._next = function (value) {
          this.isEmpty = false;
          this.destination.next(value);
      };
      DefaultIfEmptySubscriber.prototype._complete = function () {
          if (this.isEmpty) {
              this.destination.next(this.defaultValue);
          }
          this.destination.complete();
      };
      return DefaultIfEmptySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
  var DelaySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DelaySubscriber, _super);
      function DelaySubscriber(destination, delay, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.delay = delay;
          _this.scheduler = scheduler;
          _this.queue = [];
          _this.active = false;
          _this.errored = false;
          return _this;
      }
      DelaySubscriber.dispatch = function (state) {
          var source = state.source;
          var queue = source.queue;
          var scheduler = state.scheduler;
          var destination = state.destination;
          while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
              queue.shift().notification.observe(destination);
          }
          if (queue.length > 0) {
              var delay_1 = Math.max(0, queue[0].time - scheduler.now());
              this.schedule(state, delay_1);
          }
          else {
              this.unsubscribe();
              source.active = false;
          }
      };
      DelaySubscriber.prototype._schedule = function (scheduler) {
          this.active = true;
          var destination = this.destination;
          destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
              source: this, destination: this.destination, scheduler: scheduler
          }));
      };
      DelaySubscriber.prototype.scheduleNotification = function (notification) {
          if (this.errored === true) {
              return;
          }
          var scheduler = this.scheduler;
          var message = new DelayMessage(scheduler.now() + this.delay, notification);
          this.queue.push(message);
          if (this.active === false) {
              this._schedule(scheduler);
          }
      };
      DelaySubscriber.prototype._next = function (value) {
          this.scheduleNotification(Notification$1.createNext(value));
      };
      DelaySubscriber.prototype._error = function (err) {
          this.errored = true;
          this.queue = [];
          this.destination.error(err);
          this.unsubscribe();
      };
      DelaySubscriber.prototype._complete = function () {
          this.scheduleNotification(Notification$1.createComplete());
          this.unsubscribe();
      };
      return DelaySubscriber;
  }(Subscriber));
  var DelayMessage = /*@__PURE__*/ (function () {
      function DelayMessage(time, notification) {
          this.time = time;
          this.notification = notification;
      }
      return DelayMessage;
  }());

  /** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DelayWhenSubscriber, _super);
      function DelayWhenSubscriber(destination, delayDurationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.delayDurationSelector = delayDurationSelector;
          _this.completed = false;
          _this.delayNotifierSubscriptions = [];
          _this.index = 0;
          return _this;
      }
      DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(outerValue);
          this.removeSubscription(innerSub);
          this.tryComplete();
      };
      DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
          this._error(error);
      };
      DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
          var value = this.removeSubscription(innerSub);
          if (value) {
              this.destination.next(value);
          }
          this.tryComplete();
      };
      DelayWhenSubscriber.prototype._next = function (value) {
          var index = this.index++;
          try {
              var delayNotifier = this.delayDurationSelector(value, index);
              if (delayNotifier) {
                  this.tryDelay(delayNotifier, value);
              }
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      DelayWhenSubscriber.prototype._complete = function () {
          this.completed = true;
          this.tryComplete();
          this.unsubscribe();
      };
      DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
          subscription.unsubscribe();
          var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
          if (subscriptionIdx !== -1) {
              this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
          }
          return subscription.outerValue;
      };
      DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
          var notifierSubscription = subscribeToResult(this, delayNotifier, value);
          if (notifierSubscription && !notifierSubscription.closed) {
              var destination = this.destination;
              destination.add(notifierSubscription);
              this.delayNotifierSubscriptions.push(notifierSubscription);
          }
      };
      DelayWhenSubscriber.prototype.tryComplete = function () {
          if (this.completed && this.delayNotifierSubscriptions.length === 0) {
              this.destination.complete();
          }
      };
      return DelayWhenSubscriber;
  }(OuterSubscriber));
  var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
      __extends(SubscriptionDelayObservable, _super);
      function SubscriptionDelayObservable(source, subscriptionDelay) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subscriptionDelay = subscriptionDelay;
          return _this;
      }
      SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
          this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
      };
      return SubscriptionDelayObservable;
  }(Observable));
  var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SubscriptionDelaySubscriber, _super);
      function SubscriptionDelaySubscriber(parent, source) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.source = source;
          _this.sourceSubscribed = false;
          return _this;
      }
      SubscriptionDelaySubscriber.prototype._next = function (unused) {
          this.subscribeToSource();
      };
      SubscriptionDelaySubscriber.prototype._error = function (err) {
          this.unsubscribe();
          this.parent.error(err);
      };
      SubscriptionDelaySubscriber.prototype._complete = function () {
          this.unsubscribe();
          this.subscribeToSource();
      };
      SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
          if (!this.sourceSubscribed) {
              this.sourceSubscribed = true;
              this.unsubscribe();
              this.source.subscribe(this.parent);
          }
      };
      return SubscriptionDelaySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DeMaterializeSubscriber, _super);
      function DeMaterializeSubscriber(destination) {
          return _super.call(this, destination) || this;
      }
      DeMaterializeSubscriber.prototype._next = function (value) {
          value.observe(this.destination);
      };
      return DeMaterializeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DistinctSubscriber, _super);
      function DistinctSubscriber(destination, keySelector, flushes) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.values = new Set();
          if (flushes) {
              _this.add(subscribeToResult(_this, flushes));
          }
          return _this;
      }
      DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.values.clear();
      };
      DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
          this._error(error);
      };
      DistinctSubscriber.prototype._next = function (value) {
          if (this.keySelector) {
              this._useKeySelector(value);
          }
          else {
              this._finalizeNext(value, value);
          }
      };
      DistinctSubscriber.prototype._useKeySelector = function (value) {
          var key;
          var destination = this.destination;
          try {
              key = this.keySelector(value);
          }
          catch (err) {
              destination.error(err);
              return;
          }
          this._finalizeNext(key, value);
      };
      DistinctSubscriber.prototype._finalizeNext = function (key, value) {
          var values = this.values;
          if (!values.has(key)) {
              values.add(key);
              this.destination.next(value);
          }
      };
      return DistinctSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function distinctUntilChanged(compare, keySelector) {
      return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
  }
  var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
      function DistinctUntilChangedOperator(compare, keySelector) {
          this.compare = compare;
          this.keySelector = keySelector;
      }
      DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
      };
      return DistinctUntilChangedOperator;
  }());
  var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DistinctUntilChangedSubscriber, _super);
      function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.hasKey = false;
          if (typeof compare === 'function') {
              _this.compare = compare;
          }
          return _this;
      }
      DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
          return x === y;
      };
      DistinctUntilChangedSubscriber.prototype._next = function (value) {
          var key;
          try {
              var keySelector = this.keySelector;
              key = keySelector ? keySelector(value) : value;
          }
          catch (err) {
              return this.destination.error(err);
          }
          var result = false;
          if (this.hasKey) {
              try {
                  var compare = this.compare;
                  result = compare(this.key, key);
              }
              catch (err) {
                  return this.destination.error(err);
              }
          }
          else {
              this.hasKey = true;
          }
          if (!result) {
              this.key = key;
              this.destination.next(value);
          }
      };
      return DistinctUntilChangedSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */
  var ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrowIfEmptySubscriber, _super);
      function ThrowIfEmptySubscriber(destination, errorFactory) {
          var _this = _super.call(this, destination) || this;
          _this.errorFactory = errorFactory;
          _this.hasValue = false;
          return _this;
      }
      ThrowIfEmptySubscriber.prototype._next = function (value) {
          this.hasValue = true;
          this.destination.next(value);
      };
      ThrowIfEmptySubscriber.prototype._complete = function () {
          if (!this.hasValue) {
              var err = void 0;
              try {
                  err = this.errorFactory();
              }
              catch (e) {
                  err = e;
              }
              this.destination.error(err);
          }
          else {
              return this.destination.complete();
          }
      };
      return ThrowIfEmptySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
  function take(count) {
      return function (source) {
          if (count === 0) {
              return empty$1();
          }
          else {
              return source.lift(new TakeOperator(count));
          }
      };
  }
  var TakeOperator = /*@__PURE__*/ (function () {
      function TakeOperator(total) {
          this.total = total;
          if (this.total < 0) {
              throw new ArgumentOutOfRangeError;
          }
      }
      TakeOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TakeSubscriber(subscriber, this.total));
      };
      return TakeOperator;
  }());
  var TakeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeSubscriber, _super);
      function TakeSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
      }
      TakeSubscriber.prototype._next = function (value) {
          var total = this.total;
          var count = ++this.count;
          if (count <= total) {
              this.destination.next(value);
              if (count === total) {
                  this.destination.complete();
                  this.unsubscribe();
              }
          }
      };
      return TakeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var EverySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(EverySubscriber, _super);
      function EverySubscriber(destination, predicate, thisArg, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.source = source;
          _this.index = 0;
          _this.thisArg = thisArg || _this;
          return _this;
      }
      EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
          this.destination.next(everyValueMatch);
          this.destination.complete();
      };
      EverySubscriber.prototype._next = function (value) {
          var result = false;
          try {
              result = this.predicate.call(this.thisArg, value, this.index++, this.source);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          if (!result) {
              this.notifyComplete(false);
          }
      };
      EverySubscriber.prototype._complete = function () {
          this.notifyComplete(true);
      };
      return EverySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SwitchFirstSubscriber, _super);
      function SwitchFirstSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasCompleted = false;
          _this.hasSubscription = false;
          return _this;
      }
      SwitchFirstSubscriber.prototype._next = function (value) {
          if (!this.hasSubscription) {
              this.hasSubscription = true;
              this.add(subscribeToResult(this, value));
          }
      };
      SwitchFirstSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (!this.hasSubscription) {
              this.destination.complete();
          }
      };
      SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
          this.remove(innerSub);
          this.hasSubscription = false;
          if (this.hasCompleted) {
              this.destination.complete();
          }
      };
      return SwitchFirstSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
  var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ExhaustMapSubscriber, _super);
      function ExhaustMapSubscriber(destination, project) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.hasSubscription = false;
          _this.hasCompleted = false;
          _this.index = 0;
          return _this;
      }
      ExhaustMapSubscriber.prototype._next = function (value) {
          if (!this.hasSubscription) {
              this.tryNext(value);
          }
      };
      ExhaustMapSubscriber.prototype.tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.hasSubscription = true;
          this._innerSub(result, value, index);
      };
      ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {
          var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
          var destination = this.destination;
          destination.add(innerSubscriber);
          subscribeToResult(this, result, value, index, innerSubscriber);
      };
      ExhaustMapSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (!this.hasSubscription) {
              this.destination.complete();
          }
          this.unsubscribe();
      };
      ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      ExhaustMapSubscriber.prototype.notifyError = function (err) {
          this.destination.error(err);
      };
      ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
          var destination = this.destination;
          destination.remove(innerSub);
          this.hasSubscription = false;
          if (this.hasCompleted) {
              this.destination.complete();
          }
      };
      return ExhaustMapSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ExpandSubscriber, _super);
      function ExpandSubscriber(destination, project, concurrent, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.scheduler = scheduler;
          _this.index = 0;
          _this.active = 0;
          _this.hasCompleted = false;
          if (concurrent < Number.POSITIVE_INFINITY) {
              _this.buffer = [];
          }
          return _this;
      }
      ExpandSubscriber.dispatch = function (arg) {
          var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
          subscriber.subscribeToProjection(result, value, index);
      };
      ExpandSubscriber.prototype._next = function (value) {
          var destination = this.destination;
          if (destination.closed) {
              this._complete();
              return;
          }
          var index = this.index++;
          if (this.active < this.concurrent) {
              destination.next(value);
              try {
                  var project = this.project;
                  var result = project(value, index);
                  if (!this.scheduler) {
                      this.subscribeToProjection(result, value, index);
                  }
                  else {
                      var state = { subscriber: this, result: result, value: value, index: index };
                      var destination_1 = this.destination;
                      destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                  }
              }
              catch (e) {
                  destination.error(e);
              }
          }
          else {
              this.buffer.push(value);
          }
      };
      ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
          this.active++;
          var destination = this.destination;
          destination.add(subscribeToResult(this, result, value, index));
      };
      ExpandSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.hasCompleted && this.active === 0) {
              this.destination.complete();
          }
          this.unsubscribe();
      };
      ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this._next(innerValue);
      };
      ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
          var buffer = this.buffer;
          var destination = this.destination;
          destination.remove(innerSub);
          this.active--;
          if (buffer && buffer.length > 0) {
              this._next(buffer.shift());
          }
          if (this.hasCompleted && this.active === 0) {
              this.destination.complete();
          }
      };
      return ExpandSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
  var FinallySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(FinallySubscriber, _super);
      function FinallySubscriber(destination, callback) {
          var _this = _super.call(this, destination) || this;
          _this.add(new Subscription(callback));
          return _this;
      }
      return FinallySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(FindValueSubscriber, _super);
      function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.yieldIndex = yieldIndex;
          _this.thisArg = thisArg;
          _this.index = 0;
          return _this;
      }
      FindValueSubscriber.prototype.notifyComplete = function (value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
          this.unsubscribe();
      };
      FindValueSubscriber.prototype._next = function (value) {
          var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
          var index = this.index++;
          try {
              var result = predicate.call(thisArg || this, value, index, this.source);
              if (result) {
                  this.notifyComplete(this.yieldIndex ? index : value);
              }
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      FindValueSubscriber.prototype._complete = function () {
          this.notifyComplete(this.yieldIndex ? -1 : undefined);
      };
      return FindValueSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(IgnoreElementsSubscriber, _super);
      function IgnoreElementsSubscriber() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      IgnoreElementsSubscriber.prototype._next = function (unused) {
      };
      return IgnoreElementsSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(IsEmptySubscriber, _super);
      function IsEmptySubscriber(destination) {
          return _super.call(this, destination) || this;
      }
      IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
          var destination = this.destination;
          destination.next(isEmpty);
          destination.complete();
      };
      IsEmptySubscriber.prototype._next = function (value) {
          this.notifyComplete(false);
      };
      IsEmptySubscriber.prototype._complete = function () {
          this.notifyComplete(true);
      };
      return IsEmptySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
  var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeLastSubscriber, _super);
      function TakeLastSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.ring = new Array();
          _this.count = 0;
          return _this;
      }
      TakeLastSubscriber.prototype._next = function (value) {
          var ring = this.ring;
          var total = this.total;
          var count = this.count++;
          if (ring.length < total) {
              ring.push(value);
          }
          else {
              var index = count % total;
              ring[index] = value;
          }
      };
      TakeLastSubscriber.prototype._complete = function () {
          var destination = this.destination;
          var count = this.count;
          if (count > 0) {
              var total = this.count >= this.total ? this.total : this.count;
              var ring = this.ring;
              for (var i = 0; i < total; i++) {
                  var idx = (count++) % total;
                  destination.next(ring[idx]);
              }
          }
          destination.complete();
      };
      return TakeLastSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var MapToSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MapToSubscriber, _super);
      function MapToSubscriber(destination, value) {
          var _this = _super.call(this, destination) || this;
          _this.value = value;
          return _this;
      }
      MapToSubscriber.prototype._next = function (x) {
          this.destination.next(this.value);
      };
      return MapToSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
  var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MaterializeSubscriber, _super);
      function MaterializeSubscriber(destination) {
          return _super.call(this, destination) || this;
      }
      MaterializeSubscriber.prototype._next = function (value) {
          this.destination.next(Notification$1.createNext(value));
      };
      MaterializeSubscriber.prototype._error = function (err) {
          var destination = this.destination;
          destination.next(Notification$1.createError(err));
          destination.complete();
      };
      MaterializeSubscriber.prototype._complete = function () {
          var destination = this.destination;
          destination.next(Notification$1.createComplete());
          destination.complete();
      };
      return MaterializeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var ScanSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ScanSubscriber, _super);
      function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
          var _this = _super.call(this, destination) || this;
          _this.accumulator = accumulator;
          _this._seed = _seed;
          _this.hasSeed = hasSeed;
          _this.index = 0;
          return _this;
      }
      Object.defineProperty(ScanSubscriber.prototype, "seed", {
          get: function () {
              return this._seed;
          },
          set: function (value) {
              this.hasSeed = true;
              this._seed = value;
          },
          enumerable: true,
          configurable: true
      });
      ScanSubscriber.prototype._next = function (value) {
          if (!this.hasSeed) {
              this.seed = value;
              this.destination.next(value);
          }
          else {
              return this._tryNext(value);
          }
      };
      ScanSubscriber.prototype._tryNext = function (value) {
          var index = this.index++;
          var result;
          try {
              result = this.accumulator(this.seed, value, index);
          }
          catch (err) {
              this.destination.error(err);
          }
          this.seed = result;
          this.destination.next(result);
      };
      return ScanSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */
  var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MergeScanSubscriber, _super);
      function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
          var _this = _super.call(this, destination) || this;
          _this.accumulator = accumulator;
          _this.acc = acc;
          _this.concurrent = concurrent;
          _this.hasValue = false;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
      }
      MergeScanSubscriber.prototype._next = function (value) {
          if (this.active < this.concurrent) {
              var index = this.index++;
              var destination = this.destination;
              var ish = void 0;
              try {
                  var accumulator = this.accumulator;
                  ish = accumulator(this.acc, value, index);
              }
              catch (e) {
                  return destination.error(e);
              }
              this.active++;
              this._innerSub(ish, value, index);
          }
          else {
              this.buffer.push(value);
          }
      };
      MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
          var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
          var destination = this.destination;
          destination.add(innerSubscriber);
          subscribeToResult(this, ish, value, index, innerSubscriber);
      };
      MergeScanSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
              if (this.hasValue === false) {
                  this.destination.next(this.acc);
              }
              this.destination.complete();
          }
          this.unsubscribe();
      };
      MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var destination = this.destination;
          this.acc = innerValue;
          this.hasValue = true;
          destination.next(innerValue);
      };
      MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
          var buffer = this.buffer;
          var destination = this.destination;
          destination.remove(innerSub);
          this.active--;
          if (buffer.length > 0) {
              this._next(buffer.shift());
          }
          else if (this.active === 0 && this.hasCompleted) {
              if (this.hasValue === false) {
                  this.destination.next(this.acc);
              }
              this.destination.complete();
          }
      };
      return MergeScanSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
  function multicast(subjectOrSubjectFactory, selector) {
      return function multicastOperatorFunction(source) {
          var subjectFactory;
          if (typeof subjectOrSubjectFactory === 'function') {
              subjectFactory = subjectOrSubjectFactory;
          }
          else {
              subjectFactory = function subjectFactory() {
                  return subjectOrSubjectFactory;
              };
          }
          if (typeof selector === 'function') {
              return source.lift(new MulticastOperator(subjectFactory, selector));
          }
          var connectable = Object.create(source, connectableObservableDescriptor);
          connectable.source = source;
          connectable.subjectFactory = subjectFactory;
          return connectable;
      };
  }
  var MulticastOperator = /*@__PURE__*/ (function () {
      function MulticastOperator(subjectFactory, selector) {
          this.subjectFactory = subjectFactory;
          this.selector = selector;
      }
      MulticastOperator.prototype.call = function (subscriber, source) {
          var selector = this.selector;
          var subject = this.subjectFactory();
          var subscription = selector(subject).subscribe(subscriber);
          subscription.add(source.subscribe(subject));
          return subscription;
      };
      return MulticastOperator;
  }());

  /** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(OnErrorResumeNextSubscriber, _super);
      function OnErrorResumeNextSubscriber(destination, nextSources) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.nextSources = nextSources;
          return _this;
      }
      OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
          this.subscribeToNextSource();
      };
      OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
          this.subscribeToNextSource();
      };
      OnErrorResumeNextSubscriber.prototype._error = function (err) {
          this.subscribeToNextSource();
          this.unsubscribe();
      };
      OnErrorResumeNextSubscriber.prototype._complete = function () {
          this.subscribeToNextSource();
          this.unsubscribe();
      };
      OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
          var next = this.nextSources.shift();
          if (!!next) {
              var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
              var destination = this.destination;
              destination.add(innerSubscriber);
              subscribeToResult(this, next, undefined, undefined, innerSubscriber);
          }
          else {
              this.destination.complete();
          }
      };
      return OnErrorResumeNextSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(PairwiseSubscriber, _super);
      function PairwiseSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasPrev = false;
          return _this;
      }
      PairwiseSubscriber.prototype._next = function (value) {
          if (this.hasPrev) {
              this.destination.next([this.prev, value]);
          }
          else {
              this.hasPrev = true;
          }
          this.prev = value;
      };
      return PairwiseSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _map PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
  var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RepeatSubscriber, _super);
      function RepeatSubscriber(destination, count, source) {
          var _this = _super.call(this, destination) || this;
          _this.count = count;
          _this.source = source;
          return _this;
      }
      RepeatSubscriber.prototype.complete = function () {
          if (!this.isStopped) {
              var _a = this, source = _a.source, count = _a.count;
              if (count === 0) {
                  return _super.prototype.complete.call(this);
              }
              else if (count > -1) {
                  this.count = count - 1;
              }
              source.subscribe(this._unsubscribeAndRecycle());
          }
      };
      return RepeatSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RepeatWhenSubscriber, _super);
      function RepeatWhenSubscriber(destination, notifier, source) {
          var _this = _super.call(this, destination) || this;
          _this.notifier = notifier;
          _this.source = source;
          _this.sourceIsBeingSubscribedTo = true;
          return _this;
      }
      RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.sourceIsBeingSubscribedTo = true;
          this.source.subscribe(this);
      };
      RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
          if (this.sourceIsBeingSubscribedTo === false) {
              return _super.prototype.complete.call(this);
          }
      };
      RepeatWhenSubscriber.prototype.complete = function () {
          this.sourceIsBeingSubscribedTo = false;
          if (!this.isStopped) {
              if (!this.retries) {
                  this.subscribeToRetries();
              }
              if (!this.retriesSubscription || this.retriesSubscription.closed) {
                  return _super.prototype.complete.call(this);
              }
              this._unsubscribeAndRecycle();
              this.notifications.next();
          }
      };
      RepeatWhenSubscriber.prototype._unsubscribe = function () {
          var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
          if (notifications) {
              notifications.unsubscribe();
              this.notifications = null;
          }
          if (retriesSubscription) {
              retriesSubscription.unsubscribe();
              this.retriesSubscription = null;
          }
          this.retries = null;
      };
      RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;
          _super.prototype._unsubscribeAndRecycle.call(this);
          this._unsubscribe = _unsubscribe;
          return this;
      };
      RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
          this.notifications = new Subject();
          var retries;
          try {
              var notifier = this.notifier;
              retries = notifier(this.notifications);
          }
          catch (e) {
              return _super.prototype.complete.call(this);
          }
          this.retries = retries;
          this.retriesSubscription = subscribeToResult(this, retries);
      };
      return RepeatWhenSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var RetrySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RetrySubscriber, _super);
      function RetrySubscriber(destination, count, source) {
          var _this = _super.call(this, destination) || this;
          _this.count = count;
          _this.source = source;
          return _this;
      }
      RetrySubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var _a = this, source = _a.source, count = _a.count;
              if (count === 0) {
                  return _super.prototype.error.call(this, err);
              }
              else if (count > -1) {
                  this.count = count - 1;
              }
              source.subscribe(this._unsubscribeAndRecycle());
          }
      };
      return RetrySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RetryWhenSubscriber, _super);
      function RetryWhenSubscriber(destination, notifier, source) {
          var _this = _super.call(this, destination) || this;
          _this.notifier = notifier;
          _this.source = source;
          return _this;
      }
      RetryWhenSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var errors = this.errors;
              var retries = this.retries;
              var retriesSubscription = this.retriesSubscription;
              if (!retries) {
                  errors = new Subject();
                  try {
                      var notifier = this.notifier;
                      retries = notifier(errors);
                  }
                  catch (e) {
                      return _super.prototype.error.call(this, e);
                  }
                  retriesSubscription = subscribeToResult(this, retries);
              }
              else {
                  this.errors = null;
                  this.retriesSubscription = null;
              }
              this._unsubscribeAndRecycle();
              this.errors = errors;
              this.retries = retries;
              this.retriesSubscription = retriesSubscription;
              errors.next(err);
          }
      };
      RetryWhenSubscriber.prototype._unsubscribe = function () {
          var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
          if (errors) {
              errors.unsubscribe();
              this.errors = null;
          }
          if (retriesSubscription) {
              retriesSubscription.unsubscribe();
              this.retriesSubscription = null;
          }
          this.retries = null;
      };
      RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;
          this._unsubscribeAndRecycle();
          this._unsubscribe = _unsubscribe;
          this.source.subscribe(this);
      };
      return RetryWhenSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var SampleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SampleSubscriber, _super);
      function SampleSubscriber() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.hasValue = false;
          return _this;
      }
      SampleSubscriber.prototype._next = function (value) {
          this.value = value;
          this.hasValue = true;
      };
      SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.emitValue();
      };
      SampleSubscriber.prototype.notifyComplete = function () {
          this.emitValue();
      };
      SampleSubscriber.prototype.emitValue = function () {
          if (this.hasValue) {
              this.hasValue = false;
              this.destination.next(this.value);
          }
      };
      return SampleSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
  var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SampleTimeSubscriber, _super);
      function SampleTimeSubscriber(destination, period, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.period = period;
          _this.scheduler = scheduler;
          _this.hasValue = false;
          _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
          return _this;
      }
      SampleTimeSubscriber.prototype._next = function (value) {
          this.lastValue = value;
          this.hasValue = true;
      };
      SampleTimeSubscriber.prototype.notifyNext = function () {
          if (this.hasValue) {
              this.hasValue = false;
              this.destination.next(this.lastValue);
          }
      };
      return SampleTimeSubscriber;
  }(Subscriber));
  function dispatchNotification(state) {
      var subscriber = state.subscriber, period = state.period;
      subscriber.notifyNext();
      this.schedule(state, period);
  }

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SequenceEqualSubscriber, _super);
      function SequenceEqualSubscriber(destination, compareTo, comparator) {
          var _this = _super.call(this, destination) || this;
          _this.compareTo = compareTo;
          _this.comparator = comparator;
          _this._a = [];
          _this._b = [];
          _this._oneComplete = false;
          _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
          return _this;
      }
      SequenceEqualSubscriber.prototype._next = function (value) {
          if (this._oneComplete && this._b.length === 0) {
              this.emit(false);
          }
          else {
              this._a.push(value);
              this.checkValues();
          }
      };
      SequenceEqualSubscriber.prototype._complete = function () {
          if (this._oneComplete) {
              this.emit(this._a.length === 0 && this._b.length === 0);
          }
          else {
              this._oneComplete = true;
          }
          this.unsubscribe();
      };
      SequenceEqualSubscriber.prototype.checkValues = function () {
          var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
          while (_a.length > 0 && _b.length > 0) {
              var a = _a.shift();
              var b = _b.shift();
              var areEqual = false;
              try {
                  areEqual = comparator ? comparator(a, b) : a === b;
              }
              catch (e) {
                  this.destination.error(e);
              }
              if (!areEqual) {
                  this.emit(false);
              }
          }
      };
      SequenceEqualSubscriber.prototype.emit = function (value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
      };
      SequenceEqualSubscriber.prototype.nextB = function (value) {
          if (this._oneComplete && this._a.length === 0) {
              this.emit(false);
          }
          else {
              this._b.push(value);
              this.checkValues();
          }
      };
      SequenceEqualSubscriber.prototype.completeB = function () {
          if (this._oneComplete) {
              this.emit(this._a.length === 0 && this._b.length === 0);
          }
          else {
              this._oneComplete = true;
          }
      };
      return SequenceEqualSubscriber;
  }(Subscriber));
  var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SequenceEqualCompareToSubscriber, _super);
      function SequenceEqualCompareToSubscriber(destination, parent) {
          var _this = _super.call(this, destination) || this;
          _this.parent = parent;
          return _this;
      }
      SequenceEqualCompareToSubscriber.prototype._next = function (value) {
          this.parent.nextB(value);
      };
      SequenceEqualCompareToSubscriber.prototype._error = function (err) {
          this.parent.error(err);
          this.unsubscribe();
      };
      SequenceEqualCompareToSubscriber.prototype._complete = function () {
          this.parent.completeB();
          this.unsubscribe();
      };
      return SequenceEqualCompareToSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
  function shareSubjectFactory() {
      return new Subject();
  }
  function share() {
      return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
  }

  /** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */
  function shareReplay(configOrBufferSize, windowTime, scheduler) {
      var config;
      if (configOrBufferSize && typeof configOrBufferSize === 'object') {
          config = configOrBufferSize;
      }
      else {
          config = {
              bufferSize: configOrBufferSize,
              windowTime: windowTime,
              refCount: false,
              scheduler: scheduler
          };
      }
      return function (source) { return source.lift(shareReplayOperator(config)); };
  }
  function shareReplayOperator(_a) {
      var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
      var subject;
      var refCount = 0;
      var subscription;
      var hasError = false;
      var isComplete = false;
      return function shareReplayOperation(source) {
          refCount++;
          if (!subject || hasError) {
              hasError = false;
              subject = new ReplaySubject(bufferSize, windowTime, scheduler);
              subscription = source.subscribe({
                  next: function (value) { subject.next(value); },
                  error: function (err) {
                      hasError = true;
                      subject.error(err);
                  },
                  complete: function () {
                      isComplete = true;
                      subject.complete();
                  },
              });
          }
          var innerSub = subject.subscribe(this);
          this.add(function () {
              refCount--;
              innerSub.unsubscribe();
              if (subscription && !isComplete && useRefCount && refCount === 0) {
                  subscription.unsubscribe();
                  subscription = undefined;
                  subject = undefined;
              }
          });
      };
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
  var SingleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SingleSubscriber, _super);
      function SingleSubscriber(destination, predicate, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.seenValue = false;
          _this.index = 0;
          return _this;
      }
      SingleSubscriber.prototype.applySingleValue = function (value) {
          if (this.seenValue) {
              this.destination.error('Sequence contains more than one element');
          }
          else {
              this.seenValue = true;
              this.singleValue = value;
          }
      };
      SingleSubscriber.prototype._next = function (value) {
          var index = this.index++;
          if (this.predicate) {
              this.tryNext(value, index);
          }
          else {
              this.applySingleValue(value);
          }
      };
      SingleSubscriber.prototype.tryNext = function (value, index) {
          try {
              if (this.predicate(value, index, this.source)) {
                  this.applySingleValue(value);
              }
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      SingleSubscriber.prototype._complete = function () {
          var destination = this.destination;
          if (this.index > 0) {
              destination.next(this.seenValue ? this.singleValue : undefined);
              destination.complete();
          }
          else {
              destination.error(new EmptyError);
          }
      };
      return SingleSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var SkipSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipSubscriber, _super);
      function SkipSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
      }
      SkipSubscriber.prototype._next = function (x) {
          if (++this.count > this.total) {
              this.destination.next(x);
          }
      };
      return SkipSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
  var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipLastSubscriber, _super);
      function SkipLastSubscriber(destination, _skipCount) {
          var _this = _super.call(this, destination) || this;
          _this._skipCount = _skipCount;
          _this._count = 0;
          _this._ring = new Array(_skipCount);
          return _this;
      }
      SkipLastSubscriber.prototype._next = function (value) {
          var skipCount = this._skipCount;
          var count = this._count++;
          if (count < skipCount) {
              this._ring[count] = value;
          }
          else {
              var currentIndex = count % skipCount;
              var ring = this._ring;
              var oldValue = ring[currentIndex];
              ring[currentIndex] = value;
              this.destination.next(oldValue);
          }
      };
      return SkipLastSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipUntilSubscriber, _super);
      function SkipUntilSubscriber(destination, notifier) {
          var _this = _super.call(this, destination) || this;
          _this.hasValue = false;
          var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
          _this.add(innerSubscriber);
          _this.innerSubscription = innerSubscriber;
          subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
          return _this;
      }
      SkipUntilSubscriber.prototype._next = function (value) {
          if (this.hasValue) {
              _super.prototype._next.call(this, value);
          }
      };
      SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.hasValue = true;
          if (this.innerSubscription) {
              this.innerSubscription.unsubscribe();
          }
      };
      SkipUntilSubscriber.prototype.notifyComplete = function () {
      };
      return SkipUntilSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipWhileSubscriber, _super);
      function SkipWhileSubscriber(destination, predicate) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.skipping = true;
          _this.index = 0;
          return _this;
      }
      SkipWhileSubscriber.prototype._next = function (value) {
          var destination = this.destination;
          if (this.skipping) {
              this.tryCallPredicate(value);
          }
          if (!this.skipping) {
              destination.next(value);
          }
      };
      SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
          try {
              var result = this.predicate(value, this.index++);
              this.skipping = Boolean(result);
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      return SkipWhileSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
  var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
      __extends(SubscribeOnObservable, _super);
      function SubscribeOnObservable(source, delayTime, scheduler) {
          if (delayTime === void 0) {
              delayTime = 0;
          }
          if (scheduler === void 0) {
              scheduler = asap;
          }
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.delayTime = delayTime;
          _this.scheduler = scheduler;
          if (!isNumeric(delayTime) || delayTime < 0) {
              _this.delayTime = 0;
          }
          if (!scheduler || typeof scheduler.schedule !== 'function') {
              _this.scheduler = asap;
          }
          return _this;
      }
      SubscribeOnObservable.create = function (source, delay, scheduler) {
          if (delay === void 0) {
              delay = 0;
          }
          if (scheduler === void 0) {
              scheduler = asap;
          }
          return new SubscribeOnObservable(source, delay, scheduler);
      };
      SubscribeOnObservable.dispatch = function (arg) {
          var source = arg.source, subscriber = arg.subscriber;
          return this.add(source.subscribe(subscriber));
      };
      SubscribeOnObservable.prototype._subscribe = function (subscriber) {
          var delay = this.delayTime;
          var source = this.source;
          var scheduler = this.scheduler;
          return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
              source: source, subscriber: subscriber
          });
      };
      return SubscribeOnObservable;
  }(Observable));

  /** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
  function switchMap(project, resultSelector) {
      if (typeof resultSelector === 'function') {
          return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
      }
      return function (source) { return source.lift(new SwitchMapOperator(project)); };
  }
  var SwitchMapOperator = /*@__PURE__*/ (function () {
      function SwitchMapOperator(project) {
          this.project = project;
      }
      SwitchMapOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
      };
      return SwitchMapOperator;
  }());
  var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SwitchMapSubscriber, _super);
      function SwitchMapSubscriber(destination, project) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.index = 0;
          return _this;
      }
      SwitchMapSubscriber.prototype._next = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (error) {
              this.destination.error(error);
              return;
          }
          this._innerSub(result, value, index);
      };
      SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
          var innerSubscription = this.innerSubscription;
          if (innerSubscription) {
              innerSubscription.unsubscribe();
          }
          var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
          var destination = this.destination;
          destination.add(innerSubscriber);
          this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);
      };
      SwitchMapSubscriber.prototype._complete = function () {
          var innerSubscription = this.innerSubscription;
          if (!innerSubscription || innerSubscription.closed) {
              _super.prototype._complete.call(this);
          }
          this.unsubscribe();
      };
      SwitchMapSubscriber.prototype._unsubscribe = function () {
          this.innerSubscription = null;
      };
      SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
          var destination = this.destination;
          destination.remove(innerSub);
          this.innerSubscription = null;
          if (this.isStopped) {
              _super.prototype._complete.call(this);
          }
      };
      SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      return SwitchMapSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeUntilSubscriber, _super);
      function TakeUntilSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.seenValue = false;
          return _this;
      }
      TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.seenValue = true;
          this.complete();
      };
      TakeUntilSubscriber.prototype.notifyComplete = function () {
      };
      return TakeUntilSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeWhileSubscriber, _super);
      function TakeWhileSubscriber(destination, predicate, inclusive) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.inclusive = inclusive;
          _this.index = 0;
          return _this;
      }
      TakeWhileSubscriber.prototype._next = function (value) {
          var destination = this.destination;
          var result;
          try {
              result = this.predicate(value, this.index++);
          }
          catch (err) {
              destination.error(err);
              return;
          }
          this.nextOrComplete(value, result);
      };
      TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
          var destination = this.destination;
          if (Boolean(predicateResult)) {
              destination.next(value);
          }
          else {
              if (this.inclusive) {
                  destination.next(value);
              }
              destination.complete();
          }
      };
      return TakeWhileSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
  var TapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TapSubscriber, _super);
      function TapSubscriber(destination, observerOrNext, error, complete) {
          var _this = _super.call(this, destination) || this;
          _this._tapNext = noop;
          _this._tapError = noop;
          _this._tapComplete = noop;
          _this._tapError = error || noop;
          _this._tapComplete = complete || noop;
          if (isFunction(observerOrNext)) {
              _this._context = _this;
              _this._tapNext = observerOrNext;
          }
          else if (observerOrNext) {
              _this._context = observerOrNext;
              _this._tapNext = observerOrNext.next || noop;
              _this._tapError = observerOrNext.error || noop;
              _this._tapComplete = observerOrNext.complete || noop;
          }
          return _this;
      }
      TapSubscriber.prototype._next = function (value) {
          try {
              this._tapNext.call(this._context, value);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(value);
      };
      TapSubscriber.prototype._error = function (err) {
          try {
              this._tapError.call(this._context, err);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.error(err);
      };
      TapSubscriber.prototype._complete = function () {
          try {
              this._tapComplete.call(this._context);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          return this.destination.complete();
      };
      return TapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrottleSubscriber, _super);
      function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.durationSelector = durationSelector;
          _this._leading = _leading;
          _this._trailing = _trailing;
          _this._hasValue = false;
          return _this;
      }
      ThrottleSubscriber.prototype._next = function (value) {
          this._hasValue = true;
          this._sendValue = value;
          if (!this._throttled) {
              if (this._leading) {
                  this.send();
              }
              else {
                  this.throttle(value);
              }
          }
      };
      ThrottleSubscriber.prototype.send = function () {
          var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
          if (_hasValue) {
              this.destination.next(_sendValue);
              this.throttle(_sendValue);
          }
          this._hasValue = false;
          this._sendValue = null;
      };
      ThrottleSubscriber.prototype.throttle = function (value) {
          var duration = this.tryDurationSelector(value);
          if (!!duration) {
              this.add(this._throttled = subscribeToResult(this, duration));
          }
      };
      ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
          try {
              return this.durationSelector(value);
          }
          catch (err) {
              this.destination.error(err);
              return null;
          }
      };
      ThrottleSubscriber.prototype.throttlingDone = function () {
          var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
          if (_throttled) {
              _throttled.unsubscribe();
          }
          this._throttled = null;
          if (_trailing) {
              this.send();
          }
      };
      ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.throttlingDone();
      };
      ThrottleSubscriber.prototype.notifyComplete = function () {
          this.throttlingDone();
      };
      return ThrottleSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
  var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrottleTimeSubscriber, _super);
      function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
          var _this = _super.call(this, destination) || this;
          _this.duration = duration;
          _this.scheduler = scheduler;
          _this.leading = leading;
          _this.trailing = trailing;
          _this._hasTrailingValue = false;
          _this._trailingValue = null;
          return _this;
      }
      ThrottleTimeSubscriber.prototype._next = function (value) {
          if (this.throttled) {
              if (this.trailing) {
                  this._trailingValue = value;
                  this._hasTrailingValue = true;
              }
          }
          else {
              this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
              if (this.leading) {
                  this.destination.next(value);
              }
              else if (this.trailing) {
                  this._trailingValue = value;
                  this._hasTrailingValue = true;
              }
          }
      };
      ThrottleTimeSubscriber.prototype._complete = function () {
          if (this._hasTrailingValue) {
              this.destination.next(this._trailingValue);
              this.destination.complete();
          }
          else {
              this.destination.complete();
          }
      };
      ThrottleTimeSubscriber.prototype.clearThrottle = function () {
          var throttled = this.throttled;
          if (throttled) {
              if (this.trailing && this._hasTrailingValue) {
                  this.destination.next(this._trailingValue);
                  this._trailingValue = null;
                  this._hasTrailingValue = false;
              }
              throttled.unsubscribe();
              this.remove(throttled);
              this.throttled = null;
          }
      };
      return ThrottleTimeSubscriber;
  }(Subscriber));
  function dispatchNext$3(arg) {
      var subscriber = arg.subscriber;
      subscriber.clearThrottle();
  }

  /** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TimeoutWithSubscriber, _super);
      function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.absoluteTimeout = absoluteTimeout;
          _this.waitFor = waitFor;
          _this.withObservable = withObservable;
          _this.scheduler = scheduler;
          _this.action = null;
          _this.scheduleTimeout();
          return _this;
      }
      TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
          var withObservable = subscriber.withObservable;
          subscriber._unsubscribeAndRecycle();
          subscriber.add(subscribeToResult(subscriber, withObservable));
      };
      TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
          var action = this.action;
          if (action) {
              this.action = action.schedule(this, this.waitFor);
          }
          else {
              this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
          }
      };
      TimeoutWithSubscriber.prototype._next = function (value) {
          if (!this.absoluteTimeout) {
              this.scheduleTimeout();
          }
          _super.prototype._next.call(this, value);
      };
      TimeoutWithSubscriber.prototype._unsubscribe = function () {
          this.action = null;
          this.scheduler = null;
          this.withObservable = null;
      };
      return TimeoutWithSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var WindowSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(WindowSubscriber, _super);
      function WindowSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.window = new Subject();
          destination.next(_this.window);
          return _this;
      }
      WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openWindow();
      };
      WindowSubscriber.prototype.notifyError = function (error, innerSub) {
          this._error(error);
      };
      WindowSubscriber.prototype.notifyComplete = function (innerSub) {
          this._complete();
      };
      WindowSubscriber.prototype._next = function (value) {
          this.window.next(value);
      };
      WindowSubscriber.prototype._error = function (err) {
          this.window.error(err);
          this.destination.error(err);
      };
      WindowSubscriber.prototype._complete = function () {
          this.window.complete();
          this.destination.complete();
      };
      WindowSubscriber.prototype._unsubscribe = function () {
          this.window = null;
      };
      WindowSubscriber.prototype.openWindow = function () {
          var prevWindow = this.window;
          if (prevWindow) {
              prevWindow.complete();
          }
          var destination = this.destination;
          var newWindow = this.window = new Subject();
          destination.next(newWindow);
      };
      return WindowSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
  var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(WindowCountSubscriber, _super);
      function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.windowSize = windowSize;
          _this.startWindowEvery = startWindowEvery;
          _this.windows = [new Subject()];
          _this.count = 0;
          destination.next(_this.windows[0]);
          return _this;
      }
      WindowCountSubscriber.prototype._next = function (value) {
          var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
          var destination = this.destination;
          var windowSize = this.windowSize;
          var windows = this.windows;
          var len = windows.length;
          for (var i = 0; i < len && !this.closed; i++) {
              windows[i].next(value);
          }
          var c = this.count - windowSize + 1;
          if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
              windows.shift().complete();
          }
          if (++this.count % startWindowEvery === 0 && !this.closed) {
              var window_1 = new Subject();
              windows.push(window_1);
              destination.next(window_1);
          }
      };
      WindowCountSubscriber.prototype._error = function (err) {
          var windows = this.windows;
          if (windows) {
              while (windows.length > 0 && !this.closed) {
                  windows.shift().error(err);
              }
          }
          this.destination.error(err);
      };
      WindowCountSubscriber.prototype._complete = function () {
          var windows = this.windows;
          if (windows) {
              while (windows.length > 0 && !this.closed) {
                  windows.shift().complete();
              }
          }
          this.destination.complete();
      };
      WindowCountSubscriber.prototype._unsubscribe = function () {
          this.count = 0;
          this.windows = null;
      };
      return WindowCountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
  var CountedSubject = /*@__PURE__*/ (function (_super) {
      __extends(CountedSubject, _super);
      function CountedSubject() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this._numberOfNextedValues = 0;
          return _this;
      }
      CountedSubject.prototype.next = function (value) {
          this._numberOfNextedValues++;
          _super.prototype.next.call(this, value);
      };
      Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
          get: function () {
              return this._numberOfNextedValues;
          },
          enumerable: true,
          configurable: true
      });
      return CountedSubject;
  }(Subject));
  var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(WindowTimeSubscriber, _super);
      function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.windowTimeSpan = windowTimeSpan;
          _this.windowCreationInterval = windowCreationInterval;
          _this.maxWindowSize = maxWindowSize;
          _this.scheduler = scheduler;
          _this.windows = [];
          var window = _this.openWindow();
          if (windowCreationInterval !== null && windowCreationInterval >= 0) {
              var closeState = { subscriber: _this, window: window, context: null };
              var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
              _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
              _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
          }
          else {
              var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
              _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
          }
          return _this;
      }
      WindowTimeSubscriber.prototype._next = function (value) {
          var windows = this.windows;
          var len = windows.length;
          for (var i = 0; i < len; i++) {
              var window_1 = windows[i];
              if (!window_1.closed) {
                  window_1.next(value);
                  if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                      this.closeWindow(window_1);
                  }
              }
          }
      };
      WindowTimeSubscriber.prototype._error = function (err) {
          var windows = this.windows;
          while (windows.length > 0) {
              windows.shift().error(err);
          }
          this.destination.error(err);
      };
      WindowTimeSubscriber.prototype._complete = function () {
          var windows = this.windows;
          while (windows.length > 0) {
              var window_2 = windows.shift();
              if (!window_2.closed) {
                  window_2.complete();
              }
          }
          this.destination.complete();
      };
      WindowTimeSubscriber.prototype.openWindow = function () {
          var window = new CountedSubject();
          this.windows.push(window);
          var destination = this.destination;
          destination.next(window);
          return window;
      };
      WindowTimeSubscriber.prototype.closeWindow = function (window) {
          window.complete();
          var windows = this.windows;
          windows.splice(windows.indexOf(window), 1);
      };
      return WindowTimeSubscriber;
  }(Subscriber));
  function dispatchWindowTimeSpanOnly(state) {
      var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
      if (window) {
          subscriber.closeWindow(window);
      }
      state.window = subscriber.openWindow();
      this.schedule(state, windowTimeSpan);
  }
  function dispatchWindowCreation(state) {
      var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
      var window = subscriber.openWindow();
      var action = this;
      var context = { action: action, subscription: null };
      var timeSpanState = { subscriber: subscriber, window: window, context: context };
      context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
      action.add(context.subscription);
      action.schedule(state, windowCreationInterval);
  }
  function dispatchWindowClose(state) {
      var subscriber = state.subscriber, window = state.window, context = state.context;
      if (context && context.action && context.subscription) {
          context.action.remove(context.subscription);
      }
      subscriber.closeWindow(window);
  }

  /** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(WindowToggleSubscriber, _super);
      function WindowToggleSubscriber(destination, openings, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.openings = openings;
          _this.closingSelector = closingSelector;
          _this.contexts = [];
          _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
          return _this;
      }
      WindowToggleSubscriber.prototype._next = function (value) {
          var contexts = this.contexts;
          if (contexts) {
              var len = contexts.length;
              for (var i = 0; i < len; i++) {
                  contexts[i].window.next(value);
              }
          }
      };
      WindowToggleSubscriber.prototype._error = function (err) {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
              var len = contexts.length;
              var index = -1;
              while (++index < len) {
                  var context_1 = contexts[index];
                  context_1.window.error(err);
                  context_1.subscription.unsubscribe();
              }
          }
          _super.prototype._error.call(this, err);
      };
      WindowToggleSubscriber.prototype._complete = function () {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
              var len = contexts.length;
              var index = -1;
              while (++index < len) {
                  var context_2 = contexts[index];
                  context_2.window.complete();
                  context_2.subscription.unsubscribe();
              }
          }
          _super.prototype._complete.call(this);
      };
      WindowToggleSubscriber.prototype._unsubscribe = function () {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
              var len = contexts.length;
              var index = -1;
              while (++index < len) {
                  var context_3 = contexts[index];
                  context_3.window.unsubscribe();
                  context_3.subscription.unsubscribe();
              }
          }
      };
      WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          if (outerValue === this.openings) {
              var closingNotifier = void 0;
              try {
                  var closingSelector = this.closingSelector;
                  closingNotifier = closingSelector(innerValue);
              }
              catch (e) {
                  return this.error(e);
              }
              var window_1 = new Subject();
              var subscription = new Subscription();
              var context_4 = { window: window_1, subscription: subscription };
              this.contexts.push(context_4);
              var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
              if (innerSubscription.closed) {
                  this.closeWindow(this.contexts.length - 1);
              }
              else {
                  innerSubscription.context = context_4;
                  subscription.add(innerSubscription);
              }
              this.destination.next(window_1);
          }
          else {
              this.closeWindow(this.contexts.indexOf(outerValue));
          }
      };
      WindowToggleSubscriber.prototype.notifyError = function (err) {
          this.error(err);
      };
      WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
          if (inner !== this.openSubscription) {
              this.closeWindow(this.contexts.indexOf(inner.context));
          }
      };
      WindowToggleSubscriber.prototype.closeWindow = function (index) {
          if (index === -1) {
              return;
          }
          var contexts = this.contexts;
          var context = contexts[index];
          var window = context.window, subscription = context.subscription;
          contexts.splice(index, 1);
          window.complete();
          subscription.unsubscribe();
      };
      return WindowToggleSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
      __extends(WindowSubscriber, _super);
      function WindowSubscriber(destination, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.closingSelector = closingSelector;
          _this.openWindow();
          return _this;
      }
      WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openWindow(innerSub);
      };
      WindowSubscriber.prototype.notifyError = function (error, innerSub) {
          this._error(error);
      };
      WindowSubscriber.prototype.notifyComplete = function (innerSub) {
          this.openWindow(innerSub);
      };
      WindowSubscriber.prototype._next = function (value) {
          this.window.next(value);
      };
      WindowSubscriber.prototype._error = function (err) {
          this.window.error(err);
          this.destination.error(err);
          this.unsubscribeClosingNotification();
      };
      WindowSubscriber.prototype._complete = function () {
          this.window.complete();
          this.destination.complete();
          this.unsubscribeClosingNotification();
      };
      WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
          if (this.closingNotification) {
              this.closingNotification.unsubscribe();
          }
      };
      WindowSubscriber.prototype.openWindow = function (innerSub) {
          if (innerSub === void 0) {
              innerSub = null;
          }
          if (innerSub) {
              this.remove(innerSub);
              innerSub.unsubscribe();
          }
          var prevWindow = this.window;
          if (prevWindow) {
              prevWindow.complete();
          }
          var window = this.window = new Subject();
          this.destination.next(window);
          var closingNotifier;
          try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector();
          }
          catch (e) {
              this.destination.error(e);
              this.window.error(e);
              return;
          }
          this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
      };
      return WindowSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  function withLatestFrom() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      return function (source) {
          var project;
          if (typeof args[args.length - 1] === 'function') {
              project = args.pop();
          }
          var observables = args;
          return source.lift(new WithLatestFromOperator(observables, project));
      };
  }
  var WithLatestFromOperator = /*@__PURE__*/ (function () {
      function WithLatestFromOperator(observables, project) {
          this.observables = observables;
          this.project = project;
      }
      WithLatestFromOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
      };
      return WithLatestFromOperator;
  }());
  var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(WithLatestFromSubscriber, _super);
      function WithLatestFromSubscriber(destination, observables, project) {
          var _this = _super.call(this, destination) || this;
          _this.observables = observables;
          _this.project = project;
          _this.toRespond = [];
          var len = observables.length;
          _this.values = new Array(len);
          for (var i = 0; i < len; i++) {
              _this.toRespond.push(i);
          }
          for (var i = 0; i < len; i++) {
              var observable = observables[i];
              _this.add(subscribeToResult(_this, observable, observable, i));
          }
          return _this;
      }
      WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.values[outerIndex] = innerValue;
          var toRespond = this.toRespond;
          if (toRespond.length > 0) {
              var found = toRespond.indexOf(outerIndex);
              if (found !== -1) {
                  toRespond.splice(found, 1);
              }
          }
      };
      WithLatestFromSubscriber.prototype.notifyComplete = function () {
      };
      WithLatestFromSubscriber.prototype._next = function (value) {
          if (this.toRespond.length === 0) {
              var args = [value].concat(this.values);
              if (this.project) {
                  this._tryProject(args);
              }
              else {
                  this.destination.next(args);
              }
          }
      };
      WithLatestFromSubscriber.prototype._tryProject = function (args) {
          var result;
          try {
              result = this.project.apply(this, args);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return WithLatestFromSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var __assign$1 = function() {
      __assign$1 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign$1.apply(this, arguments);
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$2 = function(d, b) {
      extendStatics$2 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics$2(d, b);
  };

  function __extends$2(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics$2(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign$2 = function() {
      __assign$2 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign$2.apply(this, arguments);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
   */
  var CONSTANTS = {
      /**
       * @define {boolean} Whether this is the client Node.js SDK.
       */
      NODE_CLIENT: false,
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: '${JSCORE_VERSION}'
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Throws an error if the provided assertion is falsy
   */
  var assert = function (assertion, message) {
      if (!assertion) {
          throw assertionError(message);
      }
  };
  /**
   * Returns an Error object suitable for throwing.
   */
  var assertionError = function (message) {
      return new Error('Firebase Database (' +
          CONSTANTS.SDK_VERSION +
          ') INTERNAL ASSERT FAILED: ' +
          message);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var stringToByteArray$1 = function (str) {
      // TODO(user): Use native implementations if/when available
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if ((c & 0xfc00) === 0xd800 &&
              i + 1 < str.length &&
              (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
              // Surrogate Pair
              c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Turns an array of numbers into the string given by the concatenation of the
   * characters to which the numbers correspond.
   * @param bytes Array of numbers representing characters.
   * @return Stringification of the array.
   */
  var byteArrayToString = function (bytes) {
      // TODO(user): Use native implementations if/when available
      var out = [];
      var pos = 0, c = 0;
      while (pos < bytes.length) {
          var c1 = bytes[pos++];
          if (c1 < 128) {
              out[c++] = String.fromCharCode(c1);
          }
          else if (c1 > 191 && c1 < 224) {
              var c2 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
          }
          else if (c1 > 239 && c1 < 365) {
              // Surrogate Pair
              var c2 = bytes[pos++];
              var c3 = bytes[pos++];
              var c4 = bytes[pos++];
              var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                  0x10000;
              out[c++] = String.fromCharCode(0xd800 + (u >> 10));
              out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
          }
          else {
              var c2 = bytes[pos++];
              var c3 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          }
      }
      return out.join('');
  };
  // We define it as an object literal instead of a class because a class compiled down to es5 can't
  // be treeshaked. https://github.com/rollup/rollup/issues/1691
  // Static lookup maps, lazily populated by init_()
  var base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
          return this.ENCODED_VALS_BASE + '+/=';
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
          return this.ENCODED_VALS_BASE + '-_.';
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === 'function',
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray: function (input, webSafe) {
          if (!Array.isArray(input)) {
              throw Error('encodeByteArray takes an array as a parameter');
          }
          this.init_();
          var byteToCharMap = webSafe
              ? this.byteToCharMapWebSafe_
              : this.byteToCharMap_;
          var output = [];
          for (var i = 0; i < input.length; i += 3) {
              var byte1 = input[i];
              var haveByte2 = i + 1 < input.length;
              var byte2 = haveByte2 ? input[i + 1] : 0;
              var haveByte3 = i + 2 < input.length;
              var byte3 = haveByte3 ? input[i + 2] : 0;
              var outByte1 = byte1 >> 2;
              var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
              var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
              var outByte4 = byte3 & 0x3f;
              if (!haveByte3) {
                  outByte4 = 64;
                  if (!haveByte2) {
                      outByte3 = 64;
                  }
              }
              output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
          }
          return output.join('');
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString: function (input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return btoa(input);
          }
          return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString: function (input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return atob(input);
          }
          return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray: function (input, webSafe) {
          this.init_();
          var charToByteMap = webSafe
              ? this.charToByteMapWebSafe_
              : this.charToByteMap_;
          var output = [];
          for (var i = 0; i < input.length;) {
              var byte1 = charToByteMap[input.charAt(i++)];
              var haveByte2 = i < input.length;
              var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
              ++i;
              var haveByte3 = i < input.length;
              var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              var haveByte4 = i < input.length;
              var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                  throw Error();
              }
              var outByte1 = (byte1 << 2) | (byte2 >> 4);
              output.push(outByte1);
              if (byte3 !== 64) {
                  var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                  output.push(outByte2);
                  if (byte4 !== 64) {
                      var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                      output.push(outByte3);
                  }
              }
          }
          return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_: function () {
          if (!this.byteToCharMap_) {
              this.byteToCharMap_ = {};
              this.charToByteMap_ = {};
              this.byteToCharMapWebSafe_ = {};
              this.charToByteMapWebSafe_ = {};
              // We want quick mappings back and forth, so we precompute two maps.
              for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                  this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                  this.charToByteMap_[this.byteToCharMap_[i]] = i;
                  this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                  this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                  // Be forgiving when decoding and correctly decode both encodings.
                  if (i >= this.ENCODED_VALS_BASE.length) {
                      this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                      this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                  }
              }
          }
      }
  };
  /**
   * URL-safe base64 encoding
   */
  var base64Encode = function (str) {
      var utf8Bytes = stringToByteArray$1(str);
      return base64.encodeByteArray(utf8Bytes, true);
  };
  /**
   * URL-safe base64 encoding (without "." padding in the end).
   * e.g. Used in JSON Web Token (JWT) parts.
   */
  var base64urlEncodeWithoutPadding = function (str) {
      // Use base64url encoding and remove padding in the end (dot characters).
      return base64Encode(str).replace(/\./g, '');
  };
  /**
   * URL-safe base64 decoding
   *
   * NOTE: DO NOT use the global atob() function - it does NOT support the
   * base64Url variant encoding.
   *
   * @param str To be decoded
   * @return Decoded result, if possible
   */
  var base64Decode = function (str) {
      try {
          return base64.decodeString(str, true);
      }
      catch (e) {
          console.error('base64Decode failed: ', e);
      }
      return null;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Do a deep-copy of basic JavaScript Objects or Arrays.
   */
  function deepCopy(value) {
      return deepExtend(undefined, value);
  }
  /**
   * Copy properties from source to target (recursively allows extension
   * of Objects and Arrays).  Scalar values in the target are over-written.
   * If target is undefined, an object of the appropriate type will be created
   * (and returned).
   *
   * We recursively copy all child properties of plain Objects in the source- so
   * that namespace- like dictionaries are merged.
   *
   * Note that the target can be a function, in which case the properties in
   * the source Object are copied onto it as static properties of the Function.
   *
   * Note: we don't merge __proto__ to prevent prototype pollution
   */
  function deepExtend(target, source) {
      if (!(source instanceof Object)) {
          return source;
      }
      switch (source.constructor) {
          case Date:
              // Treat Dates like scalars; if the target date object had any child
              // properties - they will be lost!
              var dateValue = source;
              return new Date(dateValue.getTime());
          case Object:
              if (target === undefined) {
                  target = {};
              }
              break;
          case Array:
              // Always copy the array source and overwrite the target.
              target = [];
              break;
          default:
              // Not a plain Object - treat it as a scalar.
              return source;
      }
      for (var prop in source) {
          // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
          if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
              continue;
          }
          target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
  }
  function isValidKey(key) {
      return key !== '__proto__';
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Deferred = /** @class */ (function () {
      function Deferred() {
          var _this = this;
          this.reject = function () { };
          this.resolve = function () { };
          this.promise = new Promise(function (resolve, reject) {
              _this.resolve = resolve;
              _this.reject = reject;
          });
      }
      /**
       * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      Deferred.prototype.wrapCallback = function (callback) {
          var _this = this;
          return function (error, value) {
              if (error) {
                  _this.reject(error);
              }
              else {
                  _this.resolve(value);
              }
              if (typeof callback === 'function') {
                  // Attaching noop handler just in case developer wasn't expecting
                  // promises
                  _this.promise.catch(function () { });
                  // Some of our callbacks don't expect a value and our own tests
                  // assert that the parameter length is 1
                  if (callback.length === 1) {
                      callback(error);
                  }
                  else {
                      callback(error, value);
                  }
              }
          };
      };
      return Deferred;
  }());

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function createMockUserToken(token, projectId) {
      if (token.uid) {
          throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      // Unsecured JWTs use "none" as the algorithm.
      var header = {
          alg: 'none',
          type: 'JWT'
      };
      var project = projectId || 'demo-project';
      var iat = token.iat || 0;
      var sub = token.sub || token.user_id;
      if (!sub) {
          throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      var payload = __assign$2({ 
          // Set all required fields to decent defaults
          iss: "https://securetoken.google.com/" + project, aud: project, iat: iat, exp: iat + 3600, auth_time: iat, sub: sub, user_id: sub, firebase: {
              sign_in_provider: 'custom',
              identities: {}
          } }, token);
      // Unsecured JWTs use the empty string as a signature.
      var signature = '';
      return [
          base64urlEncodeWithoutPadding(JSON.stringify(header)),
          base64urlEncodeWithoutPadding(JSON.stringify(payload)),
          signature
      ].join('.');
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns navigator.userAgent string or '' if it's not defined.
   * @return user agent string
   */
  function getUA() {
      if (typeof navigator !== 'undefined' &&
          typeof navigator['userAgent'] === 'string') {
          return navigator['userAgent'];
      }
      else {
          return '';
      }
  }
  /**
   * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
   *
   * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
   * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
   * wait for a callback.
   */
  function isMobileCordova() {
      return (typeof window !== 'undefined' &&
          // @ts-ignore Setting up an broadly applicable index signature for Window
          // just to deal with this case would probably be a bad idea.
          !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
          /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
  }
  /**
   * Detect Node.js.
   *
   * @return true if Node.js environment is detected.
   */
  // Node detection logic from: https://github.com/iliakan/detect-node/
  function isNode() {
      try {
          return (Object.prototype.toString.call(global.process) === '[object process]');
      }
      catch (e) {
          return false;
      }
  }
  /**
   * Detect Browser Environment
   */
  function isBrowser() {
      return typeof self === 'object' && self.self === self;
  }
  function isBrowserExtension() {
      var runtime = typeof chrome === 'object'
          ? chrome.runtime
          : typeof browser === 'object'
              ? browser.runtime
              : undefined;
      return typeof runtime === 'object' && runtime.id !== undefined;
  }
  /**
   * Detect React Native.
   *
   * @return true if ReactNative environment is detected.
   */
  function isReactNative() {
      return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
  }
  /** Detects Electron apps. */
  function isElectron() {
      return getUA().indexOf('Electron/') >= 0;
  }
  /** Detects Internet Explorer. */
  function isIE() {
      var ua = getUA();
      return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
  }
  /** Detects Universal Windows Platform apps. */
  function isUWP() {
      return getUA().indexOf('MSAppHost/') >= 0;
  }
  /**
   * Detect whether the current SDK build is the Node version.
   *
   * @return true if it's the Node SDK build.
   */
  function isNodeSdk() {
      return CONSTANTS.NODE_ADMIN === true;
  }
  /** Returns true if we are running in Safari. */
  function isSafari() {
      return (!isNode() &&
          navigator.userAgent.includes('Safari') &&
          !navigator.userAgent.includes('Chrome'));
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ERROR_NAME = 'FirebaseError';
  // Based on code from:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
  var FirebaseError = /** @class */ (function (_super) {
      __extends$2(FirebaseError, _super);
      function FirebaseError(code, message, customData) {
          var _this = _super.call(this, message) || this;
          _this.code = code;
          _this.customData = customData;
          _this.name = ERROR_NAME;
          // Fix For ES5
          // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          Object.setPrototypeOf(_this, FirebaseError.prototype);
          // Maintains proper stack trace for where our error was thrown.
          // Only available on V8.
          if (Error.captureStackTrace) {
              Error.captureStackTrace(_this, ErrorFactory.prototype.create);
          }
          return _this;
      }
      return FirebaseError;
  }(Error));
  var ErrorFactory = /** @class */ (function () {
      function ErrorFactory(service, serviceName, errors) {
          this.service = service;
          this.serviceName = serviceName;
          this.errors = errors;
      }
      ErrorFactory.prototype.create = function (code) {
          var data = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              data[_i - 1] = arguments[_i];
          }
          var customData = data[0] || {};
          var fullCode = this.service + "/" + code;
          var template = this.errors[code];
          var message = template ? replaceTemplate(template, customData) : 'Error';
          // Service Name: Error message (service/code).
          var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
          var error = new FirebaseError(fullCode, fullMessage, customData);
          return error;
      };
      return ErrorFactory;
  }());
  function replaceTemplate(template, data) {
      return template.replace(PATTERN, function (_, key) {
          var value = data[key];
          return value != null ? String(value) : "<" + key + "?>";
      });
  }
  var PATTERN = /\{\$([^}]+)}/g;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Evaluates a JSON string into a javascript object.
   *
   * @param {string} str A string containing JSON.
   * @return {*} The javascript object representing the specified JSON.
   */
  function jsonEval(str) {
      return JSON.parse(str);
  }
  /**
   * Returns JSON representing a javascript object.
   * @param {*} data Javascript object to be stringified.
   * @return {string} The JSON contents of the object.
   */
  function stringify(data) {
      return JSON.stringify(data);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Decodes a Firebase auth. token into constituent parts.
   *
   * Notes:
   * - May return with invalid / incomplete claims if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var decode = function (token) {
      var header = {}, claims = {}, data = {}, signature = '';
      try {
          var parts = token.split('.');
          header = jsonEval(base64Decode(parts[0]) || '');
          claims = jsonEval(base64Decode(parts[1]) || '');
          signature = parts[2];
          data = claims['d'] || {};
          delete claims['d'];
      }
      catch (e) { }
      return {
          header: header,
          claims: claims,
          data: data,
          signature: signature
      };
  };
  /**
   * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var isValidFormat = function (token) {
      var decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
  };
  /**
   * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var isAdmin = function (token) {
      var claims = decode(token).claims;
      return typeof claims === 'object' && claims['admin'] === true;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return obj[key];
      }
      else {
          return undefined;
      }
  }
  function isEmpty$1(obj) {
      for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              return false;
          }
      }
      return true;
  }
  function map$1(obj, fn, contextObj) {
      var res = {};
      for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              res[key] = fn.call(contextObj, obj[key], key, obj);
          }
      }
      return res;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
   * params object (e.g. {arg: 'val', arg2: 'val2'})
   * Note: You must prepend it with ? when adding it to a URL.
   */
  function querystring(querystringParams) {
      var params = [];
      var _loop_1 = function (key, value) {
          if (Array.isArray(value)) {
              value.forEach(function (arrayVal) {
                  params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
              });
          }
          else {
              params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
          }
      };
      for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
          var _b = _a[_i], key = _b[0], value = _b[1];
          _loop_1(key, value);
      }
      return params.length ? '&' + params.join('&') : '';
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview SHA-1 cryptographic hash.
   * Variable names follow the notation in FIPS PUB 180-3:
   * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
   *
   * Usage:
   *   var sha1 = new sha1();
   *   sha1.update(bytes);
   *   var hash = sha1.digest();
   *
   * Performance:
   *   Chrome 23:   ~400 Mbit/s
   *   Firefox 16:  ~250 Mbit/s
   *
   */
  /**
   * SHA-1 cryptographic hash constructor.
   *
   * The properties declared here are discussed in the above algorithm document.
   * @constructor
   * @final
   * @struct
   */
  var Sha1 = /** @class */ (function () {
      function Sha1() {
          /**
           * Holds the previous values of accumulated variables a-e in the compress_
           * function.
           * @private
           */
          this.chain_ = [];
          /**
           * A buffer holding the partially computed hash result.
           * @private
           */
          this.buf_ = [];
          /**
           * An array of 80 bytes, each a part of the message to be hashed.  Referred to
           * as the message schedule in the docs.
           * @private
           */
          this.W_ = [];
          /**
           * Contains data needed to pad messages less than 64 bytes.
           * @private
           */
          this.pad_ = [];
          /**
           * @private {number}
           */
          this.inbuf_ = 0;
          /**
           * @private {number}
           */
          this.total_ = 0;
          this.blockSize = 512 / 8;
          this.pad_[0] = 128;
          for (var i = 1; i < this.blockSize; ++i) {
              this.pad_[i] = 0;
          }
          this.reset();
      }
      Sha1.prototype.reset = function () {
          this.chain_[0] = 0x67452301;
          this.chain_[1] = 0xefcdab89;
          this.chain_[2] = 0x98badcfe;
          this.chain_[3] = 0x10325476;
          this.chain_[4] = 0xc3d2e1f0;
          this.inbuf_ = 0;
          this.total_ = 0;
      };
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      Sha1.prototype.compress_ = function (buf, offset) {
          if (!offset) {
              offset = 0;
          }
          var W = this.W_;
          // get 16 big endian words
          if (typeof buf === 'string') {
              for (var i = 0; i < 16; i++) {
                  // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                  // have a bug that turns the post-increment ++ operator into pre-increment
                  // during JIT compilation.  We have code that depends heavily on SHA-1 for
                  // correctness and which is affected by this bug, so I've removed all uses
                  // of post-increment ++ in which the result value is used.  We can revert
                  // this change once the Safari bug
                  // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                  // most clients have been updated.
                  W[i] =
                      (buf.charCodeAt(offset) << 24) |
                          (buf.charCodeAt(offset + 1) << 16) |
                          (buf.charCodeAt(offset + 2) << 8) |
                          buf.charCodeAt(offset + 3);
                  offset += 4;
              }
          }
          else {
              for (var i = 0; i < 16; i++) {
                  W[i] =
                      (buf[offset] << 24) |
                          (buf[offset + 1] << 16) |
                          (buf[offset + 2] << 8) |
                          buf[offset + 3];
                  offset += 4;
              }
          }
          // expand to 80 words
          for (var i = 16; i < 80; i++) {
              var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
          }
          var a = this.chain_[0];
          var b = this.chain_[1];
          var c = this.chain_[2];
          var d = this.chain_[3];
          var e = this.chain_[4];
          var f, k;
          // TODO(user): Try to unroll this loop to speed up the computation.
          for (var i = 0; i < 80; i++) {
              if (i < 40) {
                  if (i < 20) {
                      f = d ^ (b & (c ^ d));
                      k = 0x5a827999;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0x6ed9eba1;
                  }
              }
              else {
                  if (i < 60) {
                      f = (b & c) | (d & (b | c));
                      k = 0x8f1bbcdc;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0xca62c1d6;
                  }
              }
              var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
              e = d;
              d = c;
              c = ((b << 30) | (b >>> 2)) & 0xffffffff;
              b = a;
              a = t;
          }
          this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
          this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
          this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
          this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
          this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
      };
      Sha1.prototype.update = function (bytes, length) {
          // TODO(johnlenz): tighten the function signature and remove this check
          if (bytes == null) {
              return;
          }
          if (length === undefined) {
              length = bytes.length;
          }
          var lengthMinusBlock = length - this.blockSize;
          var n = 0;
          // Using local instead of member variables gives ~5% speedup on Firefox 16.
          var buf = this.buf_;
          var inbuf = this.inbuf_;
          // The outer while loop should execute at most twice.
          while (n < length) {
              // When we have no data in the block to top up, we can directly process the
              // input buffer (assuming it contains sufficient data). This gives ~25%
              // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
              // the data is provided in large chunks (or in multiples of 64 bytes).
              if (inbuf === 0) {
                  while (n <= lengthMinusBlock) {
                      this.compress_(bytes, n);
                      n += this.blockSize;
                  }
              }
              if (typeof bytes === 'string') {
                  while (n < length) {
                      buf[inbuf] = bytes.charCodeAt(n);
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
              else {
                  while (n < length) {
                      buf[inbuf] = bytes[n];
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
          }
          this.inbuf_ = inbuf;
          this.total_ += length;
      };
      /** @override */
      Sha1.prototype.digest = function () {
          var digest = [];
          var totalBits = this.total_ * 8;
          // Add pad 0x80 0x00*.
          if (this.inbuf_ < 56) {
              this.update(this.pad_, 56 - this.inbuf_);
          }
          else {
              this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
          }
          // Add # bits.
          for (var i = this.blockSize - 1; i >= 56; i--) {
              this.buf_[i] = totalBits & 255;
              totalBits /= 256; // Don't use bit-shifting here!
          }
          this.compress_(this.buf_);
          var n = 0;
          for (var i = 0; i < 5; i++) {
              for (var j = 24; j >= 0; j -= 8) {
                  digest[n] = (this.chain_[i] >> j) & 255;
                  ++n;
              }
          }
          return digest;
      };
      return Sha1;
  }());

  /**
   * Helper to make a Subscribe function (just like Promise helps make a
   * Thenable).
   *
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function createSubscribe(executor, onNoObservers) {
      var proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
  }
  /**
   * Implement fan-out for any number of Observers attached via a subscribe
   * function.
   */
  var ObserverProxy = /** @class */ (function () {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      function ObserverProxy(executor, onNoObservers) {
          var _this = this;
          this.observers = [];
          this.unsubscribes = [];
          this.observerCount = 0;
          // Micro-task scheduling by calling task.then().
          this.task = Promise.resolve();
          this.finalized = false;
          this.onNoObservers = onNoObservers;
          // Call the executor asynchronously so subscribers that are called
          // synchronously after the creation of the subscribe function
          // can still receive the very first value generated in the executor.
          this.task
              .then(function () {
              executor(_this);
          })
              .catch(function (e) {
              _this.error(e);
          });
      }
      ObserverProxy.prototype.next = function (value) {
          this.forEachObserver(function (observer) {
              observer.next(value);
          });
      };
      ObserverProxy.prototype.error = function (error) {
          this.forEachObserver(function (observer) {
              observer.error(error);
          });
          this.close(error);
      };
      ObserverProxy.prototype.complete = function () {
          this.forEachObserver(function (observer) {
              observer.complete();
          });
          this.close();
      };
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber sychronously to their
       *   call to subscribe().
       */
      ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
          var _this = this;
          var observer;
          if (nextOrObserver === undefined &&
              error === undefined &&
              complete === undefined) {
              throw new Error('Missing Observer.');
          }
          // Assemble an Observer object when passed as callback functions.
          if (implementsAnyMethods(nextOrObserver, [
              'next',
              'error',
              'complete'
          ])) {
              observer = nextOrObserver;
          }
          else {
              observer = {
                  next: nextOrObserver,
                  error: error,
                  complete: complete
              };
          }
          if (observer.next === undefined) {
              observer.next = noop$1;
          }
          if (observer.error === undefined) {
              observer.error = noop$1;
          }
          if (observer.complete === undefined) {
              observer.complete = noop$1;
          }
          var unsub = this.unsubscribeOne.bind(this, this.observers.length);
          // Attempt to subscribe to a terminated Observable - we
          // just respond to the Observer with the final error or complete
          // event.
          if (this.finalized) {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              this.task.then(function () {
                  try {
                      if (_this.finalError) {
                          observer.error(_this.finalError);
                      }
                      else {
                          observer.complete();
                      }
                  }
                  catch (e) {
                      // nothing
                  }
                  return;
              });
          }
          this.observers.push(observer);
          return unsub;
      };
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      ObserverProxy.prototype.unsubscribeOne = function (i) {
          if (this.observers === undefined || this.observers[i] === undefined) {
              return;
          }
          delete this.observers[i];
          this.observerCount -= 1;
          if (this.observerCount === 0 && this.onNoObservers !== undefined) {
              this.onNoObservers(this);
          }
      };
      ObserverProxy.prototype.forEachObserver = function (fn) {
          if (this.finalized) {
              // Already closed by previous event....just eat the additional values.
              return;
          }
          // Since sendOne calls asynchronously - there is no chance that
          // this.observers will become undefined.
          for (var i = 0; i < this.observers.length; i++) {
              this.sendOne(i, fn);
          }
      };
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      ObserverProxy.prototype.sendOne = function (i, fn) {
          var _this = this;
          // Execute the callback asynchronously
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(function () {
              if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                  try {
                      fn(_this.observers[i]);
                  }
                  catch (e) {
                      // Ignore exceptions raised in Observers or missing methods of an
                      // Observer.
                      // Log error to console. b/31404806
                      if (typeof console !== 'undefined' && console.error) {
                          console.error(e);
                      }
                  }
              }
          });
      };
      ObserverProxy.prototype.close = function (err) {
          var _this = this;
          if (this.finalized) {
              return;
          }
          this.finalized = true;
          if (err !== undefined) {
              this.finalError = err;
          }
          // Proxy is no longer needed - garbage collect references
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(function () {
              _this.observers = undefined;
              _this.onNoObservers = undefined;
          });
      };
      return ObserverProxy;
  }());
  /**
   * Return true if the object passed in implements any of the named methods.
   */
  function implementsAnyMethods(obj, methods) {
      if (typeof obj !== 'object' || obj === null) {
          return false;
      }
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
          var method = methods_1[_i];
          if (method in obj && typeof obj[method] === 'function') {
              return true;
          }
      }
      return false;
  }
  function noop$1() {
      // do nothing
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Check to make sure the appropriate number of arguments are provided for a public function.
   * Throws an error if it fails.
   *
   * @param fnName The function name
   * @param minCount The minimum number of arguments to allow for the function call
   * @param maxCount The maximum number of argument to allow for the function call
   * @param argCount The actual number of arguments provided.
   */
  var validateArgCount = function (fnName, minCount, maxCount, argCount) {
      var argError;
      if (argCount < minCount) {
          argError = 'at least ' + minCount;
      }
      else if (argCount > maxCount) {
          argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
      }
      if (argError) {
          var error = fnName +
              ' failed: Was called with ' +
              argCount +
              (argCount === 1 ? ' argument.' : ' arguments.') +
              ' Expects ' +
              argError +
              '.';
          throw new Error(error);
      }
  };
  /**
   * Generates a string to prefix an error message about failed argument validation
   *
   * @param fnName The function name
   * @param argName The name of the argument
   * @return The prefix to add to the error thrown for validation.
   */
  function errorPrefix(fnName, argName) {
      return fnName + " failed: " + argName + " argument ";
  }
  function validateCallback(fnName, argumentName, 
  // eslint-disable-next-line @typescript-eslint/ban-types
  callback, optional) {
      if (optional && !callback) {
          return;
      }
      if (typeof callback !== 'function') {
          throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
      }
  }
  function validateContextObject(fnName, argumentName, context, optional) {
      if (optional && !context) {
          return;
      }
      if (typeof context !== 'object' || context === null) {
          throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
  // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
  // so it's been modified.
  // Note that not all Unicode characters appear as single characters in JavaScript strings.
  // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
  // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
  // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
  // pair).
  // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
  /**
   * @param {string} str
   * @return {Array}
   */
  var stringToByteArray = function (str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          // Is this the lead surrogate in a surrogate pair?
          if (c >= 0xd800 && c <= 0xdbff) {
              var high = c - 0xd800; // the high 10 bits.
              i++;
              assert(i < str.length, 'Surrogate pair missing trail surrogate.');
              var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
              c = 0x10000 + (high << 10) + low;
          }
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if (c < 65536) {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Calculate length without actually converting; useful for doing cheaper validation.
   * @param {string} str
   * @return {number}
   */
  var stringLength = function (str) {
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
              p++;
          }
          else if (c < 2048) {
              p += 2;
          }
          else if (c >= 0xd800 && c <= 0xdbff) {
              // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
              p += 4;
              i++; // skip trail surrogate.
          }
          else {
              p += 3;
          }
      }
      return p;
  };

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function getModularInstance(service) {
      if (service && service._delegate) {
          return service._delegate;
      }
      else {
          return service;
      }
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter$3(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator$3(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values$3(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read$3(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray$2(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  /**
   * Component for service name T, e.g. `auth`, `auth-internal`
   */
  var Component = /** @class */ (function () {
      /**
       *
       * @param name The public service name, e.g. app, auth, firestore, database
       * @param instanceFactory Service factory responsible for creating the public interface
       * @param type whether the service provided by the component is public or private
       */
      function Component(name, instanceFactory, type) {
          this.name = name;
          this.instanceFactory = instanceFactory;
          this.type = type;
          this.multipleInstances = false;
          /**
           * Properties to be added to the service namespace
           */
          this.serviceProps = {};
          this.instantiationMode = "LAZY" /* LAZY */;
          this.onInstanceCreated = null;
      }
      Component.prototype.setInstantiationMode = function (mode) {
          this.instantiationMode = mode;
          return this;
      };
      Component.prototype.setMultipleInstances = function (multipleInstances) {
          this.multipleInstances = multipleInstances;
          return this;
      };
      Component.prototype.setServiceProps = function (props) {
          this.serviceProps = props;
          return this;
      };
      Component.prototype.setInstanceCreatedCallback = function (callback) {
          this.onInstanceCreated = callback;
          return this;
      };
      return Component;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DEFAULT_ENTRY_NAME = '[DEFAULT]';

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
   * NameServiceMapping[T] is an alias for the type of the instance
   */
  var Provider = /** @class */ (function () {
      function Provider(name, container) {
          this.name = name;
          this.container = container;
          this.component = null;
          this.instances = new Map();
          this.instancesDeferred = new Map();
          this.instancesOptions = new Map();
          this.onInitCallbacks = new Map();
      }
      /**
       * @param identifier A provider can provide mulitple instances of a service
       * if this.component.multipleInstances is true.
       */
      Provider.prototype.get = function (identifier) {
          // if multipleInstances is not supported, use the default name
          var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          if (!this.instancesDeferred.has(normalizedIdentifier)) {
              var deferred = new Deferred();
              this.instancesDeferred.set(normalizedIdentifier, deferred);
              if (this.isInitialized(normalizedIdentifier) ||
                  this.shouldAutoInitialize()) {
                  // initialize the service if it can be auto-initialized
                  try {
                      var instance = this.getOrInitializeService({
                          instanceIdentifier: normalizedIdentifier
                      });
                      if (instance) {
                          deferred.resolve(instance);
                      }
                  }
                  catch (e) {
                      // when the instance factory throws an exception during get(), it should not cause
                      // a fatal error. We just return the unresolved promise in this case.
                  }
              }
          }
          return this.instancesDeferred.get(normalizedIdentifier).promise;
      };
      Provider.prototype.getImmediate = function (options) {
          var _a;
          // if multipleInstances is not supported, use the default name
          var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
          var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
          if (this.isInitialized(normalizedIdentifier) ||
              this.shouldAutoInitialize()) {
              try {
                  return this.getOrInitializeService({
                      instanceIdentifier: normalizedIdentifier
                  });
              }
              catch (e) {
                  if (optional) {
                      return null;
                  }
                  else {
                      throw e;
                  }
              }
          }
          else {
              // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
              if (optional) {
                  return null;
              }
              else {
                  throw Error("Service " + this.name + " is not available");
              }
          }
      };
      Provider.prototype.getComponent = function () {
          return this.component;
      };
      Provider.prototype.setComponent = function (component) {
          var e_1, _a;
          if (component.name !== this.name) {
              throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
          }
          if (this.component) {
              throw Error("Component for " + this.name + " has already been provided");
          }
          this.component = component;
          // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
          if (!this.shouldAutoInitialize()) {
              return;
          }
          // if the service is eager, initialize the default instance
          if (isComponentEager(component)) {
              try {
                  this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
              }
              catch (e) {
                  // when the instance factory for an eager Component throws an exception during the eager
                  // initialization, it should not cause a fatal error.
                  // TODO: Investigate if we need to make it configurable, because some component may want to cause
                  // a fatal error in this case?
              }
          }
          try {
              // Create service instances for the pending promises and resolve them
              // NOTE: if this.multipleInstances is false, only the default instance will be created
              // and all promises with resolve with it regardless of the identifier.
              for (var _b = __values$3(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var _d = __read$3(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                  var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                  try {
                      // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                      var instance = this.getOrInitializeService({
                          instanceIdentifier: normalizedIdentifier
                      });
                      instanceDeferred.resolve(instance);
                  }
                  catch (e) {
                      // when the instance factory throws an exception, it should not cause
                      // a fatal error. We just leave the promise unresolved.
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_1) throw e_1.error; }
          }
      };
      Provider.prototype.clearInstance = function (identifier) {
          if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
          this.instancesDeferred.delete(identifier);
          this.instancesOptions.delete(identifier);
          this.instances.delete(identifier);
      };
      // app.delete() will call this method on every provider to delete the services
      // TODO: should we mark the provider as deleted?
      Provider.prototype.delete = function () {
          return __awaiter$3(this, void 0, void 0, function () {
              var services;
              return __generator$3(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          services = Array.from(this.instances.values());
                          return [4 /*yield*/, Promise.all(__spreadArray$2(__spreadArray$2([], __read$3(services
                                  .filter(function (service) { return 'INTERNAL' in service; }) // legacy services
                                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                  .map(function (service) { return service.INTERNAL.delete(); }))), __read$3(services
                                  .filter(function (service) { return '_delete' in service; }) // modularized services
                                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                  .map(function (service) { return service._delete(); }))))];
                      case 1:
                          _a.sent();
                          return [2 /*return*/];
                  }
              });
          });
      };
      Provider.prototype.isComponentSet = function () {
          return this.component != null;
      };
      Provider.prototype.isInitialized = function (identifier) {
          if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
          return this.instances.has(identifier);
      };
      Provider.prototype.getOptions = function (identifier) {
          if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
          return this.instancesOptions.get(identifier) || {};
      };
      Provider.prototype.initialize = function (opts) {
          var e_2, _a;
          if (opts === void 0) { opts = {}; }
          var _b = opts.options, options = _b === void 0 ? {} : _b;
          var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
          if (this.isInitialized(normalizedIdentifier)) {
              throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
          }
          if (!this.isComponentSet()) {
              throw Error("Component " + this.name + " has not been registered yet");
          }
          var instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier,
              options: options
          });
          try {
              // resolve any pending promise waiting for the service instance
              for (var _c = __values$3(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var _e = __read$3(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
                  var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                  if (normalizedIdentifier === normalizedDeferredIdentifier) {
                      instanceDeferred.resolve(instance);
                  }
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
              }
              finally { if (e_2) throw e_2.error; }
          }
          return instance;
      };
      /**
       *
       * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
       * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
       *
       * @param identifier An optional instance identifier
       * @returns a function to unregister the callback
       */
      Provider.prototype.onInit = function (callback, identifier) {
          var _a;
          var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
          existingCallbacks.add(callback);
          this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
          var existingInstance = this.instances.get(normalizedIdentifier);
          if (existingInstance) {
              callback(existingInstance, normalizedIdentifier);
          }
          return function () {
              existingCallbacks.delete(callback);
          };
      };
      /**
       * Invoke onInit callbacks synchronously
       * @param instance the service instance`
       */
      Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {
          var e_3, _a;
          var callbacks = this.onInitCallbacks.get(identifier);
          if (!callbacks) {
              return;
          }
          try {
              for (var callbacks_1 = __values$3(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                  var callback = callbacks_1_1.value;
                  try {
                      callback(instance, identifier);
                  }
                  catch (_b) {
                      // ignore errors in the onInit callback
                  }
              }
          }
          catch (e_3_1) { e_3 = { error: e_3_1 }; }
          finally {
              try {
                  if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
              }
              finally { if (e_3) throw e_3.error; }
          }
      };
      Provider.prototype.getOrInitializeService = function (_a) {
          var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;
          var instance = this.instances.get(instanceIdentifier);
          if (!instance && this.component) {
              instance = this.component.instanceFactory(this.container, {
                  instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                  options: options
              });
              this.instances.set(instanceIdentifier, instance);
              this.instancesOptions.set(instanceIdentifier, options);
              /**
               * Invoke onInit listeners.
               * Note this.component.onInstanceCreated is different, which is used by the component creator,
               * while onInit listeners are registered by consumers of the provider.
               */
              this.invokeOnInitCallbacks(instance, instanceIdentifier);
              /**
               * Order is important
               * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
               * makes `isInitialized()` return true.
               */
              if (this.component.onInstanceCreated) {
                  try {
                      this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                  }
                  catch (_c) {
                      // ignore errors in the onInstanceCreatedCallback
                  }
              }
          }
          return instance || null;
      };
      Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
          if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
          if (this.component) {
              return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
          }
          else {
              return identifier; // assume multiple instances are supported before the component is provided.
          }
      };
      Provider.prototype.shouldAutoInitialize = function () {
          return (!!this.component &&
              this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */);
      };
      return Provider;
  }());
  // undefined should be passed to the service factory for the default instance
  function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
  }
  function isComponentEager(component) {
      return component.instantiationMode === "EAGER" /* EAGER */;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
   */
  var ComponentContainer = /** @class */ (function () {
      function ComponentContainer(name) {
          this.name = name;
          this.providers = new Map();
      }
      /**
       *
       * @param component Component being added
       * @param overwrite When a component with the same name has already been registered,
       * if overwrite is true: overwrite the existing component with the new component and create a new
       * provider with the new component. It can be useful in tests where you want to use different mocks
       * for different tests.
       * if overwrite is false: throw an exception
       */
      ComponentContainer.prototype.addComponent = function (component) {
          var provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
              throw new Error("Component " + component.name + " has already been registered with " + this.name);
          }
          provider.setComponent(component);
      };
      ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
          var provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
              // delete the existing provider from the container, so we can register the new component
              this.providers.delete(component.name);
          }
          this.addComponent(component);
      };
      /**
       * getProvider provides a type safe interface where it can only be called with a field name
       * present in NameServiceMapping interface.
       *
       * Firebase SDKs providing services should extend NameServiceMapping interface to register
       * themselves.
       */
      ComponentContainer.prototype.getProvider = function (name) {
          if (this.providers.has(name)) {
              return this.providers.get(name);
          }
          // create a Provider for a service that hasn't registered with Firebase
          var provider = new Provider(name, this);
          this.providers.set(name, provider);
          return provider;
      };
      ComponentContainer.prototype.getProviders = function () {
          return Array.from(this.providers.values());
      };
      return ComponentContainer;
  }());

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  function __spreadArrays$3() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _a;
  /**
   * A container for all of the Logger instances
   */
  var instances = [];
  /**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is a follows:
   * DEBUG < VERBOSE < INFO < WARN < ERROR
   *
   * All of the log types above the current log level will be captured (i.e. if
   * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
   * `VERBOSE` logs will not)
   */
  var LogLevel;
  (function (LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
  })(LogLevel || (LogLevel = {}));
  var levelStringToEnum = {
      'debug': LogLevel.DEBUG,
      'verbose': LogLevel.VERBOSE,
      'info': LogLevel.INFO,
      'warn': LogLevel.WARN,
      'error': LogLevel.ERROR,
      'silent': LogLevel.SILENT
  };
  /**
   * The default log level
   */
  var defaultLogLevel = LogLevel.INFO;
  /**
   * By default, `console.debug` is not displayed in the developer console (in
   * chrome). To avoid forcing users to have to opt-in to these logs twice
   * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
   * logs to the `console.log` function.
   */
  var ConsoleMethod = (_a = {},
      _a[LogLevel.DEBUG] = 'log',
      _a[LogLevel.VERBOSE] = 'log',
      _a[LogLevel.INFO] = 'info',
      _a[LogLevel.WARN] = 'warn',
      _a[LogLevel.ERROR] = 'error',
      _a);
  /**
   * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
   * messages on to their corresponding console counterparts (if the log method
   * is supported by the current log level)
   */
  var defaultLogHandler = function (instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
          return;
      }
      var now = new Date().toISOString();
      var method = ConsoleMethod[logType];
      if (method) {
          console[method].apply(console, __spreadArrays$3(["[" + now + "]  " + instance.name + ":"], args));
      }
      else {
          throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
      }
  };
  var Logger = /** @class */ (function () {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      function Logger(name) {
          this.name = name;
          /**
           * The log level of the given Logger instance.
           */
          this._logLevel = defaultLogLevel;
          /**
           * The main (internal) log handler for the Logger instance.
           * Can be set to a new function in internal package code but not by user.
           */
          this._logHandler = defaultLogHandler;
          /**
           * The optional, additional, user-defined log handler for the Logger instance.
           */
          this._userLogHandler = null;
          /**
           * Capture the current instance for later use
           */
          instances.push(this);
      }
      Object.defineProperty(Logger.prototype, "logLevel", {
          get: function () {
              return this._logLevel;
          },
          set: function (val) {
              if (!(val in LogLevel)) {
                  throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
              }
              this._logLevel = val;
          },
          enumerable: false,
          configurable: true
      });
      // Workaround for setter/getter having to be the same type.
      Logger.prototype.setLogLevel = function (val) {
          this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
      };
      Object.defineProperty(Logger.prototype, "logHandler", {
          get: function () {
              return this._logHandler;
          },
          set: function (val) {
              if (typeof val !== 'function') {
                  throw new TypeError('Value assigned to `logHandler` must be a function');
              }
              this._logHandler = val;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Logger.prototype, "userLogHandler", {
          get: function () {
              return this._userLogHandler;
          },
          set: function (val) {
              this._userLogHandler = val;
          },
          enumerable: false,
          configurable: true
      });
      /**
       * The functions below are all based on the `console` interface
       */
      Logger.prototype.debug = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$3([this, LogLevel.DEBUG], args));
          this._logHandler.apply(this, __spreadArrays$3([this, LogLevel.DEBUG], args));
      };
      Logger.prototype.log = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$3([this, LogLevel.VERBOSE], args));
          this._logHandler.apply(this, __spreadArrays$3([this, LogLevel.VERBOSE], args));
      };
      Logger.prototype.info = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$3([this, LogLevel.INFO], args));
          this._logHandler.apply(this, __spreadArrays$3([this, LogLevel.INFO], args));
      };
      Logger.prototype.warn = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$3([this, LogLevel.WARN], args));
          this._logHandler.apply(this, __spreadArrays$3([this, LogLevel.WARN], args));
      };
      Logger.prototype.error = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$3([this, LogLevel.ERROR], args));
          this._logHandler.apply(this, __spreadArrays$3([this, LogLevel.ERROR], args));
      };
      return Logger;
  }());
  function setLogLevel(level) {
      instances.forEach(function (inst) {
          inst.setLogLevel(level);
      });
  }
  function setUserLogHandler(logCallback, options) {
      var _loop_1 = function (instance) {
          var customLogLevel = null;
          if (options && options.level) {
              customLogLevel = levelStringToEnum[options.level];
          }
          if (logCallback === null) {
              instance.userLogHandler = null;
          }
          else {
              instance.userLogHandler = function (instance, level) {
                  var args = [];
                  for (var _i = 2; _i < arguments.length; _i++) {
                      args[_i - 2] = arguments[_i];
                  }
                  var message = args
                      .map(function (arg) {
                      if (arg == null) {
                          return null;
                      }
                      else if (typeof arg === 'string') {
                          return arg;
                      }
                      else if (typeof arg === 'number' || typeof arg === 'boolean') {
                          return arg.toString();
                      }
                      else if (arg instanceof Error) {
                          return arg.message;
                      }
                      else {
                          try {
                              return JSON.stringify(arg);
                          }
                          catch (ignored) {
                              return null;
                          }
                      }
                  })
                      .filter(function (arg) { return arg; })
                      .join(' ');
                  if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                      logCallback({
                          level: LogLevel[level].toLowerCase(),
                          message: message,
                          args: args,
                          type: instance.name
                      });
                  }
              };
          }
      };
      for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
          var instance = instances_1[_i];
          _loop_1(instance);
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _a$1;
  var ERRORS = (_a$1 = {},
      _a$1["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
          'call Firebase App.initializeApp()',
      _a$1["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
      _a$1["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
      _a$1["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
      _a$1["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
          'Firebase App instance.',
      _a$1["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
      _a$1);
  var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

  var name$c = "@firebase/app";
  var version$1 = "0.6.30";

  var name$b = "@firebase/analytics";

  var name$a = "@firebase/app-check";

  var name$9 = "@firebase/auth";

  var name$8 = "@firebase/database";

  var name$7 = "@firebase/functions";

  var name$6 = "@firebase/installations";

  var name$5 = "@firebase/messaging";

  var name$4 = "@firebase/performance";

  var name$3 = "@firebase/remote-config";

  var name$2 = "@firebase/storage";

  var name$1 = "@firebase/firestore";

  var name = "firebase-wrapper";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _a$2;
  var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';
  var PLATFORM_LOG_STRING = (_a$2 = {},
      _a$2[name$c] = 'fire-core',
      _a$2[name$b] = 'fire-analytics',
      _a$2[name$a] = 'fire-app-check',
      _a$2[name$9] = 'fire-auth',
      _a$2[name$8] = 'fire-rtdb',
      _a$2[name$7] = 'fire-fn',
      _a$2[name$6] = 'fire-iid',
      _a$2[name$5] = 'fire-fcm',
      _a$2[name$4] = 'fire-perf',
      _a$2[name$3] = 'fire-rc',
      _a$2[name$2] = 'fire-gcs',
      _a$2[name$1] = 'fire-fst',
      _a$2['fire-js'] = 'fire-js',
      _a$2[name] = 'fire-js-all',
      _a$2);

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logger = new Logger('@firebase/app');

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Global context object for a collection of services using
   * a shared authentication state.
   */
  var FirebaseAppImpl = /** @class */ (function () {
      function FirebaseAppImpl(options, config, firebase_) {
          var _this = this;
          this.firebase_ = firebase_;
          this.isDeleted_ = false;
          this.name_ = config.name;
          this.automaticDataCollectionEnabled_ =
              config.automaticDataCollectionEnabled || false;
          this.options_ = deepCopy(options);
          this.container = new ComponentContainer(config.name);
          // add itself to container
          this._addComponent(new Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
          // populate ComponentContainer with existing components
          this.firebase_.INTERNAL.components.forEach(function (component) {
              return _this._addComponent(component);
          });
      }
      Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
          get: function () {
              this.checkDestroyed_();
              return this.automaticDataCollectionEnabled_;
          },
          set: function (val) {
              this.checkDestroyed_();
              this.automaticDataCollectionEnabled_ = val;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FirebaseAppImpl.prototype, "name", {
          get: function () {
              this.checkDestroyed_();
              return this.name_;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FirebaseAppImpl.prototype, "options", {
          get: function () {
              this.checkDestroyed_();
              return this.options_;
          },
          enumerable: false,
          configurable: true
      });
      FirebaseAppImpl.prototype.delete = function () {
          var _this = this;
          return new Promise(function (resolve) {
              _this.checkDestroyed_();
              resolve();
          })
              .then(function () {
              _this.firebase_.INTERNAL.removeApp(_this.name_);
              return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
          })
              .then(function () {
              _this.isDeleted_ = true;
          });
      };
      /**
       * Return a service instance associated with this app (creating it
       * on demand), identified by the passed instanceIdentifier.
       *
       * NOTE: Currently storage and functions are the only ones that are leveraging this
       * functionality. They invoke it by calling:
       *
       * ```javascript
       * firebase.app().storage('STORAGE BUCKET ID')
       * ```
       *
       * The service name is passed to this already
       * @internal
       */
      FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
          var _a;
          if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
          this.checkDestroyed_();
          // Initialize instance if InstatiationMode is `EXPLICIT`.
          var provider = this.container.getProvider(name);
          if (!provider.isInitialized() &&
              ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT" /* EXPLICIT */) {
              provider.initialize();
          }
          // getImmediate will always succeed because _getService is only called for registered components.
          return provider.getImmediate({
              identifier: instanceIdentifier
          });
      };
      /**
       * Remove a service instance from the cache, so we will create a new instance for this service
       * when people try to get this service again.
       *
       * NOTE: currently only firestore is using this functionality to support firestore shutdown.
       *
       * @param name The service name
       * @param instanceIdentifier instance identifier in case multiple instances are allowed
       * @internal
       */
      FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
          if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.container.getProvider(name).clearInstance(instanceIdentifier);
      };
      /**
       * @param component the component being added to this app's container
       */
      FirebaseAppImpl.prototype._addComponent = function (component) {
          try {
              this.container.addComponent(component);
          }
          catch (e) {
              logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
          }
      };
      FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
          this.container.addOrOverwriteComponent(component);
      };
      FirebaseAppImpl.prototype.toJSON = function () {
          return {
              name: this.name,
              automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
              options: this.options
          };
      };
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      FirebaseAppImpl.prototype.checkDestroyed_ = function () {
          if (this.isDeleted_) {
              throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
          }
      };
      return FirebaseAppImpl;
  }());
  // Prevent dead-code elimination of these methods w/o invalid property
  // copying.
  (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
      FirebaseAppImpl.prototype.delete ||
      console.log('dc');

  var version = "8.10.0";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Because auth can't share code with other components, we attach the utility functions
   * in an internal namespace to share code.
   * This function return a firebase namespace object without
   * any utility functions, so it can be shared between the regular firebaseNamespace and
   * the lite version.
   */
  function createFirebaseNamespaceCore(firebaseAppImpl) {
      var apps = {};
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var components = new Map();
      // A namespace is a plain JavaScript Object.
      var namespace = {
          // Hack to prevent Babel from modifying the object returned
          // as the firebase namespace.
          // @ts-ignore
          __esModule: true,
          initializeApp: initializeApp,
          // @ts-ignore
          app: app,
          registerVersion: registerVersion,
          setLogLevel: setLogLevel,
          onLog: onLog,
          // @ts-ignore
          apps: null,
          SDK_VERSION: version,
          INTERNAL: {
              registerComponent: registerComponent,
              removeApp: removeApp,
              components: components,
              useAsService: useAsService
          }
      };
      // Inject a circular default export to allow Babel users who were previously
      // using:
      //
      //   import firebase from 'firebase';
      //   which becomes: var firebase = require('firebase').default;
      //
      // instead of
      //
      //   import * as firebase from 'firebase';
      //   which becomes: var firebase = require('firebase');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      namespace['default'] = namespace;
      // firebase.apps is a read-only getter.
      Object.defineProperty(namespace, 'apps', {
          get: getApps
      });
      /**
       * Called by App.delete() - but before any services associated with the App
       * are deleted.
       */
      function removeApp(name) {
          delete apps[name];
      }
      /**
       * Get the App object for a given name (or DEFAULT).
       */
      function app(name) {
          name = name || DEFAULT_ENTRY_NAME$1;
          if (!contains(apps, name)) {
              throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
          }
          return apps[name];
      }
      // @ts-ignore
      app['App'] = firebaseAppImpl;
      function initializeApp(options, rawConfig) {
          if (rawConfig === void 0) { rawConfig = {}; }
          if (typeof rawConfig !== 'object' || rawConfig === null) {
              var name_1 = rawConfig;
              rawConfig = { name: name_1 };
          }
          var config = rawConfig;
          if (config.name === undefined) {
              config.name = DEFAULT_ENTRY_NAME$1;
          }
          var name = config.name;
          if (typeof name !== 'string' || !name) {
              throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                  appName: String(name)
              });
          }
          if (contains(apps, name)) {
              throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
          }
          var app = new firebaseAppImpl(options, config, namespace);
          apps[name] = app;
          return app;
      }
      /*
       * Return an array of all the non-deleted FirebaseApps.
       */
      function getApps() {
          // Make a copy so caller cannot mutate the apps list.
          return Object.keys(apps).map(function (name) { return apps[name]; });
      }
      function registerComponent(component) {
          var componentName = component.name;
          if (components.has(componentName)) {
              logger.debug("There were multiple attempts to register component " + componentName + ".");
              return component.type === "PUBLIC" /* PUBLIC */
                  ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      namespace[componentName]
                  : null;
          }
          components.set(componentName, component);
          // create service namespace for public components
          if (component.type === "PUBLIC" /* PUBLIC */) {
              // The Service namespace is an accessor function ...
              var serviceNamespace = function (appArg) {
                  if (appArg === void 0) { appArg = app(); }
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  if (typeof appArg[componentName] !== 'function') {
                      // Invalid argument.
                      // This happens in the following case: firebase.storage('gs:/')
                      throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                          appName: componentName
                      });
                  }
                  // Forward service instance lookup to the FirebaseApp.
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  return appArg[componentName]();
              };
              // ... and a container for service-level properties.
              if (component.serviceProps !== undefined) {
                  deepExtend(serviceNamespace, component.serviceProps);
              }
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              namespace[componentName] = serviceNamespace;
              // Patch the FirebaseAppImpl prototype
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              firebaseAppImpl.prototype[componentName] =
                  // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                  // option added to the no-explicit-any rule when ESlint releases it.
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  function () {
                      var args = [];
                      for (var _i = 0; _i < arguments.length; _i++) {
                          args[_i] = arguments[_i];
                      }
                      var serviceFxn = this._getService.bind(this, componentName);
                      return serviceFxn.apply(this, component.multipleInstances ? args : []);
                  };
          }
          // add the component to existing app instances
          for (var _i = 0, _a = Object.keys(apps); _i < _a.length; _i++) {
              var appName = _a[_i];
              apps[appName]._addComponent(component);
          }
          return component.type === "PUBLIC" /* PUBLIC */
              ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  namespace[componentName]
              : null;
      }
      function registerVersion(libraryKeyOrName, version, variant) {
          var _a;
          // TODO: We can use this check to whitelist strings when/if we set up
          // a good whitelist system.
          var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
          if (variant) {
              library += "-" + variant;
          }
          var libraryMismatch = library.match(/\s|\//);
          var versionMismatch = version.match(/\s|\//);
          if (libraryMismatch || versionMismatch) {
              var warning = [
                  "Unable to register library \"" + library + "\" with version \"" + version + "\":"
              ];
              if (libraryMismatch) {
                  warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
              }
              if (libraryMismatch && versionMismatch) {
                  warning.push('and');
              }
              if (versionMismatch) {
                  warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
              }
              logger.warn(warning.join(' '));
              return;
          }
          registerComponent(new Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
      }
      function onLog(logCallback, options) {
          if (logCallback !== null && typeof logCallback !== 'function') {
              throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */);
          }
          setUserLogHandler(logCallback, options);
      }
      // Map the requested service to a registered service name
      // (used to map auth to serverAuth service when needed).
      function useAsService(app, name) {
          if (name === 'serverAuth') {
              return null;
          }
          var useService = name;
          return useService;
      }
      return namespace;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Return a firebase namespace object.
   *
   * In production, this will be called exactly once and the result
   * assigned to the 'firebase' global.  It may be called multiple times
   * in unit tests.
   */
  function createFirebaseNamespace() {
      var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
      namespace.INTERNAL = __assign$1(__assign$1({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
          extendNamespace: extendNamespace,
          createSubscribe: createSubscribe,
          ErrorFactory: ErrorFactory,
          deepExtend: deepExtend });
      /**
       * Patch the top-level firebase namespace with additional properties.
       *
       * firebase.INTERNAL.extendNamespace()
       */
      function extendNamespace(props) {
          deepExtend(namespace, props);
      }
      return namespace;
  }
  var firebase$1 = createFirebaseNamespace();

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PlatformLoggerService = /** @class */ (function () {
      function PlatformLoggerService(container) {
          this.container = container;
      }
      // In initial implementation, this will be called by installations on
      // auth token refresh, and installations will send this string.
      PlatformLoggerService.prototype.getPlatformInfoString = function () {
          var providers = this.container.getProviders();
          // Loop through providers and get library/version pairs from any that are
          // version components.
          return providers
              .map(function (provider) {
              if (isVersionServiceProvider(provider)) {
                  var service = provider.getImmediate();
                  return service.library + "/" + service.version;
              }
              else {
                  return null;
              }
          })
              .filter(function (logString) { return logString; })
              .join(' ');
      };
      return PlatformLoggerService;
  }());
  /**
   *
   * @param provider check if this provider provides a VersionService
   *
   * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
   * provides VersionService. The provider is not necessarily a 'app-version'
   * provider.
   */
  function isVersionServiceProvider(provider) {
      var component = provider.getComponent();
      return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function registerCoreComponents(firebase, variant) {
      firebase.INTERNAL.registerComponent(new Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
      // Register `app` package.
      firebase.registerVersion(name$c, version$1, variant);
      // Register platform SDK identifier (no version).
      firebase.registerVersion('fire-js', '');
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Firebase Lite detection test
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  if (isBrowser() && self.firebase !== undefined) {
      logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
      // eslint-disable-next-line
      var sdkVersion = self.firebase.SDK_VERSION;
      if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
          logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
      }
  }
  var initializeApp = firebase$1.initializeApp;
  // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
  // the no-explicit-any rule when ESlint releases it.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  firebase$1.initializeApp = function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      // Environment check before initializing app
      // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
      // in @firebase/logger
      if (isNode()) {
          logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
      }
      return initializeApp.apply(undefined, args);
  };
  var firebase = firebase$1;
  registerCoreComponents(firebase);

  var name$d = "firebase";
  var version$2 = "8.10.0";

  /**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  firebase.registerVersion(name$d, version$2, 'app');
  firebase.SDK_VERSION = version$2;

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$4 = function(d, b) {
      extendStatics$4 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics$4(d, b);
  };

  function __extends$4(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics$4(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign$4 = function() {
      __assign$4 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign$4.apply(this, arguments);
  };

  function __awaiter$4(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator$4(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values$4(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read$4(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray$3(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  var name$e = "@firebase/database";
  var version$3 = "0.11.0";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** The semver (www.semver.org) version of the SDK. */
  var SDK_VERSION = '';
  // SDK_VERSION should be set before any database instance is created
  function setSDKVersion(version) {
      SDK_VERSION = version;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Wraps a DOM Storage object and:
   * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
   * - prefixes names with "firebase:" to avoid collisions with app data.
   *
   * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
   * and one for localStorage.
   *
   */
  var DOMStorageWrapper = /** @class */ (function () {
      /**
       * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
       */
      function DOMStorageWrapper(domStorage_) {
          this.domStorage_ = domStorage_;
          // Use a prefix to avoid collisions with other stuff saved by the app.
          this.prefix_ = 'firebase:';
      }
      /**
       * @param key - The key to save the value under
       * @param value - The value being stored, or null to remove the key.
       */
      DOMStorageWrapper.prototype.set = function (key, value) {
          if (value == null) {
              this.domStorage_.removeItem(this.prefixedName_(key));
          }
          else {
              this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
          }
      };
      /**
       * @returns The value that was stored under this key, or null
       */
      DOMStorageWrapper.prototype.get = function (key) {
          var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
          if (storedVal == null) {
              return null;
          }
          else {
              return jsonEval(storedVal);
          }
      };
      DOMStorageWrapper.prototype.remove = function (key) {
          this.domStorage_.removeItem(this.prefixedName_(key));
      };
      DOMStorageWrapper.prototype.prefixedName_ = function (name) {
          return this.prefix_ + name;
      };
      DOMStorageWrapper.prototype.toString = function () {
          return this.domStorage_.toString();
      };
      return DOMStorageWrapper;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An in-memory storage implementation that matches the API of DOMStorageWrapper
   * (TODO: create interface for both to implement).
   */
  var MemoryStorage = /** @class */ (function () {
      function MemoryStorage() {
          this.cache_ = {};
          this.isInMemoryStorage = true;
      }
      MemoryStorage.prototype.set = function (key, value) {
          if (value == null) {
              delete this.cache_[key];
          }
          else {
              this.cache_[key] = value;
          }
      };
      MemoryStorage.prototype.get = function (key) {
          if (contains(this.cache_, key)) {
              return this.cache_[key];
          }
          return null;
      };
      MemoryStorage.prototype.remove = function (key) {
          delete this.cache_[key];
      };
      return MemoryStorage;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
   * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
   * to reflect this type
   *
   * @param domStorageName - Name of the underlying storage object
   *   (e.g. 'localStorage' or 'sessionStorage').
   * @returns Turning off type information until a common interface is defined.
   */
  var createStoragefor = function (domStorageName) {
      try {
          // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
          // so it must be inside the try/catch.
          if (typeof window !== 'undefined' &&
              typeof window[domStorageName] !== 'undefined') {
              // Need to test cache. Just because it's here doesn't mean it works
              var domStorage = window[domStorageName];
              domStorage.setItem('firebase:sentinel', 'cache');
              domStorage.removeItem('firebase:sentinel');
              return new DOMStorageWrapper(domStorage);
          }
      }
      catch (e) { }
      // Failed to create wrapper.  Just return in-memory storage.
      // TODO: log?
      return new MemoryStorage();
  };
  /** A storage object that lasts across sessions */
  var PersistentStorage = createStoragefor('localStorage');
  /** A storage object that only lasts one session */
  var SessionStorage = createStoragefor('sessionStorage');

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logClient = new Logger('@firebase/database');
  /**
   * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
   */
  var LUIDGenerator = (function () {
      var id = 1;
      return function () {
          return id++;
      };
  })();
  /**
   * Sha1 hash of the input string
   * @param str - The string to hash
   * @returns {!string} The resulting hash
   */
  var sha1 = function (str) {
      var utf8Bytes = stringToByteArray(str);
      var sha1 = new Sha1();
      sha1.update(utf8Bytes);
      var sha1Bytes = sha1.digest();
      return base64.encodeByteArray(sha1Bytes);
  };
  var buildLogMessage_ = function () {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          varArgs[_i] = arguments[_i];
      }
      var message = '';
      for (var i = 0; i < varArgs.length; i++) {
          var arg = varArgs[i];
          if (Array.isArray(arg) ||
              (arg &&
                  typeof arg === 'object' &&
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  typeof arg.length === 'number')) {
              message += buildLogMessage_.apply(null, arg);
          }
          else if (typeof arg === 'object') {
              message += stringify(arg);
          }
          else {
              message += arg;
          }
          message += ' ';
      }
      return message;
  };
  /**
   * Use this for all debug messages in Firebase.
   */
  var logger$1 = null;
  /**
   * Flag to check for log availability on first log message
   */
  var firstLog_ = true;
  /**
   * The implementation of Firebase.enableLogging (defined here to break dependencies)
   * @param logger_ - A flag to turn on logging, or a custom logger
   * @param persistent - Whether or not to persist logging settings across refreshes
   */
  var enableLogging = function (logger_, persistent) {
      assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
      if (logger_ === true) {
          logClient.logLevel = LogLevel.VERBOSE;
          logger$1 = logClient.log.bind(logClient);
          if (persistent) {
              SessionStorage.set('logging_enabled', true);
          }
      }
      else if (typeof logger_ === 'function') {
          logger$1 = logger_;
      }
      else {
          logger$1 = null;
          SessionStorage.remove('logging_enabled');
      }
  };
  var log = function () {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          varArgs[_i] = arguments[_i];
      }
      if (firstLog_ === true) {
          firstLog_ = false;
          if (logger$1 === null && SessionStorage.get('logging_enabled') === true) {
              enableLogging(true);
          }
      }
      if (logger$1) {
          var message = buildLogMessage_.apply(null, varArgs);
          logger$1(message);
      }
  };
  var logWrapper = function (prefix) {
      return function () {
          var varArgs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              varArgs[_i] = arguments[_i];
          }
          log.apply(void 0, __spreadArray$3([prefix], __read$4(varArgs)));
      };
  };
  var error = function () {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          varArgs[_i] = arguments[_i];
      }
      var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spreadArray$3([], __read$4(varArgs)));
      logClient.error(message);
  };
  var fatal = function () {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          varArgs[_i] = arguments[_i];
      }
      var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spreadArray$3([], __read$4(varArgs)));
      logClient.error(message);
      throw new Error(message);
  };
  var warn = function () {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          varArgs[_i] = arguments[_i];
      }
      var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spreadArray$3([], __read$4(varArgs)));
      logClient.warn(message);
  };
  /**
   * Logs a warning if the containing page uses https. Called when a call to new Firebase
   * does not use https.
   */
  var warnIfPageIsSecure = function () {
      // Be very careful accessing browser globals. Who knows what may or may not exist.
      if (typeof window !== 'undefined' &&
          window.location &&
          window.location.protocol &&
          window.location.protocol.indexOf('https:') !== -1) {
          warn('Insecure Firebase access from a secure page. ' +
              'Please use https in calls to new Firebase().');
      }
  };
  /**
   * Returns true if data is NaN, or +/- Infinity.
   */
  var isInvalidJSONNumber = function (data) {
      return (typeof data === 'number' &&
          (data !== data || // NaN
              data === Number.POSITIVE_INFINITY ||
              data === Number.NEGATIVE_INFINITY));
  };
  var executeWhenDOMReady = function (fn) {
      if (isNodeSdk() || document.readyState === 'complete') {
          fn();
      }
      else {
          // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
          // fire before onload), but fall back to onload.
          var called_1 = false;
          var wrappedFn_1 = function () {
              if (!document.body) {
                  setTimeout(wrappedFn_1, Math.floor(10));
                  return;
              }
              if (!called_1) {
                  called_1 = true;
                  fn();
              }
          };
          if (document.addEventListener) {
              document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
              // fallback to onload.
              window.addEventListener('load', wrappedFn_1, false);
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }
          else if (document.attachEvent) {
              // IE.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              document.attachEvent('onreadystatechange', function () {
                  if (document.readyState === 'complete') {
                      wrappedFn_1();
                  }
              });
              // fallback to onload.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              window.attachEvent('onload', wrappedFn_1);
              // jQuery has an extra hack for IE that we could employ (based on
              // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
              // I'm hoping we don't need it.
          }
      }
  };
  /**
   * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
   */
  var MIN_NAME = '[MIN_NAME]';
  /**
   * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
   */
  var MAX_NAME = '[MAX_NAME]';
  /**
   * Compares valid Firebase key names, plus min and max name
   */
  var nameCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a === MIN_NAME || b === MAX_NAME) {
          return -1;
      }
      else if (b === MIN_NAME || a === MAX_NAME) {
          return 1;
      }
      else {
          var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
          if (aAsInt !== null) {
              if (bAsInt !== null) {
                  return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
              }
              else {
                  return -1;
              }
          }
          else if (bAsInt !== null) {
              return 1;
          }
          else {
              return a < b ? -1 : 1;
          }
      }
  };
  /**
   * @returns {!number} comparison result.
   */
  var stringCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a < b) {
          return -1;
      }
      else {
          return 1;
      }
  };
  var requireKey = function (key, obj) {
      if (obj && key in obj) {
          return obj[key];
      }
      else {
          throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));
      }
  };
  var ObjectToUniqueKey = function (obj) {
      if (typeof obj !== 'object' || obj === null) {
          return stringify(obj);
      }
      var keys = [];
      // eslint-disable-next-line guard-for-in
      for (var k in obj) {
          keys.push(k);
      }
      // Export as json, but with the keys sorted.
      keys.sort();
      var key = '{';
      for (var i = 0; i < keys.length; i++) {
          if (i !== 0) {
              key += ',';
          }
          key += stringify(keys[i]);
          key += ':';
          key += ObjectToUniqueKey(obj[keys[i]]);
      }
      key += '}';
      return key;
  };
  /**
   * Splits a string into a number of smaller segments of maximum size
   * @param str - The string
   * @param segsize - The maximum number of chars in the string.
   * @returns The string, split into appropriately-sized chunks
   */
  var splitStringBySize = function (str, segsize) {
      var len = str.length;
      if (len <= segsize) {
          return [str];
      }
      var dataSegs = [];
      for (var c = 0; c < len; c += segsize) {
          if (c + segsize > len) {
              dataSegs.push(str.substring(c, len));
          }
          else {
              dataSegs.push(str.substring(c, c + segsize));
          }
      }
      return dataSegs;
  };
  /**
   * Apply a function to each (key, value) pair in an object or
   * apply a function to each (index, value) pair in an array
   * @param obj - The object or array to iterate over
   * @param fn - The function to apply
   */
  function each(obj, fn) {
      for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
              fn(key, obj[key]);
          }
      }
  }
  /**
   * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
   * I made one modification at the end and removed the NaN / Infinity
   * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
   * @param v - A double
   *
   */
  var doubleToIEEE754String = function (v) {
      assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
      var ebits = 11, fbits = 52;
      var bias = (1 << (ebits - 1)) - 1;
      var s, e, f, ln, i;
      // Compute sign, exponent, fraction
      // Skip NaN / Infinity handling --MJL.
      if (v === 0) {
          e = 0;
          f = 0;
          s = 1 / v === -Infinity ? 1 : 0;
      }
      else {
          s = v < 0;
          v = Math.abs(v);
          if (v >= Math.pow(2, 1 - bias)) {
              // Normalized
              ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
              e = ln + bias;
              f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
          }
          else {
              // Denormalized
              e = 0;
              f = Math.round(v / Math.pow(2, 1 - bias - fbits));
          }
      }
      // Pack sign, exponent, fraction
      var bits = [];
      for (i = fbits; i; i -= 1) {
          bits.push(f % 2 ? 1 : 0);
          f = Math.floor(f / 2);
      }
      for (i = ebits; i; i -= 1) {
          bits.push(e % 2 ? 1 : 0);
          e = Math.floor(e / 2);
      }
      bits.push(s ? 1 : 0);
      bits.reverse();
      var str = bits.join('');
      // Return the data as a hex string. --MJL
      var hexByteString = '';
      for (i = 0; i < 64; i += 8) {
          var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
          if (hexByte.length === 1) {
              hexByte = '0' + hexByte;
          }
          hexByteString = hexByteString + hexByte;
      }
      return hexByteString.toLowerCase();
  };
  /**
   * Used to detect if we're in a Chrome content script (which executes in an
   * isolated environment where long-polling doesn't work).
   */
  var isChromeExtensionContentScript = function () {
      return !!(typeof window === 'object' &&
          window['chrome'] &&
          window['chrome']['extension'] &&
          !/^chrome/.test(window.location.href));
  };
  /**
   * Used to detect if we're in a Windows 8 Store app.
   */
  var isWindowsStoreApp = function () {
      // Check for the presence of a couple WinRT globals
      return typeof Windows === 'object' && typeof Windows.UI === 'object';
  };
  /**
   * Converts a server error code to a Javascript Error
   */
  function errorForServerCode(code, query) {
      var reason = 'Unknown Error';
      if (code === 'too_big') {
          reason =
              'The data requested exceeds the maximum size ' +
                  'that can be accessed with a single request.';
      }
      else if (code === 'permission_denied') {
          reason = "Client doesn't have permission to access the desired data.";
      }
      else if (code === 'unavailable') {
          reason = 'The service is unavailable';
      }
      var error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      error.code = code.toUpperCase();
      return error;
  }
  /**
   * Used to test for integer-looking strings
   */
  var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
  /**
   * For use in keys, the minimum possible 32-bit integer.
   */
  var INTEGER_32_MIN = -2147483648;
  /**
   * For use in kyes, the maximum possible 32-bit integer.
   */
  var INTEGER_32_MAX = 2147483647;
  /**
   * If the string contains a 32-bit integer, return it.  Else return null.
   */
  var tryParseInt = function (str) {
      if (INTEGER_REGEXP_.test(str)) {
          var intVal = Number(str);
          if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
              return intVal;
          }
      }
      return null;
  };
  /**
   * Helper to run some code but catch any exceptions and re-throw them later.
   * Useful for preventing user callbacks from breaking internal code.
   *
   * Re-throwing the exception from a setTimeout is a little evil, but it's very
   * convenient (we don't have to try to figure out when is a safe point to
   * re-throw it), and the behavior seems reasonable:
   *
   * * If you aren't pausing on exceptions, you get an error in the console with
   *   the correct stack trace.
   * * If you're pausing on all exceptions, the debugger will pause on your
   *   exception and then again when we rethrow it.
   * * If you're only pausing on uncaught exceptions, the debugger will only pause
   *   on us re-throwing it.
   *
   * @param fn - The code to guard.
   */
  var exceptionGuard = function (fn) {
      try {
          fn();
      }
      catch (e) {
          // Re-throw exception when it's safe.
          setTimeout(function () {
              // It used to be that "throw e" would result in a good console error with
              // relevant context, but as of Chrome 39, you just get the firebase.js
              // file/line number where we re-throw it, which is useless. So we log
              // e.stack explicitly.
              var stack = e.stack || '';
              warn('Exception was thrown by user callback.', stack);
              throw e;
          }, Math.floor(0));
      }
  };
  /**
   * @returns {boolean} true if we think we're currently being crawled.
   */
  var beingCrawled = function () {
      var userAgent = (typeof window === 'object' &&
          window['navigator'] &&
          window['navigator']['userAgent']) ||
          '';
      // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
      // believe to support JavaScript/AJAX rendering.
      // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
      // would have seen the page" is flaky if we don't treat it as a crawler.
      return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
  };
  /**
   * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
   *
   * It is removed with clearTimeout() as normal.
   *
   * @param fn - Function to run.
   * @param time - Milliseconds to wait before running.
   * @returns The setTimeout() return value.
   */
  var setTimeoutNonBlocking = function (fn, time) {
      var timeout = setTimeout(fn, time);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      if (typeof timeout === 'object' && timeout['unref']) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          timeout['unref']();
      }
      return timeout;
  };

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Abstraction around AppCheck's token fetching capabilities.
   */
  var AppCheckTokenProvider = /** @class */ (function () {
      function AppCheckTokenProvider(appName_, appCheckProvider) {
          var _this = this;
          this.appName_ = appName_;
          this.appCheckProvider = appCheckProvider;
          this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });
          if (!this.appCheck) {
              appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function (appCheck) { return (_this.appCheck = appCheck); });
          }
      }
      AppCheckTokenProvider.prototype.getToken = function (forceRefresh) {
          var _this = this;
          if (!this.appCheck) {
              return new Promise(function (resolve, reject) {
                  // Support delayed initialization of FirebaseAppCheck. This allows our
                  // customers to initialize the RTDB SDK before initializing Firebase
                  // AppCheck and ensures that all requests are authenticated if a token
                  // becomes available before the timoeout below expires.
                  setTimeout(function () {
                      if (_this.appCheck) {
                          _this.getToken(forceRefresh).then(resolve, reject);
                      }
                      else {
                          resolve(null);
                      }
                  }, 0);
              });
          }
          return this.appCheck.getToken(forceRefresh);
      };
      AppCheckTokenProvider.prototype.addTokenChangeListener = function (listener) {
          var _a;
          (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function (appCheck) { return appCheck.addTokenListener(listener); });
      };
      AppCheckTokenProvider.prototype.notifyForInvalidToken = function () {
          warn("Provided AppCheck credentials for the app named \"" + this.appName_ + "\" " +
              'are invalid. This usually indicates your app was not initialized correctly.');
      };
      return AppCheckTokenProvider;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Abstraction around FirebaseApp's token fetching capabilities.
   */
  var FirebaseAuthTokenProvider = /** @class */ (function () {
      function FirebaseAuthTokenProvider(appName_, firebaseOptions_, authProvider_) {
          var _this = this;
          this.appName_ = appName_;
          this.firebaseOptions_ = firebaseOptions_;
          this.authProvider_ = authProvider_;
          this.auth_ = null;
          this.auth_ = authProvider_.getImmediate({ optional: true });
          if (!this.auth_) {
              authProvider_.onInit(function (auth) { return (_this.auth_ = auth); });
          }
      }
      FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {
          var _this = this;
          if (!this.auth_) {
              return new Promise(function (resolve, reject) {
                  // Support delayed initialization of FirebaseAuth. This allows our
                  // customers to initialize the RTDB SDK before initializing Firebase
                  // Auth and ensures that all requests are authenticated if a token
                  // becomes available before the timoeout below expires.
                  setTimeout(function () {
                      if (_this.auth_) {
                          _this.getToken(forceRefresh).then(resolve, reject);
                      }
                      else {
                          resolve(null);
                      }
                  }, 0);
              });
          }
          return this.auth_.getToken(forceRefresh).catch(function (error) {
              // TODO: Need to figure out all the cases this is raised and whether
              // this makes sense.
              if (error && error.code === 'auth/token-not-initialized') {
                  log('Got auth/token-not-initialized error.  Treating as null token.');
                  return null;
              }
              else {
                  return Promise.reject(error);
              }
          });
      };
      FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
          // TODO: We might want to wrap the listener and call it with no args to
          // avoid a leaky abstraction, but that makes removing the listener harder.
          if (this.auth_) {
              this.auth_.addAuthTokenListener(listener);
          }
          else {
              this.authProvider_
                  .get()
                  .then(function (auth) { return auth.addAuthTokenListener(listener); });
          }
      };
      FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
          this.authProvider_
              .get()
              .then(function (auth) { return auth.removeAuthTokenListener(listener); });
      };
      FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {
          var errorMessage = 'Provided authentication credentials for the app named "' +
              this.appName_ +
              '" are invalid. This usually indicates your app was not ' +
              'initialized correctly. ';
          if ('credential' in this.firebaseOptions_) {
              errorMessage +=
                  'Make sure the "credential" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else if ('serviceAccount' in this.firebaseOptions_) {
              errorMessage +=
                  'Make sure the "serviceAccount" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else {
              errorMessage +=
                  'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                      'initializeApp() match the values provided for your app at ' +
                      'https://console.firebase.google.com/.';
          }
          warn(errorMessage);
      };
      return FirebaseAuthTokenProvider;
  }());
  /* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */
  var EmulatorTokenProvider = /** @class */ (function () {
      function EmulatorTokenProvider(accessToken) {
          this.accessToken = accessToken;
      }
      EmulatorTokenProvider.prototype.getToken = function (forceRefresh) {
          return Promise.resolve({
              accessToken: this.accessToken
          });
      };
      EmulatorTokenProvider.prototype.addTokenChangeListener = function (listener) {
          // Invoke the listener immediately to match the behavior in Firebase Auth
          // (see packages/auth/src/auth.js#L1807)
          listener(this.accessToken);
      };
      EmulatorTokenProvider.prototype.removeTokenChangeListener = function (listener) { };
      EmulatorTokenProvider.prototype.notifyForInvalidToken = function () { };
      /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */
      EmulatorTokenProvider.OWNER = 'owner';
      return EmulatorTokenProvider;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PROTOCOL_VERSION = '5';
  var VERSION_PARAM = 'v';
  var TRANSPORT_SESSION_PARAM = 's';
  var REFERER_PARAM = 'r';
  var FORGE_REF = 'f';
  // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
  // firebase.corp.google.com
  var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
  var LAST_SESSION_PARAM = 'ls';
  var APPLICATION_ID_PARAM = 'p';
  var APP_CHECK_TOKEN_PARAM = 'ac';
  var WEBSOCKET = 'websocket';
  var LONG_POLLING = 'long_polling';

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A class that holds metadata about a Repo object
   */
  var RepoInfo = /** @class */ (function () {
      /**
       * @param host - Hostname portion of the url for the repo
       * @param secure - Whether or not this repo is accessed over ssl
       * @param namespace - The namespace represented by the repo
       * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
       * @param nodeAdmin - Whether this instance uses Admin SDK credentials
       * @param persistenceKey - Override the default session persistence storage key
       */
      function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
          if (nodeAdmin === void 0) { nodeAdmin = false; }
          if (persistenceKey === void 0) { persistenceKey = ''; }
          if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
          this.secure = secure;
          this.namespace = namespace;
          this.webSocketOnly = webSocketOnly;
          this.nodeAdmin = nodeAdmin;
          this.persistenceKey = persistenceKey;
          this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
          this._host = host.toLowerCase();
          this._domain = this._host.substr(this._host.indexOf('.') + 1);
          this.internalHost =
              PersistentStorage.get('host:' + host) || this._host;
      }
      RepoInfo.prototype.isCacheableHost = function () {
          return this.internalHost.substr(0, 2) === 's-';
      };
      RepoInfo.prototype.isCustomHost = function () {
          return (this._domain !== 'firebaseio.com' &&
              this._domain !== 'firebaseio-demo.com');
      };
      Object.defineProperty(RepoInfo.prototype, "host", {
          get: function () {
              return this._host;
          },
          set: function (newHost) {
              if (newHost !== this.internalHost) {
                  this.internalHost = newHost;
                  if (this.isCacheableHost()) {
                      PersistentStorage.set('host:' + this._host, this.internalHost);
                  }
              }
          },
          enumerable: false,
          configurable: true
      });
      RepoInfo.prototype.toString = function () {
          var str = this.toURLString();
          if (this.persistenceKey) {
              str += '<' + this.persistenceKey + '>';
          }
          return str;
      };
      RepoInfo.prototype.toURLString = function () {
          var protocol = this.secure ? 'https://' : 'http://';
          var query = this.includeNamespaceInQueryParams
              ? "?ns=" + this.namespace
              : '';
          return "" + protocol + this.host + "/" + query;
      };
      return RepoInfo;
  }());
  function repoInfoNeedsQueryParam(repoInfo) {
      return (repoInfo.host !== repoInfo.internalHost ||
          repoInfo.isCustomHost() ||
          repoInfo.includeNamespaceInQueryParams);
  }
  /**
   * Returns the websocket URL for this repo
   * @param repoInfo - RepoInfo object
   * @param type - of connection
   * @param params - list
   * @returns The URL for this repo
   */
  function repoInfoConnectionURL(repoInfo, type, params) {
      assert(typeof type === 'string', 'typeof type must == string');
      assert(typeof params === 'object', 'typeof params must == object');
      var connURL;
      if (type === WEBSOCKET) {
          connURL =
              (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
      }
      else if (type === LONG_POLLING) {
          connURL =
              (repoInfo.secure ? 'https://' : 'http://') +
                  repoInfo.internalHost +
                  '/.lp?';
      }
      else {
          throw new Error('Unknown connection type: ' + type);
      }
      if (repoInfoNeedsQueryParam(repoInfo)) {
          params['ns'] = repoInfo.namespace;
      }
      var pairs = [];
      each(params, function (key, value) {
          pairs.push(key + '=' + value);
      });
      return connURL + pairs.join('&');
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Tracks a collection of stats.
   */
  var StatsCollection = /** @class */ (function () {
      function StatsCollection() {
          this.counters_ = {};
      }
      StatsCollection.prototype.incrementCounter = function (name, amount) {
          if (amount === void 0) { amount = 1; }
          if (!contains(this.counters_, name)) {
              this.counters_[name] = 0;
          }
          this.counters_[name] += amount;
      };
      StatsCollection.prototype.get = function () {
          return deepCopy(this.counters_);
      };
      return StatsCollection;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var collections = {};
  var reporters = {};
  function statsManagerGetCollection(repoInfo) {
      var hashString = repoInfo.toString();
      if (!collections[hashString]) {
          collections[hashString] = new StatsCollection();
      }
      return collections[hashString];
  }
  function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
      var hashString = repoInfo.toString();
      if (!reporters[hashString]) {
          reporters[hashString] = creatorFunction();
      }
      return reporters[hashString];
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class ensures the packets from the server arrive in order
   * This class takes data from the server and ensures it gets passed into the callbacks in order.
   */
  var PacketReceiver = /** @class */ (function () {
      /**
       * @param onMessage_
       */
      function PacketReceiver(onMessage_) {
          this.onMessage_ = onMessage_;
          this.pendingResponses = [];
          this.currentResponseNum = 0;
          this.closeAfterResponse = -1;
          this.onClose = null;
      }
      PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
          this.closeAfterResponse = responseNum;
          this.onClose = callback;
          if (this.closeAfterResponse < this.currentResponseNum) {
              this.onClose();
              this.onClose = null;
          }
      };
      /**
       * Each message from the server comes with a response number, and an array of data. The responseNumber
       * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
       * browsers will respond in the same order as the requests we sent
       */
      PacketReceiver.prototype.handleResponse = function (requestNum, data) {
          var _this = this;
          this.pendingResponses[requestNum] = data;
          var _loop_1 = function () {
              var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
              delete this_1.pendingResponses[this_1.currentResponseNum];
              var _loop_2 = function (i) {
                  if (toProcess[i]) {
                      exceptionGuard(function () {
                          _this.onMessage_(toProcess[i]);
                      });
                  }
              };
              for (var i = 0; i < toProcess.length; ++i) {
                  _loop_2(i);
              }
              if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                  if (this_1.onClose) {
                      this_1.onClose();
                      this_1.onClose = null;
                  }
                  return "break";
              }
              this_1.currentResponseNum++;
          };
          var this_1 = this;
          while (this.pendingResponses[this.currentResponseNum]) {
              var state_1 = _loop_1();
              if (state_1 === "break")
                  break;
          }
      };
      return PacketReceiver;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // URL query parameters associated with longpolling
  var FIREBASE_LONGPOLL_START_PARAM = 'start';
  var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
  var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
  var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
  var FIREBASE_LONGPOLL_ID_PARAM = 'id';
  var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
  var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
  var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
  var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
  var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
  var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
  var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
  //Data size constants.
  //TODO: Perf: the maximum length actually differs from browser to browser.
  // We should check what browser we're on and set accordingly.
  var MAX_URL_DATA_SIZE = 1870;
  var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
  var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
  /**
   * Keepalive period
   * send a fresh request at minimum every 25 seconds. Opera has a maximum request
   * length of 30 seconds that we can't exceed.
   */
  var KEEPALIVE_REQUEST_INTERVAL = 25000;
  /**
   * How long to wait before aborting a long-polling connection attempt.
   */
  var LP_CONNECT_TIMEOUT = 30000;
  /**
   * This class manages a single long-polling connection.
   */
  var BrowserPollConnection = /** @class */ (function () {
      /**
       * @param connId An identifier for this connection, used for logging
       * @param repoInfo The info for the endpoint to send data to.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The AppCheck token for this client.
       * @param authToken The AuthToken to use for this connection.
       * @param transportSessionId Optional transportSessionid if we are
       * reconnecting for an existing transport session
       * @param lastSessionId Optional lastSessionId if the PersistentConnection has
       * already created a connection previously
       */
      function BrowserPollConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
          var _this = this;
          this.connId = connId;
          this.repoInfo = repoInfo;
          this.applicationId = applicationId;
          this.appCheckToken = appCheckToken;
          this.authToken = authToken;
          this.transportSessionId = transportSessionId;
          this.lastSessionId = lastSessionId;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.everConnected_ = false;
          this.log_ = logWrapper(connId);
          this.stats_ = statsManagerGetCollection(repoInfo);
          this.urlFn = function (params) {
              // Always add the token if we have one.
              if (_this.appCheckToken) {
                  params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
              }
              return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
          };
      }
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
          var _this = this;
          this.curSegmentNum = 0;
          this.onDisconnect_ = onDisconnect;
          this.myPacketOrderer = new PacketReceiver(onMessage);
          this.isClosed_ = false;
          this.connectTimeoutTimer_ = setTimeout(function () {
              _this.log_('Timed out trying to connect.');
              // Make sure we clear the host cache
              _this.onClosed_();
              _this.connectTimeoutTimer_ = null;
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(LP_CONNECT_TIMEOUT));
          // Ensure we delay the creation of the iframe until the DOM is loaded.
          executeWhenDOMReady(function () {
              if (_this.isClosed_) {
                  return;
              }
              //Set up a callback that gets triggered once a connection is set up.
              _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                  }
                  var _a = __read$4(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2]; _a[3]; _a[4];
                  _this.incrementIncomingBytes_(args);
                  if (!_this.scriptTagHolder) {
                      return; // we closed the connection.
                  }
                  if (_this.connectTimeoutTimer_) {
                      clearTimeout(_this.connectTimeoutTimer_);
                      _this.connectTimeoutTimer_ = null;
                  }
                  _this.everConnected_ = true;
                  if (command === FIREBASE_LONGPOLL_START_PARAM) {
                      _this.id = arg1;
                      _this.password = arg2;
                  }
                  else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                      // Don't clear the host cache. We got a response from the server, so we know it's reachable
                      if (arg1) {
                          // We aren't expecting any more data (other than what the server's already in the process of sending us
                          // through our already open polls), so don't send any more.
                          _this.scriptTagHolder.sendNewPolls = false;
                          // arg1 in this case is the last response number sent by the server. We should try to receive
                          // all of the responses up to this one before closing
                          _this.myPacketOrderer.closeAfter(arg1, function () {
                              _this.onClosed_();
                          });
                      }
                      else {
                          _this.onClosed_();
                      }
                  }
                  else {
                      throw new Error('Unrecognized command received: ' + command);
                  }
              }, function () {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                  }
                  var _a = __read$4(args, 2), pN = _a[0], data = _a[1];
                  _this.incrementIncomingBytes_(args);
                  _this.myPacketOrderer.handleResponse(pN, data);
              }, function () {
                  _this.onClosed_();
              }, _this.urlFn);
              //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
              //from cache.
              var urlParams = {};
              urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
              if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
                  urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
              }
              urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
              if (_this.transportSessionId) {
                  urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
              }
              if (_this.lastSessionId) {
                  urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
              }
              if (_this.applicationId) {
                  urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
              }
              if (_this.appCheckToken) {
                  urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
              }
              if (typeof location !== 'undefined' &&
                  location.hostname &&
                  FORGE_DOMAIN_RE.test(location.hostname)) {
                  urlParams[REFERER_PARAM] = FORGE_REF;
              }
              var connectURL = _this.urlFn(urlParams);
              _this.log_('Connecting via long-poll to ' + connectURL);
              _this.scriptTagHolder.addTag(connectURL, function () {
                  /* do nothing */
              });
          });
      };
      /**
       * Call this when a handshake has completed successfully and we want to consider the connection established
       */
      BrowserPollConnection.prototype.start = function () {
          this.scriptTagHolder.startLongPoll(this.id, this.password);
          this.addDisconnectPingFrame(this.id, this.password);
      };
      /**
       * Forces long polling to be considered as a potential transport
       */
      BrowserPollConnection.forceAllow = function () {
          BrowserPollConnection.forceAllow_ = true;
      };
      /**
       * Forces longpolling to not be considered as a potential transport
       */
      BrowserPollConnection.forceDisallow = function () {
          BrowserPollConnection.forceDisallow_ = true;
      };
      // Static method, use string literal so it can be accessed in a generic way
      BrowserPollConnection.isAvailable = function () {
          if (isNodeSdk()) {
              return false;
          }
          else if (BrowserPollConnection.forceAllow_) {
              return true;
          }
          else {
              // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
              // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
              return (!BrowserPollConnection.forceDisallow_ &&
                  typeof document !== 'undefined' &&
                  document.createElement != null &&
                  !isChromeExtensionContentScript() &&
                  !isWindowsStoreApp());
          }
      };
      /**
       * No-op for polling
       */
      BrowserPollConnection.prototype.markConnectionHealthy = function () { };
      /**
       * Stops polling and cleans up the iframe
       */
      BrowserPollConnection.prototype.shutdown_ = function () {
          this.isClosed_ = true;
          if (this.scriptTagHolder) {
              this.scriptTagHolder.close();
              this.scriptTagHolder = null;
          }
          //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
          if (this.myDisconnFrame) {
              document.body.removeChild(this.myDisconnFrame);
              this.myDisconnFrame = null;
          }
          if (this.connectTimeoutTimer_) {
              clearTimeout(this.connectTimeoutTimer_);
              this.connectTimeoutTimer_ = null;
          }
      };
      /**
       * Triggered when this transport is closed
       */
      BrowserPollConnection.prototype.onClosed_ = function () {
          if (!this.isClosed_) {
              this.log_('Longpoll is closing itself');
              this.shutdown_();
              if (this.onDisconnect_) {
                  this.onDisconnect_(this.everConnected_);
                  this.onDisconnect_ = null;
              }
          }
      };
      /**
       * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
       * that we've left.
       */
      BrowserPollConnection.prototype.close = function () {
          if (!this.isClosed_) {
              this.log_('Longpoll is being closed.');
              this.shutdown_();
          }
      };
      /**
       * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
       * broken into chunks (since URLs have a small maximum length).
       * @param data - The JSON data to transmit.
       */
      BrowserPollConnection.prototype.send = function (data) {
          var dataStr = stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //first, lets get the base64-encoded data
          var base64data = base64Encode(dataStr);
          //We can only fit a certain amount in each URL, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
          //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
          //of segments so that we can reassemble the packet on the server.
          for (var i = 0; i < dataSegs.length; i++) {
              this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
              this.curSegmentNum++;
          }
      };
      /**
       * This is how we notify the server that we're leaving.
       * We aren't able to send requests with DHTML on a window close event, but we can
       * trigger XHR requests in some browsers (everything but Opera basically).
       */
      BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
          if (isNodeSdk()) {
              return;
          }
          this.myDisconnFrame = document.createElement('iframe');
          var urlParams = {};
          urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
          urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
          urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
          this.myDisconnFrame.src = this.urlFn(urlParams);
          this.myDisconnFrame.style.display = 'none';
          document.body.appendChild(this.myDisconnFrame);
      };
      /**
       * Used to track the bytes received by this client
       */
      BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
          // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
          var bytesReceived = stringify(args).length;
          this.bytesReceived += bytesReceived;
          this.stats_.incrementCounter('bytes_received', bytesReceived);
      };
      return BrowserPollConnection;
  }());
  /*********************************************************************************************
   * A wrapper around an iframe that is used as a long-polling script holder.
   *********************************************************************************************/
  var FirebaseIFrameScriptHolder = /** @class */ (function () {
      /**
       * @param commandCB - The callback to be called when control commands are recevied from the server.
       * @param onMessageCB - The callback to be triggered when responses arrive from the server.
       * @param onDisconnect - The callback to be triggered when this tag holder is closed
       * @param urlFn - A function that provides the URL of the endpoint to send data to.
       */
      function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
          this.onDisconnect = onDisconnect;
          this.urlFn = urlFn;
          //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
          //problems in some browsers.
          this.outstandingRequests = new Set();
          //A queue of the pending segments waiting for transmission to the server.
          this.pendingSegs = [];
          //A serial number. We use this for two things:
          // 1) A way to ensure the browser doesn't cache responses to polls
          // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
          //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
          //    JSONP code in the order it was added to the iframe.
          this.currentSerial = Math.floor(Math.random() * 100000000);
          // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
          // incoming data from the server that we're waiting for).
          this.sendNewPolls = true;
          if (!isNodeSdk()) {
              //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
              //iframes where we put the long-polling script tags. We have two callbacks:
              //   1) Command Callback - Triggered for control issues, like starting a connection.
              //   2) Message Callback - Triggered when new data arrives.
              this.uniqueCallbackIdentifier = LUIDGenerator();
              window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
              window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
              //Create an iframe for us to add script tags to.
              this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
              // Set the iframe's contents.
              var script = '';
              // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
              // for ie9, but ie8 needs to do it again in the document itself.
              if (this.myIFrame.src &&
                  this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                  var currentDomain = document.domain;
                  script = '<script>document.domain="' + currentDomain + '";</script>';
              }
              var iframeContents = '<html><body>' + script + '</body></html>';
              try {
                  this.myIFrame.doc.open();
                  this.myIFrame.doc.write(iframeContents);
                  this.myIFrame.doc.close();
              }
              catch (e) {
                  log('frame writing exception');
                  if (e.stack) {
                      log(e.stack);
                  }
                  log(e);
              }
          }
          else {
              this.commandCB = commandCB;
              this.onMessageCB = onMessageCB;
          }
      }
      /**
       * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
       * actually use.
       */
      FirebaseIFrameScriptHolder.createIFrame_ = function () {
          var iframe = document.createElement('iframe');
          iframe.style.display = 'none';
          // This is necessary in order to initialize the document inside the iframe
          if (document.body) {
              document.body.appendChild(iframe);
              try {
                  // If document.domain has been modified in IE, this will throw an error, and we need to set the
                  // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                  // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                  var a = iframe.contentWindow.document;
                  if (!a) {
                      // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                      log('No IE domain setting required');
                  }
              }
              catch (e) {
                  var domain = document.domain;
                  iframe.src =
                      "javascript:void((function(){document.open();document.domain='" +
                          domain +
                          "';document.close();})())";
              }
          }
          else {
              // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
              // never gets hit.
              throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
          }
          // Get the document of the iframe in a browser-specific way.
          if (iframe.contentDocument) {
              iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
          }
          else if (iframe.contentWindow) {
              iframe.doc = iframe.contentWindow.document; // Internet Explorer
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }
          else if (iframe.document) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              iframe.doc = iframe.document; //others?
          }
          return iframe;
      };
      /**
       * Cancel all outstanding queries and remove the frame.
       */
      FirebaseIFrameScriptHolder.prototype.close = function () {
          var _this = this;
          //Mark this iframe as dead, so no new requests are sent.
          this.alive = false;
          if (this.myIFrame) {
              //We have to actually remove all of the html inside this iframe before removing it from the
              //window, or IE will continue loading and executing the script tags we've already added, which
              //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
              this.myIFrame.doc.body.innerHTML = '';
              setTimeout(function () {
                  if (_this.myIFrame !== null) {
                      document.body.removeChild(_this.myIFrame);
                      _this.myIFrame = null;
                  }
              }, Math.floor(0));
          }
          // Protect from being called recursively.
          var onDisconnect = this.onDisconnect;
          if (onDisconnect) {
              this.onDisconnect = null;
              onDisconnect();
          }
      };
      /**
       * Actually start the long-polling session by adding the first script tag(s) to the iframe.
       * @param id - The ID of this connection
       * @param pw - The password for this connection
       */
      FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
          this.myID = id;
          this.myPW = pw;
          this.alive = true;
          //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
          while (this.newRequest_()) { }
      };
      /**
       * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
       * too many outstanding requests and we are still alive.
       *
       * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
       * needed.
       */
      FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
          // We keep one outstanding request open all the time to receive data, but if we need to send data
          // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
          // close the old request.
          if (this.alive &&
              this.sendNewPolls &&
              this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
              //construct our url
              this.currentSerial++;
              var urlParams = {};
              urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
              urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
              var theURL = this.urlFn(urlParams);
              //Now add as much data as we can.
              var curDataString = '';
              var i = 0;
              while (this.pendingSegs.length > 0) {
                  //first, lets see if the next segment will fit.
                  var nextSeg = this.pendingSegs[0];
                  if (nextSeg.d.length +
                      SEG_HEADER_SIZE +
                      curDataString.length <=
                      MAX_URL_DATA_SIZE) {
                      //great, the segment will fit. Lets append it.
                      var theSeg = this.pendingSegs.shift();
                      curDataString =
                          curDataString +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                              i +
                              '=' +
                              theSeg.seg +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                              i +
                              '=' +
                              theSeg.ts +
                              '&' +
                              FIREBASE_LONGPOLL_DATA_PARAM +
                              i +
                              '=' +
                              theSeg.d;
                      i++;
                  }
                  else {
                      break;
                  }
              }
              theURL = theURL + curDataString;
              this.addLongPollTag_(theURL, this.currentSerial);
              return true;
          }
          else {
              return false;
          }
      };
      /**
       * Queue a packet for transmission to the server.
       * @param segnum - A sequential id for this packet segment used for reassembly
       * @param totalsegs - The total number of segments in this packet
       * @param data - The data for this segment.
       */
      FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
          //add this to the queue of segments to send.
          this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
          //send the data immediately if there isn't already data being transmitted, unless
          //startLongPoll hasn't been called yet.
          if (this.alive) {
              this.newRequest_();
          }
      };
      /**
       * Add a script tag for a regular long-poll request.
       * @param url - The URL of the script tag.
       * @param serial - The serial number of the request.
       */
      FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
          var _this = this;
          //remember that we sent this request.
          this.outstandingRequests.add(serial);
          var doNewRequest = function () {
              _this.outstandingRequests.delete(serial);
              _this.newRequest_();
          };
          // If this request doesn't return on its own accord (by the server sending us some data), we'll
          // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
          var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
          var readyStateCB = function () {
              // Request completed.  Cancel the keepalive.
              clearTimeout(keepaliveTimeout);
              // Trigger a new request so we can continue receiving data.
              doNewRequest();
          };
          this.addTag(url, readyStateCB);
      };
      /**
       * Add an arbitrary script tag to the iframe.
       * @param url - The URL for the script tag source.
       * @param loadCB - A callback to be triggered once the script has loaded.
       */
      FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
          var _this = this;
          if (isNodeSdk()) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              this.doNodeLongPoll(url, loadCB);
          }
          else {
              setTimeout(function () {
                  try {
                      // if we're already closed, don't add this poll
                      if (!_this.sendNewPolls) {
                          return;
                      }
                      var newScript_1 = _this.myIFrame.doc.createElement('script');
                      newScript_1.type = 'text/javascript';
                      newScript_1.async = true;
                      newScript_1.src = url;
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      newScript_1.onload = newScript_1.onreadystatechange = function () {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          var rstate = newScript_1.readyState;
                          if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                              // eslint-disable-next-line @typescript-eslint/no-explicit-any
                              newScript_1.onload = newScript_1.onreadystatechange = null;
                              if (newScript_1.parentNode) {
                                  newScript_1.parentNode.removeChild(newScript_1);
                              }
                              loadCB();
                          }
                      };
                      newScript_1.onerror = function () {
                          log('Long-poll script failed to load: ' + url);
                          _this.sendNewPolls = false;
                          _this.close();
                      };
                      _this.myIFrame.doc.body.appendChild(newScript_1);
                  }
                  catch (e) {
                      // TODO: we should make this error visible somehow
                  }
              }, Math.floor(1));
          }
      };
      return FirebaseIFrameScriptHolder;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var WEBSOCKET_MAX_FRAME_SIZE = 16384;
  var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
  var WebSocketImpl = null;
  if (typeof MozWebSocket !== 'undefined') {
      WebSocketImpl = MozWebSocket;
  }
  else if (typeof WebSocket !== 'undefined') {
      WebSocketImpl = WebSocket;
  }
  /**
   * Create a new websocket connection with the given callbacks.
   */
  var WebSocketConnection = /** @class */ (function () {
      /**
       * @param connId identifier for this transport
       * @param repoInfo The info for the websocket endpoint.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The App Check Token for this client.
       * @param authToken The Auth Token for this client.
       * @param transportSessionId Optional transportSessionId if this is connecting
       * to an existing transport session
       * @param lastSessionId Optional lastSessionId if there was a previous
       * connection
       */
      function WebSocketConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
          this.connId = connId;
          this.applicationId = applicationId;
          this.appCheckToken = appCheckToken;
          this.authToken = authToken;
          this.keepaliveTimer = null;
          this.frames = null;
          this.totalFrames = 0;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.log_ = logWrapper(this.connId);
          this.stats_ = statsManagerGetCollection(repoInfo);
          this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);
          this.nodeAdmin = repoInfo.nodeAdmin;
      }
      /**
       * @param repoInfo - The info for the websocket endpoint.
       * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
       *                                         session
       * @param lastSessionId - Optional lastSessionId if there was a previous connection
       * @returns connection url
       */
      WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId, appCheckToken) {
          var urlParams = {};
          urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
          if (!isNodeSdk() &&
              typeof location !== 'undefined' &&
              location.hostname &&
              FORGE_DOMAIN_RE.test(location.hostname)) {
              urlParams[REFERER_PARAM] = FORGE_REF;
          }
          if (transportSessionId) {
              urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
          }
          if (lastSessionId) {
              urlParams[LAST_SESSION_PARAM] = lastSessionId;
          }
          if (appCheckToken) {
              urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
          }
          return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
      };
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
          var _this = this;
          this.onDisconnect = onDisconnect;
          this.onMessage = onMessage;
          this.log_('Websocket connecting to ' + this.connURL);
          this.everConnected_ = false;
          // Assume failure until proven otherwise.
          PersistentStorage.set('previous_websocket_failure', true);
          try {
              if (isNodeSdk()) {
                  var device = this.nodeAdmin ? 'AdminNode' : 'Node';
                  // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                  var options = {
                      headers: {
                          'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
                          'X-Firebase-GMPID': this.applicationId || ''
                      }
                  };
                  // If using Node with admin creds, AppCheck-related checks are unnecessary.
                  // Note that we send the credentials here even if they aren't admin credentials, which is
                  // not a problem.
                  // Note that this header is just used to bypass appcheck, and the token should still be sent
                  // through the websocket connection once it is established.
                  if (this.authToken) {
                      options.headers['Authorization'] = "Bearer " + this.authToken;
                  }
                  if (this.appCheckToken) {
                      options.headers['X-Firebase-AppCheck'] = this.appCheckToken;
                  }
                  // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                  var env = process['env'];
                  var proxy = this.connURL.indexOf('wss://') === 0
                      ? env['HTTPS_PROXY'] || env['https_proxy']
                      : env['HTTP_PROXY'] || env['http_proxy'];
                  if (proxy) {
                      options['proxy'] = { origin: proxy };
                  }
                  this.mySock = new WebSocketImpl(this.connURL, [], options);
              }
              else {
                  var options = {
                      headers: {
                          'X-Firebase-GMPID': this.applicationId || '',
                          'X-Firebase-AppCheck': this.appCheckToken || ''
                      }
                  };
                  this.mySock = new WebSocketImpl(this.connURL, [], options);
              }
          }
          catch (e) {
              this.log_('Error instantiating WebSocket.');
              var error = e.message || e.data;
              if (error) {
                  this.log_(error);
              }
              this.onClosed_();
              return;
          }
          this.mySock.onopen = function () {
              _this.log_('Websocket connected.');
              _this.everConnected_ = true;
          };
          this.mySock.onclose = function () {
              _this.log_('Websocket connection was disconnected.');
              _this.mySock = null;
              _this.onClosed_();
          };
          this.mySock.onmessage = function (m) {
              _this.handleIncomingFrame(m);
          };
          this.mySock.onerror = function (e) {
              _this.log_('WebSocket error.  Closing connection.');
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var error = e.message || e.data;
              if (error) {
                  _this.log_(error);
              }
              _this.onClosed_();
          };
      };
      /**
       * No-op for websockets, we don't need to do anything once the connection is confirmed as open
       */
      WebSocketConnection.prototype.start = function () { };
      WebSocketConnection.forceDisallow = function () {
          WebSocketConnection.forceDisallow_ = true;
      };
      WebSocketConnection.isAvailable = function () {
          var isOldAndroid = false;
          if (typeof navigator !== 'undefined' && navigator.userAgent) {
              var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
              var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
              if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                  if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                      isOldAndroid = true;
                  }
              }
          }
          return (!isOldAndroid &&
              WebSocketImpl !== null &&
              !WebSocketConnection.forceDisallow_);
      };
      /**
       * Returns true if we previously failed to connect with this transport.
       */
      WebSocketConnection.previouslyFailed = function () {
          // If our persistent storage is actually only in-memory storage,
          // we default to assuming that it previously failed to be safe.
          return (PersistentStorage.isInMemoryStorage ||
              PersistentStorage.get('previous_websocket_failure') === true);
      };
      WebSocketConnection.prototype.markConnectionHealthy = function () {
          PersistentStorage.remove('previous_websocket_failure');
      };
      WebSocketConnection.prototype.appendFrame_ = function (data) {
          this.frames.push(data);
          if (this.frames.length === this.totalFrames) {
              var fullMess = this.frames.join('');
              this.frames = null;
              var jsonMess = jsonEval(fullMess);
              //handle the message
              this.onMessage(jsonMess);
          }
      };
      /**
       * @param frameCount - The number of frames we are expecting from the server
       */
      WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
          this.totalFrames = frameCount;
          this.frames = [];
      };
      /**
       * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
       * @returns Any remaining data to be process, or null if there is none
       */
      WebSocketConnection.prototype.extractFrameCount_ = function (data) {
          assert(this.frames === null, 'We already have a frame buffer');
          // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
          // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
          if (data.length <= 6) {
              var frameCount = Number(data);
              if (!isNaN(frameCount)) {
                  this.handleNewFrameCount_(frameCount);
                  return null;
              }
          }
          this.handleNewFrameCount_(1);
          return data;
      };
      /**
       * Process a websocket frame that has arrived from the server.
       * @param mess - The frame data
       */
      WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
          if (this.mySock === null) {
              return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
          }
          var data = mess['data'];
          this.bytesReceived += data.length;
          this.stats_.incrementCounter('bytes_received', data.length);
          this.resetKeepAlive();
          if (this.frames !== null) {
              // we're buffering
              this.appendFrame_(data);
          }
          else {
              // try to parse out a frame count, otherwise, assume 1 and process it
              var remainingData = this.extractFrameCount_(data);
              if (remainingData !== null) {
                  this.appendFrame_(remainingData);
              }
          }
      };
      /**
       * Send a message to the server
       * @param data - The JSON object to transmit
       */
      WebSocketConnection.prototype.send = function (data) {
          this.resetKeepAlive();
          var dataStr = stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //We can only fit a certain amount in each websocket frame, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
          //Send the length header
          if (dataSegs.length > 1) {
              this.sendString_(String(dataSegs.length));
          }
          //Send the actual data in segments.
          for (var i = 0; i < dataSegs.length; i++) {
              this.sendString_(dataSegs[i]);
          }
      };
      WebSocketConnection.prototype.shutdown_ = function () {
          this.isClosed_ = true;
          if (this.keepaliveTimer) {
              clearInterval(this.keepaliveTimer);
              this.keepaliveTimer = null;
          }
          if (this.mySock) {
              this.mySock.close();
              this.mySock = null;
          }
      };
      WebSocketConnection.prototype.onClosed_ = function () {
          if (!this.isClosed_) {
              this.log_('WebSocket is closing itself');
              this.shutdown_();
              // since this is an internal close, trigger the close listener
              if (this.onDisconnect) {
                  this.onDisconnect(this.everConnected_);
                  this.onDisconnect = null;
              }
          }
      };
      /**
       * External-facing close handler.
       * Close the websocket and kill the connection.
       */
      WebSocketConnection.prototype.close = function () {
          if (!this.isClosed_) {
              this.log_('WebSocket is being closed');
              this.shutdown_();
          }
      };
      /**
       * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
       * the last activity.
       */
      WebSocketConnection.prototype.resetKeepAlive = function () {
          var _this = this;
          clearInterval(this.keepaliveTimer);
          this.keepaliveTimer = setInterval(function () {
              //If there has been no websocket activity for a while, send a no-op
              if (_this.mySock) {
                  _this.sendString_('0');
              }
              _this.resetKeepAlive();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
      };
      /**
       * Send a string over the websocket.
       *
       * @param str - String to send.
       */
      WebSocketConnection.prototype.sendString_ = function (str) {
          // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
          // calls for some unknown reason.  We treat these as an error and disconnect.
          // See https://app.asana.com/0/58926111402292/68021340250410
          try {
              this.mySock.send(str);
          }
          catch (e) {
              this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
              setTimeout(this.onClosed_.bind(this), 0);
          }
      };
      /**
       * Number of response before we consider the connection "healthy."
       */
      WebSocketConnection.responsesRequiredToBeHealthy = 2;
      /**
       * Time to wait for the connection te become healthy before giving up.
       */
      WebSocketConnection.healthyTimeout = 30000;
      return WebSocketConnection;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Currently simplistic, this class manages what transport a Connection should use at various stages of its
   * lifecycle.
   *
   * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
   * they are available.
   */
  var TransportManager = /** @class */ (function () {
      /**
       * @param repoInfo - Metadata around the namespace we're connecting to
       */
      function TransportManager(repoInfo) {
          this.initTransports_(repoInfo);
      }
      Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
          get: function () {
              return [BrowserPollConnection, WebSocketConnection];
          },
          enumerable: false,
          configurable: true
      });
      TransportManager.prototype.initTransports_ = function (repoInfo) {
          var e_1, _a;
          var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
          var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
          if (repoInfo.webSocketOnly) {
              if (!isWebSocketsAvailable) {
                  warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
              }
              isSkipPollConnection = true;
          }
          if (isSkipPollConnection) {
              this.transports_ = [WebSocketConnection];
          }
          else {
              var transports = (this.transports_ = []);
              try {
                  for (var _b = __values$4(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var transport = _c.value;
                      if (transport && transport['isAvailable']()) {
                          transports.push(transport);
                      }
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
          }
      };
      /**
       * @returns The constructor for the initial transport to use
       */
      TransportManager.prototype.initialTransport = function () {
          if (this.transports_.length > 0) {
              return this.transports_[0];
          }
          else {
              throw new Error('No transports available');
          }
      };
      /**
       * @returns The constructor for the next transport, or null
       */
      TransportManager.prototype.upgradeTransport = function () {
          if (this.transports_.length > 1) {
              return this.transports_[1];
          }
          else {
              return null;
          }
      };
      return TransportManager;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Abort upgrade attempt if it takes longer than 60s.
  var UPGRADE_TIMEOUT = 60000;
  // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
  // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
  var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
  // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
  // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
  // but we've sent/received enough bytes, we don't cancel the connection.
  var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
  var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
  var MESSAGE_TYPE = 't';
  var MESSAGE_DATA = 'd';
  var CONTROL_SHUTDOWN = 's';
  var CONTROL_RESET = 'r';
  var CONTROL_ERROR = 'e';
  var CONTROL_PONG = 'o';
  var SWITCH_ACK = 'a';
  var END_TRANSMISSION = 'n';
  var PING = 'p';
  var SERVER_HELLO = 'h';
  /**
   * Creates a new real-time connection to the server using whichever method works
   * best in the current browser.
   */
  var Connection = /** @class */ (function () {
      /**
       * @param id - an id for this connection
       * @param repoInfo_ - the info for the endpoint to connect to
       * @param applicationId_ - the Firebase App ID for this project
       * @param appCheckToken_ - The App Check Token for this device.
       * @param authToken_ - The auth token for this session.
       * @param onMessage_ - the callback to be triggered when a server-push message arrives
       * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
       * @param onDisconnect_ - the callback to be triggered when a connection was lost
       * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
       * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
       */
      function Connection(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
          this.id = id;
          this.repoInfo_ = repoInfo_;
          this.applicationId_ = applicationId_;
          this.appCheckToken_ = appCheckToken_;
          this.authToken_ = authToken_;
          this.onMessage_ = onMessage_;
          this.onReady_ = onReady_;
          this.onDisconnect_ = onDisconnect_;
          this.onKill_ = onKill_;
          this.lastSessionId = lastSessionId;
          this.connectionCount = 0;
          this.pendingDataMessages = [];
          this.state_ = 0 /* CONNECTING */;
          this.log_ = logWrapper('c:' + this.id + ':');
          this.transportManager_ = new TransportManager(repoInfo_);
          this.log_('Connection created');
          this.start_();
      }
      /**
       * Starts a connection attempt
       */
      Connection.prototype.start_ = function () {
          var _this = this;
          var conn = this.transportManager_.initialTransport();
          this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
          var onMessageReceived = this.connReceiver_(this.conn_);
          var onConnectionLost = this.disconnReceiver_(this.conn_);
          this.tx_ = this.conn_;
          this.rx_ = this.conn_;
          this.secondaryConn_ = null;
          this.isHealthy_ = false;
          /*
           * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
           * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
           * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
           * still have the context of your originating frame.
           */
          setTimeout(function () {
              // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
              _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
          }, Math.floor(0));
          var healthyTimeoutMS = conn['healthyTimeout'] || 0;
          if (healthyTimeoutMS > 0) {
              this.healthyTimeout_ = setTimeoutNonBlocking(function () {
                  _this.healthyTimeout_ = null;
                  if (!_this.isHealthy_) {
                      if (_this.conn_ &&
                          _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                          _this.log_('Connection exceeded healthy timeout but has received ' +
                              _this.conn_.bytesReceived +
                              ' bytes.  Marking connection healthy.');
                          _this.isHealthy_ = true;
                          _this.conn_.markConnectionHealthy();
                      }
                      else if (_this.conn_ &&
                          _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                          _this.log_('Connection exceeded healthy timeout but has sent ' +
                              _this.conn_.bytesSent +
                              ' bytes.  Leaving connection alive.');
                          // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                          // the server.
                      }
                      else {
                          _this.log_('Closing unhealthy connection after timeout.');
                          _this.close();
                      }
                  }
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
              }, Math.floor(healthyTimeoutMS));
          }
      };
      Connection.prototype.nextTransportId_ = function () {
          return 'c:' + this.id + ':' + this.connectionCount++;
      };
      Connection.prototype.disconnReceiver_ = function (conn) {
          var _this = this;
          return function (everConnected) {
              if (conn === _this.conn_) {
                  _this.onConnectionLost_(everConnected);
              }
              else if (conn === _this.secondaryConn_) {
                  _this.log_('Secondary connection lost.');
                  _this.onSecondaryConnectionLost_();
              }
              else {
                  _this.log_('closing an old connection');
              }
          };
      };
      Connection.prototype.connReceiver_ = function (conn) {
          var _this = this;
          return function (message) {
              if (_this.state_ !== 2 /* DISCONNECTED */) {
                  if (conn === _this.rx_) {
                      _this.onPrimaryMessageReceived_(message);
                  }
                  else if (conn === _this.secondaryConn_) {
                      _this.onSecondaryMessageReceived_(message);
                  }
                  else {
                      _this.log_('message on old connection');
                  }
              }
          };
      };
      /**
       * @param dataMsg - An arbitrary data message to be sent to the server
       */
      Connection.prototype.sendRequest = function (dataMsg) {
          // wrap in a data message envelope and send it on
          var msg = { t: 'd', d: dataMsg };
          this.sendData_(msg);
      };
      Connection.prototype.tryCleanupConnection = function () {
          if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
              this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
              this.conn_ = this.secondaryConn_;
              this.secondaryConn_ = null;
              // the server will shutdown the old connection
          }
      };
      Connection.prototype.onSecondaryControl_ = function (controlData) {
          if (MESSAGE_TYPE in controlData) {
              var cmd = controlData[MESSAGE_TYPE];
              if (cmd === SWITCH_ACK) {
                  this.upgradeIfSecondaryHealthy_();
              }
              else if (cmd === CONTROL_RESET) {
                  // Most likely the session wasn't valid. Abandon the switch attempt
                  this.log_('Got a reset on secondary, closing it');
                  this.secondaryConn_.close();
                  // If we were already using this connection for something, than we need to fully close
                  if (this.tx_ === this.secondaryConn_ ||
                      this.rx_ === this.secondaryConn_) {
                      this.close();
                  }
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on secondary.');
                  this.secondaryResponsesRequired_--;
                  this.upgradeIfSecondaryHealthy_();
              }
          }
      };
      Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
          var layer = requireKey('t', parsedData);
          var data = requireKey('d', parsedData);
          if (layer === 'c') {
              this.onSecondaryControl_(data);
          }
          else if (layer === 'd') {
              // got a data message, but we're still second connection. Need to buffer it up
              this.pendingDataMessages.push(data);
          }
          else {
              throw new Error('Unknown protocol layer: ' + layer);
          }
      };
      Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
          if (this.secondaryResponsesRequired_ <= 0) {
              this.log_('Secondary connection is healthy.');
              this.isHealthy_ = true;
              this.secondaryConn_.markConnectionHealthy();
              this.proceedWithUpgrade_();
          }
          else {
              // Send a ping to make sure the connection is healthy.
              this.log_('sending ping on secondary.');
              this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
          }
      };
      Connection.prototype.proceedWithUpgrade_ = function () {
          // tell this connection to consider itself open
          this.secondaryConn_.start();
          // send ack
          this.log_('sending client ack on secondary');
          this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
          // send end packet on primary transport, switch to sending on this one
          // can receive on this one, buffer responses until end received on primary transport
          this.log_('Ending transmission on primary');
          this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
          this.tx_ = this.secondaryConn_;
          this.tryCleanupConnection();
      };
      Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
          // Must refer to parsedData properties in quotes, so closure doesn't touch them.
          var layer = requireKey('t', parsedData);
          var data = requireKey('d', parsedData);
          if (layer === 'c') {
              this.onControl_(data);
          }
          else if (layer === 'd') {
              this.onDataMessage_(data);
          }
      };
      Connection.prototype.onDataMessage_ = function (message) {
          this.onPrimaryResponse_();
          // We don't do anything with data messages, just kick them up a level
          this.onMessage_(message);
      };
      Connection.prototype.onPrimaryResponse_ = function () {
          if (!this.isHealthy_) {
              this.primaryResponsesRequired_--;
              if (this.primaryResponsesRequired_ <= 0) {
                  this.log_('Primary connection is healthy.');
                  this.isHealthy_ = true;
                  this.conn_.markConnectionHealthy();
              }
          }
      };
      Connection.prototype.onControl_ = function (controlData) {
          var cmd = requireKey(MESSAGE_TYPE, controlData);
          if (MESSAGE_DATA in controlData) {
              var payload = controlData[MESSAGE_DATA];
              if (cmd === SERVER_HELLO) {
                  this.onHandshake_(payload);
              }
              else if (cmd === END_TRANSMISSION) {
                  this.log_('recvd end transmission on primary');
                  this.rx_ = this.secondaryConn_;
                  for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                      this.onDataMessage_(this.pendingDataMessages[i]);
                  }
                  this.pendingDataMessages = [];
                  this.tryCleanupConnection();
              }
              else if (cmd === CONTROL_SHUTDOWN) {
                  // This was previously the 'onKill' callback passed to the lower-level connection
                  // payload in this case is the reason for the shutdown. Generally a human-readable error
                  this.onConnectionShutdown_(payload);
              }
              else if (cmd === CONTROL_RESET) {
                  // payload in this case is the host we should contact
                  this.onReset_(payload);
              }
              else if (cmd === CONTROL_ERROR) {
                  error('Server Error: ' + payload);
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on primary.');
                  this.onPrimaryResponse_();
                  this.sendPingOnPrimaryIfNecessary_();
              }
              else {
                  error('Unknown control packet command: ' + cmd);
              }
          }
      };
      /**
       * @param handshake - The handshake data returned from the server
       */
      Connection.prototype.onHandshake_ = function (handshake) {
          var timestamp = handshake.ts;
          var version = handshake.v;
          var host = handshake.h;
          this.sessionId = handshake.s;
          this.repoInfo_.host = host;
          // if we've already closed the connection, then don't bother trying to progress further
          if (this.state_ === 0 /* CONNECTING */) {
              this.conn_.start();
              this.onConnectionEstablished_(this.conn_, timestamp);
              if (PROTOCOL_VERSION !== version) {
                  warn('Protocol version mismatch detected');
              }
              // TODO: do we want to upgrade? when? maybe a delay?
              this.tryStartUpgrade_();
          }
      };
      Connection.prototype.tryStartUpgrade_ = function () {
          var conn = this.transportManager_.upgradeTransport();
          if (conn) {
              this.startUpgrade_(conn);
          }
      };
      Connection.prototype.startUpgrade_ = function (conn) {
          var _this = this;
          this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.secondaryResponsesRequired_ =
              conn['responsesRequiredToBeHealthy'] || 0;
          var onMessage = this.connReceiver_(this.secondaryConn_);
          var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
          this.secondaryConn_.open(onMessage, onDisconnect);
          // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
          setTimeoutNonBlocking(function () {
              if (_this.secondaryConn_) {
                  _this.log_('Timed out trying to upgrade.');
                  _this.secondaryConn_.close();
              }
          }, Math.floor(UPGRADE_TIMEOUT));
      };
      Connection.prototype.onReset_ = function (host) {
          this.log_('Reset packet received.  New host: ' + host);
          this.repoInfo_.host = host;
          // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
          // We don't currently support resets after the connection has already been established
          if (this.state_ === 1 /* CONNECTED */) {
              this.close();
          }
          else {
              // Close whatever connections we have open and start again.
              this.closeConnections_();
              this.start_();
          }
      };
      Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
          var _this = this;
          this.log_('Realtime connection established.');
          this.conn_ = conn;
          this.state_ = 1 /* CONNECTED */;
          if (this.onReady_) {
              this.onReady_(timestamp, this.sessionId);
              this.onReady_ = null;
          }
          // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
          // send some pings.
          if (this.primaryResponsesRequired_ === 0) {
              this.log_('Primary connection is healthy.');
              this.isHealthy_ = true;
          }
          else {
              setTimeoutNonBlocking(function () {
                  _this.sendPingOnPrimaryIfNecessary_();
              }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
          }
      };
      Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
          // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
          if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
              this.log_('sending ping on primary.');
              this.sendData_({ t: 'c', d: { t: PING, d: {} } });
          }
      };
      Connection.prototype.onSecondaryConnectionLost_ = function () {
          var conn = this.secondaryConn_;
          this.secondaryConn_ = null;
          if (this.tx_ === conn || this.rx_ === conn) {
              // we are relying on this connection already in some capacity. Therefore, a failure is real
              this.close();
          }
      };
      /**
       * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
       * we should flush the host cache
       */
      Connection.prototype.onConnectionLost_ = function (everConnected) {
          this.conn_ = null;
          // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
          // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
          if (!everConnected && this.state_ === 0 /* CONNECTING */) {
              this.log_('Realtime connection failed.');
              // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
              if (this.repoInfo_.isCacheableHost()) {
                  PersistentStorage.remove('host:' + this.repoInfo_.host);
                  // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                  this.repoInfo_.internalHost = this.repoInfo_.host;
              }
          }
          else if (this.state_ === 1 /* CONNECTED */) {
              this.log_('Realtime connection lost.');
          }
          this.close();
      };
      Connection.prototype.onConnectionShutdown_ = function (reason) {
          this.log_('Connection shutdown command received. Shutting down...');
          if (this.onKill_) {
              this.onKill_(reason);
              this.onKill_ = null;
          }
          // We intentionally don't want to fire onDisconnect (kill is a different case),
          // so clear the callback.
          this.onDisconnect_ = null;
          this.close();
      };
      Connection.prototype.sendData_ = function (data) {
          if (this.state_ !== 1 /* CONNECTED */) {
              throw 'Connection is not connected';
          }
          else {
              this.tx_.send(data);
          }
      };
      /**
       * Cleans up this connection, calling the appropriate callbacks
       */
      Connection.prototype.close = function () {
          if (this.state_ !== 2 /* DISCONNECTED */) {
              this.log_('Closing realtime connection.');
              this.state_ = 2 /* DISCONNECTED */;
              this.closeConnections_();
              if (this.onDisconnect_) {
                  this.onDisconnect_();
                  this.onDisconnect_ = null;
              }
          }
      };
      Connection.prototype.closeConnections_ = function () {
          this.log_('Shutting down all connections');
          if (this.conn_) {
              this.conn_.close();
              this.conn_ = null;
          }
          if (this.secondaryConn_) {
              this.secondaryConn_.close();
              this.secondaryConn_ = null;
          }
          if (this.healthyTimeout_) {
              clearTimeout(this.healthyTimeout_);
              this.healthyTimeout_ = null;
          }
      };
      return Connection;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface defining the set of actions that can be performed against the Firebase server
   * (basically corresponds to our wire protocol).
   *
   * @interface
   */
  var ServerActions = /** @class */ (function () {
      function ServerActions() {
      }
      ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
      ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
      /**
       * Refreshes the auth token for the current connection.
       * @param token - The authentication token
       */
      ServerActions.prototype.refreshAuthToken = function (token) { };
      /**
       * Refreshes the app check token for the current connection.
       * @param token The app check token
       */
      ServerActions.prototype.refreshAppCheckToken = function (token) { };
      ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
      ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
      ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
      ServerActions.prototype.reportStats = function (stats) { };
      return ServerActions;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Base class to be used if you want to emit events. Call the constructor with
   * the set of allowed event names.
   */
  var EventEmitter = /** @class */ (function () {
      function EventEmitter(allowedEvents_) {
          this.allowedEvents_ = allowedEvents_;
          this.listeners_ = {};
          assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
      }
      /**
       * To be called by derived classes to trigger events.
       */
      EventEmitter.prototype.trigger = function (eventType) {
          var varArgs = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              varArgs[_i - 1] = arguments[_i];
          }
          if (Array.isArray(this.listeners_[eventType])) {
              // Clone the list, since callbacks could add/remove listeners.
              var listeners = __spreadArray$3([], __read$4(this.listeners_[eventType]));
              for (var i = 0; i < listeners.length; i++) {
                  listeners[i].callback.apply(listeners[i].context, varArgs);
              }
          }
      };
      EventEmitter.prototype.on = function (eventType, callback, context) {
          this.validateEventType_(eventType);
          this.listeners_[eventType] = this.listeners_[eventType] || [];
          this.listeners_[eventType].push({ callback: callback, context: context });
          var eventData = this.getInitialEvent(eventType);
          if (eventData) {
              callback.apply(context, eventData);
          }
      };
      EventEmitter.prototype.off = function (eventType, callback, context) {
          this.validateEventType_(eventType);
          var listeners = this.listeners_[eventType] || [];
          for (var i = 0; i < listeners.length; i++) {
              if (listeners[i].callback === callback &&
                  (!context || context === listeners[i].context)) {
                  listeners.splice(i, 1);
                  return;
              }
          }
      };
      EventEmitter.prototype.validateEventType_ = function (eventType) {
          assert(this.allowedEvents_.find(function (et) {
              return et === eventType;
          }), 'Unknown event: ' + eventType);
      };
      return EventEmitter;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Monitors online state (as reported by window.online/offline events).
   *
   * The expectation is that this could have many false positives (thinks we are online
   * when we're not), but no false negatives.  So we can safely use it to determine when
   * we definitely cannot reach the internet.
   */
  var OnlineMonitor = /** @class */ (function (_super) {
      __extends$4(OnlineMonitor, _super);
      function OnlineMonitor() {
          var _this = _super.call(this, ['online']) || this;
          _this.online_ = true;
          // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
          // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
          // It would seem that the 'online' event does not always fire consistently. So we disable it
          // for Cordova.
          if (typeof window !== 'undefined' &&
              typeof window.addEventListener !== 'undefined' &&
              !isMobileCordova()) {
              window.addEventListener('online', function () {
                  if (!_this.online_) {
                      _this.online_ = true;
                      _this.trigger('online', true);
                  }
              }, false);
              window.addEventListener('offline', function () {
                  if (_this.online_) {
                      _this.online_ = false;
                      _this.trigger('online', false);
                  }
              }, false);
          }
          return _this;
      }
      OnlineMonitor.getInstance = function () {
          return new OnlineMonitor();
      };
      OnlineMonitor.prototype.getInitialEvent = function (eventType) {
          assert(eventType === 'online', 'Unknown event type: ' + eventType);
          return [this.online_];
      };
      OnlineMonitor.prototype.currentlyOnline = function () {
          return this.online_;
      };
      return OnlineMonitor;
  }(EventEmitter));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Maximum key depth. */
  var MAX_PATH_DEPTH = 32;
  /** Maximum number of (UTF8) bytes in a Firebase path. */
  var MAX_PATH_LENGTH_BYTES = 768;
  /**
   * An immutable object representing a parsed path.  It's immutable so that you
   * can pass them around to other functions without worrying about them changing
   * it.
   */
  var Path = /** @class */ (function () {
      /**
       * @param pathOrString - Path string to parse, or another path, or the raw
       * tokens array
       */
      function Path(pathOrString, pieceNum) {
          if (pieceNum === void 0) {
              this.pieces_ = pathOrString.split('/');
              // Remove empty pieces.
              var copyTo = 0;
              for (var i = 0; i < this.pieces_.length; i++) {
                  if (this.pieces_[i].length > 0) {
                      this.pieces_[copyTo] = this.pieces_[i];
                      copyTo++;
                  }
              }
              this.pieces_.length = copyTo;
              this.pieceNum_ = 0;
          }
          else {
              this.pieces_ = pathOrString;
              this.pieceNum_ = pieceNum;
          }
      }
      Path.prototype.toString = function () {
          var pathString = '';
          for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
              if (this.pieces_[i] !== '') {
                  pathString += '/' + this.pieces_[i];
              }
          }
          return pathString || '/';
      };
      return Path;
  }());
  function newEmptyPath() {
      return new Path('');
  }
  function pathGetFront(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
          return null;
      }
      return path.pieces_[path.pieceNum_];
  }
  /**
   * @returns The number of segments in this path
   */
  function pathGetLength(path) {
      return path.pieces_.length - path.pieceNum_;
  }
  function pathPopFront(path) {
      var pieceNum = path.pieceNum_;
      if (pieceNum < path.pieces_.length) {
          pieceNum++;
      }
      return new Path(path.pieces_, pieceNum);
  }
  function pathGetBack(path) {
      if (path.pieceNum_ < path.pieces_.length) {
          return path.pieces_[path.pieces_.length - 1];
      }
      return null;
  }
  function pathToUrlEncodedString(path) {
      var pathString = '';
      for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
          if (path.pieces_[i] !== '') {
              pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
          }
      }
      return pathString || '/';
  }
  /**
   * Shallow copy of the parts of the path.
   *
   */
  function pathSlice(path, begin) {
      if (begin === void 0) { begin = 0; }
      return path.pieces_.slice(path.pieceNum_ + begin);
  }
  function pathParent(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
          return null;
      }
      var pieces = [];
      for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
          pieces.push(path.pieces_[i]);
      }
      return new Path(pieces, 0);
  }
  function pathChild(path, childPathObj) {
      var pieces = [];
      for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
          pieces.push(path.pieces_[i]);
      }
      if (childPathObj instanceof Path) {
          for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
              pieces.push(childPathObj.pieces_[i]);
          }
      }
      else {
          var childPieces = childPathObj.split('/');
          for (var i = 0; i < childPieces.length; i++) {
              if (childPieces[i].length > 0) {
                  pieces.push(childPieces[i]);
              }
          }
      }
      return new Path(pieces, 0);
  }
  /**
   * @returns True if there are no segments in this path
   */
  function pathIsEmpty(path) {
      return path.pieceNum_ >= path.pieces_.length;
  }
  /**
   * @returns The path from outerPath to innerPath
   */
  function newRelativePath(outerPath, innerPath) {
      var outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
      if (outer === null) {
          return innerPath;
      }
      else if (outer === inner) {
          return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
      }
      else {
          throw new Error('INTERNAL ERROR: innerPath (' +
              innerPath +
              ') is not within ' +
              'outerPath (' +
              outerPath +
              ')');
      }
  }
  /**
   * @returns -1, 0, 1 if left is less, equal, or greater than the right.
   */
  function pathCompare(left, right) {
      var leftKeys = pathSlice(left, 0);
      var rightKeys = pathSlice(right, 0);
      for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
          var cmp = nameCompare(leftKeys[i], rightKeys[i]);
          if (cmp !== 0) {
              return cmp;
          }
      }
      if (leftKeys.length === rightKeys.length) {
          return 0;
      }
      return leftKeys.length < rightKeys.length ? -1 : 1;
  }
  /**
   * @returns true if paths are the same.
   */
  function pathEquals(path, other) {
      if (pathGetLength(path) !== pathGetLength(other)) {
          return false;
      }
      for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
          if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
          }
      }
      return true;
  }
  /**
   * @returns True if this path is a parent (or the same as) other
   */
  function pathContains(path, other) {
      var i = path.pieceNum_;
      var j = other.pieceNum_;
      if (pathGetLength(path) > pathGetLength(other)) {
          return false;
      }
      while (i < path.pieces_.length) {
          if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
          }
          ++i;
          ++j;
      }
      return true;
  }
  /**
   * Dynamic (mutable) path used to count path lengths.
   *
   * This class is used to efficiently check paths for valid
   * length (in UTF8 bytes) and depth (used in path validation).
   *
   * Throws Error exception if path is ever invalid.
   *
   * The definition of a path always begins with '/'.
   */
  var ValidationPath = /** @class */ (function () {
      /**
       * @param path - Initial Path.
       * @param errorPrefix_ - Prefix for any error messages.
       */
      function ValidationPath(path, errorPrefix_) {
          this.errorPrefix_ = errorPrefix_;
          this.parts_ = pathSlice(path, 0);
          /** Initialize to number of '/' chars needed in path. */
          this.byteLength_ = Math.max(1, this.parts_.length);
          for (var i = 0; i < this.parts_.length; i++) {
              this.byteLength_ += stringLength(this.parts_[i]);
          }
          validationPathCheckValid(this);
      }
      return ValidationPath;
  }());
  function validationPathPush(validationPath, child) {
      // Count the needed '/'
      if (validationPath.parts_.length > 0) {
          validationPath.byteLength_ += 1;
      }
      validationPath.parts_.push(child);
      validationPath.byteLength_ += stringLength(child);
      validationPathCheckValid(validationPath);
  }
  function validationPathPop(validationPath) {
      var last = validationPath.parts_.pop();
      validationPath.byteLength_ -= stringLength(last);
      // Un-count the previous '/'
      if (validationPath.parts_.length > 0) {
          validationPath.byteLength_ -= 1;
      }
  }
  function validationPathCheckValid(validationPath) {
      if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
          throw new Error(validationPath.errorPrefix_ +
              'has a key path longer than ' +
              MAX_PATH_LENGTH_BYTES +
              ' bytes (' +
              validationPath.byteLength_ +
              ').');
      }
      if (validationPath.parts_.length > MAX_PATH_DEPTH) {
          throw new Error(validationPath.errorPrefix_ +
              'path specified exceeds the maximum depth that can be written (' +
              MAX_PATH_DEPTH +
              ') or object contains a cycle ' +
              validationPathToErrorString(validationPath));
      }
  }
  /**
   * String for use in error messages - uses '.' notation for path.
   */
  function validationPathToErrorString(validationPath) {
      if (validationPath.parts_.length === 0) {
          return '';
      }
      return "in property '" + validationPath.parts_.join('.') + "'";
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var VisibilityMonitor = /** @class */ (function (_super) {
      __extends$4(VisibilityMonitor, _super);
      function VisibilityMonitor() {
          var _this = _super.call(this, ['visible']) || this;
          var hidden;
          var visibilityChange;
          if (typeof document !== 'undefined' &&
              typeof document.addEventListener !== 'undefined') {
              if (typeof document['hidden'] !== 'undefined') {
                  // Opera 12.10 and Firefox 18 and later support
                  visibilityChange = 'visibilitychange';
                  hidden = 'hidden';
              }
              else if (typeof document['mozHidden'] !== 'undefined') {
                  visibilityChange = 'mozvisibilitychange';
                  hidden = 'mozHidden';
              }
              else if (typeof document['msHidden'] !== 'undefined') {
                  visibilityChange = 'msvisibilitychange';
                  hidden = 'msHidden';
              }
              else if (typeof document['webkitHidden'] !== 'undefined') {
                  visibilityChange = 'webkitvisibilitychange';
                  hidden = 'webkitHidden';
              }
          }
          // Initially, we always assume we are visible. This ensures that in browsers
          // without page visibility support or in cases where we are never visible
          // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
          // reconnects
          _this.visible_ = true;
          if (visibilityChange) {
              document.addEventListener(visibilityChange, function () {
                  var visible = !document[hidden];
                  if (visible !== _this.visible_) {
                      _this.visible_ = visible;
                      _this.trigger('visible', visible);
                  }
              }, false);
          }
          return _this;
      }
      VisibilityMonitor.getInstance = function () {
          return new VisibilityMonitor();
      };
      VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
          assert(eventType === 'visible', 'Unknown event type: ' + eventType);
          return [this.visible_];
      };
      return VisibilityMonitor;
  }(EventEmitter));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var RECONNECT_MIN_DELAY = 1000;
  var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
  var GET_CONNECT_TIMEOUT = 3 * 1000;
  var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
  var RECONNECT_DELAY_MULTIPLIER = 1.3;
  var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
  var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
  // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
  var INVALID_TOKEN_THRESHOLD = 3;
  /**
   * Firebase connection.  Abstracts wire protocol and handles reconnecting.
   *
   * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
   * in quotes to make sure the closure compiler does not minify them.
   */
  var PersistentConnection = /** @class */ (function (_super) {
      __extends$4(PersistentConnection, _super);
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param applicationId_ - The Firebase App ID for this project
       * @param onDataUpdate_ - A callback for new data from the server
       */
      function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
          var _this = _super.call(this) || this;
          _this.repoInfo_ = repoInfo_;
          _this.applicationId_ = applicationId_;
          _this.onDataUpdate_ = onDataUpdate_;
          _this.onConnectStatus_ = onConnectStatus_;
          _this.onServerInfoUpdate_ = onServerInfoUpdate_;
          _this.authTokenProvider_ = authTokenProvider_;
          _this.appCheckTokenProvider_ = appCheckTokenProvider_;
          _this.authOverride_ = authOverride_;
          // Used for diagnostic logging.
          _this.id = PersistentConnection.nextPersistentConnectionId_++;
          _this.log_ = logWrapper('p:' + _this.id + ':');
          _this.interruptReasons_ = {};
          _this.listens = new Map();
          _this.outstandingPuts_ = [];
          _this.outstandingGets_ = [];
          _this.outstandingPutCount_ = 0;
          _this.outstandingGetCount_ = 0;
          _this.onDisconnectRequestQueue_ = [];
          _this.connected_ = false;
          _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
          _this.securityDebugCallback_ = null;
          _this.lastSessionId = null;
          _this.establishConnectionTimer_ = null;
          _this.visible_ = false;
          // Before we get connected, we keep a queue of pending messages to send.
          _this.requestCBHash_ = {};
          _this.requestNumber_ = 0;
          _this.realtime_ = null;
          _this.authToken_ = null;
          _this.appCheckToken_ = null;
          _this.forceTokenRefresh_ = false;
          _this.invalidAuthTokenCount_ = 0;
          _this.invalidAppCheckTokenCount_ = 0;
          _this.firstConnection_ = true;
          _this.lastConnectionAttemptTime_ = null;
          _this.lastConnectionEstablishedTime_ = null;
          if (authOverride_ && !isNodeSdk()) {
              throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
          }
          VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
          if (repoInfo_.host.indexOf('fblocal') === -1) {
              OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
          }
          return _this;
      }
      PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
          var curReqNum = ++this.requestNumber_;
          var msg = { r: curReqNum, a: action, b: body };
          this.log_(stringify(msg));
          assert(this.connected_, "sendRequest call when we're not connected not allowed.");
          this.realtime_.sendRequest(msg);
          if (onResponse) {
              this.requestCBHash_[curReqNum] = onResponse;
          }
      };
      PersistentConnection.prototype.get = function (query) {
          var _this = this;
          this.initConnection_();
          var deferred = new Deferred();
          var request = {
              p: query._path.toString(),
              q: query._queryObject
          };
          var outstandingGet = {
              action: 'g',
              request: request,
              onComplete: function (message) {
                  var payload = message['d'];
                  if (message['s'] === 'ok') {
                      _this.onDataUpdate_(request['p'], payload, 
                      /*isMerge*/ false, 
                      /*tag*/ null);
                      deferred.resolve(payload);
                  }
                  else {
                      deferred.reject(payload);
                  }
              }
          };
          this.outstandingGets_.push(outstandingGet);
          this.outstandingGetCount_++;
          var index = this.outstandingGets_.length - 1;
          if (!this.connected_) {
              setTimeout(function () {
                  var get = _this.outstandingGets_[index];
                  if (get === undefined || outstandingGet !== get) {
                      return;
                  }
                  delete _this.outstandingGets_[index];
                  _this.outstandingGetCount_--;
                  if (_this.outstandingGetCount_ === 0) {
                      _this.outstandingGets_ = [];
                  }
                  _this.log_('get ' + index + ' timed out on connection');
                  deferred.reject(new Error('Client is offline.'));
              }, GET_CONNECT_TIMEOUT);
          }
          if (this.connected_) {
              this.sendGet_(index);
          }
          return deferred.promise;
      };
      PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
          this.initConnection_();
          var queryId = query._queryIdentifier;
          var pathString = query._path.toString();
          this.log_('Listen called for ' + pathString + ' ' + queryId);
          if (!this.listens.has(pathString)) {
              this.listens.set(pathString, new Map());
          }
          assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
          assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
          var listenSpec = {
              onComplete: onComplete,
              hashFn: currentHashFn,
              query: query,
              tag: tag
          };
          this.listens.get(pathString).set(queryId, listenSpec);
          if (this.connected_) {
              this.sendListen_(listenSpec);
          }
      };
      PersistentConnection.prototype.sendGet_ = function (index) {
          var _this = this;
          var get = this.outstandingGets_[index];
          this.sendRequest('g', get.request, function (message) {
              delete _this.outstandingGets_[index];
              _this.outstandingGetCount_--;
              if (_this.outstandingGetCount_ === 0) {
                  _this.outstandingGets_ = [];
              }
              if (get.onComplete) {
                  get.onComplete(message);
              }
          });
      };
      PersistentConnection.prototype.sendListen_ = function (listenSpec) {
          var _this = this;
          var query = listenSpec.query;
          var pathString = query._path.toString();
          var queryId = query._queryIdentifier;
          this.log_('Listen on ' + pathString + ' for ' + queryId);
          var req = { /*path*/ p: pathString };
          var action = 'q';
          // Only bother to send query if it's non-default.
          if (listenSpec.tag) {
              req['q'] = query._queryObject;
              req['t'] = listenSpec.tag;
          }
          req[ /*hash*/'h'] = listenSpec.hashFn();
          this.sendRequest(action, req, function (message) {
              var payload = message[ /*data*/'d'];
              var status = message[ /*status*/'s'];
              // print warnings in any case...
              PersistentConnection.warnOnListenWarnings_(payload, query);
              var currentListenSpec = _this.listens.get(pathString) &&
                  _this.listens.get(pathString).get(queryId);
              // only trigger actions if the listen hasn't been removed and readded
              if (currentListenSpec === listenSpec) {
                  _this.log_('listen response', message);
                  if (status !== 'ok') {
                      _this.removeListen_(pathString, queryId);
                  }
                  if (listenSpec.onComplete) {
                      listenSpec.onComplete(status, payload);
                  }
              }
          });
      };
      PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
          if (payload && typeof payload === 'object' && contains(payload, 'w')) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var warnings = safeGet(payload, 'w');
              if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                  var indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';
                  var indexPath = query._path.toString();
                  warn("Using an unspecified index. Your data will be downloaded and " +
                      ("filtered on the client. Consider adding " + indexSpec + " at ") +
                      (indexPath + " to your security rules for better performance."));
              }
          }
      };
      PersistentConnection.prototype.refreshAuthToken = function (token) {
          this.authToken_ = token;
          this.log_('Auth token refreshed');
          if (this.authToken_) {
              this.tryAuth();
          }
          else {
              //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
              //the credential so we dont become authenticated next time we connect.
              if (this.connected_) {
                  this.sendRequest('unauth', {}, function () { });
              }
          }
          this.reduceReconnectDelayIfAdminCredential_(token);
      };
      PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
          // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
          // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
          var isFirebaseSecret = credential && credential.length === 40;
          if (isFirebaseSecret || isAdmin(credential)) {
              this.log_('Admin auth credential detected.  Reducing max reconnect time.');
              this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
          }
      };
      PersistentConnection.prototype.refreshAppCheckToken = function (token) {
          this.appCheckToken_ = token;
          this.log_('App check token refreshed');
          if (this.appCheckToken_) {
              this.tryAppCheck();
          }
          else {
              //If we're connected we want to let the server know to unauthenticate us.
              //If we're not connected, simply delete the credential so we dont become
              // authenticated next time we connect.
              if (this.connected_) {
                  this.sendRequest('unappeck', {}, function () { });
              }
          }
      };
      /**
       * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
       * a auth revoked (the connection is closed).
       */
      PersistentConnection.prototype.tryAuth = function () {
          var _this = this;
          if (this.connected_ && this.authToken_) {
              var token_1 = this.authToken_;
              var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';
              var requestData = { cred: token_1 };
              if (this.authOverride_ === null) {
                  requestData['noauth'] = true;
              }
              else if (typeof this.authOverride_ === 'object') {
                  requestData['authvar'] = this.authOverride_;
              }
              this.sendRequest(authMethod, requestData, function (res) {
                  var status = res[ /*status*/'s'];
                  var data = res[ /*data*/'d'] || 'error';
                  if (_this.authToken_ === token_1) {
                      if (status === 'ok') {
                          _this.invalidAuthTokenCount_ = 0;
                      }
                      else {
                          // Triggers reconnect and force refresh for auth token
                          _this.onAuthRevoked_(status, data);
                      }
                  }
              });
          }
      };
      /**
       * Attempts to authenticate with the given token. If the authentication
       * attempt fails, it's triggered like the token was revoked (the connection is
       * closed).
       */
      PersistentConnection.prototype.tryAppCheck = function () {
          var _this = this;
          if (this.connected_ && this.appCheckToken_) {
              this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, function (res) {
                  var status = res[ /*status*/'s'];
                  var data = res[ /*data*/'d'] || 'error';
                  if (status === 'ok') {
                      _this.invalidAppCheckTokenCount_ = 0;
                  }
                  else {
                      _this.onAppCheckRevoked_(status, data);
                  }
              });
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.unlisten = function (query, tag) {
          var pathString = query._path.toString();
          var queryId = query._queryIdentifier;
          this.log_('Unlisten called for ' + pathString + ' ' + queryId);
          assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
          var listen = this.removeListen_(pathString, queryId);
          if (listen && this.connected_) {
              this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
          }
      };
      PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
          this.log_('Unlisten on ' + pathString + ' for ' + queryId);
          var req = { /*path*/ p: pathString };
          var action = 'n';
          // Only bother sending queryId if it's non-default.
          if (tag) {
              req['q'] = queryObj;
              req['t'] = tag;
          }
          this.sendRequest(action, req);
      };
      PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('o', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'o',
                  data: data,
                  onComplete: onComplete
              });
          }
      };
      PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('om', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'om',
                  data: data,
                  onComplete: onComplete
              });
          }
      };
      PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('oc', pathString, null, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'oc',
                  data: null,
                  onComplete: onComplete
              });
          }
      };
      PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
          var request = { /*path*/ p: pathString, /*data*/ d: data };
          this.log_('onDisconnect ' + action, request);
          this.sendRequest(action, request, function (response) {
              if (onComplete) {
                  setTimeout(function () {
                      onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                  }, Math.floor(0));
              }
          });
      };
      PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
          this.putInternal('p', pathString, data, onComplete, hash);
      };
      PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
          this.putInternal('m', pathString, data, onComplete, hash);
      };
      PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
          this.initConnection_();
          var request = {
              /*path*/ p: pathString,
              /*data*/ d: data
          };
          if (hash !== undefined) {
              request[ /*hash*/'h'] = hash;
          }
          // TODO: Only keep track of the most recent put for a given path?
          this.outstandingPuts_.push({
              action: action,
              request: request,
              onComplete: onComplete
          });
          this.outstandingPutCount_++;
          var index = this.outstandingPuts_.length - 1;
          if (this.connected_) {
              this.sendPut_(index);
          }
          else {
              this.log_('Buffering put: ' + pathString);
          }
      };
      PersistentConnection.prototype.sendPut_ = function (index) {
          var _this = this;
          var action = this.outstandingPuts_[index].action;
          var request = this.outstandingPuts_[index].request;
          var onComplete = this.outstandingPuts_[index].onComplete;
          this.outstandingPuts_[index].queued = this.connected_;
          this.sendRequest(action, request, function (message) {
              _this.log_(action + ' response', message);
              delete _this.outstandingPuts_[index];
              _this.outstandingPutCount_--;
              // Clean up array occasionally.
              if (_this.outstandingPutCount_ === 0) {
                  _this.outstandingPuts_ = [];
              }
              if (onComplete) {
                  onComplete(message[ /*status*/'s'], message[ /* data */'d']);
              }
          });
      };
      PersistentConnection.prototype.reportStats = function (stats) {
          var _this = this;
          // If we're not connected, we just drop the stats.
          if (this.connected_) {
              var request = { /*counters*/ c: stats };
              this.log_('reportStats', request);
              this.sendRequest(/*stats*/ 's', request, function (result) {
                  var status = result[ /*status*/'s'];
                  if (status !== 'ok') {
                      var errorReason = result[ /* data */'d'];
                      _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                  }
              });
          }
      };
      PersistentConnection.prototype.onDataMessage_ = function (message) {
          if ('r' in message) {
              // this is a response
              this.log_('from server: ' + stringify(message));
              var reqNum = message['r'];
              var onResponse = this.requestCBHash_[reqNum];
              if (onResponse) {
                  delete this.requestCBHash_[reqNum];
                  onResponse(message[ /*body*/'b']);
              }
          }
          else if ('error' in message) {
              throw 'A server-side error has occurred: ' + message['error'];
          }
          else if ('a' in message) {
              // a and b are action and body, respectively
              this.onDataPush_(message['a'], message['b']);
          }
      };
      PersistentConnection.prototype.onDataPush_ = function (action, body) {
          this.log_('handleServerMessage', action, body);
          if (action === 'd') {
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge*/ false, body['t']);
          }
          else if (action === 'm') {
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge=*/ true, body['t']);
          }
          else if (action === 'c') {
              this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
          }
          else if (action === 'ac') {
              this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
          }
          else if (action === 'apc') {
              this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
          }
          else if (action === 'sd') {
              this.onSecurityDebugPacket_(body);
          }
          else {
              error('Unrecognized action received from server: ' +
                  stringify(action) +
                  '\nAre you using the latest client?');
          }
      };
      PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
          this.log_('connection ready');
          this.connected_ = true;
          this.lastConnectionEstablishedTime_ = new Date().getTime();
          this.handleTimestamp_(timestamp);
          this.lastSessionId = sessionId;
          if (this.firstConnection_) {
              this.sendConnectStats_();
          }
          this.restoreState_();
          this.firstConnection_ = false;
          this.onConnectStatus_(true);
      };
      PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
          var _this = this;
          assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
          if (this.establishConnectionTimer_) {
              clearTimeout(this.establishConnectionTimer_);
          }
          // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
          // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
          this.establishConnectionTimer_ = setTimeout(function () {
              _this.establishConnectionTimer_ = null;
              _this.establishConnection_();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(timeout));
      };
      PersistentConnection.prototype.initConnection_ = function () {
          if (!this.realtime_ && this.firstConnection_) {
              this.scheduleConnect_(0);
          }
      };
      PersistentConnection.prototype.onVisible_ = function (visible) {
          // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
          if (visible &&
              !this.visible_ &&
              this.reconnectDelay_ === this.maxReconnectDelay_) {
              this.log_('Window became visible.  Reducing delay.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          this.visible_ = visible;
      };
      PersistentConnection.prototype.onOnline_ = function (online) {
          if (online) {
              this.log_('Browser went online.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          else {
              this.log_('Browser went offline.  Killing connection.');
              if (this.realtime_) {
                  this.realtime_.close();
              }
          }
      };
      PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
          this.log_('data client disconnected');
          this.connected_ = false;
          this.realtime_ = null;
          // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
          this.cancelSentTransactions_();
          // Clear out the pending requests.
          this.requestCBHash_ = {};
          if (this.shouldReconnect_()) {
              if (!this.visible_) {
                  this.log_("Window isn't visible.  Delaying reconnect.");
                  this.reconnectDelay_ = this.maxReconnectDelay_;
                  this.lastConnectionAttemptTime_ = new Date().getTime();
              }
              else if (this.lastConnectionEstablishedTime_) {
                  // If we've been connected long enough, reset reconnect delay to minimum.
                  var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                  if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                  }
                  this.lastConnectionEstablishedTime_ = null;
              }
              var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
              var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
              reconnectDelay = Math.random() * reconnectDelay;
              this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
              this.scheduleConnect_(reconnectDelay);
              // Adjust reconnect delay for next time.
              this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
          }
          this.onConnectStatus_(false);
      };
      PersistentConnection.prototype.establishConnection_ = function () {
          return __awaiter$4(this, void 0, void 0, function () {
              var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a, authToken, appCheckToken, error_1;
              var _this = this;
              return __generator$4(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          if (!this.shouldReconnect_()) return [3 /*break*/, 4];
                          this.log_('Making a connection attempt');
                          this.lastConnectionAttemptTime_ = new Date().getTime();
                          this.lastConnectionEstablishedTime_ = null;
                          onDataMessage = this.onDataMessage_.bind(this);
                          onReady = this.onReady_.bind(this);
                          onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                          connId = this.id + ':' + PersistentConnection.nextConnectionId_++;
                          lastSessionId = this.lastSessionId;
                          canceled_1 = false;
                          connection_1 = null;
                          closeFn = function () {
                              if (connection_1) {
                                  connection_1.close();
                              }
                              else {
                                  canceled_1 = true;
                                  onDisconnect_1();
                              }
                          };
                          sendRequestFn = function (msg) {
                              assert(connection_1, "sendRequest call when we're not connected not allowed.");
                              connection_1.sendRequest(msg);
                          };
                          this.realtime_ = {
                              close: closeFn,
                              sendRequest: sendRequestFn
                          };
                          forceRefresh = this.forceTokenRefresh_;
                          this.forceTokenRefresh_ = false;
                          _b.label = 1;
                      case 1:
                          _b.trys.push([1, 3, , 4]);
                          return [4 /*yield*/, Promise.all([
                                  this.authTokenProvider_.getToken(forceRefresh),
                                  this.appCheckTokenProvider_.getToken(forceRefresh)
                              ])];
                      case 2:
                          _a = __read$4.apply(void 0, [_b.sent(), 2]), authToken = _a[0], appCheckToken = _a[1];
                          if (!canceled_1) {
                              log('getToken() completed. Creating connection.');
                              this.authToken_ = authToken && authToken.accessToken;
                              this.appCheckToken_ = appCheckToken && appCheckToken.token;
                              connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1, 
                              /* onKill= */ function (reason) {
                                  warn(reason + ' (' + _this.repoInfo_.toString() + ')');
                                  _this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                              }, lastSessionId);
                          }
                          else {
                              log('getToken() completed but was canceled');
                          }
                          return [3 /*break*/, 4];
                      case 3:
                          error_1 = _b.sent();
                          this.log_('Failed to get token: ' + error_1);
                          if (!canceled_1) {
                              if (this.repoInfo_.nodeAdmin) {
                                  // This may be a critical error for the Admin Node.js SDK, so log a warning.
                                  // But getToken() may also just have temporarily failed, so we still want to
                                  // continue retrying.
                                  warn(error_1);
                              }
                              closeFn();
                          }
                          return [3 /*break*/, 4];
                      case 4: return [2 /*return*/];
                  }
              });
          });
      };
      PersistentConnection.prototype.interrupt = function (reason) {
          log('Interrupting connection for reason: ' + reason);
          this.interruptReasons_[reason] = true;
          if (this.realtime_) {
              this.realtime_.close();
          }
          else {
              if (this.establishConnectionTimer_) {
                  clearTimeout(this.establishConnectionTimer_);
                  this.establishConnectionTimer_ = null;
              }
              if (this.connected_) {
                  this.onRealtimeDisconnect_();
              }
          }
      };
      PersistentConnection.prototype.resume = function (reason) {
          log('Resuming connection for reason: ' + reason);
          delete this.interruptReasons_[reason];
          if (isEmpty$1(this.interruptReasons_)) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
      };
      PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
          var delta = timestamp - new Date().getTime();
          this.onServerInfoUpdate_({ serverTimeOffset: delta });
      };
      PersistentConnection.prototype.cancelSentTransactions_ = function () {
          for (var i = 0; i < this.outstandingPuts_.length; i++) {
              var put = this.outstandingPuts_[i];
              if (put && /*hash*/ 'h' in put.request && put.queued) {
                  if (put.onComplete) {
                      put.onComplete('disconnect');
                  }
                  delete this.outstandingPuts_[i];
                  this.outstandingPutCount_--;
              }
          }
          // Clean up array occasionally.
          if (this.outstandingPutCount_ === 0) {
              this.outstandingPuts_ = [];
          }
      };
      PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
          // Remove the listen and manufacture a "permission_denied" error for the failed listen.
          var queryId;
          if (!query) {
              queryId = 'default';
          }
          else {
              queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
          }
          var listen = this.removeListen_(pathString, queryId);
          if (listen && listen.onComplete) {
              listen.onComplete('permission_denied');
          }
      };
      PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
          var normalizedPathString = new Path(pathString).toString(); // normalize path.
          var listen;
          if (this.listens.has(normalizedPathString)) {
              var map = this.listens.get(normalizedPathString);
              listen = map.get(queryId);
              map.delete(queryId);
              if (map.size === 0) {
                  this.listens.delete(normalizedPathString);
              }
          }
          else {
              // all listens for this path has already been removed
              listen = undefined;
          }
          return listen;
      };
      PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
          log('Auth token revoked: ' + statusCode + '/' + explanation);
          this.authToken_ = null;
          this.forceTokenRefresh_ = true;
          this.realtime_.close();
          if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAuthTokenCount_++;
              if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                  // Set a long reconnect delay because recovery is unlikely
                  this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                  // Notify the auth token provider that the token is invalid, which will log
                  // a warning
                  this.authTokenProvider_.notifyForInvalidToken();
              }
          }
      };
      PersistentConnection.prototype.onAppCheckRevoked_ = function (statusCode, explanation) {
          log('App check token revoked: ' + statusCode + '/' + explanation);
          this.appCheckToken_ = null;
          this.forceTokenRefresh_ = true;
          // Note: We don't close the connection as the developer may not have
          // enforcement enabled. The backend closes connections with enforcements.
          if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAppCheckTokenCount_++;
              if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                  this.appCheckTokenProvider_.notifyForInvalidToken();
              }
          }
      };
      PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
          if (this.securityDebugCallback_) {
              this.securityDebugCallback_(body);
          }
          else {
              if ('msg' in body) {
                  console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
              }
          }
      };
      PersistentConnection.prototype.restoreState_ = function () {
          var e_1, _a, e_2, _b;
          //Re-authenticate ourselves if we have a credential stored.
          this.tryAuth();
          this.tryAppCheck();
          try {
              // Puts depend on having received the corresponding data update from the server before they complete, so we must
              // make sure to send listens before puts.
              for (var _c = __values$4(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var queries = _d.value;
                  try {
                      for (var _e = (e_2 = void 0, __values$4(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
                          var listenSpec = _f.value;
                          this.sendListen_(listenSpec);
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
              }
              finally { if (e_1) throw e_1.error; }
          }
          for (var i = 0; i < this.outstandingPuts_.length; i++) {
              if (this.outstandingPuts_[i]) {
                  this.sendPut_(i);
              }
          }
          while (this.onDisconnectRequestQueue_.length) {
              var request = this.onDisconnectRequestQueue_.shift();
              this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
          }
          for (var i = 0; i < this.outstandingGets_.length; i++) {
              if (this.outstandingGets_[i]) {
                  this.sendGet_(i);
              }
          }
      };
      /**
       * Sends client stats for first connection
       */
      PersistentConnection.prototype.sendConnectStats_ = function () {
          var stats = {};
          var clientName = 'js';
          if (isNodeSdk()) {
              if (this.repoInfo_.nodeAdmin) {
                  clientName = 'admin_node';
              }
              else {
                  clientName = 'node';
              }
          }
          stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
          if (isMobileCordova()) {
              stats['framework.cordova'] = 1;
          }
          else if (isReactNative()) {
              stats['framework.reactnative'] = 1;
          }
          this.reportStats(stats);
      };
      PersistentConnection.prototype.shouldReconnect_ = function () {
          var online = OnlineMonitor.getInstance().currentlyOnline();
          return isEmpty$1(this.interruptReasons_) && online;
      };
      PersistentConnection.nextPersistentConnectionId_ = 0;
      /**
       * Counter for number of connections created. Mainly used for tagging in the logs
       */
      PersistentConnection.nextConnectionId_ = 0;
      return PersistentConnection;
  }(ServerActions));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var NamedNode = /** @class */ (function () {
      function NamedNode(name, node) {
          this.name = name;
          this.node = node;
      }
      NamedNode.Wrap = function (name, node) {
          return new NamedNode(name, node);
      };
      return NamedNode;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Index = /** @class */ (function () {
      function Index() {
      }
      /**
       * @returns A standalone comparison function for
       * this index
       */
      Index.prototype.getCompare = function () {
          return this.compare.bind(this);
      };
      /**
       * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
       * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
       *
       *
       * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
       */
      Index.prototype.indexedValueChanged = function (oldNode, newNode) {
          var oldWrapped = new NamedNode(MIN_NAME, oldNode);
          var newWrapped = new NamedNode(MIN_NAME, newNode);
          return this.compare(oldWrapped, newWrapped) !== 0;
      };
      /**
       * @returns a node wrapper that will sort equal to or less than
       * any other node wrapper, using this index
       */
      Index.prototype.minPost = function () {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      };
      return Index;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __EMPTY_NODE;
  var KeyIndex = /** @class */ (function (_super) {
      __extends$4(KeyIndex, _super);
      function KeyIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
          get: function () {
              return __EMPTY_NODE;
          },
          set: function (val) {
              __EMPTY_NODE = val;
          },
          enumerable: false,
          configurable: true
      });
      KeyIndex.prototype.compare = function (a, b) {
          return nameCompare(a.name, b.name);
      };
      KeyIndex.prototype.isDefinedOn = function (node) {
          // We could probably return true here (since every node has a key), but it's never called
          // so just leaving unimplemented for now.
          throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
      };
      KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return false; // The key for a node never changes.
      };
      KeyIndex.prototype.minPost = function () {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      };
      KeyIndex.prototype.maxPost = function () {
          // TODO: This should really be created once and cached in a static property, but
          // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
          return new NamedNode(MAX_NAME, __EMPTY_NODE);
      };
      KeyIndex.prototype.makePost = function (indexValue, name) {
          assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
          // We just use empty node, but it'll never be compared, since our comparator only looks at name.
          return new NamedNode(indexValue, __EMPTY_NODE);
      };
      /**
       * @returns String representation for inclusion in a query spec
       */
      KeyIndex.prototype.toString = function () {
          return '.key';
      };
      return KeyIndex;
  }(Index));
  var KEY_INDEX = new KeyIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An iterator over an LLRBNode.
   */
  var SortedMapIterator = /** @class */ (function () {
      /**
       * @param node - Node to iterate.
       * @param isReverse_ - Whether or not to iterate in reverse
       */
      function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
          if (resultGenerator_ === void 0) { resultGenerator_ = null; }
          this.isReverse_ = isReverse_;
          this.resultGenerator_ = resultGenerator_;
          this.nodeStack_ = [];
          var cmp = 1;
          while (!node.isEmpty()) {
              node = node;
              cmp = startKey ? comparator(node.key, startKey) : 1;
              // flip the comparison if we're going in reverse
              if (isReverse_) {
                  cmp *= -1;
              }
              if (cmp < 0) {
                  // This node is less than our start key. ignore it
                  if (this.isReverse_) {
                      node = node.left;
                  }
                  else {
                      node = node.right;
                  }
              }
              else if (cmp === 0) {
                  // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                  this.nodeStack_.push(node);
                  break;
              }
              else {
                  // This node is greater than our start key, add it to the stack and move to the next one
                  this.nodeStack_.push(node);
                  if (this.isReverse_) {
                      node = node.right;
                  }
                  else {
                      node = node.left;
                  }
              }
          }
      }
      SortedMapIterator.prototype.getNext = function () {
          if (this.nodeStack_.length === 0) {
              return null;
          }
          var node = this.nodeStack_.pop();
          var result;
          if (this.resultGenerator_) {
              result = this.resultGenerator_(node.key, node.value);
          }
          else {
              result = { key: node.key, value: node.value };
          }
          if (this.isReverse_) {
              node = node.left;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.right;
              }
          }
          else {
              node = node.right;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.left;
              }
          }
          return result;
      };
      SortedMapIterator.prototype.hasNext = function () {
          return this.nodeStack_.length > 0;
      };
      SortedMapIterator.prototype.peek = function () {
          if (this.nodeStack_.length === 0) {
              return null;
          }
          var node = this.nodeStack_[this.nodeStack_.length - 1];
          if (this.resultGenerator_) {
              return this.resultGenerator_(node.key, node.value);
          }
          else {
              return { key: node.key, value: node.value };
          }
      };
      return SortedMapIterator;
  }());
  /**
   * Represents a node in a Left-leaning Red-Black tree.
   */
  var LLRBNode = /** @class */ (function () {
      /**
       * @param key - Key associated with this node.
       * @param value - Value associated with this node.
       * @param color - Whether this node is red.
       * @param left - Left child.
       * @param right - Right child.
       */
      function LLRBNode(key, value, color, left, right) {
          this.key = key;
          this.value = value;
          this.color = color != null ? color : LLRBNode.RED;
          this.left =
              left != null ? left : SortedMap.EMPTY_NODE;
          this.right =
              right != null ? right : SortedMap.EMPTY_NODE;
      }
      /**
       * Returns a copy of the current node, optionally replacing pieces of it.
       *
       * @param key - New key for the node, or null.
       * @param value - New value for the node, or null.
       * @param color - New color for the node, or null.
       * @param left - New left child for the node, or null.
       * @param right - New right child for the node, or null.
       * @returns The node copy.
       */
      LLRBNode.prototype.copy = function (key, value, color, left, right) {
          return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      };
      /**
       * @returns The total number of nodes in the tree.
       */
      LLRBNode.prototype.count = function () {
          return this.left.count() + 1 + this.right.count();
      };
      /**
       * @returns True if the tree is empty.
       */
      LLRBNode.prototype.isEmpty = function () {
          return false;
      };
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       *   node.  If it returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      LLRBNode.prototype.inorderTraversal = function (action) {
          return (this.left.inorderTraversal(action) ||
              !!action(this.key, this.value) ||
              this.right.inorderTraversal(action));
      };
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      LLRBNode.prototype.reverseTraversal = function (action) {
          return (this.right.reverseTraversal(action) ||
              action(this.key, this.value) ||
              this.left.reverseTraversal(action));
      };
      /**
       * @returns The minimum node in the tree.
       */
      LLRBNode.prototype.min_ = function () {
          if (this.left.isEmpty()) {
              return this;
          }
          else {
              return this.left.min_();
          }
      };
      /**
       * @returns The maximum key in the tree.
       */
      LLRBNode.prototype.minKey = function () {
          return this.min_().key;
      };
      /**
       * @returns The maximum key in the tree.
       */
      LLRBNode.prototype.maxKey = function () {
          if (this.right.isEmpty()) {
              return this.key;
          }
          else {
              return this.right.maxKey();
          }
      };
      /**
       * @param key - Key to insert.
       * @param value - Value to insert.
       * @param comparator - Comparator.
       * @returns New tree, with the key/value added.
       */
      LLRBNode.prototype.insert = function (key, value, comparator) {
          var n = this;
          var cmp = comparator(key, n.key);
          if (cmp < 0) {
              n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
          }
          else if (cmp === 0) {
              n = n.copy(null, value, null, null, null);
          }
          else {
              n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
          }
          return n.fixUp_();
      };
      /**
       * @returns New tree, with the minimum key removed.
       */
      LLRBNode.prototype.removeMin_ = function () {
          if (this.left.isEmpty()) {
              return SortedMap.EMPTY_NODE;
          }
          var n = this;
          if (!n.left.isRed_() && !n.left.left.isRed_()) {
              n = n.moveRedLeft_();
          }
          n = n.copy(null, null, null, n.left.removeMin_(), null);
          return n.fixUp_();
      };
      /**
       * @param key - The key of the item to remove.
       * @param comparator - Comparator.
       * @returns New tree, with the specified item removed.
       */
      LLRBNode.prototype.remove = function (key, comparator) {
          var n, smallest;
          n = this;
          if (comparator(key, n.key) < 0) {
              if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                  n = n.moveRedLeft_();
              }
              n = n.copy(null, null, null, n.left.remove(key, comparator), null);
          }
          else {
              if (n.left.isRed_()) {
                  n = n.rotateRight_();
              }
              if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                  n = n.moveRedRight_();
              }
              if (comparator(key, n.key) === 0) {
                  if (n.right.isEmpty()) {
                      return SortedMap.EMPTY_NODE;
                  }
                  else {
                      smallest = n.right.min_();
                      n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                  }
              }
              n = n.copy(null, null, null, null, n.right.remove(key, comparator));
          }
          return n.fixUp_();
      };
      /**
       * @returns Whether this is a RED node.
       */
      LLRBNode.prototype.isRed_ = function () {
          return this.color;
      };
      /**
       * @returns New tree after performing any needed rotations.
       */
      LLRBNode.prototype.fixUp_ = function () {
          var n = this;
          if (n.right.isRed_() && !n.left.isRed_()) {
              n = n.rotateLeft_();
          }
          if (n.left.isRed_() && n.left.left.isRed_()) {
              n = n.rotateRight_();
          }
          if (n.left.isRed_() && n.right.isRed_()) {
              n = n.colorFlip_();
          }
          return n;
      };
      /**
       * @returns New tree, after moveRedLeft.
       */
      LLRBNode.prototype.moveRedLeft_ = function () {
          var n = this.colorFlip_();
          if (n.right.left.isRed_()) {
              n = n.copy(null, null, null, null, n.right.rotateRight_());
              n = n.rotateLeft_();
              n = n.colorFlip_();
          }
          return n;
      };
      /**
       * @returns New tree, after moveRedRight.
       */
      LLRBNode.prototype.moveRedRight_ = function () {
          var n = this.colorFlip_();
          if (n.left.left.isRed_()) {
              n = n.rotateRight_();
              n = n.colorFlip_();
          }
          return n;
      };
      /**
       * @returns New tree, after rotateLeft.
       */
      LLRBNode.prototype.rotateLeft_ = function () {
          var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
          return this.right.copy(null, null, this.color, nl, null);
      };
      /**
       * @returns New tree, after rotateRight.
       */
      LLRBNode.prototype.rotateRight_ = function () {
          var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
          return this.left.copy(null, null, this.color, null, nr);
      };
      /**
       * @returns Newt ree, after colorFlip.
       */
      LLRBNode.prototype.colorFlip_ = function () {
          var left = this.left.copy(null, null, !this.left.color, null, null);
          var right = this.right.copy(null, null, !this.right.color, null, null);
          return this.copy(null, null, !this.color, left, right);
      };
      /**
       * For testing.
       *
       * @returns True if all is well.
       */
      LLRBNode.prototype.checkMaxDepth_ = function () {
          var blackDepth = this.check_();
          return Math.pow(2.0, blackDepth) <= this.count() + 1;
      };
      LLRBNode.prototype.check_ = function () {
          if (this.isRed_() && this.left.isRed_()) {
              throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
          }
          if (this.right.isRed_()) {
              throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
          }
          var blackDepth = this.left.check_();
          if (blackDepth !== this.right.check_()) {
              throw new Error('Black depths differ');
          }
          else {
              return blackDepth + (this.isRed_() ? 0 : 1);
          }
      };
      LLRBNode.RED = true;
      LLRBNode.BLACK = false;
      return LLRBNode;
  }());
  /**
   * Represents an empty node (a leaf node in the Red-Black Tree).
   */
  var LLRBEmptyNode = /** @class */ (function () {
      function LLRBEmptyNode() {
      }
      /**
       * Returns a copy of the current node.
       *
       * @returns The node copy.
       */
      LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
          return this;
      };
      /**
       * Returns a copy of the tree, with the specified key/value added.
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @param comparator - Comparator.
       * @returns New tree, with item added.
       */
      LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
          return new LLRBNode(key, value, null);
      };
      /**
       * Returns a copy of the tree, with the specified key removed.
       *
       * @param key - The key to remove.
       * @param comparator - Comparator.
       * @returns New tree, with item removed.
       */
      LLRBEmptyNode.prototype.remove = function (key, comparator) {
          return this;
      };
      /**
       * @returns The total number of nodes in the tree.
       */
      LLRBEmptyNode.prototype.count = function () {
          return 0;
      };
      /**
       * @returns True if the tree is empty.
       */
      LLRBEmptyNode.prototype.isEmpty = function () {
          return true;
      };
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      LLRBEmptyNode.prototype.inorderTraversal = function (action) {
          return false;
      };
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      LLRBEmptyNode.prototype.reverseTraversal = function (action) {
          return false;
      };
      LLRBEmptyNode.prototype.minKey = function () {
          return null;
      };
      LLRBEmptyNode.prototype.maxKey = function () {
          return null;
      };
      LLRBEmptyNode.prototype.check_ = function () {
          return 0;
      };
      /**
       * @returns Whether this node is red.
       */
      LLRBEmptyNode.prototype.isRed_ = function () {
          return false;
      };
      return LLRBEmptyNode;
  }());
  /**
   * An immutable sorted map implementation, based on a Left-leaning Red-Black
   * tree.
   */
  var SortedMap = /** @class */ (function () {
      /**
       * @param comparator_ - Key comparator.
       * @param root_ - Optional root node for the map.
       */
      function SortedMap(comparator_, root_) {
          if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
          this.comparator_ = comparator_;
          this.root_ = root_;
      }
      /**
       * Returns a copy of the map, with the specified key/value added or replaced.
       * (TODO: We should perhaps rename this method to 'put')
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @returns New map, with item added.
       */
      SortedMap.prototype.insert = function (key, value) {
          return new SortedMap(this.comparator_, this.root_
              .insert(key, value, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      };
      /**
       * Returns a copy of the map, with the specified key removed.
       *
       * @param key - The key to remove.
       * @returns New map, with item removed.
       */
      SortedMap.prototype.remove = function (key) {
          return new SortedMap(this.comparator_, this.root_
              .remove(key, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      };
      /**
       * Returns the value of the node with the given key, or null.
       *
       * @param key - The key to look up.
       * @returns The value of the node with the given key, or null if the
       * key doesn't exist.
       */
      SortedMap.prototype.get = function (key) {
          var cmp;
          var node = this.root_;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  return node.value;
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  node = node.right;
              }
          }
          return null;
      };
      /**
       * Returns the key of the item *before* the specified key, or null if key is the first item.
       * @param key - The key to find the predecessor of
       * @returns The predecessor key.
       */
      SortedMap.prototype.getPredecessorKey = function (key) {
          var cmp, node = this.root_, rightParent = null;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  if (!node.left.isEmpty()) {
                      node = node.left;
                      while (!node.right.isEmpty()) {
                          node = node.right;
                      }
                      return node.key;
                  }
                  else if (rightParent) {
                      return rightParent.key;
                  }
                  else {
                      return null; // first item.
                  }
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  rightParent = node;
                  node = node.right;
              }
          }
          throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
      };
      /**
       * @returns True if the map is empty.
       */
      SortedMap.prototype.isEmpty = function () {
          return this.root_.isEmpty();
      };
      /**
       * @returns The total number of nodes in the map.
       */
      SortedMap.prototype.count = function () {
          return this.root_.count();
      };
      /**
       * @returns The minimum key in the map.
       */
      SortedMap.prototype.minKey = function () {
          return this.root_.minKey();
      };
      /**
       * @returns The maximum key in the map.
       */
      SortedMap.prototype.maxKey = function () {
          return this.root_.maxKey();
      };
      /**
       * Traverses the map in key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      SortedMap.prototype.inorderTraversal = function (action) {
          return this.root_.inorderTraversal(action);
      };
      /**
       * Traverses the map in reverse key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns True if the traversal was aborted.
       */
      SortedMap.prototype.reverseTraversal = function (action) {
          return this.root_.reverseTraversal(action);
      };
      /**
       * Returns an iterator over the SortedMap.
       * @returns The iterator.
       */
      SortedMap.prototype.getIterator = function (resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
      };
      SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
      };
      SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
      };
      SortedMap.prototype.getReverseIterator = function (resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
      };
      /**
       * Always use the same empty node, to reduce memory.
       */
      SortedMap.EMPTY_NODE = new LLRBEmptyNode();
      return SortedMap;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function NAME_ONLY_COMPARATOR(left, right) {
      return nameCompare(left.name, right.name);
  }
  function NAME_COMPARATOR(left, right) {
      return nameCompare(left, right);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MAX_NODE$2;
  function setMaxNode$1(val) {
      MAX_NODE$2 = val;
  }
  var priorityHashText = function (priority) {
      if (typeof priority === 'number') {
          return 'number:' + doubleToIEEE754String(priority);
      }
      else {
          return 'string:' + priority;
      }
  };
  /**
   * Validates that a priority snapshot Node is valid.
   */
  var validatePriorityNode = function (priorityNode) {
      if (priorityNode.isLeafNode()) {
          var val = priorityNode.val();
          assert(typeof val === 'string' ||
              typeof val === 'number' ||
              (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');
      }
      else {
          assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
      }
      // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
      assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __childrenNodeConstructor;
  /**
   * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
   * implements Node and stores the value of the node (a string,
   * number, or boolean) accessible via getValue().
   */
  var LeafNode = /** @class */ (function () {
      /**
       * @param value_ - The value to store in this leaf node. The object type is
       * possible in the event of a deferred value
       * @param priorityNode_ - The priority of this node.
       */
      function LeafNode(value_, priorityNode_) {
          if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
          this.value_ = value_;
          this.priorityNode_ = priorityNode_;
          this.lazyHash_ = null;
          assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
          validatePriorityNode(this.priorityNode_);
      }
      Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
          get: function () {
              return __childrenNodeConstructor;
          },
          set: function (val) {
              __childrenNodeConstructor = val;
          },
          enumerable: false,
          configurable: true
      });
      /** @inheritDoc */
      LeafNode.prototype.isLeafNode = function () {
          return true;
      };
      /** @inheritDoc */
      LeafNode.prototype.getPriority = function () {
          return this.priorityNode_;
      };
      /** @inheritDoc */
      LeafNode.prototype.updatePriority = function (newPriorityNode) {
          return new LeafNode(this.value_, newPriorityNode);
      };
      /** @inheritDoc */
      LeafNode.prototype.getImmediateChild = function (childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.getChild = function (path) {
          if (pathIsEmpty(path)) {
              return this;
          }
          else if (pathGetFront(path) === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      };
      LeafNode.prototype.hasChild = function () {
          return false;
      };
      /** @inheritDoc */
      LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
          return null;
      };
      /** @inheritDoc */
      LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else if (newChildNode.isEmpty() && childName !== '.priority') {
              return this;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.updateChild = function (path, newChildNode) {
          var front = pathGetFront(path);
          if (front === null) {
              return newChildNode;
          }
          else if (newChildNode.isEmpty() && front !== '.priority') {
              return this;
          }
          else {
              assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
              return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.isEmpty = function () {
          return false;
      };
      /** @inheritDoc */
      LeafNode.prototype.numChildren = function () {
          return 0;
      };
      /** @inheritDoc */
      LeafNode.prototype.forEachChild = function (index, action) {
          return false;
      };
      LeafNode.prototype.val = function (exportFormat) {
          if (exportFormat && !this.getPriority().isEmpty()) {
              return {
                  '.value': this.getValue(),
                  '.priority': this.getPriority().val()
              };
          }
          else {
              return this.getValue();
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.hash = function () {
          if (this.lazyHash_ === null) {
              var toHash = '';
              if (!this.priorityNode_.isEmpty()) {
                  toHash +=
                      'priority:' +
                          priorityHashText(this.priorityNode_.val()) +
                          ':';
              }
              var type = typeof this.value_;
              toHash += type + ':';
              if (type === 'number') {
                  toHash += doubleToIEEE754String(this.value_);
              }
              else {
                  toHash += this.value_;
              }
              this.lazyHash_ = sha1(toHash);
          }
          return this.lazyHash_;
      };
      /**
       * Returns the value of the leaf node.
       * @returns The value of the node.
       */
      LeafNode.prototype.getValue = function () {
          return this.value_;
      };
      LeafNode.prototype.compareTo = function (other) {
          if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
              return 1;
          }
          else if (other instanceof LeafNode.__childrenNodeConstructor) {
              return -1;
          }
          else {
              assert(other.isLeafNode(), 'Unknown node type');
              return this.compareToLeafNode_(other);
          }
      };
      /**
       * Comparison specifically for two leaf nodes
       */
      LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
          var otherLeafType = typeof otherLeaf.value_;
          var thisLeafType = typeof this.value_;
          var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
          var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
          assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
          assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
          if (otherIndex === thisIndex) {
              // Same type, compare values
              if (thisLeafType === 'object') {
                  // Deferred value nodes are all equal, but we should also never get to this point...
                  return 0;
              }
              else {
                  // Note that this works because true > false, all others are number or string comparisons
                  if (this.value_ < otherLeaf.value_) {
                      return -1;
                  }
                  else if (this.value_ === otherLeaf.value_) {
                      return 0;
                  }
                  else {
                      return 1;
                  }
              }
          }
          else {
              return thisIndex - otherIndex;
          }
      };
      LeafNode.prototype.withIndex = function () {
          return this;
      };
      LeafNode.prototype.isIndexed = function () {
          return true;
      };
      LeafNode.prototype.equals = function (other) {
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              var otherLeaf = other;
              return (this.value_ === otherLeaf.value_ &&
                  this.priorityNode_.equals(otherLeaf.priorityNode_));
          }
          else {
              return false;
          }
      };
      /**
       * The sort order for comparing leaf nodes of different types. If two leaf nodes have
       * the same type, the comparison falls back to their value
       */
      LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
      return LeafNode;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var nodeFromJSON$1;
  var MAX_NODE$1;
  function setNodeFromJSON(val) {
      nodeFromJSON$1 = val;
  }
  function setMaxNode(val) {
      MAX_NODE$1 = val;
  }
  var PriorityIndex = /** @class */ (function (_super) {
      __extends$4(PriorityIndex, _super);
      function PriorityIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      PriorityIndex.prototype.compare = function (a, b) {
          var aPriority = a.node.getPriority();
          var bPriority = b.node.getPriority();
          var indexCmp = aPriority.compareTo(bPriority);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      PriorityIndex.prototype.isDefinedOn = function (node) {
          return !node.getPriority().isEmpty();
      };
      PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return !oldNode.getPriority().equals(newNode.getPriority());
      };
      PriorityIndex.prototype.minPost = function () {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      };
      PriorityIndex.prototype.maxPost = function () {
          return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
      };
      PriorityIndex.prototype.makePost = function (indexValue, name) {
          var priorityNode = nodeFromJSON$1(indexValue);
          return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
      };
      /**
       * @returns String representation for inclusion in a query spec
       */
      PriorityIndex.prototype.toString = function () {
          return '.priority';
      };
      return PriorityIndex;
  }(Index));
  var PRIORITY_INDEX = new PriorityIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LOG_2 = Math.log(2);
  var Base12Num = /** @class */ (function () {
      function Base12Num(length) {
          var logBase2 = function (num) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              return parseInt((Math.log(num) / LOG_2), 10);
          };
          var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
          this.count = logBase2(length + 1);
          this.current_ = this.count - 1;
          var mask = bitMask(this.count);
          this.bits_ = (length + 1) & mask;
      }
      Base12Num.prototype.nextBitIsOne = function () {
          //noinspection JSBitwiseOperatorUsage
          var result = !(this.bits_ & (0x1 << this.current_));
          this.current_--;
          return result;
      };
      return Base12Num;
  }());
  /**
   * Takes a list of child nodes and constructs a SortedSet using the given comparison
   * function
   *
   * Uses the algorithm described in the paper linked here:
   * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
   *
   * @param childList - Unsorted list of children
   * @param cmp - The comparison method to be used
   * @param keyFn - An optional function to extract K from a node wrapper, if K's
   * type is not NamedNode
   * @param mapSortFn - An optional override for comparator used by the generated sorted map
   */
  var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
      childList.sort(cmp);
      var buildBalancedTree = function (low, high) {
          var length = high - low;
          var namedNode;
          var key;
          if (length === 0) {
              return null;
          }
          else if (length === 1) {
              namedNode = childList[low];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var middle = parseInt((length / 2), 10) + low;
              var left = buildBalancedTree(low, middle);
              var right = buildBalancedTree(middle + 1, high);
              namedNode = childList[middle];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
          }
      };
      var buildFrom12Array = function (base12) {
          var node = null;
          var root = null;
          var index = childList.length;
          var buildPennant = function (chunkSize, color) {
              var low = index - chunkSize;
              var high = index;
              index -= chunkSize;
              var childTree = buildBalancedTree(low + 1, high);
              var namedNode = childList[low];
              var key = keyFn ? keyFn(namedNode) : namedNode;
              attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
          };
          var attachPennant = function (pennant) {
              if (node) {
                  node.left = pennant;
                  node = pennant;
              }
              else {
                  root = pennant;
                  node = pennant;
              }
          };
          for (var i = 0; i < base12.count; ++i) {
              var isOne = base12.nextBitIsOne();
              // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
              var chunkSize = Math.pow(2, base12.count - (i + 1));
              if (isOne) {
                  buildPennant(chunkSize, LLRBNode.BLACK);
              }
              else {
                  // current == 2
                  buildPennant(chunkSize, LLRBNode.BLACK);
                  buildPennant(chunkSize, LLRBNode.RED);
              }
          }
          return root;
      };
      var base12 = new Base12Num(childList.length);
      var root = buildFrom12Array(base12);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return new SortedMap(mapSortFn || cmp, root);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _defaultIndexMap;
  var fallbackObject = {};
  var IndexMap = /** @class */ (function () {
      function IndexMap(indexes_, indexSet_) {
          this.indexes_ = indexes_;
          this.indexSet_ = indexSet_;
      }
      Object.defineProperty(IndexMap, "Default", {
          /**
           * The default IndexMap for nodes without a priority
           */
          get: function () {
              assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
              _defaultIndexMap =
                  _defaultIndexMap ||
                      new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
              return _defaultIndexMap;
          },
          enumerable: false,
          configurable: true
      });
      IndexMap.prototype.get = function (indexKey) {
          var sortedMap = safeGet(this.indexes_, indexKey);
          if (!sortedMap) {
              throw new Error('No index defined for ' + indexKey);
          }
          if (sortedMap instanceof SortedMap) {
              return sortedMap;
          }
          else {
              // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
              // regular child map
              return null;
          }
      };
      IndexMap.prototype.hasIndex = function (indexDefinition) {
          return contains(this.indexSet_, indexDefinition.toString());
      };
      IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
          assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
          var childList = [];
          var sawIndexedValue = false;
          var iter = existingChildren.getIterator(NamedNode.Wrap);
          var next = iter.getNext();
          while (next) {
              sawIndexedValue =
                  sawIndexedValue || indexDefinition.isDefinedOn(next.node);
              childList.push(next);
              next = iter.getNext();
          }
          var newIndex;
          if (sawIndexedValue) {
              newIndex = buildChildSet(childList, indexDefinition.getCompare());
          }
          else {
              newIndex = fallbackObject;
          }
          var indexName = indexDefinition.toString();
          var newIndexSet = __assign$4({}, this.indexSet_);
          newIndexSet[indexName] = indexDefinition;
          var newIndexes = __assign$4({}, this.indexes_);
          newIndexes[indexName] = newIndex;
          return new IndexMap(newIndexes, newIndexSet);
      };
      /**
       * Ensure that this node is properly tracked in any indexes that we're maintaining
       */
      IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
          var _this = this;
          var newIndexes = map$1(this.indexes_, function (indexedChildren, indexName) {
              var index = safeGet(_this.indexSet_, indexName);
              assert(index, 'Missing index implementation for ' + indexName);
              if (indexedChildren === fallbackObject) {
                  // Check to see if we need to index everything
                  if (index.isDefinedOn(namedNode.node)) {
                      // We need to build this index
                      var childList = [];
                      var iter = existingChildren.getIterator(NamedNode.Wrap);
                      var next = iter.getNext();
                      while (next) {
                          if (next.name !== namedNode.name) {
                              childList.push(next);
                          }
                          next = iter.getNext();
                      }
                      childList.push(namedNode);
                      return buildChildSet(childList, index.getCompare());
                  }
                  else {
                      // No change, this remains a fallback
                      return fallbackObject;
                  }
              }
              else {
                  var existingSnap = existingChildren.get(namedNode.name);
                  var newChildren = indexedChildren;
                  if (existingSnap) {
                      newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  return newChildren.insert(namedNode, namedNode.node);
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      };
      /**
       * Create a new IndexMap instance with the given value removed
       */
      IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
          var newIndexes = map$1(this.indexes_, function (indexedChildren) {
              if (indexedChildren === fallbackObject) {
                  // This is the fallback. Just return it, nothing to do in this case
                  return indexedChildren;
              }
              else {
                  var existingSnap = existingChildren.get(namedNode.name);
                  if (existingSnap) {
                      return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  else {
                      // No record of this child
                      return indexedChildren;
                  }
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      };
      return IndexMap;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // TODO: For memory savings, don't store priorityNode_ if it's empty.
  var EMPTY_NODE;
  /**
   * ChildrenNode is a class for storing internal nodes in a DataSnapshot
   * (i.e. nodes with children).  It implements Node and stores the
   * list of children in the children property, sorted by child name.
   */
  var ChildrenNode = /** @class */ (function () {
      /**
       * @param children_ - List of children of this node..
       * @param priorityNode_ - The priority of this node (as a snapshot node).
       */
      function ChildrenNode(children_, priorityNode_, indexMap_) {
          this.children_ = children_;
          this.priorityNode_ = priorityNode_;
          this.indexMap_ = indexMap_;
          this.lazyHash_ = null;
          /**
           * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
           * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
           * class instead of an empty ChildrenNode.
           */
          if (this.priorityNode_) {
              validatePriorityNode(this.priorityNode_);
          }
          if (this.children_.isEmpty()) {
              assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
          }
      }
      Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
          get: function () {
              return (EMPTY_NODE ||
                  (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
          },
          enumerable: false,
          configurable: true
      });
      /** @inheritDoc */
      ChildrenNode.prototype.isLeafNode = function () {
          return false;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getPriority = function () {
          return this.priorityNode_ || EMPTY_NODE;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
          if (this.children_.isEmpty()) {
              // Don't allow priorities on empty nodes
              return this;
          }
          else {
              return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getImmediateChild = function (childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.getPriority();
          }
          else {
              var child = this.children_.get(childName);
              return child === null ? EMPTY_NODE : child;
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getChild = function (path) {
          var front = pathGetFront(path);
          if (front === null) {
              return this;
          }
          return this.getImmediateChild(front).getChild(pathPopFront(path));
      };
      /** @inheritDoc */
      ChildrenNode.prototype.hasChild = function (childName) {
          return this.children_.get(childName) !== null;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
          assert(newChildNode, 'We should always be passing snapshot nodes');
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else {
              var namedNode = new NamedNode(childName, newChildNode);
              var newChildren = void 0, newIndexMap = void 0;
              if (newChildNode.isEmpty()) {
                  newChildren = this.children_.remove(childName);
                  newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
              }
              else {
                  newChildren = this.children_.insert(childName, newChildNode);
                  newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
              }
              var newPriority = newChildren.isEmpty()
                  ? EMPTY_NODE
                  : this.priorityNode_;
              return new ChildrenNode(newChildren, newPriority, newIndexMap);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updateChild = function (path, newChildNode) {
          var front = pathGetFront(path);
          if (front === null) {
              return newChildNode;
          }
          else {
              assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
              var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
              return this.updateImmediateChild(front, newImmediateChild);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.isEmpty = function () {
          return this.children_.isEmpty();
      };
      /** @inheritDoc */
      ChildrenNode.prototype.numChildren = function () {
          return this.children_.count();
      };
      /** @inheritDoc */
      ChildrenNode.prototype.val = function (exportFormat) {
          if (this.isEmpty()) {
              return null;
          }
          var obj = {};
          var numKeys = 0, maxKey = 0, allIntegerKeys = true;
          this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
              obj[key] = childNode.val(exportFormat);
              numKeys++;
              if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                  maxKey = Math.max(maxKey, Number(key));
              }
              else {
                  allIntegerKeys = false;
              }
          });
          if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
              // convert to array.
              var array = [];
              // eslint-disable-next-line guard-for-in
              for (var key in obj) {
                  array[key] = obj[key];
              }
              return array;
          }
          else {
              if (exportFormat && !this.getPriority().isEmpty()) {
                  obj['.priority'] = this.getPriority().val();
              }
              return obj;
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.hash = function () {
          if (this.lazyHash_ === null) {
              var toHash_1 = '';
              if (!this.getPriority().isEmpty()) {
                  toHash_1 +=
                      'priority:' +
                          priorityHashText(this.getPriority().val()) +
                          ':';
              }
              this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                  var childHash = childNode.hash();
                  if (childHash !== '') {
                      toHash_1 += ':' + key + ':' + childHash;
                  }
              });
              this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
          }
          return this.lazyHash_;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
          var idx = this.resolveIndex_(index);
          if (idx) {
              var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
              return predecessor ? predecessor.name : null;
          }
          else {
              return this.children_.getPredecessorKey(childName);
          }
      };
      ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              var minKey = idx.minKey();
              return minKey && minKey.name;
          }
          else {
              return this.children_.minKey();
          }
      };
      ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
          var minKey = this.getFirstChildName(indexDefinition);
          if (minKey) {
              return new NamedNode(minKey, this.children_.get(minKey));
          }
          else {
              return null;
          }
      };
      /**
       * Given an index, return the key name of the largest value we have, according to that index
       */
      ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              var maxKey = idx.maxKey();
              return maxKey && maxKey.name;
          }
          else {
              return this.children_.maxKey();
          }
      };
      ChildrenNode.prototype.getLastChild = function (indexDefinition) {
          var maxKey = this.getLastChildName(indexDefinition);
          if (maxKey) {
              return new NamedNode(maxKey, this.children_.get(maxKey));
          }
          else {
              return null;
          }
      };
      ChildrenNode.prototype.forEachChild = function (index, action) {
          var idx = this.resolveIndex_(index);
          if (idx) {
              return idx.inorderTraversal(function (wrappedNode) {
                  return action(wrappedNode.name, wrappedNode.node);
              });
          }
          else {
              return this.children_.inorderTraversal(action);
          }
      };
      ChildrenNode.prototype.getIterator = function (indexDefinition) {
          return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
      };
      ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getIteratorFrom(startPost, function (key) { return key; });
          }
          else {
              var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
              var next = iterator.peek();
              while (next != null && indexDefinition.compare(next, startPost) < 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      };
      ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
          return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
      };
      ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getReverseIteratorFrom(endPost, function (key) {
                  return key;
              });
          }
          else {
              var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
              var next = iterator.peek();
              while (next != null && indexDefinition.compare(next, endPost) > 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      };
      ChildrenNode.prototype.compareTo = function (other) {
          if (this.isEmpty()) {
              if (other.isEmpty()) {
                  return 0;
              }
              else {
                  return -1;
              }
          }
          else if (other.isLeafNode() || other.isEmpty()) {
              return 1;
          }
          else if (other === MAX_NODE) {
              return -1;
          }
          else {
              // Must be another node with children.
              return 0;
          }
      };
      ChildrenNode.prototype.withIndex = function (indexDefinition) {
          if (indexDefinition === KEY_INDEX ||
              this.indexMap_.hasIndex(indexDefinition)) {
              return this;
          }
          else {
              var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
              return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
          }
      };
      ChildrenNode.prototype.isIndexed = function (index) {
          return index === KEY_INDEX || this.indexMap_.hasIndex(index);
      };
      ChildrenNode.prototype.equals = function (other) {
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              return false;
          }
          else {
              var otherChildrenNode = other;
              if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                  return false;
              }
              else if (this.children_.count() === otherChildrenNode.children_.count()) {
                  var thisIter = this.getIterator(PRIORITY_INDEX);
                  var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                  var thisCurrent = thisIter.getNext();
                  var otherCurrent = otherIter.getNext();
                  while (thisCurrent && otherCurrent) {
                      if (thisCurrent.name !== otherCurrent.name ||
                          !thisCurrent.node.equals(otherCurrent.node)) {
                          return false;
                      }
                      thisCurrent = thisIter.getNext();
                      otherCurrent = otherIter.getNext();
                  }
                  return thisCurrent === null && otherCurrent === null;
              }
              else {
                  return false;
              }
          }
      };
      /**
       * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
       * instead.
       *
       */
      ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
          if (indexDefinition === KEY_INDEX) {
              return null;
          }
          else {
              return this.indexMap_.get(indexDefinition.toString());
          }
      };
      ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
      return ChildrenNode;
  }());
  var MaxNode = /** @class */ (function (_super) {
      __extends$4(MaxNode, _super);
      function MaxNode() {
          return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
      }
      MaxNode.prototype.compareTo = function (other) {
          if (other === this) {
              return 0;
          }
          else {
              return 1;
          }
      };
      MaxNode.prototype.equals = function (other) {
          // Not that we every compare it, but MAX_NODE is only ever equal to itself
          return other === this;
      };
      MaxNode.prototype.getPriority = function () {
          return this;
      };
      MaxNode.prototype.getImmediateChild = function (childName) {
          return ChildrenNode.EMPTY_NODE;
      };
      MaxNode.prototype.isEmpty = function () {
          return false;
      };
      return MaxNode;
  }(ChildrenNode));
  /**
   * Marker that will sort higher than any other snapshot.
   */
  var MAX_NODE = new MaxNode();
  Object.defineProperties(NamedNode, {
      MIN: {
          value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
      },
      MAX: {
          value: new NamedNode(MAX_NAME, MAX_NODE)
      }
  });
  /**
   * Reference Extensions
   */
  KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
  LeafNode.__childrenNodeConstructor = ChildrenNode;
  setMaxNode$1(MAX_NODE);
  setMaxNode(MAX_NODE);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var USE_HINZE = true;
  /**
   * Constructs a snapshot node representing the passed JSON and returns it.
   * @param json - JSON to create a node for.
   * @param priority - Optional priority to use.  This will be ignored if the
   * passed JSON contains a .priority property.
   */
  function nodeFromJSON(json, priority) {
      if (priority === void 0) { priority = null; }
      if (json === null) {
          return ChildrenNode.EMPTY_NODE;
      }
      if (typeof json === 'object' && '.priority' in json) {
          priority = json['.priority'];
      }
      assert(priority === null ||
          typeof priority === 'string' ||
          typeof priority === 'number' ||
          (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
      if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
          json = json['.value'];
      }
      // Valid leaf nodes include non-objects or server-value wrapper objects
      if (typeof json !== 'object' || '.sv' in json) {
          var jsonLeaf = json;
          return new LeafNode(jsonLeaf, nodeFromJSON(priority));
      }
      if (!(json instanceof Array) && USE_HINZE) {
          var children_1 = [];
          var childrenHavePriority_1 = false;
          var hinzeJsonObj = json;
          each(hinzeJsonObj, function (key, child) {
              if (key.substring(0, 1) !== '.') {
                  // Ignore metadata nodes
                  var childNode = nodeFromJSON(child);
                  if (!childNode.isEmpty()) {
                      childrenHavePriority_1 =
                          childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                      children_1.push(new NamedNode(key, childNode));
                  }
              }
          });
          if (children_1.length === 0) {
              return ChildrenNode.EMPTY_NODE;
          }
          var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
          if (childrenHavePriority_1) {
              var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
              return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
          }
          else {
              return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
          }
      }
      else {
          var node_1 = ChildrenNode.EMPTY_NODE;
          each(json, function (key, childData) {
              if (contains(json, key)) {
                  if (key.substring(0, 1) !== '.') {
                      // ignore metadata nodes.
                      var childNode = nodeFromJSON(childData);
                      if (childNode.isLeafNode() || !childNode.isEmpty()) {
                          node_1 = node_1.updateImmediateChild(key, childNode);
                      }
                  }
              }
          });
          return node_1.updatePriority(nodeFromJSON(priority));
      }
  }
  setNodeFromJSON(nodeFromJSON);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PathIndex = /** @class */ (function (_super) {
      __extends$4(PathIndex, _super);
      function PathIndex(indexPath_) {
          var _this = _super.call(this) || this;
          _this.indexPath_ = indexPath_;
          assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
          return _this;
      }
      PathIndex.prototype.extractChild = function (snap) {
          return snap.getChild(this.indexPath_);
      };
      PathIndex.prototype.isDefinedOn = function (node) {
          return !node.getChild(this.indexPath_).isEmpty();
      };
      PathIndex.prototype.compare = function (a, b) {
          var aChild = this.extractChild(a.node);
          var bChild = this.extractChild(b.node);
          var indexCmp = aChild.compareTo(bChild);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      PathIndex.prototype.makePost = function (indexValue, name) {
          var valueNode = nodeFromJSON(indexValue);
          var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
          return new NamedNode(name, node);
      };
      PathIndex.prototype.maxPost = function () {
          var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
          return new NamedNode(MAX_NAME, node);
      };
      PathIndex.prototype.toString = function () {
          return pathSlice(this.indexPath_, 0).join('/');
      };
      return PathIndex;
  }(Index));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ValueIndex = /** @class */ (function (_super) {
      __extends$4(ValueIndex, _super);
      function ValueIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueIndex.prototype.compare = function (a, b) {
          var indexCmp = a.node.compareTo(b.node);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      ValueIndex.prototype.isDefinedOn = function (node) {
          return true;
      };
      ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return !oldNode.equals(newNode);
      };
      ValueIndex.prototype.minPost = function () {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      };
      ValueIndex.prototype.maxPost = function () {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MAX;
      };
      ValueIndex.prototype.makePost = function (indexValue, name) {
          var valueNode = nodeFromJSON(indexValue);
          return new NamedNode(name, valueNode);
      };
      /**
       * @returns String representation for inclusion in a query spec
       */
      ValueIndex.prototype.toString = function () {
          return '.value';
      };
      return ValueIndex;
  }(Index));
  var VALUE_INDEX = new ValueIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Modeled after base64 web-safe chars, but ordered by ASCII.
  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
  var MIN_PUSH_CHAR = '-';
  var MAX_PUSH_CHAR = 'z';
  var MAX_KEY_LEN = 786;
  /**
   * Fancy ID generator that creates 20-character string identifiers with the
   * following properties:
   *
   * 1. They're based on timestamp so that they sort *after* any existing ids.
   * 2. They contain 72-bits of random data after the timestamp so that IDs won't
   *    collide with other clients' IDs.
   * 3. They sort *lexicographically* (so the timestamp is converted to characters
   *    that will sort properly).
   * 4. They're monotonically increasing. Even if you generate more than one in
   *    the same timestamp, the latter ones will sort after the former ones. We do
   *    this by using the previous random bits but "incrementing" them by 1 (only
   *    in the case of a timestamp collision).
   */
  var nextPushId = (function () {
      // Timestamp of last push, used to prevent local collisions if you push twice
      // in one ms.
      var lastPushTime = 0;
      // We generate 72-bits of randomness which get turned into 12 characters and
      // appended to the timestamp to prevent collisions with other clients. We
      // store the last characters we generated because in the event of a collision,
      // we'll use those same characters except "incremented" by one.
      var lastRandChars = [];
      return function (now) {
          var duplicateTime = now === lastPushTime;
          lastPushTime = now;
          var i;
          var timeStampChars = new Array(8);
          for (i = 7; i >= 0; i--) {
              timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
              // NOTE: Can't use << here because javascript will convert to int and lose
              // the upper bits.
              now = Math.floor(now / 64);
          }
          assert(now === 0, 'Cannot push at time == 0');
          var id = timeStampChars.join('');
          if (!duplicateTime) {
              for (i = 0; i < 12; i++) {
                  lastRandChars[i] = Math.floor(Math.random() * 64);
              }
          }
          else {
              // If the timestamp hasn't changed since last push, use the same random
              // number, except incremented by 1.
              for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                  lastRandChars[i] = 0;
              }
              lastRandChars[i]++;
          }
          for (i = 0; i < 12; i++) {
              id += PUSH_CHARS.charAt(lastRandChars[i]);
          }
          assert(id.length === 20, 'nextPushId: Length should be 20.');
          return id;
      };
  })();
  var successor = function (key) {
      if (key === '' + INTEGER_32_MAX) {
          // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
          return MIN_PUSH_CHAR;
      }
      var keyAsInt = tryParseInt(key);
      if (keyAsInt != null) {
          return '' + (keyAsInt + 1);
      }
      var next = new Array(key.length);
      for (var i_1 = 0; i_1 < next.length; i_1++) {
          next[i_1] = key.charAt(i_1);
      }
      if (next.length < MAX_KEY_LEN) {
          next.push(MIN_PUSH_CHAR);
          return next.join('');
      }
      var i = next.length - 1;
      while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
          i--;
      }
      // `successor` was called on the largest possible key, so return the
      // MAX_NAME, which sorts larger than all keys.
      if (i === -1) {
          return MAX_NAME;
      }
      var source = next[i];
      var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
      next[i] = sourcePlusOne;
      return next.slice(0, i + 1).join('');
  };
  // `key` is assumed to be non-empty.
  var predecessor = function (key) {
      if (key === '' + INTEGER_32_MIN) {
          return MIN_NAME;
      }
      var keyAsInt = tryParseInt(key);
      if (keyAsInt != null) {
          return '' + (keyAsInt - 1);
      }
      var next = new Array(key.length);
      for (var i = 0; i < next.length; i++) {
          next[i] = key.charAt(i);
      }
      // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
      // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
      // than that, `predecessor(predecessor(key))`, is
      //
      // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
      //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
      //
      // analogous to increment/decrement for base-10 integers.
      //
      // This works because lexigographic comparison works character-by-character,
      // using length as a tie-breaker if one key is a prefix of the other.
      if (next[next.length - 1] === MIN_PUSH_CHAR) {
          if (next.length === 1) {
              // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
              return '' + INTEGER_32_MAX;
          }
          delete next[next.length - 1];
          return next.join('');
      }
      // Replace the last character with it's immediate predecessor, and
      // fill the suffix of the key with MAX_PUSH_CHAR. This is the
      // lexicographically largest possible key smaller than `key`.
      next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
      return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function changeValue(snapshotNode) {
      return { type: "value" /* VALUE */, snapshotNode: snapshotNode };
  }
  function changeChildAdded(childName, snapshotNode) {
      return { type: "child_added" /* CHILD_ADDED */, snapshotNode: snapshotNode, childName: childName };
  }
  function changeChildRemoved(childName, snapshotNode) {
      return { type: "child_removed" /* CHILD_REMOVED */, snapshotNode: snapshotNode, childName: childName };
  }
  function changeChildChanged(childName, snapshotNode, oldSnap) {
      return {
          type: "child_changed" /* CHILD_CHANGED */,
          snapshotNode: snapshotNode,
          childName: childName,
          oldSnap: oldSnap
      };
  }
  function changeChildMoved(childName, snapshotNode) {
      return { type: "child_moved" /* CHILD_MOVED */, snapshotNode: snapshotNode, childName: childName };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
   */
  var IndexedFilter = /** @class */ (function () {
      function IndexedFilter(index_) {
          this.index_ = index_;
      }
      IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
          var oldChild = snap.getImmediateChild(key);
          // Check if anything actually changed.
          if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
              // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
              // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
              // to avoid treating these cases as "nothing changed."
              if (oldChild.isEmpty() === newChild.isEmpty()) {
                  // Nothing changed.
                  // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                  //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                  return snap;
              }
          }
          if (optChangeAccumulator != null) {
              if (newChild.isEmpty()) {
                  if (snap.hasChild(key)) {
                      optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
                  }
                  else {
                      assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                  }
              }
              else if (oldChild.isEmpty()) {
                  optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
              }
              else {
                  optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
              }
          }
          if (snap.isLeafNode() && newChild.isEmpty()) {
              return snap;
          }
          else {
              // Make sure the node is indexed
              return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
          }
      };
      IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          if (optChangeAccumulator != null) {
              if (!oldSnap.isLeafNode()) {
                  oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                      if (!newSnap.hasChild(key)) {
                          optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
                      }
                  });
              }
              if (!newSnap.isLeafNode()) {
                  newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                      if (oldSnap.hasChild(key)) {
                          var oldChild = oldSnap.getImmediateChild(key);
                          if (!oldChild.equals(childNode)) {
                              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
                          }
                      }
                      else {
                          optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
                      }
                  });
              }
          }
          return newSnap.withIndex(this.index_);
      };
      IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          if (oldSnap.isEmpty()) {
              return ChildrenNode.EMPTY_NODE;
          }
          else {
              return oldSnap.updatePriority(newPriority);
          }
      };
      IndexedFilter.prototype.filtersNodes = function () {
          return false;
      };
      IndexedFilter.prototype.getIndexedFilter = function () {
          return this;
      };
      IndexedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      return IndexedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
   */
  var RangedFilter = /** @class */ (function () {
      function RangedFilter(params) {
          this.indexedFilter_ = new IndexedFilter(params.getIndex());
          this.index_ = params.getIndex();
          this.startPost_ = RangedFilter.getStartPost_(params);
          this.endPost_ = RangedFilter.getEndPost_(params);
      }
      RangedFilter.prototype.getStartPost = function () {
          return this.startPost_;
      };
      RangedFilter.prototype.getEndPost = function () {
          return this.endPost_;
      };
      RangedFilter.prototype.matches = function (node) {
          return (this.index_.compare(this.getStartPost(), node) <= 0 &&
              this.index_.compare(node, this.getEndPost()) <= 0);
      };
      RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
      };
      RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          if (newSnap.isLeafNode()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              newSnap = ChildrenNode.EMPTY_NODE;
          }
          var filtered = newSnap.withIndex(this.index_);
          // Don't support priorities on queries
          filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
          var self = this;
          newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
              if (!self.matches(new NamedNode(key, childNode))) {
                  filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
              }
          });
          return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      };
      RangedFilter.prototype.filtersNodes = function () {
          return true;
      };
      RangedFilter.prototype.getIndexedFilter = function () {
          return this.indexedFilter_;
      };
      RangedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      RangedFilter.getStartPost_ = function (params) {
          if (params.hasStart()) {
              var startName = params.getIndexStartName();
              return params.getIndex().makePost(params.getIndexStartValue(), startName);
          }
          else {
              return params.getIndex().minPost();
          }
      };
      RangedFilter.getEndPost_ = function (params) {
          if (params.hasEnd()) {
              var endName = params.getIndexEndName();
              return params.getIndex().makePost(params.getIndexEndValue(), endName);
          }
          else {
              return params.getIndex().maxPost();
          }
      };
      return RangedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
   */
  var LimitedFilter = /** @class */ (function () {
      function LimitedFilter(params) {
          this.rangedFilter_ = new RangedFilter(params);
          this.index_ = params.getIndex();
          this.limit_ = params.getLimit();
          this.reverse_ = !params.isViewFromLeft();
      }
      LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          if (snap.getImmediateChild(key).equals(newChild)) {
              // No change
              return snap;
          }
          else if (snap.numChildren() < this.limit_) {
              return this.rangedFilter_
                  .getIndexedFilter()
                  .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
          }
          else {
              return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
          }
      };
      LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          var filtered;
          if (newSnap.isLeafNode() || newSnap.isEmpty()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
          }
          else {
              if (this.limit_ * 2 < newSnap.numChildren() &&
                  newSnap.isIndexed(this.index_)) {
                  // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                  filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                  // anchor to the startPost, endPost, or last element as appropriate
                  var iterator = void 0;
                  if (this.reverse_) {
                      iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                  }
                  else {
                      iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                  }
                  var count = 0;
                  while (iterator.hasNext() && count < this.limit_) {
                      var next = iterator.getNext();
                      var inRange = void 0;
                      if (this.reverse_) {
                          inRange =
                              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                      }
                      else {
                          inRange =
                              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                      }
                      if (inRange) {
                          filtered = filtered.updateImmediateChild(next.name, next.node);
                          count++;
                      }
                      else {
                          // if we have reached the end post, we cannot keep adding elemments
                          break;
                      }
                  }
              }
              else {
                  // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                  filtered = newSnap.withIndex(this.index_);
                  // Don't support priorities on queries
                  filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                  var startPost = void 0;
                  var endPost = void 0;
                  var cmp = void 0;
                  var iterator = void 0;
                  if (this.reverse_) {
                      iterator = filtered.getReverseIterator(this.index_);
                      startPost = this.rangedFilter_.getEndPost();
                      endPost = this.rangedFilter_.getStartPost();
                      var indexCompare_1 = this.index_.getCompare();
                      cmp = function (a, b) { return indexCompare_1(b, a); };
                  }
                  else {
                      iterator = filtered.getIterator(this.index_);
                      startPost = this.rangedFilter_.getStartPost();
                      endPost = this.rangedFilter_.getEndPost();
                      cmp = this.index_.getCompare();
                  }
                  var count = 0;
                  var foundStartPost = false;
                  while (iterator.hasNext()) {
                      var next = iterator.getNext();
                      if (!foundStartPost && cmp(startPost, next) <= 0) {
                          // start adding
                          foundStartPost = true;
                      }
                      var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                      if (inRange) {
                          count++;
                      }
                      else {
                          filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                      }
                  }
              }
          }
          return this.rangedFilter_
              .getIndexedFilter()
              .updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      };
      LimitedFilter.prototype.filtersNodes = function () {
          return true;
      };
      LimitedFilter.prototype.getIndexedFilter = function () {
          return this.rangedFilter_.getIndexedFilter();
      };
      LimitedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
          // TODO: rename all cache stuff etc to general snap terminology
          var cmp;
          if (this.reverse_) {
              var indexCmp_1 = this.index_.getCompare();
              cmp = function (a, b) { return indexCmp_1(b, a); };
          }
          else {
              cmp = this.index_.getCompare();
          }
          var oldEventCache = snap;
          assert(oldEventCache.numChildren() === this.limit_, '');
          var newChildNamedNode = new NamedNode(childKey, childSnap);
          var windowBoundary = this.reverse_
              ? oldEventCache.getFirstChild(this.index_)
              : oldEventCache.getLastChild(this.index_);
          var inRange = this.rangedFilter_.matches(newChildNamedNode);
          if (oldEventCache.hasChild(childKey)) {
              var oldChildSnap = oldEventCache.getImmediateChild(childKey);
              var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
              while (nextChild != null &&
                  (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                  // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                  // been applied to the limited filter yet. Ignore this next child which will be updated later in
                  // the limited filter...
                  nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
              }
              var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
              var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
              if (remainsInWindow) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
                  }
                  return oldEventCache.updateImmediateChild(childKey, childSnap);
              }
              else {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
                  }
                  var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                  var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                  if (nextChildInRange) {
                      if (changeAccumulator != null) {
                          changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
                      }
                      return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                  }
                  else {
                      return newEventCache;
                  }
              }
          }
          else if (childSnap.isEmpty()) {
              // we're deleting a node, but it was not in the window, so ignore it
              return snap;
          }
          else if (inRange) {
              if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
                      changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
                  }
                  return oldEventCache
                      .updateImmediateChild(childKey, childSnap)
                      .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
              }
              else {
                  return snap;
              }
          }
          else {
              return snap;
          }
      };
      return LimitedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
   * range to be returned for a particular location. It is assumed that validation of parameters is done at the
   * user-facing API level, so it is not done here.
   */
  var QueryParams = /** @class */ (function () {
      function QueryParams() {
          this.limitSet_ = false;
          this.startSet_ = false;
          this.startNameSet_ = false;
          this.startAfterSet_ = false;
          this.endSet_ = false;
          this.endNameSet_ = false;
          this.endBeforeSet_ = false;
          this.limit_ = 0;
          this.viewFrom_ = '';
          this.indexStartValue_ = null;
          this.indexStartName_ = '';
          this.indexEndValue_ = null;
          this.indexEndName_ = '';
          this.index_ = PRIORITY_INDEX;
      }
      QueryParams.prototype.hasStart = function () {
          return this.startSet_;
      };
      QueryParams.prototype.hasStartAfter = function () {
          return this.startAfterSet_;
      };
      QueryParams.prototype.hasEndBefore = function () {
          return this.endBeforeSet_;
      };
      /**
       * @returns True if it would return from left.
       */
      QueryParams.prototype.isViewFromLeft = function () {
          if (this.viewFrom_ === '') {
              // limit(), rather than limitToFirst or limitToLast was called.
              // This means that only one of startSet_ and endSet_ is true. Use them
              // to calculate which side of the view to anchor to. If neither is set,
              // anchor to the end.
              return this.startSet_;
          }
          else {
              return this.viewFrom_ === "l" /* VIEW_FROM_LEFT */;
          }
      };
      /**
       * Only valid to call if hasStart() returns true
       */
      QueryParams.prototype.getIndexStartValue = function () {
          assert(this.startSet_, 'Only valid if start has been set');
          return this.indexStartValue_;
      };
      /**
       * Only valid to call if hasStart() returns true.
       * Returns the starting key name for the range defined by these query parameters
       */
      QueryParams.prototype.getIndexStartName = function () {
          assert(this.startSet_, 'Only valid if start has been set');
          if (this.startNameSet_) {
              return this.indexStartName_;
          }
          else {
              return MIN_NAME;
          }
      };
      QueryParams.prototype.hasEnd = function () {
          return this.endSet_;
      };
      /**
       * Only valid to call if hasEnd() returns true.
       */
      QueryParams.prototype.getIndexEndValue = function () {
          assert(this.endSet_, 'Only valid if end has been set');
          return this.indexEndValue_;
      };
      /**
       * Only valid to call if hasEnd() returns true.
       * Returns the end key name for the range defined by these query parameters
       */
      QueryParams.prototype.getIndexEndName = function () {
          assert(this.endSet_, 'Only valid if end has been set');
          if (this.endNameSet_) {
              return this.indexEndName_;
          }
          else {
              return MAX_NAME;
          }
      };
      QueryParams.prototype.hasLimit = function () {
          return this.limitSet_;
      };
      /**
       * @returns True if a limit has been set and it has been explicitly anchored
       */
      QueryParams.prototype.hasAnchoredLimit = function () {
          return this.limitSet_ && this.viewFrom_ !== '';
      };
      /**
       * Only valid to call if hasLimit() returns true
       */
      QueryParams.prototype.getLimit = function () {
          assert(this.limitSet_, 'Only valid if limit has been set');
          return this.limit_;
      };
      QueryParams.prototype.getIndex = function () {
          return this.index_;
      };
      QueryParams.prototype.loadsAllData = function () {
          return !(this.startSet_ || this.endSet_ || this.limitSet_);
      };
      QueryParams.prototype.isDefault = function () {
          return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
      };
      QueryParams.prototype.copy = function () {
          var copy = new QueryParams();
          copy.limitSet_ = this.limitSet_;
          copy.limit_ = this.limit_;
          copy.startSet_ = this.startSet_;
          copy.indexStartValue_ = this.indexStartValue_;
          copy.startNameSet_ = this.startNameSet_;
          copy.indexStartName_ = this.indexStartName_;
          copy.endSet_ = this.endSet_;
          copy.indexEndValue_ = this.indexEndValue_;
          copy.endNameSet_ = this.endNameSet_;
          copy.indexEndName_ = this.indexEndName_;
          copy.index_ = this.index_;
          copy.viewFrom_ = this.viewFrom_;
          return copy;
      };
      return QueryParams;
  }());
  function queryParamsGetNodeFilter(queryParams) {
      if (queryParams.loadsAllData()) {
          return new IndexedFilter(queryParams.getIndex());
      }
      else if (queryParams.hasLimit()) {
          return new LimitedFilter(queryParams);
      }
      else {
          return new RangedFilter(queryParams);
      }
  }
  function queryParamsLimitToFirst(queryParams, newLimit) {
      var newParams = queryParams.copy();
      newParams.limitSet_ = true;
      newParams.limit_ = newLimit;
      newParams.viewFrom_ = "l" /* VIEW_FROM_LEFT */;
      return newParams;
  }
  function queryParamsLimitToLast(queryParams, newLimit) {
      var newParams = queryParams.copy();
      newParams.limitSet_ = true;
      newParams.limit_ = newLimit;
      newParams.viewFrom_ = "r" /* VIEW_FROM_RIGHT */;
      return newParams;
  }
  function queryParamsStartAt(queryParams, indexValue, key) {
      var newParams = queryParams.copy();
      newParams.startSet_ = true;
      if (indexValue === undefined) {
          indexValue = null;
      }
      newParams.indexStartValue_ = indexValue;
      if (key != null) {
          newParams.startNameSet_ = true;
          newParams.indexStartName_ = key;
      }
      else {
          newParams.startNameSet_ = false;
          newParams.indexStartName_ = '';
      }
      return newParams;
  }
  function queryParamsStartAfter(queryParams, indexValue, key) {
      var params;
      if (queryParams.index_ === KEY_INDEX) {
          if (typeof indexValue === 'string') {
              indexValue = successor(indexValue);
          }
          params = queryParamsStartAt(queryParams, indexValue, key);
      }
      else {
          var childKey = void 0;
          if (key == null) {
              childKey = MAX_NAME;
          }
          else {
              childKey = successor(key);
          }
          params = queryParamsStartAt(queryParams, indexValue, childKey);
      }
      params.startAfterSet_ = true;
      return params;
  }
  function queryParamsEndAt(queryParams, indexValue, key) {
      var newParams = queryParams.copy();
      newParams.endSet_ = true;
      if (indexValue === undefined) {
          indexValue = null;
      }
      newParams.indexEndValue_ = indexValue;
      if (key !== undefined) {
          newParams.endNameSet_ = true;
          newParams.indexEndName_ = key;
      }
      else {
          newParams.endNameSet_ = false;
          newParams.indexEndName_ = '';
      }
      return newParams;
  }
  function queryParamsEndBefore(queryParams, indexValue, key) {
      var childKey;
      var params;
      if (queryParams.index_ === KEY_INDEX) {
          if (typeof indexValue === 'string') {
              indexValue = predecessor(indexValue);
          }
          params = queryParamsEndAt(queryParams, indexValue, key);
      }
      else {
          if (key == null) {
              childKey = MIN_NAME;
          }
          else {
              childKey = predecessor(key);
          }
          params = queryParamsEndAt(queryParams, indexValue, childKey);
      }
      params.endBeforeSet_ = true;
      return params;
  }
  function queryParamsOrderBy(queryParams, index) {
      var newParams = queryParams.copy();
      newParams.index_ = index;
      return newParams;
  }
  /**
   * Returns a set of REST query string parameters representing this query.
   *
   * @returns query string parameters
   */
  function queryParamsToRestQueryStringParameters(queryParams) {
      var qs = {};
      if (queryParams.isDefault()) {
          return qs;
      }
      var orderBy;
      if (queryParams.index_ === PRIORITY_INDEX) {
          orderBy = "$priority" /* PRIORITY_INDEX */;
      }
      else if (queryParams.index_ === VALUE_INDEX) {
          orderBy = "$value" /* VALUE_INDEX */;
      }
      else if (queryParams.index_ === KEY_INDEX) {
          orderBy = "$key" /* KEY_INDEX */;
      }
      else {
          assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');
          orderBy = queryParams.index_.toString();
      }
      qs["orderBy" /* ORDER_BY */] = stringify(orderBy);
      if (queryParams.startSet_) {
          qs["startAt" /* START_AT */] = stringify(queryParams.indexStartValue_);
          if (queryParams.startNameSet_) {
              qs["startAt" /* START_AT */] +=
                  ',' + stringify(queryParams.indexStartName_);
          }
      }
      if (queryParams.endSet_) {
          qs["endAt" /* END_AT */] = stringify(queryParams.indexEndValue_);
          if (queryParams.endNameSet_) {
              qs["endAt" /* END_AT */] +=
                  ',' + stringify(queryParams.indexEndName_);
          }
      }
      if (queryParams.limitSet_) {
          if (queryParams.isViewFromLeft()) {
              qs["limitToFirst" /* LIMIT_TO_FIRST */] = queryParams.limit_;
          }
          else {
              qs["limitToLast" /* LIMIT_TO_LAST */] = queryParams.limit_;
          }
      }
      return qs;
  }
  function queryParamsGetQueryObject(queryParams) {
      var obj = {};
      if (queryParams.startSet_) {
          obj["sp" /* INDEX_START_VALUE */] =
              queryParams.indexStartValue_;
          if (queryParams.startNameSet_) {
              obj["sn" /* INDEX_START_NAME */] =
                  queryParams.indexStartName_;
          }
      }
      if (queryParams.endSet_) {
          obj["ep" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;
          if (queryParams.endNameSet_) {
              obj["en" /* INDEX_END_NAME */] = queryParams.indexEndName_;
          }
      }
      if (queryParams.limitSet_) {
          obj["l" /* LIMIT */] = queryParams.limit_;
          var viewFrom = queryParams.viewFrom_;
          if (viewFrom === '') {
              if (queryParams.isViewFromLeft()) {
                  viewFrom = "l" /* VIEW_FROM_LEFT */;
              }
              else {
                  viewFrom = "r" /* VIEW_FROM_RIGHT */;
              }
          }
          obj["vf" /* VIEW_FROM */] = viewFrom;
      }
      // For now, priority index is the default, so we only specify if it's some other index
      if (queryParams.index_ !== PRIORITY_INDEX) {
          obj["i" /* INDEX */] = queryParams.index_.toString();
      }
      return obj;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of ServerActions that communicates with the server via REST requests.
   * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
   * persistent connection (using WebSockets or long-polling)
   */
  var ReadonlyRestClient = /** @class */ (function (_super) {
      __extends$4(ReadonlyRestClient, _super);
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param onDataUpdate_ - A callback for new data from the server
       */
      function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
          var _this = _super.call(this) || this;
          _this.repoInfo_ = repoInfo_;
          _this.onDataUpdate_ = onDataUpdate_;
          _this.authTokenProvider_ = authTokenProvider_;
          _this.appCheckTokenProvider_ = appCheckTokenProvider_;
          /** @private {function(...[*])} */
          _this.log_ = logWrapper('p:rest:');
          /**
           * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
           * that's been removed. :-/
           */
          _this.listens_ = {};
          return _this;
      }
      ReadonlyRestClient.prototype.reportStats = function (stats) {
          throw new Error('Method not implemented.');
      };
      ReadonlyRestClient.getListenId_ = function (query, tag) {
          if (tag !== undefined) {
              return 'tag$' + tag;
          }
          else {
              assert(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
              return query._path.toString();
          }
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
          var _this = this;
          var pathString = query._path.toString();
          this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);
          // Mark this listener so we can tell if it's removed.
          var listenId = ReadonlyRestClient.getListenId_(query, tag);
          var thisListen = {};
          this.listens_[listenId] = thisListen;
          var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
          this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
              var data = result;
              if (error === 404) {
                  data = null;
                  error = null;
              }
              if (error === null) {
                  _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
              }
              if (safeGet(_this.listens_, listenId) === thisListen) {
                  var status_1;
                  if (!error) {
                      status_1 = 'ok';
                  }
                  else if (error === 401) {
                      status_1 = 'permission_denied';
                  }
                  else {
                      status_1 = 'rest_error:' + error;
                  }
                  onComplete(status_1, null);
              }
          });
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.unlisten = function (query, tag) {
          var listenId = ReadonlyRestClient.getListenId_(query, tag);
          delete this.listens_[listenId];
      };
      ReadonlyRestClient.prototype.get = function (query) {
          var _this = this;
          var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
          var pathString = query._path.toString();
          var deferred = new Deferred();
          this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
              var data = result;
              if (error === 404) {
                  data = null;
                  error = null;
              }
              if (error === null) {
                  _this.onDataUpdate_(pathString, data, 
                  /*isMerge=*/ false, 
                  /*tag=*/ null);
                  deferred.resolve(data);
              }
              else {
                  deferred.reject(new Error(data));
              }
          });
          return deferred.promise;
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
          // no-op since we just always call getToken.
      };
      /**
       * Performs a REST request to the given path, with the provided query string parameters,
       * and any auth credentials we have.
       */
      ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
          var _this = this;
          if (queryStringParameters === void 0) { queryStringParameters = {}; }
          queryStringParameters['format'] = 'export';
          return Promise.all([
              this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
              this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)
          ]).then(function (_a) {
              var _b = __read$4(_a, 2), authToken = _b[0], appCheckToken = _b[1];
              if (authToken && authToken.accessToken) {
                  queryStringParameters['auth'] = authToken.accessToken;
              }
              if (appCheckToken && appCheckToken.token) {
                  queryStringParameters['ac'] = appCheckToken.token;
              }
              var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                  _this.repoInfo_.host +
                  pathString +
                  '?' +
                  'ns=' +
                  _this.repoInfo_.namespace +
                  querystring(queryStringParameters);
              _this.log_('Sending REST request for ' + url);
              var xhr = new XMLHttpRequest();
              xhr.onreadystatechange = function () {
                  if (callback && xhr.readyState === 4) {
                      _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                      var res = null;
                      if (xhr.status >= 200 && xhr.status < 300) {
                          try {
                              res = jsonEval(xhr.responseText);
                          }
                          catch (e) {
                              warn('Failed to parse JSON response for ' +
                                  url +
                                  ': ' +
                                  xhr.responseText);
                          }
                          callback(null, res);
                      }
                      else {
                          // 401 and 404 are expected.
                          if (xhr.status !== 401 && xhr.status !== 404) {
                              warn('Got unsuccessful REST response for ' +
                                  url +
                                  ' Status: ' +
                                  xhr.status);
                          }
                          callback(xhr.status);
                      }
                      callback = null;
                  }
              };
              xhr.open('GET', url, /*asynchronous=*/ true);
              xhr.send();
          });
      };
      return ReadonlyRestClient;
  }(ServerActions));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
   */
  var SnapshotHolder = /** @class */ (function () {
      function SnapshotHolder() {
          this.rootNode_ = ChildrenNode.EMPTY_NODE;
      }
      SnapshotHolder.prototype.getNode = function (path) {
          return this.rootNode_.getChild(path);
      };
      SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
          this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
      };
      return SnapshotHolder;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newSparseSnapshotTree() {
      return {
          value: null,
          children: new Map()
      };
  }
  /**
   * Stores the given node at the specified path. If there is already a node
   * at a shallower path, it merges the new data into that snapshot node.
   *
   * @param path - Path to look up snapshot for.
   * @param data - The new data, or null.
   */
  function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
      if (pathIsEmpty(path)) {
          sparseSnapshotTree.value = data;
          sparseSnapshotTree.children.clear();
      }
      else if (sparseSnapshotTree.value !== null) {
          sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
      }
      else {
          var childKey = pathGetFront(path);
          if (!sparseSnapshotTree.children.has(childKey)) {
              sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
          }
          var child = sparseSnapshotTree.children.get(childKey);
          path = pathPopFront(path);
          sparseSnapshotTreeRemember(child, path, data);
      }
  }
  /**
   * Purge the data at path from the cache.
   *
   * @param path - Path to look up snapshot for.
   * @returns True if this node should now be removed.
   */
  function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
      if (pathIsEmpty(path)) {
          sparseSnapshotTree.value = null;
          sparseSnapshotTree.children.clear();
          return true;
      }
      else {
          if (sparseSnapshotTree.value !== null) {
              if (sparseSnapshotTree.value.isLeafNode()) {
                  // We're trying to forget a node that doesn't exist
                  return false;
              }
              else {
                  var value = sparseSnapshotTree.value;
                  sparseSnapshotTree.value = null;
                  value.forEachChild(PRIORITY_INDEX, function (key, tree) {
                      sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);
                  });
                  return sparseSnapshotTreeForget(sparseSnapshotTree, path);
              }
          }
          else if (sparseSnapshotTree.children.size > 0) {
              var childKey = pathGetFront(path);
              path = pathPopFront(path);
              if (sparseSnapshotTree.children.has(childKey)) {
                  var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);
                  if (safeToRemove) {
                      sparseSnapshotTree.children.delete(childKey);
                  }
              }
              return sparseSnapshotTree.children.size === 0;
          }
          else {
              return true;
          }
      }
  }
  /**
   * Recursively iterates through all of the stored tree and calls the
   * callback on each one.
   *
   * @param prefixPath - Path to look up node for.
   * @param func - The function to invoke for each tree.
   */
  function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
      if (sparseSnapshotTree.value !== null) {
          func(prefixPath, sparseSnapshotTree.value);
      }
      else {
          sparseSnapshotTreeForEachChild(sparseSnapshotTree, function (key, tree) {
              var path = new Path(prefixPath.toString() + '/' + key);
              sparseSnapshotTreeForEachTree(tree, path, func);
          });
      }
  }
  /**
   * Iterates through each immediate child and triggers the callback.
   * Only seems to be used in tests.
   *
   * @param func - The function to invoke for each child.
   */
  function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
      sparseSnapshotTree.children.forEach(function (tree, key) {
          func(key, tree);
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns the delta from the previous call to get stats.
   *
   * @param collection_ - The collection to "listen" to.
   */
  var StatsListener = /** @class */ (function () {
      function StatsListener(collection_) {
          this.collection_ = collection_;
          this.last_ = null;
      }
      StatsListener.prototype.get = function () {
          var newStats = this.collection_.get();
          var delta = __assign$4({}, newStats);
          if (this.last_) {
              each(this.last_, function (stat, value) {
                  delta[stat] = delta[stat] - value;
              });
          }
          this.last_ = newStats;
          return delta;
      };
      return StatsListener;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
  // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
  // seconds to try to ensure the Firebase connection is established / settled.
  var FIRST_STATS_MIN_TIME = 10 * 1000;
  var FIRST_STATS_MAX_TIME = 30 * 1000;
  // We'll continue to report stats on average every 5 minutes.
  var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
  var StatsReporter = /** @class */ (function () {
      function StatsReporter(collection, server_) {
          this.server_ = server_;
          this.statsToReport_ = {};
          this.statsListener_ = new StatsListener(collection);
          var timeout = FIRST_STATS_MIN_TIME +
              (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
      }
      StatsReporter.prototype.reportStats_ = function () {
          var _this = this;
          var stats = this.statsListener_.get();
          var reportedStats = {};
          var haveStatsToReport = false;
          each(stats, function (stat, value) {
              if (value > 0 && contains(_this.statsToReport_, stat)) {
                  reportedStats[stat] = value;
                  haveStatsToReport = true;
              }
          });
          if (haveStatsToReport) {
              this.server_.reportStats(reportedStats);
          }
          // queue our next run.
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
      };
      return StatsReporter;
  }());
  function statsReporterIncludeStat(reporter, stat) {
      reporter.statsToReport_[stat] = true;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   *
   * @enum
   */
  var OperationType;
  (function (OperationType) {
      OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
      OperationType[OperationType["MERGE"] = 1] = "MERGE";
      OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
      OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
  })(OperationType || (OperationType = {}));
  function newOperationSourceUser() {
      return {
          fromUser: true,
          fromServer: false,
          queryId: null,
          tagged: false
      };
  }
  function newOperationSourceServer() {
      return {
          fromUser: false,
          fromServer: true,
          queryId: null,
          tagged: false
      };
  }
  function newOperationSourceServerTaggedQuery(queryId) {
      return {
          fromUser: false,
          fromServer: true,
          queryId: queryId,
          tagged: true
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var AckUserWrite = /** @class */ (function () {
      /**
       * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
       */
      function AckUserWrite(
      /** @inheritDoc */ path, 
      /** @inheritDoc */ affectedTree, 
      /** @inheritDoc */ revert) {
          this.path = path;
          this.affectedTree = affectedTree;
          this.revert = revert;
          /** @inheritDoc */
          this.type = OperationType.ACK_USER_WRITE;
          /** @inheritDoc */
          this.source = newOperationSourceUser();
      }
      AckUserWrite.prototype.operationForChild = function (childName) {
          if (!pathIsEmpty(this.path)) {
              assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
              return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
          }
          else if (this.affectedTree.value != null) {
              assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
              // All child locations are affected as well; just return same operation.
              return this;
          }
          else {
              var childTree = this.affectedTree.subtree(new Path(childName));
              return new AckUserWrite(newEmptyPath(), childTree, this.revert);
          }
      };
      return AckUserWrite;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ListenComplete = /** @class */ (function () {
      function ListenComplete(source, path) {
          this.source = source;
          this.path = path;
          /** @inheritDoc */
          this.type = OperationType.LISTEN_COMPLETE;
      }
      ListenComplete.prototype.operationForChild = function (childName) {
          if (pathIsEmpty(this.path)) {
              return new ListenComplete(this.source, newEmptyPath());
          }
          else {
              return new ListenComplete(this.source, pathPopFront(this.path));
          }
      };
      return ListenComplete;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Overwrite = /** @class */ (function () {
      function Overwrite(source, path, snap) {
          this.source = source;
          this.path = path;
          this.snap = snap;
          /** @inheritDoc */
          this.type = OperationType.OVERWRITE;
      }
      Overwrite.prototype.operationForChild = function (childName) {
          if (pathIsEmpty(this.path)) {
              return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
          }
          else {
              return new Overwrite(this.source, pathPopFront(this.path), this.snap);
          }
      };
      return Overwrite;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Merge = /** @class */ (function () {
      function Merge(
      /** @inheritDoc */ source, 
      /** @inheritDoc */ path, 
      /** @inheritDoc */ children) {
          this.source = source;
          this.path = path;
          this.children = children;
          /** @inheritDoc */
          this.type = OperationType.MERGE;
      }
      Merge.prototype.operationForChild = function (childName) {
          if (pathIsEmpty(this.path)) {
              var childTree = this.children.subtree(new Path(childName));
              if (childTree.isEmpty()) {
                  // This child is unaffected
                  return null;
              }
              else if (childTree.value) {
                  // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                  return new Overwrite(this.source, newEmptyPath(), childTree.value);
              }
              else {
                  // This is a merge at a deeper level
                  return new Merge(this.source, newEmptyPath(), childTree);
              }
          }
          else {
              assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
              return new Merge(this.source, pathPopFront(this.path), this.children);
          }
      };
      Merge.prototype.toString = function () {
          return ('Operation(' +
              this.path +
              ': ' +
              this.source.toString() +
              ' merge: ' +
              this.children.toString() +
              ')');
      };
      return Merge;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
   * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
   * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
   * whether a node potentially had children removed due to a filter.
   */
  var CacheNode = /** @class */ (function () {
      function CacheNode(node_, fullyInitialized_, filtered_) {
          this.node_ = node_;
          this.fullyInitialized_ = fullyInitialized_;
          this.filtered_ = filtered_;
      }
      /**
       * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
       */
      CacheNode.prototype.isFullyInitialized = function () {
          return this.fullyInitialized_;
      };
      /**
       * Returns whether this node is potentially missing children due to a filter applied to the node
       */
      CacheNode.prototype.isFiltered = function () {
          return this.filtered_;
      };
      CacheNode.prototype.isCompleteForPath = function (path) {
          if (pathIsEmpty(path)) {
              return this.isFullyInitialized() && !this.filtered_;
          }
          var childKey = pathGetFront(path);
          return this.isCompleteForChild(childKey);
      };
      CacheNode.prototype.isCompleteForChild = function (key) {
          return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
      };
      CacheNode.prototype.getNode = function () {
          return this.node_;
      };
      return CacheNode;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An EventGenerator is used to convert "raw" changes (Change) as computed by the
   * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
   * for details.
   *
   */
  var EventGenerator = /** @class */ (function () {
      function EventGenerator(query_) {
          this.query_ = query_;
          this.index_ = this.query_._queryParams.getIndex();
      }
      return EventGenerator;
  }());
  /**
   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
   *
   * Notes:
   *  - child_moved events will be synthesized at this time for any child_changed events that affect
   *    our index.
   *  - prevName will be calculated based on the index ordering.
   */
  function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
      var events = [];
      var moves = [];
      changes.forEach(function (change) {
          if (change.type === "child_changed" /* CHILD_CHANGED */ &&
              eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
              moves.push(changeChildMoved(change.childName, change.snapshotNode));
          }
      });
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "value" /* VALUE */, changes, eventRegistrations, eventCache);
      return events;
  }
  /**
   * Given changes of a single change type, generate the corresponding events.
   */
  function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
      var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
      filteredChanges.sort(function (a, b) {
          return eventGeneratorCompareChanges(eventGenerator, a, b);
      });
      filteredChanges.forEach(function (change) {
          var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
          registrations.forEach(function (registration) {
              if (registration.respondsTo(change.type)) {
                  events.push(registration.createEvent(materializedChange, eventGenerator.query_));
              }
          });
      });
  }
  function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
      if (change.type === 'value' || change.type === 'child_removed') {
          return change;
      }
      else {
          change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
          return change;
      }
  }
  function eventGeneratorCompareChanges(eventGenerator, a, b) {
      if (a.childName == null || b.childName == null) {
          throw assertionError('Should only compare child_ events.');
      }
      var aWrapped = new NamedNode(a.childName, a.snapshotNode);
      var bWrapped = new NamedNode(b.childName, b.snapshotNode);
      return eventGenerator.index_.compare(aWrapped, bWrapped);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewCache(eventCache, serverCache) {
      return { eventCache: eventCache, serverCache: serverCache };
  }
  function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
      return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
  }
  function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
      return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
  }
  function viewCacheGetCompleteEventSnap(viewCache) {
      return viewCache.eventCache.isFullyInitialized()
          ? viewCache.eventCache.getNode()
          : null;
  }
  function viewCacheGetCompleteServerSnap(viewCache) {
      return viewCache.serverCache.isFullyInitialized()
          ? viewCache.serverCache.getNode()
          : null;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var emptyChildrenSingleton;
  /**
   * Singleton empty children collection.
   *
   */
  var EmptyChildren = function () {
      if (!emptyChildrenSingleton) {
          emptyChildrenSingleton = new SortedMap(stringCompare);
      }
      return emptyChildrenSingleton;
  };
  /**
   * A tree with immutable elements.
   */
  var ImmutableTree = /** @class */ (function () {
      function ImmutableTree(value, children) {
          if (children === void 0) { children = EmptyChildren(); }
          this.value = value;
          this.children = children;
      }
      ImmutableTree.fromObject = function (obj) {
          var tree = new ImmutableTree(null);
          each(obj, function (childPath, childSnap) {
              tree = tree.set(new Path(childPath), childSnap);
          });
          return tree;
      };
      /**
       * True if the value is empty and there are no children
       */
      ImmutableTree.prototype.isEmpty = function () {
          return this.value === null && this.children.isEmpty();
      };
      /**
       * Given a path and predicate, return the first node and the path to that node
       * where the predicate returns true.
       *
       * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
       * objects on the way back out, it may be better to pass down a pathSoFar obj.
       *
       * @param relativePath - The remainder of the path
       * @param predicate - The predicate to satisfy to return a node
       */
      ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
          if (this.value != null && predicate(this.value)) {
              return { path: newEmptyPath(), value: this.value };
          }
          else {
              if (pathIsEmpty(relativePath)) {
                  return null;
              }
              else {
                  var front = pathGetFront(relativePath);
                  var child = this.children.get(front);
                  if (child !== null) {
                      var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
                      if (childExistingPathAndValue != null) {
                          var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                          return { path: fullPath, value: childExistingPathAndValue.value };
                      }
                      else {
                          return null;
                      }
                  }
                  else {
                      return null;
                  }
              }
          }
      };
      /**
       * Find, if it exists, the shortest subpath of the given path that points a defined
       * value in the tree
       */
      ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
          return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
      };
      /**
       * @returns The subtree at the given path
       */
      ImmutableTree.prototype.subtree = function (relativePath) {
          if (pathIsEmpty(relativePath)) {
              return this;
          }
          else {
              var front = pathGetFront(relativePath);
              var childTree = this.children.get(front);
              if (childTree !== null) {
                  return childTree.subtree(pathPopFront(relativePath));
              }
              else {
                  return new ImmutableTree(null);
              }
          }
      };
      /**
       * Sets a value at the specified path.
       *
       * @param relativePath - Path to set value at.
       * @param toSet - Value to set.
       * @returns Resulting tree.
       */
      ImmutableTree.prototype.set = function (relativePath, toSet) {
          if (pathIsEmpty(relativePath)) {
              return new ImmutableTree(toSet, this.children);
          }
          else {
              var front = pathGetFront(relativePath);
              var child = this.children.get(front) || new ImmutableTree(null);
              var newChild = child.set(pathPopFront(relativePath), toSet);
              var newChildren = this.children.insert(front, newChild);
              return new ImmutableTree(this.value, newChildren);
          }
      };
      /**
       * Removes the value at the specified path.
       *
       * @param relativePath - Path to value to remove.
       * @returns Resulting tree.
       */
      ImmutableTree.prototype.remove = function (relativePath) {
          if (pathIsEmpty(relativePath)) {
              if (this.children.isEmpty()) {
                  return new ImmutableTree(null);
              }
              else {
                  return new ImmutableTree(null, this.children);
              }
          }
          else {
              var front = pathGetFront(relativePath);
              var child = this.children.get(front);
              if (child) {
                  var newChild = child.remove(pathPopFront(relativePath));
                  var newChildren = void 0;
                  if (newChild.isEmpty()) {
                      newChildren = this.children.remove(front);
                  }
                  else {
                      newChildren = this.children.insert(front, newChild);
                  }
                  if (this.value === null && newChildren.isEmpty()) {
                      return new ImmutableTree(null);
                  }
                  else {
                      return new ImmutableTree(this.value, newChildren);
                  }
              }
              else {
                  return this;
              }
          }
      };
      /**
       * Gets a value from the tree.
       *
       * @param relativePath - Path to get value for.
       * @returns Value at path, or null.
       */
      ImmutableTree.prototype.get = function (relativePath) {
          if (pathIsEmpty(relativePath)) {
              return this.value;
          }
          else {
              var front = pathGetFront(relativePath);
              var child = this.children.get(front);
              if (child) {
                  return child.get(pathPopFront(relativePath));
              }
              else {
                  return null;
              }
          }
      };
      /**
       * Replace the subtree at the specified path with the given new tree.
       *
       * @param relativePath - Path to replace subtree for.
       * @param newTree - New tree.
       * @returns Resulting tree.
       */
      ImmutableTree.prototype.setTree = function (relativePath, newTree) {
          if (pathIsEmpty(relativePath)) {
              return newTree;
          }
          else {
              var front = pathGetFront(relativePath);
              var child = this.children.get(front) || new ImmutableTree(null);
              var newChild = child.setTree(pathPopFront(relativePath), newTree);
              var newChildren = void 0;
              if (newChild.isEmpty()) {
                  newChildren = this.children.remove(front);
              }
              else {
                  newChildren = this.children.insert(front, newChild);
              }
              return new ImmutableTree(this.value, newChildren);
          }
      };
      /**
       * Performs a depth first fold on this tree. Transforms a tree into a single
       * value, given a function that operates on the path to a node, an optional
       * current value, and a map of child names to folded subtrees
       */
      ImmutableTree.prototype.fold = function (fn) {
          return this.fold_(newEmptyPath(), fn);
      };
      /**
       * Recursive helper for public-facing fold() method
       */
      ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
          var accum = {};
          this.children.inorderTraversal(function (childKey, childTree) {
              accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
          });
          return fn(pathSoFar, this.value, accum);
      };
      /**
       * Find the first matching value on the given path. Return the result of applying f to it.
       */
      ImmutableTree.prototype.findOnPath = function (path, f) {
          return this.findOnPath_(path, newEmptyPath(), f);
      };
      ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
          var result = this.value ? f(pathSoFar, this.value) : false;
          if (result) {
              return result;
          }
          else {
              if (pathIsEmpty(pathToFollow)) {
                  return null;
              }
              else {
                  var front = pathGetFront(pathToFollow);
                  var nextChild = this.children.get(front);
                  if (nextChild) {
                      return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
                  }
                  else {
                      return null;
                  }
              }
          }
      };
      ImmutableTree.prototype.foreachOnPath = function (path, f) {
          return this.foreachOnPath_(path, newEmptyPath(), f);
      };
      ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
          if (pathIsEmpty(pathToFollow)) {
              return this;
          }
          else {
              if (this.value) {
                  f(currentRelativePath, this.value);
              }
              var front = pathGetFront(pathToFollow);
              var nextChild = this.children.get(front);
              if (nextChild) {
                  return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
              }
              else {
                  return new ImmutableTree(null);
              }
          }
      };
      /**
       * Calls the given function for each node in the tree that has a value.
       *
       * @param f - A function to be called with the path from the root of the tree to
       * a node, and the value at that node. Called in depth-first order.
       */
      ImmutableTree.prototype.foreach = function (f) {
          this.foreach_(newEmptyPath(), f);
      };
      ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
          this.children.inorderTraversal(function (childName, childTree) {
              childTree.foreach_(pathChild(currentRelativePath, childName), f);
          });
          if (this.value) {
              f(currentRelativePath, this.value);
          }
      };
      ImmutableTree.prototype.foreachChild = function (f) {
          this.children.inorderTraversal(function (childName, childTree) {
              if (childTree.value) {
                  f(childName, childTree.value);
              }
          });
      };
      return ImmutableTree;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
   * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
   * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
   * to reflect the write added.
   */
  var CompoundWrite = /** @class */ (function () {
      function CompoundWrite(writeTree_) {
          this.writeTree_ = writeTree_;
      }
      CompoundWrite.empty = function () {
          return new CompoundWrite(new ImmutableTree(null));
      };
      return CompoundWrite;
  }());
  function compoundWriteAddWrite(compoundWrite, path, node) {
      if (pathIsEmpty(path)) {
          return new CompoundWrite(new ImmutableTree(node));
      }
      else {
          var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
          if (rootmost != null) {
              var rootMostPath = rootmost.path;
              var value = rootmost.value;
              var relativePath = newRelativePath(rootMostPath, path);
              value = value.updateChild(relativePath, node);
              return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
          }
          else {
              var subtree = new ImmutableTree(node);
              var newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
              return new CompoundWrite(newWriteTree);
          }
      }
  }
  function compoundWriteAddWrites(compoundWrite, path, updates) {
      var newWrite = compoundWrite;
      each(updates, function (childKey, node) {
          newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
      });
      return newWrite;
  }
  /**
   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
   * location, which must be removed by calling this method with that path.
   *
   * @param compoundWrite - The CompoundWrite to remove.
   * @param path - The path at which a write and all deeper writes should be removed
   * @returns The new CompoundWrite with the removed path
   */
  function compoundWriteRemoveWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
          return CompoundWrite.empty();
      }
      else {
          var newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
          return new CompoundWrite(newWriteTree);
      }
  }
  /**
   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
   * considered "complete".
   *
   * @param compoundWrite - The CompoundWrite to check.
   * @param path - The path to check for
   * @returns Whether there is a complete write at that path
   */
  function compoundWriteHasCompleteWrite(compoundWrite, path) {
      return compoundWriteGetCompleteNode(compoundWrite, path) != null;
  }
  /**
   * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
   * writes from deeper paths, but will return child nodes from a more shallow path.
   *
   * @param compoundWrite - The CompoundWrite to get the node from.
   * @param path - The path to get a complete write
   * @returns The node if complete at that path, or null otherwise.
   */
  function compoundWriteGetCompleteNode(compoundWrite, path) {
      var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
      if (rootmost != null) {
          return compoundWrite.writeTree_
              .get(rootmost.path)
              .getChild(newRelativePath(rootmost.path, path));
      }
      else {
          return null;
      }
  }
  /**
   * Returns all children that are guaranteed to be a complete overwrite.
   *
   * @param compoundWrite - The CompoundWrite to get children from.
   * @returns A list of all complete children.
   */
  function compoundWriteGetCompleteChildren(compoundWrite) {
      var children = [];
      var node = compoundWrite.writeTree_.value;
      if (node != null) {
          // If it's a leaf node, it has no children; so nothing to do.
          if (!node.isLeafNode()) {
              node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                  children.push(new NamedNode(childName, childNode));
              });
          }
      }
      else {
          compoundWrite.writeTree_.children.inorderTraversal(function (childName, childTree) {
              if (childTree.value != null) {
                  children.push(new NamedNode(childName, childTree.value));
              }
          });
      }
      return children;
  }
  function compoundWriteChildCompoundWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
          return compoundWrite;
      }
      else {
          var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
          if (shadowingNode != null) {
              return new CompoundWrite(new ImmutableTree(shadowingNode));
          }
          else {
              return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
          }
      }
  }
  /**
   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
   * @returns Whether this CompoundWrite is empty
   */
  function compoundWriteIsEmpty(compoundWrite) {
      return compoundWrite.writeTree_.isEmpty();
  }
  /**
   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
   * node
   * @param node - The node to apply this CompoundWrite to
   * @returns The node with all writes applied
   */
  function compoundWriteApply(compoundWrite, node) {
      return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
  }
  function applySubtreeWrite(relativePath, writeTree, node) {
      if (writeTree.value != null) {
          // Since there a write is always a leaf, we're done here
          return node.updateChild(relativePath, writeTree.value);
      }
      else {
          var priorityWrite_1 = null;
          writeTree.children.inorderTraversal(function (childKey, childTree) {
              if (childKey === '.priority') {
                  // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                  // to apply priorities to empty nodes that are later filled
                  assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                  priorityWrite_1 = childTree.value;
              }
              else {
                  node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
              }
          });
          // If there was a priority write, we only apply it if the node is not empty
          if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
              node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite_1);
          }
          return node;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
   *
   */
  function writeTreeChildWrites(writeTree, path) {
      return newWriteTreeRef(path, writeTree);
  }
  /**
   * Record a new overwrite from user code.
   *
   * @param visible - This is set to false by some transactions. It should be excluded from event caches
   */
  function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
      assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');
      if (visible === undefined) {
          visible = true;
      }
      writeTree.allWrites.push({
          path: path,
          snap: snap,
          writeId: writeId,
          visible: visible
      });
      if (visible) {
          writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
      }
      writeTree.lastWriteId = writeId;
  }
  /**
   * Record a new merge from user code.
   */
  function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
      assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');
      writeTree.allWrites.push({
          path: path,
          children: changedChildren,
          writeId: writeId,
          visible: true
      });
      writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
      writeTree.lastWriteId = writeId;
  }
  function writeTreeGetWrite(writeTree, writeId) {
      for (var i = 0; i < writeTree.allWrites.length; i++) {
          var record = writeTree.allWrites[i];
          if (record.writeId === writeId) {
              return record;
          }
      }
      return null;
  }
  /**
   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
   *
   * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
   * events as a result).
   */
  function writeTreeRemoveWrite(writeTree, writeId) {
      // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
      // out of order.
      //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
      //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
      var idx = writeTree.allWrites.findIndex(function (s) {
          return s.writeId === writeId;
      });
      assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
      var writeToRemove = writeTree.allWrites[idx];
      writeTree.allWrites.splice(idx, 1);
      var removedWriteWasVisible = writeToRemove.visible;
      var removedWriteOverlapsWithOtherWrites = false;
      var i = writeTree.allWrites.length - 1;
      while (removedWriteWasVisible && i >= 0) {
          var currentWrite = writeTree.allWrites[i];
          if (currentWrite.visible) {
              if (i >= idx &&
                  writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
                  // The removed write was completely shadowed by a subsequent write.
                  removedWriteWasVisible = false;
              }
              else if (pathContains(writeToRemove.path, currentWrite.path)) {
                  // Either we're covering some writes or they're covering part of us (depending on which came first).
                  removedWriteOverlapsWithOtherWrites = true;
              }
          }
          i--;
      }
      if (!removedWriteWasVisible) {
          return false;
      }
      else if (removedWriteOverlapsWithOtherWrites) {
          // There's some shadowing going on. Just rebuild the visible writes from scratch.
          writeTreeResetTree_(writeTree);
          return true;
      }
      else {
          // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
          if (writeToRemove.snap) {
              writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
          }
          else {
              var children = writeToRemove.children;
              each(children, function (childName) {
                  writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
              });
          }
          return true;
      }
  }
  function writeTreeRecordContainsPath_(writeRecord, path) {
      if (writeRecord.snap) {
          return pathContains(writeRecord.path, path);
      }
      else {
          for (var childName in writeRecord.children) {
              if (writeRecord.children.hasOwnProperty(childName) &&
                  pathContains(pathChild(writeRecord.path, childName), path)) {
                  return true;
              }
          }
          return false;
      }
  }
  /**
   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
   */
  function writeTreeResetTree_(writeTree) {
      writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
      if (writeTree.allWrites.length > 0) {
          writeTree.lastWriteId =
              writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
      }
      else {
          writeTree.lastWriteId = -1;
      }
  }
  /**
   * The default filter used when constructing the tree. Keep everything that's visible.
   */
  function writeTreeDefaultFilter_(write) {
      return write.visible;
  }
  /**
   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
   * event data at that path.
   */
  function writeTreeLayerTree_(writes, filter, treeRoot) {
      var compoundWrite = CompoundWrite.empty();
      for (var i = 0; i < writes.length; ++i) {
          var write = writes[i];
          // Theory, a later set will either:
          // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
          // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
          if (filter(write)) {
              var writePath = write.path;
              var relativePath = void 0;
              if (write.snap) {
                  if (pathContains(treeRoot, writePath)) {
                      relativePath = newRelativePath(treeRoot, writePath);
                      compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                  }
                  else if (pathContains(writePath, treeRoot)) {
                      relativePath = newRelativePath(writePath, treeRoot);
                      compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
                  }
              }
              else if (write.children) {
                  if (pathContains(treeRoot, writePath)) {
                      relativePath = newRelativePath(treeRoot, writePath);
                      compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                  }
                  else if (pathContains(writePath, treeRoot)) {
                      relativePath = newRelativePath(writePath, treeRoot);
                      if (pathIsEmpty(relativePath)) {
                          compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
                      }
                      else {
                          var child = safeGet(write.children, pathGetFront(relativePath));
                          if (child) {
                              // There exists a child in this node that matches the root path
                              var deepNode = child.getChild(pathPopFront(relativePath));
                              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                          }
                      }
                  }
              }
              else {
                  throw assertionError('WriteRecord should have .snap or .children');
              }
          }
      }
      return compoundWrite;
  }
  /**
   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
   * writes), attempt to calculate a complete snapshot for the given path
   *
   * @param writeIdsToExclude - An optional set to be excluded
   * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
   */
  function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      if (!writeIdsToExclude && !includeHiddenWrites) {
          var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
          if (shadowingNode != null) {
              return shadowingNode;
          }
          else {
              var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
              if (compoundWriteIsEmpty(subMerge)) {
                  return completeServerCache;
              }
              else if (completeServerCache == null &&
                  !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
                  // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                  return null;
              }
              else {
                  var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                  return compoundWriteApply(subMerge, layeredCache);
              }
          }
      }
      else {
          var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
              return completeServerCache;
          }
          else {
              // If the server cache is null, and we don't have a complete cache, we need to return null
              if (!includeHiddenWrites &&
                  completeServerCache == null &&
                  !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
                  return null;
              }
              else {
                  var filter = function (write) {
                      return ((write.visible || includeHiddenWrites) &&
                          (!writeIdsToExclude ||
                              !~writeIdsToExclude.indexOf(write.writeId)) &&
                          (pathContains(write.path, treePath) ||
                              pathContains(treePath, write.path)));
                  };
                  var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
                  var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                  return compoundWriteApply(mergeAtPath, layeredCache);
              }
          }
      }
  }
  /**
   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
   * Used when creating new views, to pre-fill their complete event children snapshot.
   */
  function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
      var completeChildren = ChildrenNode.EMPTY_NODE;
      var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
      if (topLevelSet) {
          if (!topLevelSet.isLeafNode()) {
              // we're shadowing everything. Return the children.
              topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
                  completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
              });
          }
          return completeChildren;
      }
      else if (completeServerChildren) {
          // Layer any children we have on top of this
          // We know we don't have a top-level set, so just enumerate existing children
          var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
              var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);
              completeChildren = completeChildren.updateImmediateChild(childName, node);
          });
          // Add any complete children we have from the set
          compoundWriteGetCompleteChildren(merge_1).forEach(function (namedNode) {
              completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
      }
      else {
          // We don't have anything to layer on top of. Layer on any children we have
          // Note that we can return an empty snap if we have a defined delete
          var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          compoundWriteGetCompleteChildren(merge).forEach(function (namedNode) {
              completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
      }
  }
  /**
   * Given that the underlying server data has updated, determine what, if anything, needs to be
   * applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events
   *
   * Either existingEventSnap or existingServerSnap must exist
   */
  function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
      assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
      var path = pathChild(treePath, childPath);
      if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
          // At this point we can probably guarantee that we're in case 2, meaning no events
          // May need to check visibility while doing the findRootMostValueAndPath call
          return null;
      }
      else {
          // No complete shadowing. We're either partially shadowing or not shadowing at all.
          var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
          if (compoundWriteIsEmpty(childMerge)) {
              // We're not shadowing at all. Case 1
              return existingServerSnap.getChild(childPath);
          }
          else {
              // This could be more efficient if the serverNode + updates doesn't change the eventSnap
              // However this is tricky to find out, since user updates don't necessary change the server
              // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
              // adds nodes, but doesn't change any existing writes. It is therefore not enough to
              // only check if the updates change the serverNode.
              // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
              return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
          }
      }
  }
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   */
  function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
      var path = pathChild(treePath, childKey);
      var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
      if (shadowingNode != null) {
          return shadowingNode;
      }
      else {
          if (existingServerSnap.isCompleteForChild(childKey)) {
              var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
              return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
          }
          else {
              return null;
          }
      }
  }
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   */
  function writeTreeShadowingWrite(writeTree, path) {
      return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
  }
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window.
   */
  function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
      var toIterate;
      var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
      if (shadowingNode != null) {
          toIterate = shadowingNode;
      }
      else if (completeServerData != null) {
          toIterate = compoundWriteApply(merge, completeServerData);
      }
      else {
          // no children to iterate on
          return [];
      }
      toIterate = toIterate.withIndex(index);
      if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
          var nodes = [];
          var cmp = index.getCompare();
          var iter = reverse
              ? toIterate.getReverseIteratorFrom(startPost, index)
              : toIterate.getIteratorFrom(startPost, index);
          var next = iter.getNext();
          while (next && nodes.length < count) {
              if (cmp(next, startPost) !== 0) {
                  nodes.push(next);
              }
              next = iter.getNext();
          }
          return nodes;
      }
      else {
          return [];
      }
  }
  function newWriteTree() {
      return {
          visibleWrites: CompoundWrite.empty(),
          allWrites: [],
          lastWriteId: -1
      };
  }
  /**
   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
   * can lead to a more expensive calculation.
   *
   * @param writeIdsToExclude - Optional writes to exclude.
   * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
   */
  function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
  }
  /**
   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
   * mix of the given server data and write data.
   *
   */
  function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
      return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
  }
  /**
   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
   * if anything, needs to be applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events should be raised
   *
   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
   *
   *
   */
  function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
      return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
  }
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   *
   */
  function writeTreeRefShadowingWrite(writeTreeRef, path) {
      return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
  }
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window
   */
  function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
      return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
  }
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   */
  function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
      return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
  }
  /**
   * Return a WriteTreeRef for a child.
   */
  function writeTreeRefChild(writeTreeRef, childName) {
      return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
  }
  function newWriteTreeRef(path, writeTree) {
      return {
          treePath: path,
          writeTree: writeTree
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ChildChangeAccumulator = /** @class */ (function () {
      function ChildChangeAccumulator() {
          this.changeMap = new Map();
      }
      ChildChangeAccumulator.prototype.trackChildChange = function (change) {
          var type = change.type;
          var childKey = change.childName;
          assert(type === "child_added" /* CHILD_ADDED */ ||
              type === "child_changed" /* CHILD_CHANGED */ ||
              type === "child_removed" /* CHILD_REMOVED */, 'Only child changes supported for tracking');
          assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
          var oldChange = this.changeMap.get(childKey);
          if (oldChange) {
              var oldType = oldChange.type;
              if (type === "child_added" /* CHILD_ADDED */ &&
                  oldType === "child_removed" /* CHILD_REMOVED */) {
                  this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
              }
              else if (type === "child_removed" /* CHILD_REMOVED */ &&
                  oldType === "child_added" /* CHILD_ADDED */) {
                  this.changeMap.delete(childKey);
              }
              else if (type === "child_removed" /* CHILD_REMOVED */ &&
                  oldType === "child_changed" /* CHILD_CHANGED */) {
                  this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
              }
              else if (type === "child_changed" /* CHILD_CHANGED */ &&
                  oldType === "child_added" /* CHILD_ADDED */) {
                  this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
              }
              else if (type === "child_changed" /* CHILD_CHANGED */ &&
                  oldType === "child_changed" /* CHILD_CHANGED */) {
                  this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
              }
              else {
                  throw assertionError('Illegal combination of changes: ' +
                      change +
                      ' occurred after ' +
                      oldChange);
              }
          }
          else {
              this.changeMap.set(childKey, change);
          }
      };
      ChildChangeAccumulator.prototype.getChanges = function () {
          return Array.from(this.changeMap.values());
      };
      return ChildChangeAccumulator;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of CompleteChildSource that never returns any additional children
   */
  // eslint-disable-next-line @typescript-eslint/naming-convention
  var NoCompleteChildSource_ = /** @class */ (function () {
      function NoCompleteChildSource_() {
      }
      NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
          return null;
      };
      NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
          return null;
      };
      return NoCompleteChildSource_;
  }());
  /**
   * Singleton instance.
   */
  var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
  /**
   * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
   * old event caches available to calculate complete children.
   */
  var WriteTreeCompleteChildSource = /** @class */ (function () {
      function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
          if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
          this.writes_ = writes_;
          this.viewCache_ = viewCache_;
          this.optCompleteServerCache_ = optCompleteServerCache_;
      }
      WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
          var node = this.viewCache_.eventCache;
          if (node.isCompleteForChild(childKey)) {
              return node.getNode().getImmediateChild(childKey);
          }
          else {
              var serverNode = this.optCompleteServerCache_ != null
                  ? new CacheNode(this.optCompleteServerCache_, true, false)
                  : this.viewCache_.serverCache;
              return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
          }
      };
      WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
          var completeServerData = this.optCompleteServerCache_ != null
              ? this.optCompleteServerCache_
              : viewCacheGetCompleteServerSnap(this.viewCache_);
          var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);
          if (nodes.length === 0) {
              return null;
          }
          else {
              return nodes[0];
          }
      };
      return WriteTreeCompleteChildSource;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewProcessor(filter) {
      return { filter: filter };
  }
  function viewProcessorAssertIndexed(viewProcessor, viewCache) {
      assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
      assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
  }
  function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
      var accumulator = new ChildChangeAccumulator();
      var newViewCache, filterServerNode;
      if (operation.type === OperationType.OVERWRITE) {
          var overwrite = operation;
          if (overwrite.source.fromUser) {
              newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
          }
          else {
              assert(overwrite.source.fromServer, 'Unknown source.');
              // We filter the node if it's a tagged update or the node has been previously filtered  and the
              // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
              // again
              filterServerNode =
                  overwrite.source.tagged ||
                      (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));
              newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
          }
      }
      else if (operation.type === OperationType.MERGE) {
          var merge = operation;
          if (merge.source.fromUser) {
              newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
          }
          else {
              assert(merge.source.fromServer, 'Unknown source.');
              // We filter the node if it's a tagged update or the node has been previously filtered
              filterServerNode =
                  merge.source.tagged || oldViewCache.serverCache.isFiltered();
              newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
          }
      }
      else if (operation.type === OperationType.ACK_USER_WRITE) {
          var ackUserWrite = operation;
          if (!ackUserWrite.revert) {
              newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
          }
          else {
              newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
          }
      }
      else if (operation.type === OperationType.LISTEN_COMPLETE) {
          newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
      }
      else {
          throw assertionError('Unknown operation type: ' + operation.type);
      }
      var changes = accumulator.getChanges();
      viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
      return { viewCache: newViewCache, changes: changes };
  }
  function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {
      var eventSnap = newViewCache.eventCache;
      if (eventSnap.isFullyInitialized()) {
          var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
          var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
          if (accumulator.length > 0 ||
              !oldViewCache.eventCache.isFullyInitialized() ||
              (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||
              !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
              accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));
          }
      }
  }
  function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
      var oldEventSnap = viewCache.eventCache;
      if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
          // we have a shadowing write, ignore changes
          return viewCache;
      }
      else {
          var newEventCache = void 0, serverNode = void 0;
          if (pathIsEmpty(changePath)) {
              // TODO: figure out how this plays with "sliding ack windows"
              assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');
              if (viewCache.serverCache.isFiltered()) {
                  // We need to special case this, because we need to only apply writes to complete children, or
                  // we might end up raising events for incomplete children. If the server data is filtered deep
                  // writes cannot be guaranteed to be complete
                  var serverCache = viewCacheGetCompleteServerSnap(viewCache);
                  var completeChildren = serverCache instanceof ChildrenNode
                      ? serverCache
                      : ChildrenNode.EMPTY_NODE;
                  var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
                  newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
              }
              else {
                  var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                  newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
              }
          }
          else {
              var childKey = pathGetFront(changePath);
              if (childKey === '.priority') {
                  assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                  var oldEventNode = oldEventSnap.getNode();
                  serverNode = viewCache.serverCache.getNode();
                  // we might have overwrites for this priority
                  var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
                  if (updatedPriority != null) {
                      newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
                  }
                  else {
                      // priority didn't change, keep old node
                      newEventCache = oldEventSnap.getNode();
                  }
              }
              else {
                  var childChangePath = pathPopFront(changePath);
                  // update child
                  var newEventChild = void 0;
                  if (oldEventSnap.isCompleteForChild(childKey)) {
                      serverNode = viewCache.serverCache.getNode();
                      var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
                      if (eventChildUpdate != null) {
                          newEventChild = oldEventSnap
                              .getNode()
                              .getImmediateChild(childKey)
                              .updateChild(childChangePath, eventChildUpdate);
                      }
                      else {
                          // Nothing changed, just keep the old child
                          newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                      }
                  }
                  else {
                      newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                  }
                  if (newEventChild != null) {
                      newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                  }
                  else {
                      // no complete child available or no change
                      newEventCache = oldEventSnap.getNode();
                  }
              }
          }
          return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
      }
  }
  function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
      var oldServerSnap = oldViewCache.serverCache;
      var newServerCache;
      var serverFilter = filterServerNode
          ? viewProcessor.filter
          : viewProcessor.filter.getIndexedFilter();
      if (pathIsEmpty(changePath)) {
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
      }
      else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
          // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
          var newServerNode = oldServerSnap
              .getNode()
              .updateChild(changePath, changedSnap);
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
      }
      else {
          var childKey = pathGetFront(changePath);
          if (!oldServerSnap.isCompleteForPath(changePath) &&
              pathGetLength(changePath) > 1) {
              // We don't update incomplete nodes with updates intended for other listeners
              return oldViewCache;
          }
          var childChangePath = pathPopFront(changePath);
          var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
          var newChildNode = childNode.updateChild(childChangePath, changedSnap);
          if (childKey === '.priority') {
              newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
          }
          else {
              newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
          }
      }
      var newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
      var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);
  }
  function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
      var oldEventSnap = oldViewCache.eventCache;
      var newViewCache, newEventCache;
      var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
      if (pathIsEmpty(changePath)) {
          newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
          newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
      }
      else {
          var childKey = pathGetFront(changePath);
          if (childKey === '.priority') {
              newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
              newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
          }
          else {
              var childChangePath = pathPopFront(changePath);
              var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
              var newChild = void 0;
              if (pathIsEmpty(childChangePath)) {
                  // Child overwrite, we can replace the child
                  newChild = changedSnap;
              }
              else {
                  var childNode = source.getCompleteChild(childKey);
                  if (childNode != null) {
                      if (pathGetBack(childChangePath) === '.priority' &&
                          childNode.getChild(pathParent(childChangePath)).isEmpty()) {
                          // This is a priority update on an empty node. If this node exists on the server, the
                          // server will send down the priority in the update, so ignore for now
                          newChild = childNode;
                      }
                      else {
                          newChild = childNode.updateChild(childChangePath, changedSnap);
                      }
                  }
                  else {
                      // There is no complete child node available
                      newChild = ChildrenNode.EMPTY_NODE;
                  }
              }
              if (!oldChild.equals(newChild)) {
                  var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                  newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
              }
              else {
                  newViewCache = oldViewCache;
              }
          }
      }
      return newViewCache;
  }
  function viewProcessorCacheHasChild(viewCache, childKey) {
      return viewCache.eventCache.isCompleteForChild(childKey);
  }
  function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
      // HACK: In the case of a limit query, there may be some changes that bump things out of the
      // window leaving room for new items.  It's important we process these changes first, so we
      // iterate the changes twice, first processing any that affect items currently in view.
      // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
      // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
      // not the other.
      var curViewCache = viewCache;
      changedChildren.foreach(function (relativePath, childNode) {
          var writePath = pathChild(path, relativePath);
          if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
              curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
      });
      changedChildren.foreach(function (relativePath, childNode) {
          var writePath = pathChild(path, relativePath);
          if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
              curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
      });
      return curViewCache;
  }
  function viewProcessorApplyMerge(viewProcessor, node, merge) {
      merge.foreach(function (relativePath, childNode) {
          node = node.updateChild(relativePath, childNode);
      });
      return node;
  }
  function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
      // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
      // wait for the complete data update coming soon.
      if (viewCache.serverCache.getNode().isEmpty() &&
          !viewCache.serverCache.isFullyInitialized()) {
          return viewCache;
      }
      // HACK: In the case of a limit query, there may be some changes that bump things out of the
      // window leaving room for new items.  It's important we process these changes first, so we
      // iterate the changes twice, first processing any that affect items currently in view.
      // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
      // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
      // not the other.
      var curViewCache = viewCache;
      var viewMergeTree;
      if (pathIsEmpty(path)) {
          viewMergeTree = changedChildren;
      }
      else {
          viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
      }
      var serverNode = viewCache.serverCache.getNode();
      viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
          if (serverNode.hasChild(childKey)) {
              var serverChild = viewCache.serverCache
                  .getNode()
                  .getImmediateChild(childKey);
              var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
              curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
      });
      viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
          var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&
              childMergeTree.value === undefined;
          if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
              var serverChild = viewCache.serverCache
                  .getNode()
                  .getImmediateChild(childKey);
              var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
              curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
      });
      return curViewCache;
  }
  function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
      if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
          return viewCache;
      }
      // Only filter server node if it is currently filtered
      var filterServerNode = viewCache.serverCache.isFiltered();
      // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
      // now that it won't be shadowed.
      var serverCache = viewCache.serverCache;
      if (affectedTree.value != null) {
          // This is an overwrite.
          if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||
              serverCache.isCompleteForPath(ackPath)) {
              return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
          }
          else if (pathIsEmpty(ackPath)) {
              // This is a goofy edge case where we are acking data at this location but don't have full data.  We
              // should just re-apply whatever we have in our cache as a merge.
              var changedChildren_1 = new ImmutableTree(null);
              serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
                  changedChildren_1 = changedChildren_1.set(new Path(name), node);
              });
              return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
          }
          else {
              return viewCache;
          }
      }
      else {
          // This is a merge.
          var changedChildren_2 = new ImmutableTree(null);
          affectedTree.foreach(function (mergePath, value) {
              var serverCachePath = pathChild(ackPath, mergePath);
              if (serverCache.isCompleteForPath(serverCachePath)) {
                  changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
              }
          });
          return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
      }
  }
  function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
      var oldServerNode = viewCache.serverCache;
      var newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
  }
  function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
      var complete;
      if (writeTreeRefShadowingWrite(writesCache, path) != null) {
          return viewCache;
      }
      else {
          var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
          var oldEventCache = viewCache.eventCache.getNode();
          var newEventCache = void 0;
          if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
              var newNode = void 0;
              if (viewCache.serverCache.isFullyInitialized()) {
                  newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
              }
              else {
                  var serverChildren = viewCache.serverCache.getNode();
                  assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                  newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
              }
              newNode = newNode;
              newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
          }
          else {
              var childKey = pathGetFront(path);
              var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
              if (newChild == null &&
                  viewCache.serverCache.isCompleteForChild(childKey)) {
                  newChild = oldEventCache.getImmediateChild(childKey);
              }
              if (newChild != null) {
                  newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
              }
              else if (viewCache.eventCache.getNode().hasChild(childKey)) {
                  // No complete child available, delete the existing one, if any
                  newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
              }
              else {
                  newEventCache = oldEventCache;
              }
              if (newEventCache.isEmpty() &&
                  viewCache.serverCache.isFullyInitialized()) {
                  // We might have reverted all child writes. Maybe the old event was a leaf node
                  complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                  if (complete.isLeafNode()) {
                      newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
                  }
              }
          }
          complete =
              viewCache.serverCache.isFullyInitialized() ||
                  writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
          return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A view represents a specific location and query that has 1 or more event registrations.
   *
   * It does several things:
   *  - Maintains the list of event registrations for this location/query.
   *  - Maintains a cache of the data visible for this location/query.
   *  - Applies new operations (via applyOperation), updates the cache, and based on the event
   *    registrations returns the set of events to be raised.
   */
  var View = /** @class */ (function () {
      function View(query_, initialViewCache) {
          this.query_ = query_;
          this.eventRegistrations_ = [];
          var params = this.query_._queryParams;
          var indexFilter = new IndexedFilter(params.getIndex());
          var filter = queryParamsGetNodeFilter(params);
          this.processor_ = newViewProcessor(filter);
          var initialServerCache = initialViewCache.serverCache;
          var initialEventCache = initialViewCache.eventCache;
          // Don't filter server node with other filter than index, wait for tagged listen
          var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
          var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
          var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
          var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
          this.viewCache_ = newViewCache(newEventCache, newServerCache);
          this.eventGenerator_ = new EventGenerator(this.query_);
      }
      Object.defineProperty(View.prototype, "query", {
          get: function () {
              return this.query_;
          },
          enumerable: false,
          configurable: true
      });
      return View;
  }());
  function viewGetServerCache(view) {
      return view.viewCache_.serverCache.getNode();
  }
  function viewGetCompleteNode(view) {
      return viewCacheGetCompleteEventSnap(view.viewCache_);
  }
  function viewGetCompleteServerCache(view, path) {
      var cache = viewCacheGetCompleteServerSnap(view.viewCache_);
      if (cache) {
          // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
          // we need to see if it contains the child we're interested in.
          if (view.query._queryParams.loadsAllData() ||
              (!pathIsEmpty(path) &&
                  !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {
              return cache.getChild(path);
          }
      }
      return null;
  }
  function viewIsEmpty(view) {
      return view.eventRegistrations_.length === 0;
  }
  function viewAddEventRegistration(view, eventRegistration) {
      view.eventRegistrations_.push(eventRegistration);
  }
  /**
   * @param eventRegistration - If null, remove all callbacks.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @returns Cancel events, if cancelError was provided.
   */
  function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
      var cancelEvents = [];
      if (cancelError) {
          assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
          var path_1 = view.query._path;
          view.eventRegistrations_.forEach(function (registration) {
              var maybeEvent = registration.createCancelEvent(cancelError, path_1);
              if (maybeEvent) {
                  cancelEvents.push(maybeEvent);
              }
          });
      }
      if (eventRegistration) {
          var remaining = [];
          for (var i = 0; i < view.eventRegistrations_.length; ++i) {
              var existing = view.eventRegistrations_[i];
              if (!existing.matches(eventRegistration)) {
                  remaining.push(existing);
              }
              else if (eventRegistration.hasAnyCallback()) {
                  // We're removing just this one
                  remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
                  break;
              }
          }
          view.eventRegistrations_ = remaining;
      }
      else {
          view.eventRegistrations_ = [];
      }
      return cancelEvents;
  }
  /**
   * Applies the given Operation, updates our cache, and returns the appropriate events.
   */
  function viewApplyOperation(view, operation, writesCache, completeServerCache) {
      if (operation.type === OperationType.MERGE &&
          operation.source.queryId !== null) {
          assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
          assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
      }
      var oldViewCache = view.viewCache_;
      var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
      viewProcessorAssertIndexed(view.processor_, result.viewCache);
      assert(result.viewCache.serverCache.isFullyInitialized() ||
          !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
      view.viewCache_ = result.viewCache;
      return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
  }
  function viewGetInitialEvents(view, registration) {
      var eventSnap = view.viewCache_.eventCache;
      var initialChanges = [];
      if (!eventSnap.getNode().isLeafNode()) {
          var eventNode = eventSnap.getNode();
          eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
              initialChanges.push(changeChildAdded(key, childNode));
          });
      }
      if (eventSnap.isFullyInitialized()) {
          initialChanges.push(changeValue(eventSnap.getNode()));
      }
      return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
  }
  function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
      var registrations = eventRegistration
          ? [eventRegistration]
          : view.eventRegistrations_;
      return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var referenceConstructor$1;
  /**
   * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
   * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
   * and user writes (set, transaction, update).
   *
   * It's responsible for:
   *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
   *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
   *    applyUserOverwrite, etc.)
   */
  var SyncPoint = /** @class */ (function () {
      function SyncPoint() {
          /**
           * The Views being tracked at this location in the tree, stored as a map where the key is a
           * queryId and the value is the View for that query.
           *
           * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
           */
          this.views = new Map();
      }
      return SyncPoint;
  }());
  function syncPointSetReferenceConstructor(val) {
      assert(!referenceConstructor$1, '__referenceConstructor has already been defined');
      referenceConstructor$1 = val;
  }
  function syncPointGetReferenceConstructor() {
      assert(referenceConstructor$1, 'Reference.ts has not been loaded');
      return referenceConstructor$1;
  }
  function syncPointIsEmpty(syncPoint) {
      return syncPoint.views.size === 0;
  }
  function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
      var e_1, _a;
      var queryId = operation.source.queryId;
      if (queryId !== null) {
          var view = syncPoint.views.get(queryId);
          assert(view != null, 'SyncTree gave us an op for an invalid query.');
          return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
      }
      else {
          var events = [];
          try {
              for (var _b = __values$4(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var view = _c.value;
                  events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_1) throw e_1.error; }
          }
          return events;
      }
  }
  /**
   * Get a view for the specified query.
   *
   * @param query - The query to return a view for
   * @param writesCache
   * @param serverCache
   * @param serverCacheComplete
   * @returns Events to raise.
   */
  function syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
      var queryId = query._queryIdentifier;
      var view = syncPoint.views.get(queryId);
      if (!view) {
          // TODO: make writesCache take flag for complete server node
          var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
          var eventCacheComplete = false;
          if (eventCache) {
              eventCacheComplete = true;
          }
          else if (serverCache instanceof ChildrenNode) {
              eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
              eventCacheComplete = false;
          }
          else {
              eventCache = ChildrenNode.EMPTY_NODE;
              eventCacheComplete = false;
          }
          var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
          return new View(query, viewCache);
      }
      return view;
  }
  /**
   * Add an event callback for the specified query.
   *
   * @param query
   * @param eventRegistration
   * @param writesCache
   * @param serverCache - Complete server cache, if we have it.
   * @param serverCacheComplete
   * @returns Events to raise.
   */
  function syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
      var view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);
      if (!syncPoint.views.has(query._queryIdentifier)) {
          syncPoint.views.set(query._queryIdentifier, view);
      }
      // This is guaranteed to exist now, we just created anything that was missing
      viewAddEventRegistration(view, eventRegistration);
      return viewGetInitialEvents(view, eventRegistration);
  }
  /**
   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
   *
   * If query is the default query, we'll check all views for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
   *
   * @param eventRegistration - If null, remove all callbacks.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @returns removed queries and any cancel events
   */
  function syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
      var e_2, _a;
      var queryId = query._queryIdentifier;
      var removed = [];
      var cancelEvents = [];
      var hadCompleteView = syncPointHasCompleteView(syncPoint);
      if (queryId === 'default') {
          try {
              // When you do ref.off(...), we search all views for the registration to remove.
              for (var _b = __values$4(syncPoint.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var _d = __read$4(_c.value, 2), viewQueryId = _d[0], view = _d[1];
                  cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
                  if (viewIsEmpty(view)) {
                      syncPoint.views.delete(viewQueryId);
                      // We'll deal with complete views later.
                      if (!view.query._queryParams.loadsAllData()) {
                          removed.push(view.query);
                      }
                  }
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_2) throw e_2.error; }
          }
      }
      else {
          // remove the callback from the specific view.
          var view = syncPoint.views.get(queryId);
          if (view) {
              cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
              if (viewIsEmpty(view)) {
                  syncPoint.views.delete(queryId);
                  // We'll deal with complete views later.
                  if (!view.query._queryParams.loadsAllData()) {
                      removed.push(view.query);
                  }
              }
          }
      }
      if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
          // We removed our last complete view.
          removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));
      }
      return { removed: removed, events: cancelEvents };
  }
  function syncPointGetQueryViews(syncPoint) {
      var e_3, _a;
      var result = [];
      try {
          for (var _b = __values$4(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var view = _c.value;
              if (!view.query._queryParams.loadsAllData()) {
                  result.push(view);
              }
          }
      }
      catch (e_3_1) { e_3 = { error: e_3_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_3) throw e_3.error; }
      }
      return result;
  }
  /**
   * @param path - The path to the desired complete snapshot
   * @returns A complete cache, if it exists
   */
  function syncPointGetCompleteServerCache(syncPoint, path) {
      var e_4, _a;
      var serverCache = null;
      try {
          for (var _b = __values$4(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var view = _c.value;
              serverCache = serverCache || viewGetCompleteServerCache(view, path);
          }
      }
      catch (e_4_1) { e_4 = { error: e_4_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_4) throw e_4.error; }
      }
      return serverCache;
  }
  function syncPointViewForQuery(syncPoint, query) {
      var params = query._queryParams;
      if (params.loadsAllData()) {
          return syncPointGetCompleteView(syncPoint);
      }
      else {
          var queryId = query._queryIdentifier;
          return syncPoint.views.get(queryId);
      }
  }
  function syncPointViewExistsForQuery(syncPoint, query) {
      return syncPointViewForQuery(syncPoint, query) != null;
  }
  function syncPointHasCompleteView(syncPoint) {
      return syncPointGetCompleteView(syncPoint) != null;
  }
  function syncPointGetCompleteView(syncPoint) {
      var e_5, _a;
      try {
          for (var _b = __values$4(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var view = _c.value;
              if (view.query._queryParams.loadsAllData()) {
                  return view;
              }
          }
      }
      catch (e_5_1) { e_5 = { error: e_5_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_5) throw e_5.error; }
      }
      return null;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var referenceConstructor;
  function syncTreeSetReferenceConstructor(val) {
      assert(!referenceConstructor, '__referenceConstructor has already been defined');
      referenceConstructor = val;
  }
  function syncTreeGetReferenceConstructor() {
      assert(referenceConstructor, 'Reference.ts has not been loaded');
      return referenceConstructor;
  }
  /**
   * Static tracker for next query tag.
   */
  var syncTreeNextQueryTag_ = 1;
  /**
   * SyncTree is the central class for managing event callback registration, data caching, views
   * (query processing), and event generation.  There are typically two SyncTree instances for
   * each Repo, one for the normal Firebase data, and one for the .info data.
   *
   * It has a number of responsibilities, including:
   *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
   *  - Applying and caching data changes for user set(), transaction(), and update() calls
   *    (applyUserOverwrite(), applyUserMerge()).
   *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
   *    applyServerMerge()).
   *  - Generating user-facing events for server and user changes (all of the apply* methods
   *    return the set of events that need to be raised as a result).
   *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
   *    to the correct set of paths and queries to satisfy the current set of user event
   *    callbacks (listens are started/stopped using the provided listenProvider).
   *
   * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
   * events are returned to the caller rather than raised synchronously.
   *
   */
  var SyncTree = /** @class */ (function () {
      /**
       * @param listenProvider_ - Used by SyncTree to start / stop listening
       *   to server data.
       */
      function SyncTree(listenProvider_) {
          this.listenProvider_ = listenProvider_;
          /**
           * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
           */
          this.syncPointTree_ = new ImmutableTree(null);
          /**
           * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
           */
          this.pendingWriteTree_ = newWriteTree();
          this.tagToQueryMap = new Map();
          this.queryToTagMap = new Map();
      }
      return SyncTree;
  }());
  /**
   * Apply the data changes for a user-generated set() or transaction() call.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
      // Record pending write.
      writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
      if (!visible) {
          return [];
      }
      else {
          return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
      }
  }
  /**
   * Apply the data from a user-generated update() call
   *
   * @returns Events to raise.
   */
  function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
      // Record pending merge.
      writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
      var changeTree = ImmutableTree.fromObject(changedChildren);
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
  }
  /**
   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
   *
   * @param revert - True if the given write failed and needs to be reverted
   * @returns Events to raise.
   */
  function syncTreeAckUserWrite(syncTree, writeId, revert) {
      if (revert === void 0) { revert = false; }
      var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
      var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
      if (!needToReevaluate) {
          return [];
      }
      else {
          var affectedTree_1 = new ImmutableTree(null);
          if (write.snap != null) {
              // overwrite
              affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);
          }
          else {
              each(write.children, function (pathString) {
                  affectedTree_1 = affectedTree_1.set(new Path(pathString), true);
              });
          }
          return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree_1, revert));
      }
  }
  /**
   * Apply new server data for the specified path..
   *
   * @returns Events to raise.
   */
  function syncTreeApplyServerOverwrite(syncTree, path, newData) {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
  }
  /**
   * Apply new server data to be merged in at the specified path.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
      var changeTree = ImmutableTree.fromObject(changedChildren);
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
  }
  /**
   * Apply a listen complete for a query
   *
   * @returns Events to raise.
   */
  function syncTreeApplyListenComplete(syncTree, path) {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
  }
  /**
   * Apply a listen complete for a tagged query
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
      var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey) {
          var r = syncTreeParseQueryKey_(queryKey);
          var queryPath = r.path, queryId = r.queryId;
          var relativePath = newRelativePath(queryPath, path);
          var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // We've already removed the query. No big deal, ignore the update
          return [];
      }
  }
  /**
   * Remove event callback(s).
   *
   * If query is the default query, we'll check all queries for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
   *
   * @param eventRegistration - If null, all callbacks are removed.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @returns Cancel events, if cancelError was provided.
   */
  function syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {
      // Find the syncPoint first. Then deal with whether or not it has matching listeners
      var path = query._path;
      var maybeSyncPoint = syncTree.syncPointTree_.get(path);
      var cancelEvents = [];
      // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
      // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
      // not loadsAllData().
      if (maybeSyncPoint &&
          (query._queryIdentifier === 'default' ||
              syncPointViewExistsForQuery(maybeSyncPoint, query))) {
          var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);
          if (syncPointIsEmpty(maybeSyncPoint)) {
              syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
          }
          var removed = removedAndEvents.removed;
          cancelEvents = removedAndEvents.events;
          // We may have just removed one of many listeners and can short-circuit this whole process
          // We may also not have removed a default listener, in which case all of the descendant listeners should already be
          // properly set up.
          //
          // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
          // queryId === 'default'
          var removingDefault = -1 !==
              removed.findIndex(function (query) {
                  return query._queryParams.loadsAllData();
              });
          var covered = syncTree.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
              return syncPointHasCompleteView(parentSyncPoint);
          });
          if (removingDefault && !covered) {
              var subtree = syncTree.syncPointTree_.subtree(path);
              // There are potentially child listeners. Determine what if any listens we need to send before executing the
              // removal
              if (!subtree.isEmpty()) {
                  // We need to fold over our subtree and collect the listeners to send
                  var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
                  // Ok, we've collected all the listens we need. Set them up.
                  for (var i = 0; i < newViews.length; ++i) {
                      var view = newViews[i], newQuery = view.query;
                      var listener = syncTreeCreateListenerForView_(syncTree, view);
                      syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);
                  }
              }
          }
          // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
          // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
          // Also, note that if we have a cancelError, it's already been removed at the provider level.
          if (!covered && removed.length > 0 && !cancelError) {
              // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
              // default. Otherwise, we need to iterate through and cancel each individual query
              if (removingDefault) {
                  // We don't tag default listeners
                  var defaultTag = null;
                  syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);
              }
              else {
                  removed.forEach(function (queryToRemove) {
                      var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
                      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
                  });
              }
          }
          // Now, clear all of the tags we're tracking for the removed listens
          syncTreeRemoveTags_(syncTree, removed);
      }
      return cancelEvents;
  }
  /**
   * Apply new server data for the specified tagged query.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
      var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey != null) {
          var r = syncTreeParseQueryKey_(queryKey);
          var queryPath = r.path, queryId = r.queryId;
          var relativePath = newRelativePath(queryPath, path);
          var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // Query must have been removed already
          return [];
      }
  }
  /**
   * Apply server data to be merged in for the specified tagged query.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
      var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey) {
          var r = syncTreeParseQueryKey_(queryKey);
          var queryPath = r.path, queryId = r.queryId;
          var relativePath = newRelativePath(queryPath, path);
          var changeTree = ImmutableTree.fromObject(changedChildren);
          var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // We've already removed the query. No big deal, ignore the update
          return [];
      }
  }
  /**
   * Add an event callback for the specified query.
   *
   * @returns Events to raise.
   */
  function syncTreeAddEventRegistration(syncTree, query, eventRegistration) {
      var path = query._path;
      var serverCache = null;
      var foundAncestorDefaultView = false;
      // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
      // Consider optimizing this once there's a better understanding of what actual behavior will be.
      syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
          var relativePath = newRelativePath(pathToSyncPoint, path);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
          foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(sp);
      });
      var syncPoint = syncTree.syncPointTree_.get(path);
      if (!syncPoint) {
          syncPoint = new SyncPoint();
          syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
      }
      else {
          foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      var serverCacheComplete;
      if (serverCache != null) {
          serverCacheComplete = true;
      }
      else {
          serverCacheComplete = false;
          serverCache = ChildrenNode.EMPTY_NODE;
          var subtree = syncTree.syncPointTree_.subtree(path);
          subtree.foreachChild(function (childName, childSyncPoint) {
              var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
              if (completeCache) {
                  serverCache = serverCache.updateImmediateChild(childName, completeCache);
              }
          });
      }
      var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);
      if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
          // We need to track a tag for this query
          var queryKey = syncTreeMakeQueryKey_(query);
          assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
          var tag = syncTreeGetNextQueryTag_();
          syncTree.queryToTagMap.set(queryKey, tag);
          syncTree.tagToQueryMap.set(tag, queryKey);
      }
      var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
      var events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);
      if (!viewAlreadyExists && !foundAncestorDefaultView) {
          var view = syncPointViewForQuery(syncPoint, query);
          events = events.concat(syncTreeSetupListener_(syncTree, query, view));
      }
      return events;
  }
  /**
   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
   * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
   *     <incremented total> as the write is applied locally and then acknowledged at the server.
   *
   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
   *
   * @param path - The path to the data we want
   * @param writeIdsToExclude - A specific set to be excluded
   */
  function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
      var includeHiddenSets = true;
      var writeTree = syncTree.pendingWriteTree_;
      var serverCache = syncTree.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
          var relativePath = newRelativePath(pathSoFar, path);
          var serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);
          if (serverCache) {
              return serverCache;
          }
      });
      return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
  }
  function syncTreeGetServerValue(syncTree, query) {
      var path = query._path;
      var serverCache = null;
      // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
      // Consider optimizing this once there's a better understanding of what actual behavior will be.
      syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
          var relativePath = newRelativePath(pathToSyncPoint, path);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
      });
      var syncPoint = syncTree.syncPointTree_.get(path);
      if (!syncPoint) {
          syncPoint = new SyncPoint();
          syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
      }
      else {
          serverCache =
              serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      var serverCacheComplete = serverCache != null;
      var serverCacheNode = serverCacheComplete
          ? new CacheNode(serverCache, true, false)
          : null;
      var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
      var view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
      return viewGetCompleteNode(view);
  }
  /**
   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
   *
   * NOTES:
   * - Descendant SyncPoints will be visited first (since we raise events depth-first).
   *
   * - We call applyOperation() on each SyncPoint passing three things:
   *   1. A version of the Operation that has been made relative to the SyncPoint location.
   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
   *   3. A snapshot Node with cached server data, if we have it.
   *
   * - We concatenate all of the events returned by each SyncPoint and return the result.
   */
  function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
      return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, 
      /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
  }
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */
  function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
      if (pathIsEmpty(operation.path)) {
          return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
      }
      else {
          var syncPoint = syncPointTree.get(newEmptyPath());
          // If we don't have cached server data, see if we can get it from this SyncPoint.
          if (serverCache == null && syncPoint != null) {
              serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
          }
          var events = [];
          var childName = pathGetFront(operation.path);
          var childOperation = operation.operationForChild(childName);
          var childTree = syncPointTree.children.get(childName);
          if (childTree && childOperation) {
              var childServerCache = serverCache
                  ? serverCache.getImmediateChild(childName)
                  : null;
              var childWritesCache = writeTreeRefChild(writesCache, childName);
              events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
          if (syncPoint) {
              events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
          }
          return events;
      }
  }
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */
  function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
      var syncPoint = syncPointTree.get(newEmptyPath());
      // If we don't have cached server data, see if we can get it from this SyncPoint.
      if (serverCache == null && syncPoint != null) {
          serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      var events = [];
      syncPointTree.children.inorderTraversal(function (childName, childTree) {
          var childServerCache = serverCache
              ? serverCache.getImmediateChild(childName)
              : null;
          var childWritesCache = writeTreeRefChild(writesCache, childName);
          var childOperation = operation.operationForChild(childName);
          if (childOperation) {
              events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
      });
      if (syncPoint) {
          events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
      }
      return events;
  }
  function syncTreeCreateListenerForView_(syncTree, view) {
      var query = view.query;
      var tag = syncTreeTagForQuery_(syncTree, query);
      return {
          hashFn: function () {
              var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
              return cache.hash();
          },
          onComplete: function (status) {
              if (status === 'ok') {
                  if (tag) {
                      return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
                  }
                  else {
                      return syncTreeApplyListenComplete(syncTree, query._path);
                  }
              }
              else {
                  // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                  // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                  var error = errorForServerCode(status, query);
                  return syncTreeRemoveEventRegistration(syncTree, query, 
                  /*eventRegistration*/ null, error);
              }
          }
      };
  }
  /**
   * Return the tag associated with the given query.
   */
  function syncTreeTagForQuery_(syncTree, query) {
      var queryKey = syncTreeMakeQueryKey_(query);
      return syncTree.queryToTagMap.get(queryKey);
  }
  /**
   * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
   */
  function syncTreeMakeQueryKey_(query) {
      return query._path.toString() + '$' + query._queryIdentifier;
  }
  /**
   * Return the query associated with the given tag, if we have one
   */
  function syncTreeQueryKeyForTag_(syncTree, tag) {
      return syncTree.tagToQueryMap.get(tag);
  }
  /**
   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
   */
  function syncTreeParseQueryKey_(queryKey) {
      var splitIndex = queryKey.indexOf('$');
      assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
      return {
          queryId: queryKey.substr(splitIndex + 1),
          path: new Path(queryKey.substr(0, splitIndex))
      };
  }
  /**
   * A helper method to apply tagged operations
   */
  function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
      var syncPoint = syncTree.syncPointTree_.get(queryPath);
      assert(syncPoint, "Missing sync point for query tag that we're tracking");
      var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
      return syncPointApplyOperation(syncPoint, operation, writesCache, null);
  }
  /**
   * This collapses multiple unfiltered views into a single view, since we only need a single
   * listener for them.
   */
  function syncTreeCollectDistinctViewsForSubTree_(subtree) {
      return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
          if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
              var completeView = syncPointGetCompleteView(maybeChildSyncPoint);
              return [completeView];
          }
          else {
              // No complete view here, flatten any deeper listens into an array
              var views_1 = [];
              if (maybeChildSyncPoint) {
                  views_1 = syncPointGetQueryViews(maybeChildSyncPoint);
              }
              each(childMap, function (_key, childViews) {
                  views_1 = views_1.concat(childViews);
              });
              return views_1;
          }
      });
  }
  /**
   * Normalizes a query to a query we send the server for listening
   *
   * @returns The normalized query
   */
  function syncTreeQueryForListening_(query) {
      if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {
          // We treat queries that load all data as default queries
          // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
          // from Query
          return new (syncTreeGetReferenceConstructor())(query._repo, query._path);
      }
      else {
          return query;
      }
  }
  function syncTreeRemoveTags_(syncTree, queries) {
      for (var j = 0; j < queries.length; ++j) {
          var removedQuery = queries[j];
          if (!removedQuery._queryParams.loadsAllData()) {
              // We should have a tag for this
              var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
              var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
              syncTree.queryToTagMap.delete(removedQueryKey);
              syncTree.tagToQueryMap.delete(removedQueryTag);
          }
      }
  }
  /**
   * Static accessor for query tags.
   */
  function syncTreeGetNextQueryTag_() {
      return syncTreeNextQueryTag_++;
  }
  /**
   * For a given new listen, manage the de-duplication of outstanding subscriptions.
   *
   * @returns This method can return events to support synchronous data sources
   */
  function syncTreeSetupListener_(syncTree, query, view) {
      var path = query._path;
      var tag = syncTreeTagForQuery_(syncTree, query);
      var listener = syncTreeCreateListenerForView_(syncTree, view);
      var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
      var subtree = syncTree.syncPointTree_.subtree(path);
      // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
      // may need to shadow other listens as well.
      if (tag) {
          assert(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
      }
      else {
          // Shadow everything at or below this location, this is a default listener.
          var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
              if (!pathIsEmpty(relativePath) &&
                  maybeChildSyncPoint &&
                  syncPointHasCompleteView(maybeChildSyncPoint)) {
                  return [syncPointGetCompleteView(maybeChildSyncPoint).query];
              }
              else {
                  // No default listener here, flatten any deeper queries into an array
                  var queries_1 = [];
                  if (maybeChildSyncPoint) {
                      queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function (view) { return view.query; }));
                  }
                  each(childMap, function (_key, childQueries) {
                      queries_1 = queries_1.concat(childQueries);
                  });
                  return queries_1;
              }
          });
          for (var i = 0; i < queriesToStop.length; ++i) {
              var queryToStop = queriesToStop[i];
              syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));
          }
      }
      return events;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ExistingValueProvider = /** @class */ (function () {
      function ExistingValueProvider(node_) {
          this.node_ = node_;
      }
      ExistingValueProvider.prototype.getImmediateChild = function (childName) {
          var child = this.node_.getImmediateChild(childName);
          return new ExistingValueProvider(child);
      };
      ExistingValueProvider.prototype.node = function () {
          return this.node_;
      };
      return ExistingValueProvider;
  }());
  var DeferredValueProvider = /** @class */ (function () {
      function DeferredValueProvider(syncTree, path) {
          this.syncTree_ = syncTree;
          this.path_ = path;
      }
      DeferredValueProvider.prototype.getImmediateChild = function (childName) {
          var childPath = pathChild(this.path_, childName);
          return new DeferredValueProvider(this.syncTree_, childPath);
      };
      DeferredValueProvider.prototype.node = function () {
          return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
      };
      return DeferredValueProvider;
  }());
  /**
   * Generate placeholders for deferred values.
   */
  var generateWithValues = function (values) {
      values = values || {};
      values['timestamp'] = values['timestamp'] || new Date().getTime();
      return values;
  };
  /**
   * Value to use when firing local events. When writing server values, fire
   * local events with an approximate value, otherwise return value as-is.
   */
  var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
      if (!value || typeof value !== 'object') {
          return value;
      }
      assert('.sv' in value, 'Unexpected leaf node or priority contents');
      if (typeof value['.sv'] === 'string') {
          return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
      }
      else if (typeof value['.sv'] === 'object') {
          return resolveComplexDeferredValue(value['.sv'], existingVal);
      }
      else {
          assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
      }
  };
  var resolveScalarDeferredValue = function (op, existing, serverValues) {
      switch (op) {
          case 'timestamp':
              return serverValues['timestamp'];
          default:
              assert(false, 'Unexpected server value: ' + op);
      }
  };
  var resolveComplexDeferredValue = function (op, existing, unused) {
      if (!op.hasOwnProperty('increment')) {
          assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
      }
      var delta = op['increment'];
      if (typeof delta !== 'number') {
          assert(false, 'Unexpected increment value: ' + delta);
      }
      var existingNode = existing.node();
      assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
      // Incrementing a non-number sets the value to the incremented amount
      if (!existingNode.isLeafNode()) {
          return delta;
      }
      var leaf = existingNode;
      var existingVal = leaf.getValue();
      if (typeof existingVal !== 'number') {
          return delta;
      }
      // No need to do over/underflow arithmetic here because JS only handles floats under the covers
      return existingVal + delta;
  };
  /**
   * Recursively replace all deferred values and priorities in the tree with the
   * specified generated replacement values.
   * @param path - path to which write is relative
   * @param node - new data written at path
   * @param syncTree - current data
   */
  var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
      return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
  };
  /**
   * Recursively replace all deferred values and priorities in the node with the
   * specified generated replacement values.  If there are no server values in the node,
   * it'll be returned as-is.
   */
  var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
      return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
  };
  function resolveDeferredValue(node, existingVal, serverValues) {
      var rawPri = node.getPriority().val();
      var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
      var newNode;
      if (node.isLeafNode()) {
          var leafNode = node;
          var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
          if (value !== leafNode.getValue() ||
              priority !== leafNode.getPriority().val()) {
              return new LeafNode(value, nodeFromJSON(priority));
          }
          else {
              return node;
          }
      }
      else {
          var childrenNode = node;
          newNode = childrenNode;
          if (priority !== childrenNode.getPriority().val()) {
              newNode = newNode.updatePriority(new LeafNode(priority));
          }
          childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
              var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
              if (newChildNode !== childNode) {
                  newNode = newNode.updateImmediateChild(childName, newChildNode);
              }
          });
          return newNode;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A light-weight tree, traversable by path.  Nodes can have both values and children.
   * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
   * children.
   */
  var Tree = /** @class */ (function () {
      /**
       * @param name - Optional name of the node.
       * @param parent - Optional parent node.
       * @param node - Optional node to wrap.
       */
      function Tree(name, parent, node) {
          if (name === void 0) { name = ''; }
          if (parent === void 0) { parent = null; }
          if (node === void 0) { node = { children: {}, childCount: 0 }; }
          this.name = name;
          this.parent = parent;
          this.node = node;
      }
      return Tree;
  }());
  /**
   * Returns a sub-Tree for the given path.
   *
   * @param pathObj - Path to look up.
   * @returns Tree for path.
   */
  function treeSubTree(tree, pathObj) {
      // TODO: Require pathObj to be Path?
      var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
      var child = tree, next = pathGetFront(path);
      while (next !== null) {
          var childNode = safeGet(child.node.children, next) || {
              children: {},
              childCount: 0
          };
          child = new Tree(next, child, childNode);
          path = pathPopFront(path);
          next = pathGetFront(path);
      }
      return child;
  }
  /**
   * Returns the data associated with this tree node.
   *
   * @returns The data or null if no data exists.
   */
  function treeGetValue(tree) {
      return tree.node.value;
  }
  /**
   * Sets data to this tree node.
   *
   * @param value - Value to set.
   */
  function treeSetValue(tree, value) {
      tree.node.value = value;
      treeUpdateParents(tree);
  }
  /**
   * @returns Whether the tree has any children.
   */
  function treeHasChildren(tree) {
      return tree.node.childCount > 0;
  }
  /**
   * @returns Whethe rthe tree is empty (no value or children).
   */
  function treeIsEmpty(tree) {
      return treeGetValue(tree) === undefined && !treeHasChildren(tree);
  }
  /**
   * Calls action for each child of this tree node.
   *
   * @param action - Action to be called for each child.
   */
  function treeForEachChild(tree, action) {
      each(tree.node.children, function (child, childTree) {
          action(new Tree(child, tree, childTree));
      });
  }
  /**
   * Does a depth-first traversal of this node's descendants, calling action for each one.
   *
   * @param action - Action to be called for each child.
   * @param includeSelf - Whether to call action on this node as well. Defaults to
   *   false.
   * @param childrenFirst - Whether to call action on children before calling it on
   *   parent.
   */
  function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
      if (includeSelf && !childrenFirst) {
          action(tree);
      }
      treeForEachChild(tree, function (child) {
          treeForEachDescendant(child, action, true, childrenFirst);
      });
      if (includeSelf && childrenFirst) {
          action(tree);
      }
  }
  /**
   * Calls action on each ancestor node.
   *
   * @param action - Action to be called on each parent; return
   *   true to abort.
   * @param includeSelf - Whether to call action on this node as well.
   * @returns true if the action callback returned true.
   */
  function treeForEachAncestor(tree, action, includeSelf) {
      var node = includeSelf ? tree : tree.parent;
      while (node !== null) {
          if (action(node)) {
              return true;
          }
          node = node.parent;
      }
      return false;
  }
  /**
   * @returns The path of this tree node, as a Path.
   */
  function treeGetPath(tree) {
      return new Path(tree.parent === null
          ? tree.name
          : treeGetPath(tree.parent) + '/' + tree.name);
  }
  /**
   * Adds or removes this child from its parent based on whether it's empty or not.
   */
  function treeUpdateParents(tree) {
      if (tree.parent !== null) {
          treeUpdateChild(tree.parent, tree.name, tree);
      }
  }
  /**
   * Adds or removes the passed child to this tree node, depending on whether it's empty.
   *
   * @param childName - The name of the child to update.
   * @param child - The child to update.
   */
  function treeUpdateChild(tree, childName, child) {
      var childEmpty = treeIsEmpty(child);
      var childExists = contains(tree.node.children, childName);
      if (childEmpty && childExists) {
          delete tree.node.children[childName];
          tree.node.childCount--;
          treeUpdateParents(tree);
      }
      else if (!childEmpty && !childExists) {
          tree.node.children[childName] = child.node;
          tree.node.childCount++;
          treeUpdateParents(tree);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * True for invalid Firebase keys
   */
  var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
  /**
   * True for invalid Firebase paths.
   * Allows '/' in paths.
   */
  var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
  /**
   * Maximum number of characters to allow in leaf value
   */
  var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
  var isValidKey$1 = function (key) {
      return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
  };
  var isValidPathString = function (pathString) {
      return (typeof pathString === 'string' &&
          pathString.length !== 0 &&
          !INVALID_PATH_REGEX_.test(pathString));
  };
  var isValidRootPathString = function (pathString) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      return isValidPathString(pathString);
  };
  var isValidPriority = function (priority) {
      return (priority === null ||
          typeof priority === 'string' ||
          (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
          (priority &&
              typeof priority === 'object' &&
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              contains(priority, '.sv')));
  };
  /**
   * Pre-validate a datum passed as an argument to Firebase function.
   */
  var validateFirebaseDataArg = function (fnName, value, path, optional) {
      if (optional && value === undefined) {
          return;
      }
      validateFirebaseData(errorPrefix(fnName, 'value'), value, path);
  };
  /**
   * Validate a data object client-side before sending to server.
   */
  var validateFirebaseData = function (errorPrefix$$1, data, path_) {
      var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix$$1) : path_;
      if (data === undefined) {
          throw new Error(errorPrefix$$1 + 'contains undefined ' + validationPathToErrorString(path));
      }
      if (typeof data === 'function') {
          throw new Error(errorPrefix$$1 +
              'contains a function ' +
              validationPathToErrorString(path) +
              ' with contents = ' +
              data.toString());
      }
      if (isInvalidJSONNumber(data)) {
          throw new Error(errorPrefix$$1 +
              'contains ' +
              data.toString() +
              ' ' +
              validationPathToErrorString(path));
      }
      // Check max leaf size, but try to avoid the utf8 conversion if we can.
      if (typeof data === 'string' &&
          data.length > MAX_LEAF_SIZE_ / 3 &&
          stringLength(data) > MAX_LEAF_SIZE_) {
          throw new Error(errorPrefix$$1 +
              'contains a string greater than ' +
              MAX_LEAF_SIZE_ +
              ' utf8 bytes ' +
              validationPathToErrorString(path) +
              " ('" +
              data.substring(0, 50) +
              "...')");
      }
      // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
      // to save extra walking of large objects.
      if (data && typeof data === 'object') {
          var hasDotValue_1 = false;
          var hasActualChild_1 = false;
          each(data, function (key, value) {
              if (key === '.value') {
                  hasDotValue_1 = true;
              }
              else if (key !== '.priority' && key !== '.sv') {
                  hasActualChild_1 = true;
                  if (!isValidKey$1(key)) {
                      throw new Error(errorPrefix$$1 +
                          ' contains an invalid key (' +
                          key +
                          ') ' +
                          validationPathToErrorString(path) +
                          '.  Keys must be non-empty strings ' +
                          'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                  }
              }
              validationPathPush(path, key);
              validateFirebaseData(errorPrefix$$1, value, path);
              validationPathPop(path);
          });
          if (hasDotValue_1 && hasActualChild_1) {
              throw new Error(errorPrefix$$1 +
                  ' contains ".value" child ' +
                  validationPathToErrorString(path) +
                  ' in addition to actual children.');
          }
      }
  };
  /**
   * Pre-validate paths passed in the firebase function.
   */
  var validateFirebaseMergePaths = function (errorPrefix$$1, mergePaths) {
      var i, curPath;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          var keys = pathSlice(curPath);
          for (var j = 0; j < keys.length; j++) {
              if (keys[j] === '.priority' && j === keys.length - 1) ;
              else if (!isValidKey$1(keys[j])) {
                  throw new Error(errorPrefix$$1 +
                      'contains an invalid key (' +
                      keys[j] +
                      ') in path ' +
                      curPath.toString() +
                      '. Keys must be non-empty strings ' +
                      'and can\'t contain ".", "#", "$", "/", "[", or "]"');
              }
          }
      }
      // Check that update keys are not descendants of each other.
      // We rely on the property that sorting guarantees that ancestors come
      // right before descendants.
      mergePaths.sort(pathCompare);
      var prevPath = null;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          if (prevPath !== null && pathContains(prevPath, curPath)) {
              throw new Error(errorPrefix$$1 +
                  'contains a path ' +
                  prevPath.toString() +
                  ' that is ancestor of another path ' +
                  curPath.toString());
          }
          prevPath = curPath;
      }
  };
  /**
   * pre-validate an object passed as an argument to firebase function (
   * must be an object - e.g. for firebase.update()).
   */
  var validateFirebaseMergeDataArg = function (fnName, data, path, optional) {
      if (optional && data === undefined) {
          return;
      }
      var errorPrefix$1 = errorPrefix(fnName, 'values');
      if (!(data && typeof data === 'object') || Array.isArray(data)) {
          throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
      }
      var mergePaths = [];
      each(data, function (key, value) {
          var curPath = new Path(key);
          validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
          if (pathGetBack(curPath) === '.priority') {
              if (!isValidPriority(value)) {
                  throw new Error(errorPrefix$1 +
                      "contains an invalid value for '" +
                      curPath.toString() +
                      "', which must be a valid " +
                      'Firebase priority (a string, finite number, server value, or null).');
              }
          }
          mergePaths.push(curPath);
      });
      validateFirebaseMergePaths(errorPrefix$1, mergePaths);
  };
  var validatePriority = function (fnName, priority, optional) {
      if (optional && priority === undefined) {
          return;
      }
      if (isInvalidJSONNumber(priority)) {
          throw new Error(errorPrefix(fnName, 'priority') +
              'is ' +
              priority.toString() +
              ', but must be a valid Firebase priority (a string, finite number, ' +
              'server value, or null).');
      }
      // Special case to allow importing data with a .sv.
      if (!isValidPriority(priority)) {
          throw new Error(errorPrefix(fnName, 'priority') +
              'must be a valid Firebase priority ' +
              '(a string, finite number, server value, or null).');
      }
  };
  var validateEventType = function (fnName, eventType, optional) {
      if (optional && eventType === undefined) {
          return;
      }
      switch (eventType) {
          case 'value':
          case 'child_added':
          case 'child_removed':
          case 'child_changed':
          case 'child_moved':
              break;
          default:
              throw new Error(errorPrefix(fnName, 'eventType') +
                  'must be a valid event type = "value", "child_added", "child_removed", ' +
                  '"child_changed", or "child_moved".');
      }
  };
  var validateKey = function (fnName, argumentName, key, optional) {
      if (optional && key === undefined) {
          return;
      }
      if (!isValidKey$1(key)) {
          throw new Error(errorPrefix(fnName, argumentName) +
              'was an invalid key = "' +
              key +
              '".  Firebase keys must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "/", "[", or "]").');
      }
  };
  var validatePathString = function (fnName, argumentName, pathString, optional) {
      if (optional && pathString === undefined) {
          return;
      }
      if (!isValidPathString(pathString)) {
          throw new Error(errorPrefix(fnName, argumentName) +
              'was an invalid path = "' +
              pathString +
              '". Paths must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "[", or "]"');
      }
  };
  var validateRootPathString = function (fnName, argumentName, pathString, optional) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      validatePathString(fnName, argumentName, pathString, optional);
  };
  var validateWritablePath = function (fnName, path) {
      if (pathGetFront(path) === '.info') {
          throw new Error(fnName + " failed = Can't modify data under /.info/");
      }
  };
  var validateUrl = function (fnName, parsedUrl) {
      // TODO = Validate server better.
      var pathString = parsedUrl.path.toString();
      if (!(typeof parsedUrl.repoInfo.host === 'string') ||
          parsedUrl.repoInfo.host.length === 0 ||
          (!isValidKey$1(parsedUrl.repoInfo.namespace) &&
              parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
          (pathString.length !== 0 && !isValidRootPathString(pathString))) {
          throw new Error(errorPrefix(fnName, 'url') +
              'must be a valid firebase URL and ' +
              'the path can\'t contain ".", "#", "$", "[", or "]".');
      }
  };
  var validateBoolean = function (fnName, argumentName, bool, optional) {
      if (optional && bool === undefined) {
          return;
      }
      if (typeof bool !== 'boolean') {
          throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');
      }
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The event queue serves a few purposes:
   * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
   *    events being queued.
   * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
   *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
   *    left off, ensuring that the events are still raised synchronously and in order.
   * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
   *    events are raised synchronously.
   *
   * NOTE: This can all go away if/when we move to async events.
   *
   */
  var EventQueue = /** @class */ (function () {
      function EventQueue() {
          this.eventLists_ = [];
          /**
           * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
           */
          this.recursionDepth_ = 0;
      }
      return EventQueue;
  }());
  /**
   * @param eventDataList - The new events to queue.
   */
  function eventQueueQueueEvents(eventQueue, eventDataList) {
      // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
      var currList = null;
      for (var i = 0; i < eventDataList.length; i++) {
          var data = eventDataList[i];
          var path = data.getPath();
          if (currList !== null && !pathEquals(path, currList.path)) {
              eventQueue.eventLists_.push(currList);
              currList = null;
          }
          if (currList === null) {
              currList = { events: [], path: path };
          }
          currList.events.push(data);
      }
      if (currList) {
          eventQueue.eventLists_.push(currList);
      }
  }
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones)
   * for the specified path.
   *
   * It is assumed that the new events are all for the specified path.
   *
   * @param path - The path to raise events for.
   * @param eventDataList - The new events to raise.
   */
  function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
      eventQueueQueueEvents(eventQueue, eventDataList);
      eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {
          return pathEquals(eventPath, path);
      });
  }
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones) for
   * locations related to the specified change path (i.e. all ancestors and descendants).
   *
   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
   *
   * @param changedPath - The path to raise events for.
   * @param eventDataList - The events to raise
   */
  function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
      eventQueueQueueEvents(eventQueue, eventDataList);
      eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {
          return pathContains(eventPath, changedPath) ||
              pathContains(changedPath, eventPath);
      });
  }
  function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
      eventQueue.recursionDepth_++;
      var sentAll = true;
      for (var i = 0; i < eventQueue.eventLists_.length; i++) {
          var eventList = eventQueue.eventLists_[i];
          if (eventList) {
              var eventPath = eventList.path;
              if (predicate(eventPath)) {
                  eventListRaise(eventQueue.eventLists_[i]);
                  eventQueue.eventLists_[i] = null;
              }
              else {
                  sentAll = false;
              }
          }
      }
      if (sentAll) {
          eventQueue.eventLists_ = [];
      }
      eventQueue.recursionDepth_--;
  }
  /**
   * Iterates through the list and raises each event
   */
  function eventListRaise(eventList) {
      for (var i = 0; i < eventList.events.length; i++) {
          var eventData = eventList.events[i];
          if (eventData !== null) {
              eventList.events[i] = null;
              var eventFn = eventData.getEventRunner();
              if (logger$1) {
                  log('event: ' + eventData.toString());
              }
              exceptionGuard(eventFn);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var INTERRUPT_REASON = 'repo_interrupt';
  /**
   * If a transaction does not succeed after 25 retries, we abort it. Among other
   * things this ensure that if there's ever a bug causing a mismatch between
   * client / server hashes for some data, we won't retry indefinitely.
   */
  var MAX_TRANSACTION_RETRIES = 25;
  /**
   * A connection to a single data repository.
   */
  var Repo = /** @class */ (function () {
      function Repo(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
          this.repoInfo_ = repoInfo_;
          this.forceRestClient_ = forceRestClient_;
          this.authTokenProvider_ = authTokenProvider_;
          this.appCheckProvider_ = appCheckProvider_;
          this.dataUpdateCount = 0;
          this.statsListener_ = null;
          this.eventQueue_ = new EventQueue();
          this.nextWriteId_ = 1;
          this.interceptServerDataCallback_ = null;
          /** A list of data pieces and paths to be set when this client disconnects. */
          this.onDisconnect_ = newSparseSnapshotTree();
          /** Stores queues of outstanding transactions for Firebase locations. */
          this.transactionQueueTree_ = new Tree();
          // TODO: This should be @private but it's used by test_access.js and internal.js
          this.persistentConnection_ = null;
          // This key is intentionally not updated if RepoInfo is later changed or replaced
          this.key = this.repoInfo_.toURLString();
      }
      /**
       * @returns The URL corresponding to the root of this Firebase.
       */
      Repo.prototype.toString = function () {
          return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
      };
      return Repo;
  }());
  function repoStart(repo, appId, authOverride) {
      repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
      if (repo.forceRestClient_ || beingCrawled()) {
          repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {
              repoOnDataUpdate(repo, pathString, data, isMerge, tag);
          }, repo.authTokenProvider_, repo.appCheckProvider_);
          // Minor hack: Fire onConnect immediately, since there's no actual connection.
          setTimeout(function () { return repoOnConnectStatus(repo, /* connectStatus= */ true); }, 0);
      }
      else {
          // Validate authOverride
          if (typeof authOverride !== 'undefined' && authOverride !== null) {
              if (typeof authOverride !== 'object') {
                  throw new Error('Only objects are supported for option databaseAuthVariableOverride');
              }
              try {
                  stringify(authOverride);
              }
              catch (e) {
                  throw new Error('Invalid authOverride provided: ' + e);
              }
          }
          repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function (pathString, data, isMerge, tag) {
              repoOnDataUpdate(repo, pathString, data, isMerge, tag);
          }, function (connectStatus) {
              repoOnConnectStatus(repo, connectStatus);
          }, function (updates) {
              repoOnServerInfoUpdate(repo, updates);
          }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
          repo.server_ = repo.persistentConnection_;
      }
      repo.authTokenProvider_.addTokenChangeListener(function (token) {
          repo.server_.refreshAuthToken(token);
      });
      repo.appCheckProvider_.addTokenChangeListener(function (result) {
          repo.server_.refreshAppCheckToken(result.token);
      });
      // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
      // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
      repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function () { return new StatsReporter(repo.stats_, repo.server_); });
      // Used for .info.
      repo.infoData_ = new SnapshotHolder();
      repo.infoSyncTree_ = new SyncTree({
          startListening: function (query, tag, currentHashFn, onComplete) {
              var infoEvents = [];
              var node = repo.infoData_.getNode(query._path);
              // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
              // on initial data...
              if (!node.isEmpty()) {
                  infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
                  setTimeout(function () {
                      onComplete('ok');
                  }, 0);
              }
              return infoEvents;
          },
          stopListening: function () { }
      });
      repoUpdateInfo(repo, 'connected', false);
      repo.serverSyncTree_ = new SyncTree({
          startListening: function (query, tag, currentHashFn, onComplete) {
              repo.server_.listen(query, currentHashFn, tag, function (status, data) {
                  var events = onComplete(status, data);
                  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
              });
              // No synchronous events for network-backed sync trees
              return [];
          },
          stopListening: function (query, tag) {
              repo.server_.unlisten(query, tag);
          }
      });
  }
  /**
   * @returns The time in milliseconds, taking the server offset into account if we have one.
   */
  function repoServerTime(repo) {
      var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
      var offset = offsetNode.val() || 0;
      return new Date().getTime() + offset;
  }
  /**
   * Generate ServerValues using some variables from the repo object.
   */
  function repoGenerateServerValues(repo) {
      return generateWithValues({
          timestamp: repoServerTime(repo)
      });
  }
  /**
   * Called by realtime when we get new messages from the server.
   */
  function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
      // For testing.
      repo.dataUpdateCount++;
      var path = new Path(pathString);
      data = repo.interceptServerDataCallback_
          ? repo.interceptServerDataCallback_(pathString, data)
          : data;
      var events = [];
      if (tag) {
          if (isMerge) {
              var taggedChildren = map$1(data, function (raw) { return nodeFromJSON(raw); });
              events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
          }
          else {
              var taggedSnap = nodeFromJSON(data);
              events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
          }
      }
      else if (isMerge) {
          var changedChildren = map$1(data, function (raw) { return nodeFromJSON(raw); });
          events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
      }
      else {
          var snap = nodeFromJSON(data);
          events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
      }
      var affectedPath = path;
      if (events.length > 0) {
          // Since we have a listener outstanding for each transaction, receiving any events
          // is a proxy for some change having occurred.
          affectedPath = repoRerunTransactions(repo, path);
      }
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
  }
  // TODO: This should be @private but it's used by test_access.js and internal.js
  function repoInterceptServerData(repo, callback) {
      repo.interceptServerDataCallback_ = callback;
  }
  function repoOnConnectStatus(repo, connectStatus) {
      repoUpdateInfo(repo, 'connected', connectStatus);
      if (connectStatus === false) {
          repoRunOnDisconnectEvents(repo);
      }
  }
  function repoOnServerInfoUpdate(repo, updates) {
      each(updates, function (key, value) {
          repoUpdateInfo(repo, key, value);
      });
  }
  function repoUpdateInfo(repo, pathString, value) {
      var path = new Path('/.info/' + pathString);
      var newNode = nodeFromJSON(value);
      repo.infoData_.updateSnapshot(path, newNode);
      var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
  }
  function repoGetNextWriteId(repo) {
      return repo.nextWriteId_++;
  }
  /**
   * The purpose of `getValue` is to return the latest known value
   * satisfying `query`.
   *
   * This method will first check for in-memory cached values
   * belonging to active listeners. If they are found, such values
   * are considered to be the most up-to-date.
   *
   * If the client is not connected, this method will try to
   * establish a connection and request the value for `query`. If
   * the client is not able to retrieve the query result, it reports
   * an error.
   *
   * @param query - The query to surface a value for.
   */
  function repoGetValue(repo, query) {
      // Only active queries are cached. There is no persisted cache.
      var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);
      if (cached != null) {
          return Promise.resolve(cached);
      }
      return repo.server_.get(query).then(function (payload) {
          var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
          var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
          eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
          return Promise.resolve(node);
      }, function (err) {
          repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);
          return Promise.reject(new Error(err));
      });
  }
  function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
      repoLog(repo, 'set', {
          path: path.toString(),
          value: newVal,
          priority: newPriority
      });
      // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
      // (b) store unresolved paths on JSON parse
      var serverValues = repoGenerateServerValues(repo);
      var newNodeUnresolved = nodeFromJSON(newVal, newPriority);
      var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
      var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
      var writeId = repoGetNextWriteId(repo);
      var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
      eventQueueQueueEvents(repo.eventQueue_, events);
      repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
          var success = status === 'ok';
          if (!success) {
              warn('set at ' + path + ' failed: ' + status);
          }
          var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
      var affectedPath = repoAbortTransactions(repo, path);
      repoRerunTransactions(repo, affectedPath);
      // We queued the events above, so just flush the queue here
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
  }
  function repoUpdate(repo, path, childrenToMerge, onComplete) {
      repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });
      // Start with our existing data and merge each child into it.
      var empty = true;
      var serverValues = repoGenerateServerValues(repo);
      var changedChildren = {};
      each(childrenToMerge, function (changedKey, changedValue) {
          empty = false;
          changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
      });
      if (!empty) {
          var writeId_1 = repoGetNextWriteId(repo);
          var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);
          eventQueueQueueEvents(repo.eventQueue_, events);
          repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
              var success = status === 'ok';
              if (!success) {
                  warn('update at ' + path + ' failed: ' + status);
              }
              var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);
              var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
              eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
          });
          each(childrenToMerge, function (changedPath) {
              var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
              repoRerunTransactions(repo, affectedPath);
          });
          // We queued the events above, so just flush the queue here
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
      }
      else {
          log("update() called with empty data.  Don't do anything.");
          repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
      }
  }
  /**
   * Applies all of the changes stored up in the onDisconnect_ tree.
   */
  function repoRunOnDisconnectEvents(repo) {
      repoLog(repo, 'onDisconnectEvents');
      var serverValues = repoGenerateServerValues(repo);
      var resolvedOnDisconnectTree = newSparseSnapshotTree();
      sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function (path, node) {
          var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
          sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
      });
      var events = [];
      sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function (path, snap) {
          events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
          var affectedPath = repoAbortTransactions(repo, path);
          repoRerunTransactions(repo, affectedPath);
      });
      repo.onDisconnect_ = newSparseSnapshotTree();
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
  }
  function repoOnDisconnectCancel(repo, path, onComplete) {
      repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
          if (status === 'ok') {
              sparseSnapshotTreeForget(repo.onDisconnect_, path);
          }
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
  }
  function repoOnDisconnectSet(repo, path, value, onComplete) {
      var newNode = nodeFromJSON(value);
      repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
          if (status === 'ok') {
              sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
          }
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
  }
  function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
      var newNode = nodeFromJSON(value, priority);
      repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
          if (status === 'ok') {
              sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
          }
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
  }
  function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
      if (isEmpty$1(childrenToMerge)) {
          log("onDisconnect().update() called with empty data.  Don't do anything.");
          repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
          return;
      }
      repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
          if (status === 'ok') {
              each(childrenToMerge, function (childName, childNode) {
                  var newChildNode = nodeFromJSON(childNode);
                  sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);
              });
          }
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
  }
  function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
      var events;
      if (pathGetFront(query._path) === '.info') {
          events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
      }
      else {
          events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
      }
      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
  }
  function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
      // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
      // a little bit by handling the return values anyways.
      var events;
      if (pathGetFront(query._path) === '.info') {
          events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
      }
      else {
          events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
      }
      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
  }
  function repoInterrupt(repo) {
      if (repo.persistentConnection_) {
          repo.persistentConnection_.interrupt(INTERRUPT_REASON);
      }
  }
  function repoResume(repo) {
      if (repo.persistentConnection_) {
          repo.persistentConnection_.resume(INTERRUPT_REASON);
      }
  }
  function repoStats(repo, showDelta) {
      if (showDelta === void 0) { showDelta = false; }
      if (typeof console === 'undefined') {
          return;
      }
      var stats;
      if (showDelta) {
          if (!repo.statsListener_) {
              repo.statsListener_ = new StatsListener(repo.stats_);
          }
          stats = repo.statsListener_.get();
      }
      else {
          stats = repo.stats_.get();
      }
      var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
          return Math.max(currentValue.length, previousValue);
      }, 0);
      each(stats, function (stat, value) {
          var paddedStat = stat;
          // pad stat names to be the same length (plus 2 extra spaces).
          for (var i = stat.length; i < longestName + 2; i++) {
              paddedStat += ' ';
          }
          console.log(paddedStat + value);
      });
  }
  function repoStatsIncrementCounter(repo, metric) {
      repo.stats_.incrementCounter(metric);
      statsReporterIncludeStat(repo.statsReporter_, metric);
  }
  function repoLog(repo) {
      var varArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          varArgs[_i - 1] = arguments[_i];
      }
      var prefix = '';
      if (repo.persistentConnection_) {
          prefix = repo.persistentConnection_.id + ':';
      }
      log.apply(void 0, __spreadArray$3([prefix], __read$4(varArgs)));
  }
  function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
      if (callback) {
          exceptionGuard(function () {
              if (status === 'ok') {
                  callback(null);
              }
              else {
                  var code = (status || 'error').toUpperCase();
                  var message = code;
                  if (errorReason) {
                      message += ': ' + errorReason;
                  }
                  var error = new Error(message);
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  error.code = code;
                  callback(error);
              }
          });
      }
  }
  /**
   * Creates a new transaction, adds it to the transactions we're tracking, and
   * sends it to the server if possible.
   *
   * @param path - Path at which to do transaction.
   * @param transactionUpdate - Update callback.
   * @param onComplete - Completion callback.
   * @param unwatcher - Function that will be called when the transaction no longer
   * need data updates for `path`.
   * @param applyLocally - Whether or not to make intermediate results visible
   */
  function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
      repoLog(repo, 'transaction on ' + path);
      // Initialize transaction.
      var transaction = {
          path: path,
          update: transactionUpdate,
          onComplete: onComplete,
          // One of TransactionStatus enums.
          status: null,
          // Used when combining transactions at different locations to figure out
          // which one goes first.
          order: LUIDGenerator(),
          // Whether to raise local events for this transaction.
          applyLocally: applyLocally,
          // Count of how many times we've retried the transaction.
          retryCount: 0,
          // Function to call to clean up our .on() listener.
          unwatcher: unwatcher,
          // Stores why a transaction was aborted.
          abortReason: null,
          currentWriteId: null,
          currentInputSnapshot: null,
          currentOutputSnapshotRaw: null,
          currentOutputSnapshotResolved: null
      };
      // Run transaction initially.
      var currentState = repoGetLatestState(repo, path, undefined);
      transaction.currentInputSnapshot = currentState;
      var newVal = transaction.update(currentState.val());
      if (newVal === undefined) {
          // Abort transaction.
          transaction.unwatcher();
          transaction.currentOutputSnapshotRaw = null;
          transaction.currentOutputSnapshotResolved = null;
          if (transaction.onComplete) {
              transaction.onComplete(null, false, transaction.currentInputSnapshot);
          }
      }
      else {
          validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
          // Mark as run and add to our queue.
          transaction.status = 0 /* RUN */;
          var queueNode = treeSubTree(repo.transactionQueueTree_, path);
          var nodeQueue = treeGetValue(queueNode) || [];
          nodeQueue.push(transaction);
          treeSetValue(queueNode, nodeQueue);
          // Update visibleData and raise events
          // Note: We intentionally raise events after updating all of our
          // transaction state, since the user could start new transactions from the
          // event callbacks.
          var priorityForNode = void 0;
          if (typeof newVal === 'object' &&
              newVal !== null &&
              contains(newVal, '.priority')) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              priorityForNode = safeGet(newVal, '.priority');
              assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                  'Priority must be a valid string, finite number, server value, or null.');
          }
          else {
              var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||
                  ChildrenNode.EMPTY_NODE;
              priorityForNode = currentNode.getPriority().val();
          }
          var serverValues = repoGenerateServerValues(repo);
          var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
          var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
          transaction.currentOutputSnapshotRaw = newNodeUnresolved;
          transaction.currentOutputSnapshotResolved = newNode;
          transaction.currentWriteId = repoGetNextWriteId(repo);
          var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
          repoSendReadyTransactions(repo, repo.transactionQueueTree_);
      }
  }
  /**
   * @param excludeSets - A specific set to exclude
   */
  function repoGetLatestState(repo, path, excludeSets) {
      return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||
          ChildrenNode.EMPTY_NODE);
  }
  /**
   * Sends any already-run transactions that aren't waiting for outstanding
   * transactions to complete.
   *
   * Externally it's called with no arguments, but it calls itself recursively
   * with a particular transactionQueueTree node to recurse through the tree.
   *
   * @param node - transactionQueueTree node to start at.
   */
  function repoSendReadyTransactions(repo, node) {
      if (node === void 0) { node = repo.transactionQueueTree_; }
      // Before recursing, make sure any completed transactions are removed.
      if (!node) {
          repoPruneCompletedTransactionsBelowNode(repo, node);
      }
      if (treeGetValue(node)) {
          var queue = repoBuildTransactionQueue(repo, node);
          assert(queue.length > 0, 'Sending zero length transaction queue');
          var allRun = queue.every(function (transaction) { return transaction.status === 0 /* RUN */; });
          // If they're all run (and not sent), we can send them.  Else, we must wait.
          if (allRun) {
              repoSendTransactionQueue(repo, treeGetPath(node), queue);
          }
      }
      else if (treeHasChildren(node)) {
          treeForEachChild(node, function (childNode) {
              repoSendReadyTransactions(repo, childNode);
          });
      }
  }
  /**
   * Given a list of run transactions, send them to the server and then handle
   * the result (success or failure).
   *
   * @param path - The location of the queue.
   * @param queue - Queue of transactions under the specified location.
   */
  function repoSendTransactionQueue(repo, path, queue) {
      // Mark transactions as sent and increment retry count!
      var setsToIgnore = queue.map(function (txn) {
          return txn.currentWriteId;
      });
      var latestState = repoGetLatestState(repo, path, setsToIgnore);
      var snapToSend = latestState;
      var latestHash = latestState.hash();
      for (var i = 0; i < queue.length; i++) {
          var txn = queue[i];
          assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');
          txn.status = 1 /* SENT */;
          txn.retryCount++;
          var relativePath = newRelativePath(path, txn.path);
          // If we've gotten to this point, the output snapshot must be defined.
          snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
      }
      var dataToSend = snapToSend.val(true);
      var pathToSend = path;
      // Send the put.
      repo.server_.put(pathToSend.toString(), dataToSend, function (status) {
          repoLog(repo, 'transaction put response', {
              path: pathToSend.toString(),
              status: status
          });
          var events = [];
          if (status === 'ok') {
              // Queue up the callbacks and fire them after cleaning up all of our
              // transaction state, since the callback could trigger more
              // transactions or sets.
              var callbacks = [];
              var _loop_1 = function (i) {
                  queue[i].status = 2 /* COMPLETED */;
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));
                  if (queue[i].onComplete) {
                      // We never unset the output snapshot, and given that this
                      // transaction is complete, it should be set
                      callbacks.push(function () {
                          return queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved);
                      });
                  }
                  queue[i].unwatcher();
              };
              for (var i = 0; i < queue.length; i++) {
                  _loop_1(i);
              }
              // Now remove the completed transactions.
              repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
              // There may be pending transactions that we can now send.
              repoSendReadyTransactions(repo, repo.transactionQueueTree_);
              eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
              // Finally, trigger onComplete callbacks.
              for (var i = 0; i < callbacks.length; i++) {
                  exceptionGuard(callbacks[i]);
              }
          }
          else {
              // transactions are no longer sent.  Update their status appropriately.
              if (status === 'datastale') {
                  for (var i = 0; i < queue.length; i++) {
                      if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {
                          queue[i].status = 4 /* NEEDS_ABORT */;
                      }
                      else {
                          queue[i].status = 0 /* RUN */;
                      }
                  }
              }
              else {
                  warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                  for (var i = 0; i < queue.length; i++) {
                      queue[i].status = 4 /* NEEDS_ABORT */;
                      queue[i].abortReason = status;
                  }
              }
              repoRerunTransactions(repo, path);
          }
      }, latestHash);
  }
  /**
   * Finds all transactions dependent on the data at changedPath and reruns them.
   *
   * Should be called any time cached data changes.
   *
   * Return the highest path that was affected by rerunning transactions. This
   * is the path at which events need to be raised for.
   *
   * @param changedPath - The path in mergedData that changed.
   * @returns The rootmost path that was affected by rerunning transactions.
   */
  function repoRerunTransactions(repo, changedPath) {
      var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
      var path = treeGetPath(rootMostTransactionNode);
      var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
      repoRerunTransactionQueue(repo, queue, path);
      return path;
  }
  /**
   * Does all the work of rerunning transactions (as well as cleans up aborted
   * transactions and whatnot).
   *
   * @param queue - The queue of transactions to run.
   * @param path - The path the queue is for.
   */
  function repoRerunTransactionQueue(repo, queue, path) {
      if (queue.length === 0) {
          return; // Nothing to do!
      }
      // Queue up the callbacks and fire them after cleaning up all of our
      // transaction state, since the callback could trigger more transactions or
      // sets.
      var callbacks = [];
      var events = [];
      // Ignore all of the sets we're going to re-run.
      var txnsToRerun = queue.filter(function (q) {
          return q.status === 0 /* RUN */;
      });
      var setsToIgnore = txnsToRerun.map(function (q) {
          return q.currentWriteId;
      });
      var _loop_2 = function (i) {
          var transaction = queue[i];
          var relativePath = newRelativePath(path, transaction.path);
          var abortTransaction = false, abortReason;
          assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
          if (transaction.status === 4 /* NEEDS_ABORT */) {
              abortTransaction = true;
              abortReason = transaction.abortReason;
              events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
          }
          else if (transaction.status === 0 /* RUN */) {
              if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                  abortTransaction = true;
                  abortReason = 'maxretry';
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
              }
              else {
                  // This code reruns a transaction
                  var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
                  transaction.currentInputSnapshot = currentNode;
                  var newData = queue[i].update(currentNode.val());
                  if (newData !== undefined) {
                      validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                      var newDataNode = nodeFromJSON(newData);
                      var hasExplicitPriority = typeof newData === 'object' &&
                          newData != null &&
                          contains(newData, '.priority');
                      if (!hasExplicitPriority) {
                          // Keep the old priority if there wasn't a priority explicitly specified.
                          newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                      }
                      var oldWriteId = transaction.currentWriteId;
                      var serverValues = repoGenerateServerValues(repo);
                      var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                      transaction.currentOutputSnapshotRaw = newDataNode;
                      transaction.currentOutputSnapshotResolved = newNodeResolved;
                      transaction.currentWriteId = repoGetNextWriteId(repo);
                      // Mutates setsToIgnore in place
                      setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                      events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
                  }
                  else {
                      abortTransaction = true;
                      abortReason = 'nodata';
                      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                  }
              }
          }
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
          events = [];
          if (abortTransaction) {
              // Abort.
              queue[i].status = 2 /* COMPLETED */;
              // Removing a listener can trigger pruning which can muck with
              // mergedData/visibleData (as it prunes data). So defer the unwatcher
              // until we're done.
              (function (unwatcher) {
                  setTimeout(unwatcher, Math.floor(0));
              })(queue[i].unwatcher);
              if (queue[i].onComplete) {
                  if (abortReason === 'nodata') {
                      callbacks.push(function () {
                          return queue[i].onComplete(null, false, queue[i].currentInputSnapshot);
                      });
                  }
                  else {
                      callbacks.push(function () {
                          return queue[i].onComplete(new Error(abortReason), false, null);
                      });
                  }
              }
          }
      };
      for (var i = 0; i < queue.length; i++) {
          _loop_2(i);
      }
      // Clean up completed transactions.
      repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
      // Now fire callbacks, now that we're in a good, known state.
      for (var i = 0; i < callbacks.length; i++) {
          exceptionGuard(callbacks[i]);
      }
      // Try to send the transaction result to the server.
      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
  }
  /**
   * Returns the rootmost ancestor node of the specified path that has a pending
   * transaction on it, or just returns the node for the given path if there are
   * no pending transactions on any ancestor.
   *
   * @param path - The location to start at.
   * @returns The rootmost node with a transaction.
   */
  function repoGetAncestorTransactionNode(repo, path) {
      var front;
      // Start at the root and walk deeper into the tree towards path until we
      // find a node with pending transactions.
      var transactionNode = repo.transactionQueueTree_;
      front = pathGetFront(path);
      while (front !== null && treeGetValue(transactionNode) === undefined) {
          transactionNode = treeSubTree(transactionNode, front);
          path = pathPopFront(path);
          front = pathGetFront(path);
      }
      return transactionNode;
  }
  /**
   * Builds the queue of all transactions at or below the specified
   * transactionNode.
   *
   * @param transactionNode
   * @returns The generated queue.
   */
  function repoBuildTransactionQueue(repo, transactionNode) {
      // Walk any child transaction queues and aggregate them into a single queue.
      var transactionQueue = [];
      repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
      // Sort them by the order the transactions were created.
      transactionQueue.sort(function (a, b) { return a.order - b.order; });
      return transactionQueue;
  }
  function repoAggregateTransactionQueuesForNode(repo, node, queue) {
      var nodeQueue = treeGetValue(node);
      if (nodeQueue) {
          for (var i = 0; i < nodeQueue.length; i++) {
              queue.push(nodeQueue[i]);
          }
      }
      treeForEachChild(node, function (child) {
          repoAggregateTransactionQueuesForNode(repo, child, queue);
      });
  }
  /**
   * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
   */
  function repoPruneCompletedTransactionsBelowNode(repo, node) {
      var queue = treeGetValue(node);
      if (queue) {
          var to = 0;
          for (var from = 0; from < queue.length; from++) {
              if (queue[from].status !== 2 /* COMPLETED */) {
                  queue[to] = queue[from];
                  to++;
              }
          }
          queue.length = to;
          treeSetValue(node, queue.length > 0 ? queue : undefined);
      }
      treeForEachChild(node, function (childNode) {
          repoPruneCompletedTransactionsBelowNode(repo, childNode);
      });
  }
  /**
   * Aborts all transactions on ancestors or descendants of the specified path.
   * Called when doing a set() or update() since we consider them incompatible
   * with transactions.
   *
   * @param path - Path for which we want to abort related transactions.
   */
  function repoAbortTransactions(repo, path) {
      var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
      var transactionNode = treeSubTree(repo.transactionQueueTree_, path);
      treeForEachAncestor(transactionNode, function (node) {
          repoAbortTransactionsOnNode(repo, node);
      });
      repoAbortTransactionsOnNode(repo, transactionNode);
      treeForEachDescendant(transactionNode, function (node) {
          repoAbortTransactionsOnNode(repo, node);
      });
      return affectedPath;
  }
  /**
   * Abort transactions stored in this transaction queue node.
   *
   * @param node - Node to abort transactions for.
   */
  function repoAbortTransactionsOnNode(repo, node) {
      var queue = treeGetValue(node);
      if (queue) {
          // Queue up the callbacks and fire them after cleaning up all of our
          // transaction state, since the callback could trigger more transactions
          // or sets.
          var callbacks = [];
          // Go through queue.  Any already-sent transactions must be marked for
          // abort, while the unsent ones can be immediately aborted and removed.
          var events = [];
          var lastSent = -1;
          for (var i = 0; i < queue.length; i++) {
              if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;
              else if (queue[i].status === 1 /* SENT */) {
                  assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                  lastSent = i;
                  // Mark transaction for abort when it comes back.
                  queue[i].status = 3 /* SENT_NEEDS_ABORT */;
                  queue[i].abortReason = 'set';
              }
              else {
                  assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');
                  // We can abort it immediately.
                  queue[i].unwatcher();
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
                  if (queue[i].onComplete) {
                      callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));
                  }
              }
          }
          if (lastSent === -1) {
              // We're not waiting for any sent transactions.  We can clear the queue.
              treeSetValue(node, undefined);
          }
          else {
              // Remove the transactions we aborted.
              queue.length = lastSent + 1;
          }
          // Now fire the callbacks.
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
          for (var i = 0; i < callbacks.length; i++) {
              exceptionGuard(callbacks[i]);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function decodePath(pathString) {
      var pathStringDecoded = '';
      var pieces = pathString.split('/');
      for (var i = 0; i < pieces.length; i++) {
          if (pieces[i].length > 0) {
              var piece = pieces[i];
              try {
                  piece = decodeURIComponent(piece.replace(/\+/g, ' '));
              }
              catch (e) { }
              pathStringDecoded += '/' + piece;
          }
      }
      return pathStringDecoded;
  }
  /**
   * @returns key value hash
   */
  function decodeQuery(queryString) {
      var e_1, _a;
      var results = {};
      if (queryString.charAt(0) === '?') {
          queryString = queryString.substring(1);
      }
      try {
          for (var _b = __values$4(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
              var segment = _c.value;
              if (segment.length === 0) {
                  continue;
              }
              var kv = segment.split('=');
              if (kv.length === 2) {
                  results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
              }
              else {
                  warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
              }
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return results;
  }
  var parseRepoInfo = function (dataURL, nodeAdmin) {
      var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
      if (parsedUrl.domain === 'firebase.com') {
          fatal(parsedUrl.host +
              ' is no longer supported. ' +
              'Please use <YOUR FIREBASE>.firebaseio.com instead');
      }
      // Catch common error of uninitialized namespace value.
      if ((!namespace || namespace === 'undefined') &&
          parsedUrl.domain !== 'localhost') {
          fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
      }
      if (!parsedUrl.secure) {
          warnIfPageIsSecure();
      }
      var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
      return {
          repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, 
          /*persistenceKey=*/ '', 
          /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
          path: new Path(parsedUrl.pathString)
      };
  };
  var parseDatabaseURL = function (dataURL) {
      // Default to empty strings in the event of a malformed string.
      var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
      // Always default to SSL, unless otherwise specified.
      var secure = true, scheme = 'https', port = 443;
      // Don't do any validation here. The caller is responsible for validating the result of parsing.
      if (typeof dataURL === 'string') {
          // Parse scheme.
          var colonInd = dataURL.indexOf('//');
          if (colonInd >= 0) {
              scheme = dataURL.substring(0, colonInd - 1);
              dataURL = dataURL.substring(colonInd + 2);
          }
          // Parse host, path, and query string.
          var slashInd = dataURL.indexOf('/');
          if (slashInd === -1) {
              slashInd = dataURL.length;
          }
          var questionMarkInd = dataURL.indexOf('?');
          if (questionMarkInd === -1) {
              questionMarkInd = dataURL.length;
          }
          host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
          if (slashInd < questionMarkInd) {
              // For pathString, questionMarkInd will always come after slashInd
              pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
          }
          var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
          // If we have a port, use scheme for determining if it's secure.
          colonInd = host.indexOf(':');
          if (colonInd >= 0) {
              secure = scheme === 'https' || scheme === 'wss';
              port = parseInt(host.substring(colonInd + 1), 10);
          }
          else {
              colonInd = host.length;
          }
          var hostWithoutPort = host.slice(0, colonInd);
          if (hostWithoutPort.toLowerCase() === 'localhost') {
              domain = 'localhost';
          }
          else if (hostWithoutPort.split('.').length <= 2) {
              domain = hostWithoutPort;
          }
          else {
              // Interpret the subdomain of a 3 or more component URL as the namespace name.
              var dotInd = host.indexOf('.');
              subdomain = host.substring(0, dotInd).toLowerCase();
              domain = host.substring(dotInd + 1);
              // Normalize namespaces to lowercase to share storage / connection.
              namespace = subdomain;
          }
          // Always treat the value of the `ns` as the namespace name if it is present.
          if ('ns' in queryParams) {
              namespace = queryParams['ns'];
          }
      }
      return {
          host: host,
          port: port,
          domain: domain,
          subdomain: subdomain,
          secure: secure,
          scheme: scheme,
          pathString: pathString,
          namespace: namespace
      };
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Encapsulates the data needed to raise an event
   */
  var DataEvent = /** @class */ (function () {
      /**
       * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
       * @param eventRegistration - The function to call to with the event data. User provided
       * @param snapshot - The data backing the event
       * @param prevName - Optional, the name of the previous child for child_* events.
       */
      function DataEvent(eventType, eventRegistration, snapshot, prevName) {
          this.eventType = eventType;
          this.eventRegistration = eventRegistration;
          this.snapshot = snapshot;
          this.prevName = prevName;
      }
      DataEvent.prototype.getPath = function () {
          var ref = this.snapshot.ref;
          if (this.eventType === 'value') {
              return ref._path;
          }
          else {
              return ref.parent._path;
          }
      };
      DataEvent.prototype.getEventType = function () {
          return this.eventType;
      };
      DataEvent.prototype.getEventRunner = function () {
          return this.eventRegistration.getEventRunner(this);
      };
      DataEvent.prototype.toString = function () {
          return (this.getPath().toString() +
              ':' +
              this.eventType +
              ':' +
              stringify(this.snapshot.exportVal()));
      };
      return DataEvent;
  }());
  var CancelEvent = /** @class */ (function () {
      function CancelEvent(eventRegistration, error, path) {
          this.eventRegistration = eventRegistration;
          this.error = error;
          this.path = path;
      }
      CancelEvent.prototype.getPath = function () {
          return this.path;
      };
      CancelEvent.prototype.getEventType = function () {
          return 'cancel';
      };
      CancelEvent.prototype.getEventRunner = function () {
          return this.eventRegistration.getEventRunner(this);
      };
      CancelEvent.prototype.toString = function () {
          return this.path.toString() + ':cancel';
      };
      return CancelEvent;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A wrapper class that converts events from the database@exp SDK to the legacy
   * Database SDK. Events are not converted directly as event registration relies
   * on reference comparison of the original user callback (see `matches()`) and
   * relies on equality of the legacy SDK's `context` object.
   */
  var CallbackContext = /** @class */ (function () {
      function CallbackContext(snapshotCallback, cancelCallback) {
          this.snapshotCallback = snapshotCallback;
          this.cancelCallback = cancelCallback;
      }
      CallbackContext.prototype.onValue = function (expDataSnapshot, previousChildName) {
          this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
      };
      CallbackContext.prototype.onCancel = function (error) {
          assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
          return this.cancelCallback.call(null, error);
      };
      Object.defineProperty(CallbackContext.prototype, "hasCancelCallback", {
          get: function () {
              return !!this.cancelCallback;
          },
          enumerable: false,
          configurable: true
      });
      CallbackContext.prototype.matches = function (other) {
          return (this.snapshotCallback === other.snapshotCallback ||
              (this.snapshotCallback.userCallback !== undefined &&
                  this.snapshotCallback.userCallback ===
                      other.snapshotCallback.userCallback &&
                  this.snapshotCallback.context === other.snapshotCallback.context));
      };
      return CallbackContext;
  }());

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The `onDisconnect` class allows you to write or clear data when your client
   * disconnects from the Database server. These updates occur whether your
   * client disconnects cleanly or not, so you can rely on them to clean up data
   * even if a connection is dropped or a client crashes.
   *
   * The `onDisconnect` class is most commonly used to manage presence in
   * applications where it is useful to detect how many clients are connected and
   * when other clients disconnect. See
   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
   * for more information.
   *
   * To avoid problems when a connection is dropped before the requests can be
   * transferred to the Database server, these functions should be called before
   * writing any data.
   *
   * Note that `onDisconnect` operations are only triggered once. If you want an
   * operation to occur each time a disconnect occurs, you'll need to re-establish
   * the `onDisconnect` operations each time you reconnect.
   */
  var OnDisconnect$1 = /** @class */ (function () {
      /** @hideconstructor */
      function OnDisconnect(_repo, _path) {
          this._repo = _repo;
          this._path = _path;
      }
      /**
       * Cancels all previously queued `onDisconnect()` set or update events for this
       * location and all children.
       *
       * If a write has been queued for this location via a `set()` or `update()` at a
       * parent location, the write at this location will be canceled, though writes
       * to sibling locations will still occur.
       *
       * @returns Resolves when synchronization to the server is complete.
       */
      OnDisconnect.prototype.cancel = function () {
          var deferred = new Deferred();
          repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function () { }));
          return deferred.promise;
      };
      /**
       * Ensures the data at this location is deleted when the client is disconnected
       * (due to closing the browser, navigating to a new page, or network issues).
       *
       * @returns Resolves when synchronization to the server is complete.
       */
      OnDisconnect.prototype.remove = function () {
          validateWritablePath('OnDisconnect.remove', this._path);
          var deferred = new Deferred();
          repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function () { }));
          return deferred.promise;
      };
      /**
       * Ensures the data at this location is set to the specified value when the
       * client is disconnected (due to closing the browser, navigating to a new page,
       * or network issues).
       *
       * `set()` is especially useful for implementing "presence" systems, where a
       * value should be changed or cleared when a user disconnects so that they
       * appear "offline" to other users. See
       * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
       * for more information.
       *
       * Note that `onDisconnect` operations are only triggered once. If you want an
       * operation to occur each time a disconnect occurs, you'll need to re-establish
       * the `onDisconnect` operations each time.
       *
       * @param value - The value to be written to this location on disconnect (can
       * be an object, array, string, number, boolean, or null).
       * @returns Resolves when synchronization to the Database is complete.
       */
      OnDisconnect.prototype.set = function (value) {
          validateWritablePath('OnDisconnect.set', this._path);
          validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);
          var deferred = new Deferred();
          repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function () { }));
          return deferred.promise;
      };
      /**
       * Ensures the data at this location is set to the specified value and priority
       * when the client is disconnected (due to closing the browser, navigating to a
       * new page, or network issues).
       *
       * @param value - The value to be written to this location on disconnect (can
       * be an object, array, string, number, boolean, or null).
       * @param priority - The priority to be written (string, number, or null).
       * @returns Resolves when synchronization to the Database is complete.
       */
      OnDisconnect.prototype.setWithPriority = function (value, priority) {
          validateWritablePath('OnDisconnect.setWithPriority', this._path);
          validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);
          validatePriority('OnDisconnect.setWithPriority', priority, false);
          var deferred = new Deferred();
          repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function () { }));
          return deferred.promise;
      };
      /**
       * Writes multiple values at this location when the client is disconnected (due
       * to closing the browser, navigating to a new page, or network issues).
       *
       * The `values` argument contains multiple property-value pairs that will be
       * written to the Database together. Each child property can either be a simple
       * property (for example, "name") or a relative path (for example, "name/first")
       * from the current location to the data to update.
       *
       * As opposed to the `set()` method, `update()` can be use to selectively update
       * only the referenced properties at the current location (instead of replacing
       * all the child properties at the current location).
       *
       * @param values - Object containing multiple values.
       * @returns Resolves when synchronization to the Database is complete.
       */
      OnDisconnect.prototype.update = function (values) {
          validateWritablePath('OnDisconnect.update', this._path);
          validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);
          var deferred = new Deferred();
          repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function () { }));
          return deferred.promise;
      };
      return OnDisconnect;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @internal
   */
  var QueryImpl = /** @class */ (function () {
      /**
       * @hideconstructor
       */
      function QueryImpl(_repo, _path, _queryParams, _orderByCalled) {
          this._repo = _repo;
          this._path = _path;
          this._queryParams = _queryParams;
          this._orderByCalled = _orderByCalled;
      }
      Object.defineProperty(QueryImpl.prototype, "key", {
          get: function () {
              if (pathIsEmpty(this._path)) {
                  return null;
              }
              else {
                  return pathGetBack(this._path);
              }
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(QueryImpl.prototype, "ref", {
          get: function () {
              return new ReferenceImpl(this._repo, this._path);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(QueryImpl.prototype, "_queryIdentifier", {
          get: function () {
              var obj = queryParamsGetQueryObject(this._queryParams);
              var id = ObjectToUniqueKey(obj);
              return id === '{}' ? 'default' : id;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(QueryImpl.prototype, "_queryObject", {
          /**
           * An object representation of the query parameters used by this Query.
           */
          get: function () {
              return queryParamsGetQueryObject(this._queryParams);
          },
          enumerable: false,
          configurable: true
      });
      QueryImpl.prototype.isEqual = function (other) {
          other = getModularInstance(other);
          if (!(other instanceof QueryImpl)) {
              return false;
          }
          var sameRepo = this._repo === other._repo;
          var samePath = pathEquals(this._path, other._path);
          var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
          return sameRepo && samePath && sameQueryIdentifier;
      };
      QueryImpl.prototype.toJSON = function () {
          return this.toString();
      };
      QueryImpl.prototype.toString = function () {
          return this._repo.toString() + pathToUrlEncodedString(this._path);
      };
      return QueryImpl;
  }());
  /**
   * Validates that no other order by call has been made
   */
  function validateNoPreviousOrderByCall(query, fnName) {
      if (query._orderByCalled === true) {
          throw new Error(fnName + ": You can't combine multiple orderBy calls.");
      }
  }
  /**
   * Validates start/end values for queries.
   */
  function validateQueryEndpoints(params) {
      var startNode = null;
      var endNode = null;
      if (params.hasStart()) {
          startNode = params.getIndexStartValue();
      }
      if (params.hasEnd()) {
          endNode = params.getIndexEndValue();
      }
      if (params.getIndex() === KEY_INDEX) {
          var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
              'startAt(), endAt(), or equalTo().';
          var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +
              'endAt(), endBefore(), or equalTo() must be a string.';
          if (params.hasStart()) {
              var startName = params.getIndexStartName();
              if (startName !== MIN_NAME) {
                  throw new Error(tooManyArgsError);
              }
              else if (typeof startNode !== 'string') {
                  throw new Error(wrongArgTypeError);
              }
          }
          if (params.hasEnd()) {
              var endName = params.getIndexEndName();
              if (endName !== MAX_NAME) {
                  throw new Error(tooManyArgsError);
              }
              else if (typeof endNode !== 'string') {
                  throw new Error(wrongArgTypeError);
              }
          }
      }
      else if (params.getIndex() === PRIORITY_INDEX) {
          if ((startNode != null && !isValidPriority(startNode)) ||
              (endNode != null && !isValidPriority(endNode))) {
              throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                  'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +
                  '(null, a number, or a string).');
          }
      }
      else {
          assert(params.getIndex() instanceof PathIndex ||
              params.getIndex() === VALUE_INDEX, 'unknown index type.');
          if ((startNode != null && typeof startNode === 'object') ||
              (endNode != null && typeof endNode === 'object')) {
              throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +
                  'equalTo() cannot be an object.');
          }
      }
  }
  /**
   * Validates that limit* has been called with the correct combination of parameters
   */
  function validateLimit(params) {
      if (params.hasStart() &&
          params.hasEnd() &&
          params.hasLimit() &&
          !params.hasAnchoredLimit()) {
          throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use " +
              'limitToFirst() or limitToLast() instead.');
      }
  }
  /**
   * @internal
   */
  var ReferenceImpl = /** @class */ (function (_super) {
      __extends$4(ReferenceImpl, _super);
      /** @hideconstructor */
      function ReferenceImpl(repo, path) {
          return _super.call(this, repo, path, new QueryParams(), false) || this;
      }
      Object.defineProperty(ReferenceImpl.prototype, "parent", {
          get: function () {
              var parentPath = pathParent(this._path);
              return parentPath === null
                  ? null
                  : new ReferenceImpl(this._repo, parentPath);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ReferenceImpl.prototype, "root", {
          get: function () {
              var ref = this;
              while (ref.parent !== null) {
                  ref = ref.parent;
              }
              return ref;
          },
          enumerable: false,
          configurable: true
      });
      return ReferenceImpl;
  }(QueryImpl));
  /**
   * A `DataSnapshot` contains data from a Database location.
   *
   * Any time you read data from the Database, you receive the data as a
   * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
   * with `on()` or `once()`. You can extract the contents of the snapshot as a
   * JavaScript object by calling the `val()` method. Alternatively, you can
   * traverse into the snapshot by calling `child()` to return child snapshots
   * (which you could then call `val()` on).
   *
   * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
   * a Database location. It cannot be modified and will never change (to modify
   * data, you always call the `set()` method on a `Reference` directly).
   */
  var DataSnapshot$1 = /** @class */ (function () {
      /**
       * @param _node - A SnapshotNode to wrap.
       * @param ref - The location this snapshot came from.
       * @param _index - The iteration order for this snapshot
       * @hideconstructor
       */
      function DataSnapshot(_node, 
      /**
       * The location of this DataSnapshot.
       */
      ref, _index) {
          this._node = _node;
          this.ref = ref;
          this._index = _index;
      }
      Object.defineProperty(DataSnapshot.prototype, "priority", {
          /**
           * Gets the priority value of the data in this `DataSnapshot`.
           *
           * Applications need not use priority but can order collections by
           * ordinary properties (see
           * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
           * ).
           */
          get: function () {
              // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
              return this._node.getPriority().val();
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(DataSnapshot.prototype, "key", {
          /**
           * The key (last part of the path) of the location of this `DataSnapshot`.
           *
           * The last token in a Database location is considered its key. For example,
           * "ada" is the key for the /users/ada/ node. Accessing the key on any
           * `DataSnapshot` will return the key for the location that generated it.
           * However, accessing the key on the root URL of a Database will return
           * `null`.
           */
          get: function () {
              return this.ref.key;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(DataSnapshot.prototype, "size", {
          /** Returns the number of child properties of this `DataSnapshot`. */
          get: function () {
              return this._node.numChildren();
          },
          enumerable: false,
          configurable: true
      });
      /**
       * Gets another `DataSnapshot` for the location at the specified relative path.
       *
       * Passing a relative path to the `child()` method of a DataSnapshot returns
       * another `DataSnapshot` for the location at the specified relative path. The
       * relative path can either be a simple child name (for example, "ada") or a
       * deeper, slash-separated path (for example, "ada/name/first"). If the child
       * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
       * whose value is `null`) is returned.
       *
       * @param path - A relative path to the location of child data.
       */
      DataSnapshot.prototype.child = function (path) {
          var childPath = new Path(path);
          var childRef = child(this.ref, path);
          return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
      };
      /**
       * Returns true if this `DataSnapshot` contains any data. It is slightly more
       * efficient than using `snapshot.val() !== null`.
       */
      DataSnapshot.prototype.exists = function () {
          return !this._node.isEmpty();
      };
      /**
       * Exports the entire contents of the DataSnapshot as a JavaScript object.
       *
       * The `exportVal()` method is similar to `val()`, except priority information
       * is included (if available), making it suitable for backing up your data.
       *
       * @returns The DataSnapshot's contents as a JavaScript value (Object,
       *   Array, string, number, boolean, or `null`).
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      DataSnapshot.prototype.exportVal = function () {
          return this._node.val(true);
      };
      /**
       * Enumerates the top-level children in the `DataSnapshot`.
       *
       * Because of the way JavaScript objects work, the ordering of data in the
       * JavaScript object returned by `val()` is not guaranteed to match the
       * ordering on the server nor the ordering of `onChildAdded()` events. That is
       * where `forEach()` comes in handy. It guarantees the children of a
       * `DataSnapshot` will be iterated in their query order.
       *
       * If no explicit `orderBy*()` method is used, results are returned
       * ordered by key (unless priorities are used, in which case, results are
       * returned by priority).
       *
       * @param action - A function that will be called for each child DataSnapshot.
       * The callback can return true to cancel further enumeration.
       * @returns true if enumeration was canceled due to your callback returning
       * true.
       */
      DataSnapshot.prototype.forEach = function (action) {
          var _this = this;
          if (this._node.isLeafNode()) {
              return false;
          }
          var childrenNode = this._node;
          // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
          return !!childrenNode.forEachChild(this._index, function (key, node) {
              return action(new DataSnapshot(node, child(_this.ref, key), PRIORITY_INDEX));
          });
      };
      /**
       * Returns true if the specified child path has (non-null) data.
       *
       * @param path - A relative path to the location of a potential child.
       * @returns `true` if data exists at the specified child path; else
       *  `false`.
       */
      DataSnapshot.prototype.hasChild = function (path) {
          var childPath = new Path(path);
          return !this._node.getChild(childPath).isEmpty();
      };
      /**
       * Returns whether or not the `DataSnapshot` has any non-`null` child
       * properties.
       *
       * You can use `hasChildren()` to determine if a `DataSnapshot` has any
       * children. If it does, you can enumerate them using `forEach()`. If it
       * doesn't, then either this snapshot contains a primitive value (which can be
       * retrieved with `val()`) or it is empty (in which case, `val()` will return
       * `null`).
       *
       * @returns true if this snapshot has any children; else false.
       */
      DataSnapshot.prototype.hasChildren = function () {
          if (this._node.isLeafNode()) {
              return false;
          }
          else {
              return !this._node.isEmpty();
          }
      };
      /**
       * Returns a JSON-serializable representation of this object.
       */
      DataSnapshot.prototype.toJSON = function () {
          return this.exportVal();
      };
      /**
       * Extracts a JavaScript value from a `DataSnapshot`.
       *
       * Depending on the data in a `DataSnapshot`, the `val()` method may return a
       * scalar type (string, number, or boolean), an array, or an object. It may
       * also return null, indicating that the `DataSnapshot` is empty (contains no
       * data).
       *
       * @returns The DataSnapshot's contents as a JavaScript value (Object,
       *   Array, string, number, boolean, or `null`).
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      DataSnapshot.prototype.val = function () {
          return this._node.val();
      };
      return DataSnapshot;
  }());
  /**
   *
   * Returns a `Reference` representing the location in the Database
   * corresponding to the provided path. If no path is provided, the `Reference`
   * will point to the root of the Database.
   *
   * @param db - The database instance to obtain a reference for.
   * @param path - Optional path representing the location the returned
   *   `Reference` will point. If not provided, the returned `Reference` will
   *   point to the root of the Database.
   * @returns If a path is provided, a `Reference`
   *   pointing to the provided path. Otherwise, a `Reference` pointing to the
   *   root of the Database.
   */
  function ref(db, path) {
      db = getModularInstance(db);
      db._checkNotDeleted('ref');
      return path !== undefined ? child(db._root, path) : db._root;
  }
  /**
   * Returns a `Reference` representing the location in the Database
   * corresponding to the provided Firebase URL.
   *
   * An exception is thrown if the URL is not a valid Firebase Database URL or it
   * has a different domain than the current `Database` instance.
   *
   * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored
   * and are not applied to the returned `Reference`.
   *
   * @param db - The database instance to obtain a reference for.
   * @param url - The Firebase URL at which the returned `Reference` will
   *   point.
   * @returns A `Reference` pointing to the provided
   *   Firebase URL.
   */
  function refFromURL(db, url) {
      db = getModularInstance(db);
      db._checkNotDeleted('refFromURL');
      var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
      validateUrl('refFromURL', parsedURL);
      var repoInfo = parsedURL.repoInfo;
      if (!db._repo.repoInfo_.isCustomHost() &&
          repoInfo.host !== db._repo.repoInfo_.host) {
          fatal('refFromURL' +
              ': Host name does not match the current database: ' +
              '(found ' +
              repoInfo.host +
              ' but expected ' +
              db._repo.repoInfo_.host +
              ')');
      }
      return ref(db, parsedURL.path.toString());
  }
  /**
   * Gets a `Reference` for the location at the specified relative path.
   *
   * The relative path can either be a simple child name (for example, "ada") or
   * a deeper slash-separated path (for example, "ada/name/first").
   *
   * @param parent - The parent location.
   * @param path - A relative path from this location to the desired child
   *   location.
   * @returns The specified child location.
   */
  function child(parent, path) {
      parent = getModularInstance(parent);
      if (pathGetFront(parent._path) === null) {
          validateRootPathString('child', 'path', path, false);
      }
      else {
          validatePathString('child', 'path', path, false);
      }
      return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
  }
  /**
   * Generates a new child location using a unique key and returns its
   * `Reference`.
   *
   * This is the most common pattern for adding data to a collection of items.
   *
   * If you provide a value to `push()`, the value is written to the
   * generated location. If you don't pass a value, nothing is written to the
   * database and the child remains empty (but you can use the `Reference`
   * elsewhere).
   *
   * The unique keys generated by `push()` are ordered by the current time, so the
   * resulting list of items is chronologically sorted. The keys are also
   * designed to be unguessable (they contain 72 random bits of entropy).
   *
   * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}
   * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}
   *
   * @param parent - The parent location.
   * @param value - Optional value to be written at the generated location.
   * @returns Combined `Promise` and `Reference`; resolves when write is complete,
   * but can be used immediately as the `Reference` to the child location.
   */
  function push(parent, value) {
      parent = getModularInstance(parent);
      validateWritablePath('push', parent._path);
      validateFirebaseDataArg('push', value, parent._path, true);
      var now = repoServerTime(parent._repo);
      var name = nextPushId(now);
      // push() returns a ThennableReference whose promise is fulfilled with a
      // regular Reference. We use child() to create handles to two different
      // references. The first is turned into a ThennableReference below by adding
      // then() and catch() methods and is used as the return value of push(). The
      // second remains a regular Reference and is used as the fulfilled value of
      // the first ThennableReference.
      var thennablePushRef = child(parent, name);
      var pushRef = child(parent, name);
      var promise;
      if (value != null) {
          promise = set(pushRef, value).then(function () { return pushRef; });
      }
      else {
          promise = Promise.resolve(pushRef);
      }
      thennablePushRef.then = promise.then.bind(promise);
      thennablePushRef.catch = promise.then.bind(promise, undefined);
      return thennablePushRef;
  }
  /**
   * Removes the data at this Database location.
   *
   * Any data at child locations will also be deleted.
   *
   * The effect of the remove will be visible immediately and the corresponding
   * event 'value' will be triggered. Synchronization of the remove to the
   * Firebase servers will also be started, and the returned Promise will resolve
   * when complete. If provided, the onComplete callback will be called
   * asynchronously after synchronization has finished.
   *
   * @param ref - The location to remove.
   * @returns Resolves when remove on server is complete.
   */
  function remove(ref) {
      validateWritablePath('remove', ref._path);
      return set(ref, null);
  }
  /**
   * Writes data to this Database location.
   *
   * This will overwrite any data at this location and all child locations.
   *
   * The effect of the write will be visible immediately, and the corresponding
   * events ("value", "child_added", etc.) will be triggered. Synchronization of
   * the data to the Firebase servers will also be started, and the returned
   * Promise will resolve when complete. If provided, the `onComplete` callback
   * will be called asynchronously after synchronization has finished.
   *
   * Passing `null` for the new value is equivalent to calling `remove()`; namely,
   * all data at this location and all child locations will be deleted.
   *
   * `set()` will remove any priority stored at this location, so if priority is
   * meant to be preserved, you need to use `setWithPriority()` instead.
   *
   * Note that modifying data with `set()` will cancel any pending transactions
   * at that location, so extreme care should be taken if mixing `set()` and
   * `transaction()` to modify the same data.
   *
   * A single `set()` will generate a single "value" event at the location where
   * the `set()` was performed.
   *
   * @param ref - The location to write to.
   * @param value - The value to be written (string, number, boolean, object,
   *   array, or null).
   * @returns Resolves when write to server is complete.
   */
  function set(ref, value) {
      ref = getModularInstance(ref);
      validateWritablePath('set', ref._path);
      validateFirebaseDataArg('set', value, ref._path, false);
      var deferred = new Deferred();
      repoSetWithPriority(ref._repo, ref._path, value, 
      /*priority=*/ null, deferred.wrapCallback(function () { }));
      return deferred.promise;
  }
  /**
   * Sets a priority for the data at this Database location.
   *
   * Applications need not use priority but can order collections by
   * ordinary properties (see
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
   * ).
   *
   * @param ref - The location to write to.
   * @param priority - The priority to be written (string, number, or null).
   * @returns Resolves when write to server is complete.
   */
  function setPriority(ref, priority) {
      ref = getModularInstance(ref);
      validateWritablePath('setPriority', ref._path);
      validatePriority('setPriority', priority, false);
      var deferred = new Deferred();
      repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(function () { }));
      return deferred.promise;
  }
  /**
   * Writes data the Database location. Like `set()` but also specifies the
   * priority for that data.
   *
   * Applications need not use priority but can order collections by
   * ordinary properties (see
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
   * ).
   *
   * @param ref - The location to write to.
   * @param value - The value to be written (string, number, boolean, object,
   *   array, or null).
   * @param priority - The priority to be written (string, number, or null).
   * @returns Resolves when write to server is complete.
   */
  function setWithPriority(ref, value, priority) {
      validateWritablePath('setWithPriority', ref._path);
      validateFirebaseDataArg('setWithPriority', value, ref._path, false);
      validatePriority('setWithPriority', priority, false);
      if (ref.key === '.length' || ref.key === '.keys') {
          throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';
      }
      var deferred = new Deferred();
      repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(function () { }));
      return deferred.promise;
  }
  /**
   * Writes multiple values to the Database at once.
   *
   * The `values` argument contains multiple property-value pairs that will be
   * written to the Database together. Each child property can either be a simple
   * property (for example, "name") or a relative path (for example,
   * "name/first") from the current location to the data to update.
   *
   * As opposed to the `set()` method, `update()` can be use to selectively update
   * only the referenced properties at the current location (instead of replacing
   * all the child properties at the current location).
   *
   * The effect of the write will be visible immediately, and the corresponding
   * events ('value', 'child_added', etc.) will be triggered. Synchronization of
   * the data to the Firebase servers will also be started, and the returned
   * Promise will resolve when complete. If provided, the `onComplete` callback
   * will be called asynchronously after synchronization has finished.
   *
   * A single `update()` will generate a single "value" event at the location
   * where the `update()` was performed, regardless of how many children were
   * modified.
   *
   * Note that modifying data with `update()` will cancel any pending
   * transactions at that location, so extreme care should be taken if mixing
   * `update()` and `transaction()` to modify the same data.
   *
   * Passing `null` to `update()` will remove the data at this location.
   *
   * See
   * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
   *
   * @param ref - The location to write to.
   * @param values - Object containing multiple values.
   * @returns Resolves when update on server is complete.
   */
  function update(ref, values) {
      validateFirebaseMergeDataArg('update', values, ref._path, false);
      var deferred = new Deferred();
      repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(function () { }));
      return deferred.promise;
  }
  /**
   * Gets the most up-to-date result for this query.
   *
   * @param query - The query to run.
   * @returns A promise which resolves to the resulting DataSnapshot if a value is
   * available, or rejects if the client is unable to return a value (e.g., if the
   * server is unreachable and there is nothing cached).
   */
  function get(query) {
      query = getModularInstance(query);
      return repoGetValue(query._repo, query).then(function (node) {
          return new DataSnapshot$1(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());
      });
  }
  /**
   * Represents registration for 'value' events.
   */
  var ValueEventRegistration = /** @class */ (function () {
      function ValueEventRegistration(callbackContext) {
          this.callbackContext = callbackContext;
      }
      ValueEventRegistration.prototype.respondsTo = function (eventType) {
          return eventType === 'value';
      };
      ValueEventRegistration.prototype.createEvent = function (change, query) {
          var index = query._queryParams.getIndex();
          return new DataEvent('value', this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));
      };
      ValueEventRegistration.prototype.getEventRunner = function (eventData) {
          var _this = this;
          if (eventData.getEventType() === 'cancel') {
              return function () {
                  return _this.callbackContext.onCancel(eventData.error);
              };
          }
          else {
              return function () {
                  return _this.callbackContext.onValue(eventData.snapshot, null);
              };
          }
      };
      ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
          if (this.callbackContext.hasCancelCallback) {
              return new CancelEvent(this, error, path);
          }
          else {
              return null;
          }
      };
      ValueEventRegistration.prototype.matches = function (other) {
          if (!(other instanceof ValueEventRegistration)) {
              return false;
          }
          else if (!other.callbackContext || !this.callbackContext) {
              // If no callback specified, we consider it to match any callback.
              return true;
          }
          else {
              return other.callbackContext.matches(this.callbackContext);
          }
      };
      ValueEventRegistration.prototype.hasAnyCallback = function () {
          return this.callbackContext !== null;
      };
      return ValueEventRegistration;
  }());
  /**
   * Represents the registration of a child_x event.
   */
  var ChildEventRegistration = /** @class */ (function () {
      function ChildEventRegistration(eventType, callbackContext) {
          this.eventType = eventType;
          this.callbackContext = callbackContext;
      }
      ChildEventRegistration.prototype.respondsTo = function (eventType) {
          var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
          eventToCheck =
              eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
          return this.eventType === eventToCheck;
      };
      ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
          if (this.callbackContext.hasCancelCallback) {
              return new CancelEvent(this, error, path);
          }
          else {
              return null;
          }
      };
      ChildEventRegistration.prototype.createEvent = function (change, query) {
          assert(change.childName != null, 'Child events should have a childName.');
          var childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);
          var index = query._queryParams.getIndex();
          return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);
      };
      ChildEventRegistration.prototype.getEventRunner = function (eventData) {
          var _this = this;
          if (eventData.getEventType() === 'cancel') {
              return function () {
                  return _this.callbackContext.onCancel(eventData.error);
              };
          }
          else {
              return function () {
                  return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
              };
          }
      };
      ChildEventRegistration.prototype.matches = function (other) {
          if (other instanceof ChildEventRegistration) {
              return (this.eventType === other.eventType &&
                  (!this.callbackContext ||
                      !other.callbackContext ||
                      this.callbackContext.matches(other.callbackContext)));
          }
          return false;
      };
      ChildEventRegistration.prototype.hasAnyCallback = function () {
          return !!this.callbackContext;
      };
      return ChildEventRegistration;
  }());
  function addEventListener$1(query, eventType, callback, cancelCallbackOrListenOptions, options) {
      var cancelCallback;
      if (typeof cancelCallbackOrListenOptions === 'object') {
          cancelCallback = undefined;
          options = cancelCallbackOrListenOptions;
      }
      if (typeof cancelCallbackOrListenOptions === 'function') {
          cancelCallback = cancelCallbackOrListenOptions;
      }
      if (options && options.onlyOnce) {
          var userCallback_1 = callback;
          var onceCallback = function (dataSnapshot, previousChildName) {
              repoRemoveEventCallbackForQuery(query._repo, query, container);
              userCallback_1(dataSnapshot, previousChildName);
          };
          onceCallback.userCallback = callback.userCallback;
          onceCallback.context = callback.context;
          callback = onceCallback;
      }
      var callbackContext = new CallbackContext(callback, cancelCallback || undefined);
      var container = eventType === 'value'
          ? new ValueEventRegistration(callbackContext)
          : new ChildEventRegistration(eventType, callbackContext);
      repoAddEventCallbackForQuery(query._repo, query, container);
      return function () { return repoRemoveEventCallbackForQuery(query._repo, query, container); };
  }
  function onValue(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener$1(query, 'value', callback, cancelCallbackOrListenOptions, options);
  }
  function onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener$1(query, 'child_added', callback, cancelCallbackOrListenOptions, options);
  }
  function onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener$1(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);
  }
  function onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener$1(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);
  }
  function onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener$1(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);
  }
  /**
   * Detaches a callback previously attached with `on()`.
   *
   * Detach a callback previously attached with `on()`. Note that if `on()` was
   * called multiple times with the same eventType and callback, the callback
   * will be called multiple times for each event, and `off()` must be called
   * multiple times to remove the callback. Calling `off()` on a parent listener
   * will not automatically remove listeners registered on child nodes, `off()`
   * must also be called on any child listeners to remove the callback.
   *
   * If a callback is not specified, all callbacks for the specified eventType
   * will be removed. Similarly, if no eventType is specified, all callbacks
   * for the `Reference` will be removed.
   *
   * Individual listeners can also be removed by invoking their unsubscribe
   * callbacks.
   *
   * @param query - The query that the listener was registered with.
   * @param eventType - One of the following strings: "value", "child_added",
   * "child_changed", "child_removed", or "child_moved." If omitted, all callbacks
   * for the `Reference` will be removed.
   * @param callback - The callback function that was passed to `on()` or
   * `undefined` to remove all callbacks.
   */
  function off(query, eventType, callback) {
      var container = null;
      var expCallback = callback ? new CallbackContext(callback) : null;
      if (eventType === 'value') {
          container = new ValueEventRegistration(expCallback);
      }
      else if (eventType) {
          container = new ChildEventRegistration(eventType, expCallback);
      }
      repoRemoveEventCallbackForQuery(query._repo, query, container);
  }
  /**
   * A `QueryConstraint` is used to narrow the set of documents returned by a
   * Database query. `QueryConstraint`s are created by invoking {@link endAt},
   * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link
   * limitToFirst}, {@link limitToLast}, {@link orderByChild},
   * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,
   * {@link orderByValue}  or {@link equalTo} and
   * can then be passed to {@link query} to create a new query instance that
   * also contains this `QueryConstraint`.
   */
  var QueryConstraint = /** @class */ (function () {
      function QueryConstraint() {
      }
      return QueryConstraint;
  }());
  var QueryEndAtConstraint = /** @class */ (function (_super) {
      __extends$4(QueryEndAtConstraint, _super);
      function QueryEndAtConstraint(_value, _key) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          _this._key = _key;
          return _this;
      }
      QueryEndAtConstraint.prototype._apply = function (query) {
          validateFirebaseDataArg('endAt', this._value, query._path, true);
          var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);
          validateLimit(newParams);
          validateQueryEndpoints(newParams);
          if (query._queryParams.hasEnd()) {
              throw new Error('endAt: Starting point was already set (by another call to endAt, ' +
                  'endBefore or equalTo).');
          }
          return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
      };
      return QueryEndAtConstraint;
  }(QueryConstraint));
  /**
   * Creates a `QueryConstraint` with the specified ending point.
   *
   * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
   * allows you to choose arbitrary starting and ending points for your queries.
   *
   * The ending point is inclusive, so children with exactly the specified value
   * will be included in the query. The optional key argument can be used to
   * further limit the range of the query. If it is specified, then children that
   * have exactly the specified value must also have a key name less than or equal
   * to the specified key.
   *
   * You can read more about `endAt()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
   *
   * @param value - The value to end at. The argument type depends on which
   * `orderBy*()` function was used in this query. Specify a value that matches
   * the `orderBy*()` type. When used in combination with `orderByKey()`, the
   * value must be a string.
   * @param key - The child key to end at, among the children with the previously
   * specified priority. This argument is only allowed if ordering by child,
   * value, or priority.
   */
  function endAt(value, key) {
      validateKey('endAt', 'key', key, true);
      return new QueryEndAtConstraint(value, key);
  }
  var QueryEndBeforeConstraint = /** @class */ (function (_super) {
      __extends$4(QueryEndBeforeConstraint, _super);
      function QueryEndBeforeConstraint(_value, _key) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          _this._key = _key;
          return _this;
      }
      QueryEndBeforeConstraint.prototype._apply = function (query) {
          validateFirebaseDataArg('endBefore', this._value, query._path, false);
          var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);
          validateLimit(newParams);
          validateQueryEndpoints(newParams);
          if (query._queryParams.hasEnd()) {
              throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +
                  'endBefore or equalTo).');
          }
          return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
      };
      return QueryEndBeforeConstraint;
  }(QueryConstraint));
  /**
   * Creates a `QueryConstraint` with the specified ending point (exclusive).
   *
   * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
   * allows you to choose arbitrary starting and ending points for your queries.
   *
   * The ending point is exclusive. If only a value is provided, children
   * with a value less than the specified value will be included in the query.
   * If a key is specified, then children must have a value lesss than or equal
   * to the specified value and a a key name less than the specified key.
   *
   * @param value - The value to end before. The argument type depends on which
   * `orderBy*()` function was used in this query. Specify a value that matches
   * the `orderBy*()` type. When used in combination with `orderByKey()`, the
   * value must be a string.
   * @param key - The child key to end before, among the children with the
   * previously specified priority. This argument is only allowed if ordering by
   * child, value, or priority.
   */
  function endBefore(value, key) {
      validateKey('endBefore', 'key', key, true);
      return new QueryEndBeforeConstraint(value, key);
  }
  var QueryStartAtConstraint = /** @class */ (function (_super) {
      __extends$4(QueryStartAtConstraint, _super);
      function QueryStartAtConstraint(_value, _key) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          _this._key = _key;
          return _this;
      }
      QueryStartAtConstraint.prototype._apply = function (query) {
          validateFirebaseDataArg('startAt', this._value, query._path, true);
          var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);
          validateLimit(newParams);
          validateQueryEndpoints(newParams);
          if (query._queryParams.hasStart()) {
              throw new Error('startAt: Starting point was already set (by another call to startAt, ' +
                  'startBefore or equalTo).');
          }
          return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
      };
      return QueryStartAtConstraint;
  }(QueryConstraint));
  /**
   * Creates a `QueryConstraint` with the specified starting point.
   *
   * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
   * allows you to choose arbitrary starting and ending points for your queries.
   *
   * The starting point is inclusive, so children with exactly the specified value
   * will be included in the query. The optional key argument can be used to
   * further limit the range of the query. If it is specified, then children that
   * have exactly the specified value must also have a key name greater than or
   * equal to the specified key.
   *
   * You can read more about `startAt()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
   *
   * @param value - The value to start at. The argument type depends on which
   * `orderBy*()` function was used in this query. Specify a value that matches
   * the `orderBy*()` type. When used in combination with `orderByKey()`, the
   * value must be a string.
   * @param key - The child key to start at. This argument is only allowed if
   * ordering by child, value, or priority.
   */
  function startAt(value, key) {
      if (value === void 0) { value = null; }
      validateKey('startAt', 'key', key, true);
      return new QueryStartAtConstraint(value, key);
  }
  var QueryStartAfterConstraint = /** @class */ (function (_super) {
      __extends$4(QueryStartAfterConstraint, _super);
      function QueryStartAfterConstraint(_value, _key) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          _this._key = _key;
          return _this;
      }
      QueryStartAfterConstraint.prototype._apply = function (query) {
          validateFirebaseDataArg('startAfter', this._value, query._path, false);
          var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);
          validateLimit(newParams);
          validateQueryEndpoints(newParams);
          if (query._queryParams.hasStart()) {
              throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +
                  'startAfter, or equalTo).');
          }
          return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
      };
      return QueryStartAfterConstraint;
  }(QueryConstraint));
  /**
   * Creates a `QueryConstraint` with the specified starting point (exclusive).
   *
   * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
   * allows you to choose arbitrary starting and ending points for your queries.
   *
   * The starting point is exclusive. If only a value is provided, children
   * with a value greater than the specified value will be included in the query.
   * If a key is specified, then children must have a value greater than or equal
   * to the specified value and a a key name greater than the specified key.
   *
   * @param value - The value to start after. The argument type depends on which
   * `orderBy*()` function was used in this query. Specify a value that matches
   * the `orderBy*()` type. When used in combination with `orderByKey()`, the
   * value must be a string.
   * @param key - The child key to start after. This argument is only allowed if
   * ordering by child, value, or priority.
   */
  function startAfter(value, key) {
      validateKey('startAfter', 'key', key, true);
      return new QueryStartAfterConstraint(value, key);
  }
  var QueryLimitToFirstConstraint = /** @class */ (function (_super) {
      __extends$4(QueryLimitToFirstConstraint, _super);
      function QueryLimitToFirstConstraint(_limit) {
          var _this = _super.call(this) || this;
          _this._limit = _limit;
          return _this;
      }
      QueryLimitToFirstConstraint.prototype._apply = function (query) {
          if (query._queryParams.hasLimit()) {
              throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +
                  'or limitToLast).');
          }
          return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);
      };
      return QueryLimitToFirstConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that if limited to the first specific number
   * of children.
   *
   * The `limitToFirst()` method is used to set a maximum number of children to be
   * synced for a given callback. If we set a limit of 100, we will initially only
   * receive up to 100 `child_added` events. If we have fewer than 100 messages
   * stored in our Database, a `child_added` event will fire for each message.
   * However, if we have over 100 messages, we will only receive a `child_added`
   * event for the first 100 ordered messages. As items change, we will receive
   * `child_removed` events for each item that drops out of the active list so
   * that the total number stays at 100.
   *
   * You can read more about `limitToFirst()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
   *
   * @param limit - The maximum number of nodes to include in this query.
   */
  function limitToFirst(limit) {
      if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
          throw new Error('limitToFirst: First argument must be a positive integer.');
      }
      return new QueryLimitToFirstConstraint(limit);
  }
  var QueryLimitToLastConstraint = /** @class */ (function (_super) {
      __extends$4(QueryLimitToLastConstraint, _super);
      function QueryLimitToLastConstraint(_limit) {
          var _this = _super.call(this) || this;
          _this._limit = _limit;
          return _this;
      }
      QueryLimitToLastConstraint.prototype._apply = function (query) {
          if (query._queryParams.hasLimit()) {
              throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +
                  'or limitToLast).');
          }
          return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);
      };
      return QueryLimitToLastConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that is limited to return only the last
   * specified number of children.
   *
   * The `limitToLast()` method is used to set a maximum number of children to be
   * synced for a given callback. If we set a limit of 100, we will initially only
   * receive up to 100 `child_added` events. If we have fewer than 100 messages
   * stored in our Database, a `child_added` event will fire for each message.
   * However, if we have over 100 messages, we will only receive a `child_added`
   * event for the last 100 ordered messages. As items change, we will receive
   * `child_removed` events for each item that drops out of the active list so
   * that the total number stays at 100.
   *
   * You can read more about `limitToLast()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
   *
   * @param limit - The maximum number of nodes to include in this query.
   */
  function limitToLast(limit) {
      if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
          throw new Error('limitToLast: First argument must be a positive integer.');
      }
      return new QueryLimitToLastConstraint(limit);
  }
  var QueryOrderByChildConstraint = /** @class */ (function (_super) {
      __extends$4(QueryOrderByChildConstraint, _super);
      function QueryOrderByChildConstraint(_path) {
          var _this = _super.call(this) || this;
          _this._path = _path;
          return _this;
      }
      QueryOrderByChildConstraint.prototype._apply = function (query) {
          validateNoPreviousOrderByCall(query, 'orderByChild');
          var parsedPath = new Path(this._path);
          if (pathIsEmpty(parsedPath)) {
              throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');
          }
          var index = new PathIndex(parsedPath);
          var newParams = queryParamsOrderBy(query._queryParams, index);
          validateQueryEndpoints(newParams);
          return new QueryImpl(query._repo, query._path, newParams, 
          /*orderByCalled=*/ true);
      };
      return QueryOrderByChildConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that orders by the specified child key.
   *
   * Queries can only order by one key at a time. Calling `orderByChild()`
   * multiple times on the same query is an error.
   *
   * Firebase queries allow you to order your data by any child key on the fly.
   * However, if you know in advance what your indexes will be, you can define
   * them via the .indexOn rule in your Security Rules for better performance. See
   * the{@link https://firebase.google.com/docs/database/security/indexing-data}
   * rule for more information.
   *
   * You can read more about `orderByChild()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
   *
   * @param path - The path to order by.
   */
  function orderByChild(path) {
      if (path === '$key') {
          throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
      }
      else if (path === '$priority') {
          throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
      }
      else if (path === '$value') {
          throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
      }
      validatePathString('orderByChild', 'path', path, false);
      return new QueryOrderByChildConstraint(path);
  }
  var QueryOrderByKeyConstraint = /** @class */ (function (_super) {
      __extends$4(QueryOrderByKeyConstraint, _super);
      function QueryOrderByKeyConstraint() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      QueryOrderByKeyConstraint.prototype._apply = function (query) {
          validateNoPreviousOrderByCall(query, 'orderByKey');
          var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);
          validateQueryEndpoints(newParams);
          return new QueryImpl(query._repo, query._path, newParams, 
          /*orderByCalled=*/ true);
      };
      return QueryOrderByKeyConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that orders by the key.
   *
   * Sorts the results of a query by their (ascending) key values.
   *
   * You can read more about `orderByKey()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
   */
  function orderByKey() {
      return new QueryOrderByKeyConstraint();
  }
  var QueryOrderByPriorityConstraint = /** @class */ (function (_super) {
      __extends$4(QueryOrderByPriorityConstraint, _super);
      function QueryOrderByPriorityConstraint() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      QueryOrderByPriorityConstraint.prototype._apply = function (query) {
          validateNoPreviousOrderByCall(query, 'orderByPriority');
          var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);
          validateQueryEndpoints(newParams);
          return new QueryImpl(query._repo, query._path, newParams, 
          /*orderByCalled=*/ true);
      };
      return QueryOrderByPriorityConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that orders by priority.
   *
   * Applications need not use priority but can order collections by
   * ordinary properties (see
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}
   * for alternatives to priority.
   */
  function orderByPriority() {
      return new QueryOrderByPriorityConstraint();
  }
  var QueryOrderByValueConstraint = /** @class */ (function (_super) {
      __extends$4(QueryOrderByValueConstraint, _super);
      function QueryOrderByValueConstraint() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      QueryOrderByValueConstraint.prototype._apply = function (query) {
          validateNoPreviousOrderByCall(query, 'orderByValue');
          var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);
          validateQueryEndpoints(newParams);
          return new QueryImpl(query._repo, query._path, newParams, 
          /*orderByCalled=*/ true);
      };
      return QueryOrderByValueConstraint;
  }(QueryConstraint));
  /**
   * Creates a new `QueryConstraint` that orders by value.
   *
   * If the children of a query are all scalar values (string, number, or
   * boolean), you can order the results by their (ascending) values.
   *
   * You can read more about `orderByValue()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
   */
  function orderByValue() {
      return new QueryOrderByValueConstraint();
  }
  var QueryEqualToValueConstraint = /** @class */ (function (_super) {
      __extends$4(QueryEqualToValueConstraint, _super);
      function QueryEqualToValueConstraint(_value, _key) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          _this._key = _key;
          return _this;
      }
      QueryEqualToValueConstraint.prototype._apply = function (query) {
          validateFirebaseDataArg('equalTo', this._value, query._path, false);
          if (query._queryParams.hasStart()) {
              throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +
                  'equalTo).');
          }
          if (query._queryParams.hasEnd()) {
              throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +
                  'equalTo).');
          }
          return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));
      };
      return QueryEqualToValueConstraint;
  }(QueryConstraint));
  /**
   * Creates a `QueryConstraint` that includes children that match the specified
   * value.
   *
   * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
   * allows you to choose arbitrary starting and ending points for your queries.
   *
   * The optional key argument can be used to further limit the range of the
   * query. If it is specified, then children that have exactly the specified
   * value must also have exactly the specified key as their key name. This can be
   * used to filter result sets with many matches for the same value.
   *
   * You can read more about `equalTo()` in
   * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
   *
   * @param value - The value to match for. The argument type depends on which
   * `orderBy*()` function was used in this query. Specify a value that matches
   * the `orderBy*()` type. When used in combination with `orderByKey()`, the
   * value must be a string.
   * @param key - The child key to start at, among the children with the
   * previously specified priority. This argument is only allowed if ordering by
   * child, value, or priority.
   */
  function equalTo(value, key) {
      validateKey('equalTo', 'key', key, true);
      return new QueryEqualToValueConstraint(value, key);
  }
  /**
   * Creates a new immutable instance of `Query` that is extended to also include
   * additional query constraints.
   *
   * @param query - The Query instance to use as a base for the new constraints.
   * @param queryConstraints - The list of `QueryConstraint`s to apply.
   * @throws if any of the provided query constraints cannot be combined with the
   * existing or new constraints.
   */
  function query(query) {
      var e_1, _a;
      var queryConstraints = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          queryConstraints[_i - 1] = arguments[_i];
      }
      var queryImpl = getModularInstance(query);
      try {
          for (var queryConstraints_1 = __values$4(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {
              var constraint = queryConstraints_1_1.value;
              queryImpl = constraint._apply(queryImpl);
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return)) _a.call(queryConstraints_1);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return queryImpl;
  }
  /**
   * Define reference constructor in various modules
   *
   * We are doing this here to avoid several circular
   * dependency issues
   */
  syncPointSetReferenceConstructor(ReferenceImpl);
  syncTreeSetReferenceConstructor(ReferenceImpl);

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This variable is also defined in the firebase node.js admin SDK. Before
   * modifying this definition, consult the definition in:
   *
   * https://github.com/firebase/firebase-admin-node
   *
   * and make sure the two are consistent.
   */
  var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
  /**
   * Creates and caches Repo instances.
   */
  var repos = {};
  /**
   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
   */
  var useRestClient = false;
  /**
   * Update an existing repo in place to point to a new host/port.
   */
  function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
      repo.repoInfo_ = new RepoInfo(host + ":" + port, 
      /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
      if (tokenProvider) {
          repo.authTokenProvider_ = tokenProvider;
      }
  }
  /**
   * This function should only ever be called to CREATE a new database instance.
   * @internal
   */
  function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
      var dbUrl = url || app.options.databaseURL;
      if (dbUrl === undefined) {
          if (!app.options.projectId) {
              fatal("Can't determine Firebase Database URL. Be sure to include " +
                  ' a Project ID when calling firebase.initializeApp().');
          }
          log('Using default host for project ', app.options.projectId);
          dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
      }
      var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
      var repoInfo = parsedUrl.repoInfo;
      var isEmulator;
      var dbEmulatorHost = undefined;
      if (typeof process !== 'undefined') {
          dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
      }
      if (dbEmulatorHost) {
          isEmulator = true;
          dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
          parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
          repoInfo = parsedUrl.repoInfo;
      }
      else {
          isEmulator = !parsedUrl.repoInfo.secure;
      }
      var authTokenProvider = nodeAdmin && isEmulator
          ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)
          : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
      validateUrl('Invalid Firebase Database URL', parsedUrl);
      if (!pathIsEmpty(parsedUrl.path)) {
          fatal('Database URL must point to the root of a Firebase Database ' +
              '(not including a child path).');
      }
      var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
      return new Database$1(repo, app);
  }
  /**
   * Remove the repo and make sure it is disconnected.
   *
   */
  function repoManagerDeleteRepo(repo, appName) {
      var appRepos = repos[appName];
      // This should never happen...
      if (!appRepos || appRepos[repo.key] !== repo) {
          fatal("Database " + appName + "(" + repo.repoInfo_ + ") has already been deleted.");
      }
      repoInterrupt(repo);
      delete appRepos[repo.key];
  }
  /**
   * Ensures a repo doesn't already exist and then creates one using the
   * provided app.
   *
   * @param repoInfo - The metadata about the Repo
   * @returns The Repo object for the specified server / repoName.
   */
  function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
      var appRepos = repos[app.name];
      if (!appRepos) {
          appRepos = {};
          repos[app.name] = appRepos;
      }
      var repo = appRepos[repoInfo.toURLString()];
      if (repo) {
          fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
      }
      repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
      appRepos[repoInfo.toURLString()] = repo;
      return repo;
  }
  /**
   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
   */
  function repoManagerForceRestClient(forceRestClient) {
      useRestClient = forceRestClient;
  }
  /**
   * Class representing a Firebase Realtime Database.
   */
  var Database$1 = /** @class */ (function () {
      /** @hideconstructor */
      function Database(_repoInternal, 
      /** The FirebaseApp associated with this Realtime Database instance. */
      app) {
          this._repoInternal = _repoInternal;
          this.app = app;
          /** Represents a database instance. */
          this['type'] = 'database';
          /** Track if the instance has been used (root or repo accessed) */
          this._instanceStarted = false;
      }
      Object.defineProperty(Database.prototype, "_repo", {
          get: function () {
              if (!this._instanceStarted) {
                  repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
                  this._instanceStarted = true;
              }
              return this._repoInternal;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Database.prototype, "_root", {
          get: function () {
              if (!this._rootInternal) {
                  this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
              }
              return this._rootInternal;
          },
          enumerable: false,
          configurable: true
      });
      Database.prototype._delete = function () {
          if (this._rootInternal !== null) {
              repoManagerDeleteRepo(this._repo, this.app.name);
              this._repoInternal = null;
              this._rootInternal = null;
          }
          return Promise.resolve();
      };
      Database.prototype._checkNotDeleted = function (apiName) {
          if (this._rootInternal === null) {
              fatal('Cannot call ' + apiName + ' on a deleted database.');
          }
      };
      return Database;
  }());
  /**
   * Modify the provided instance to communicate with the Realtime Database
   * emulator.
   *
   * <p>Note: This method must be called before performing any other operation.
   *
   * @param db - The instance to modify.
   * @param host - The emulator host (ex: localhost)
   * @param port - The emulator port (ex: 8080)
   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
   */
  function connectDatabaseEmulator(db, host, port, options) {
      if (options === void 0) { options = {}; }
      db = getModularInstance(db);
      db._checkNotDeleted('useEmulator');
      if (db._instanceStarted) {
          fatal('Cannot call useEmulator() after instance has already been initialized.');
      }
      var repo = db._repoInternal;
      var tokenProvider = undefined;
      if (repo.repoInfo_.nodeAdmin) {
          if (options.mockUserToken) {
              fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
          }
          tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
      }
      else if (options.mockUserToken) {
          var token = typeof options.mockUserToken === 'string'
              ? options.mockUserToken
              : createMockUserToken(options.mockUserToken, db.app.options.projectId);
          tokenProvider = new EmulatorTokenProvider(token);
      }
      // Modify the repo to apply emulator settings
      repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
  }
  /**
   * Disconnects from the server (all Database operations will be completed
   * offline).
   *
   * The client automatically maintains a persistent connection to the Database
   * server, which will remain active indefinitely and reconnect when
   * disconnected. However, the `goOffline()` and `goOnline()` methods may be used
   * to control the client connection in cases where a persistent connection is
   * undesirable.
   *
   * While offline, the client will no longer receive data updates from the
   * Database. However, all Database operations performed locally will continue to
   * immediately fire events, allowing your application to continue behaving
   * normally. Additionally, each operation performed locally will automatically
   * be queued and retried upon reconnection to the Database server.
   *
   * To reconnect to the Database and begin receiving remote events, see
   * `goOnline()`.
   *
   * @param db - The instance to disconnect.
   */
  function goOffline(db) {
      db = getModularInstance(db);
      db._checkNotDeleted('goOffline');
      repoInterrupt(db._repo);
  }
  /**
   * Reconnects to the server and synchronizes the offline Database state
   * with the server state.
   *
   * This method should be used after disabling the active connection with
   * `goOffline()`. Once reconnected, the client will transmit the proper data
   * and fire the appropriate events so that your client "catches up"
   * automatically.
   *
   * @param db - The instance to reconnect.
   */
  function goOnline(db) {
      db = getModularInstance(db);
      db._checkNotDeleted('goOnline');
      repoResume(db._repo);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SERVER_TIMESTAMP = {
      '.sv': 'timestamp'
  };
  /**
   * Returns a placeholder value for auto-populating the current timestamp (time
   * since the Unix epoch, in milliseconds) as determined by the Firebase
   * servers.
   */
  function serverTimestamp() {
      return SERVER_TIMESTAMP;
  }
  /**
   * Returns a placeholder value that can be used to atomically increment the
   * current database value by the provided delta.
   *
   * @param delta - the amount to modify the current value atomically.
   * @returns A placeholder value for modifying data atomically server-side.
   */
  function increment(delta) {
      return {
          '.sv': {
              'increment': delta
          }
      };
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A type for the resolve value of Firebase.transaction.
   */
  var TransactionResult$1 = /** @class */ (function () {
      /** @hideconstructor */
      function TransactionResult(
      /** Whether the transaction was successfully committed. */
      committed, 
      /** The resulting data snapshot. */
      snapshot) {
          this.committed = committed;
          this.snapshot = snapshot;
      }
      /** Returns a JSON-serializable representation of this object. */
      TransactionResult.prototype.toJSON = function () {
          return { committed: this.committed, snapshot: this.snapshot.toJSON() };
      };
      return TransactionResult;
  }());
  /**
   * Atomically modifies the data at this location.
   *
   * Atomically modify the data at this location. Unlike a normal `set()`, which
   * just overwrites the data regardless of its previous value, `transaction()` is
   * used to modify the existing value to a new value, ensuring there are no
   * conflicts with other clients writing to the same location at the same time.
   *
   * To accomplish this, you pass `runTransaction()` an update function which is
   * used to transform the current value into a new value. If another client
   * writes to the location before your new value is successfully written, your
   * update function will be called again with the new current value, and the
   * write will be retried. This will happen repeatedly until your write succeeds
   * without conflict or you abort the transaction by not returning a value from
   * your update function.
   *
   * Note: Modifying data with `set()` will cancel any pending transactions at
   * that location, so extreme care should be taken if mixing `set()` and
   * `transaction()` to update the same data.
   *
   * Note: When using transactions with Security and Firebase Rules in place, be
   * aware that a client needs `.read` access in addition to `.write` access in
   * order to perform a transaction. This is because the client-side nature of
   * transactions requires the client to read the data in order to transactionally
   * update it.
   *
   * @param ref - The location to atomically modify.
   * @param transactionUpdate - A developer-supplied function which will be passed
   * the current data stored at this location (as a JavaScript object). The
   * function should return the new value it would like written (as a JavaScript
   * object). If `undefined` is returned (i.e. you return with no arguments) the
   * transaction will be aborted and the data at this location will not be
   * modified.
   * @param options - An options object to configure transactions.
   * @returns A Promise that can optionally be used instead of the onComplete
   * callback to handle success and failure.
   */
  function runTransaction(ref, 
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  transactionUpdate, options) {
      var _a;
      ref = getModularInstance(ref);
      validateWritablePath('Reference.transaction', ref._path);
      if (ref.key === '.length' || ref.key === '.keys') {
          throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');
      }
      var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;
      var deferred = new Deferred();
      var promiseComplete = function (error, committed, node) {
          var dataSnapshot = null;
          if (error) {
              deferred.reject(error);
          }
          else {
              dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);
              deferred.resolve(new TransactionResult$1(committed, dataSnapshot));
          }
      };
      // Add a watch to make sure we get server updates.
      var unwatcher = onValue(ref, function () { });
      repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
      return deferred.promise;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var OnDisconnect = /** @class */ (function () {
      function OnDisconnect(_delegate) {
          this._delegate = _delegate;
      }
      OnDisconnect.prototype.cancel = function (onComplete) {
          validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
          validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);
          var result = this._delegate.cancel();
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      OnDisconnect.prototype.remove = function (onComplete) {
          validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
          validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);
          var result = this._delegate.remove();
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      OnDisconnect.prototype.set = function (value, onComplete) {
          validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
          validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);
          var result = this._delegate.set(value);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
          validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
          validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);
          var result = this._delegate.setWithPriority(value, priority);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
          validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
          if (Array.isArray(objectToMerge)) {
              var newObjectToMerge = {};
              for (var i = 0; i < objectToMerge.length; ++i) {
                  newObjectToMerge['' + i] = objectToMerge[i];
              }
              objectToMerge = newObjectToMerge;
              warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                  'existing data, or an Object with integer keys if you really do want to only update some of the children.');
          }
          validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);
          var result = this._delegate.update(objectToMerge);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      return OnDisconnect;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TransactionResult = /** @class */ (function () {
      /**
       * A type for the resolve value of Firebase.transaction.
       */
      function TransactionResult(committed, snapshot) {
          this.committed = committed;
          this.snapshot = snapshot;
      }
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users
      TransactionResult.prototype.toJSON = function () {
          validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
          return { committed: this.committed, snapshot: this.snapshot.toJSON() };
      };
      return TransactionResult;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /* eslint-enable @typescript-eslint/no-explicit-any */
  /**
   * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
   * surfaces the public methods (val, forEach, etc.) we want to expose.
   */
  var DataSnapshot = /** @class */ (function () {
      function DataSnapshot(_database, _delegate) {
          this._database = _database;
          this._delegate = _delegate;
      }
      /**
       * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
       * empty.
       *
       * @returns JSON representation of the DataSnapshot contents, or null if empty.
       */
      DataSnapshot.prototype.val = function () {
          validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
          return this._delegate.val();
      };
      /**
       * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
       * the entire node contents.
       * @returns JSON representation of the DataSnapshot contents, or null if empty.
       */
      DataSnapshot.prototype.exportVal = function () {
          validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
          return this._delegate.exportVal();
      };
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users
      DataSnapshot.prototype.toJSON = function () {
          // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
          validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
          return this._delegate.toJSON();
      };
      /**
       * Returns whether the snapshot contains a non-null value.
       *
       * @returns Whether the snapshot contains a non-null value, or is empty.
       */
      DataSnapshot.prototype.exists = function () {
          validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
          return this._delegate.exists();
      };
      /**
       * Returns a DataSnapshot of the specified child node's contents.
       *
       * @param path - Path to a child.
       * @returns DataSnapshot for child node.
       */
      DataSnapshot.prototype.child = function (path) {
          validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
          // Ensure the childPath is a string (can be a number)
          path = String(path);
          validatePathString('DataSnapshot.child', 'path', path, false);
          return new DataSnapshot(this._database, this._delegate.child(path));
      };
      /**
       * Returns whether the snapshot contains a child at the specified path.
       *
       * @param path - Path to a child.
       * @returns Whether the child exists.
       */
      DataSnapshot.prototype.hasChild = function (path) {
          validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
          validatePathString('DataSnapshot.hasChild', 'path', path, false);
          return this._delegate.hasChild(path);
      };
      /**
       * Returns the priority of the object, or null if no priority was set.
       *
       * @returns The priority.
       */
      DataSnapshot.prototype.getPriority = function () {
          validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
          return this._delegate.priority;
      };
      /**
       * Iterates through child nodes and calls the specified action for each one.
       *
       * @param action - Callback function to be called
       * for each child.
       * @returns True if forEach was canceled by action returning true for
       * one of the child nodes.
       */
      DataSnapshot.prototype.forEach = function (action) {
          var _this = this;
          validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
          validateCallback('DataSnapshot.forEach', 'action', action, false);
          return this._delegate.forEach(function (expDataSnapshot) {
              return action(new DataSnapshot(_this._database, expDataSnapshot));
          });
      };
      /**
       * Returns whether this DataSnapshot has children.
       * @returns True if the DataSnapshot contains 1 or more child nodes.
       */
      DataSnapshot.prototype.hasChildren = function () {
          validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
          return this._delegate.hasChildren();
      };
      Object.defineProperty(DataSnapshot.prototype, "key", {
          get: function () {
              return this._delegate.key;
          },
          enumerable: false,
          configurable: true
      });
      /**
       * Returns the number of children for this DataSnapshot.
       * @returns The number of children that this DataSnapshot contains.
       */
      DataSnapshot.prototype.numChildren = function () {
          validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
          return this._delegate.size;
      };
      /**
       * @returns The Firebase reference for the location this snapshot's data came
       * from.
       */
      DataSnapshot.prototype.getRef = function () {
          validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
          return new Reference(this._database, this._delegate.ref);
      };
      Object.defineProperty(DataSnapshot.prototype, "ref", {
          get: function () {
              return this.getRef();
          },
          enumerable: false,
          configurable: true
      });
      return DataSnapshot;
  }());
  /**
   * A Query represents a filter to be applied to a firebase location.  This object purely represents the
   * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
   *
   * Since every Firebase reference is a query, Firebase inherits from this object.
   */
  var Query = /** @class */ (function () {
      function Query(database, _delegate) {
          this.database = database;
          this._delegate = _delegate;
      }
      Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
          var _this = this;
          var _a;
          validateArgCount('Query.on', 2, 4, arguments.length);
          validateCallback('Query.on', 'callback', callback, false);
          var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
          var valueCallback = function (expSnapshot, previousChildName) {
              callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);
          };
          valueCallback.userCallback = callback;
          valueCallback.context = ret.context;
          var cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);
          switch (eventType) {
              case 'value':
                  onValue(this._delegate, valueCallback, cancelCallback);
                  return callback;
              case 'child_added':
                  onChildAdded(this._delegate, valueCallback, cancelCallback);
                  return callback;
              case 'child_removed':
                  onChildRemoved(this._delegate, valueCallback, cancelCallback);
                  return callback;
              case 'child_changed':
                  onChildChanged(this._delegate, valueCallback, cancelCallback);
                  return callback;
              case 'child_moved':
                  onChildMoved(this._delegate, valueCallback, cancelCallback);
                  return callback;
              default:
                  throw new Error(errorPrefix('Query.on', 'eventType') +
                      'must be a valid event type = "value", "child_added", "child_removed", ' +
                      '"child_changed", or "child_moved".');
          }
      };
      Query.prototype.off = function (eventType, callback, context) {
          validateArgCount('Query.off', 0, 3, arguments.length);
          validateEventType('Query.off', eventType, true);
          validateCallback('Query.off', 'callback', callback, true);
          validateContextObject('Query.off', 'context', context, true);
          if (callback) {
              var valueCallback = function () { };
              valueCallback.userCallback = callback;
              valueCallback.context = context;
              off(this._delegate, eventType, valueCallback);
          }
          else {
              off(this._delegate, eventType);
          }
      };
      /**
       * Get the server-value for this query, or return a cached value if not connected.
       */
      Query.prototype.get = function () {
          var _this = this;
          return get(this._delegate).then(function (expSnapshot) {
              return new DataSnapshot(_this.database, expSnapshot);
          });
      };
      /**
       * Attaches a listener, waits for the first event, and then removes the listener
       */
      Query.prototype.once = function (eventType, callback, failureCallbackOrContext, context) {
          var _this = this;
          validateArgCount('Query.once', 1, 4, arguments.length);
          validateCallback('Query.once', 'callback', callback, true);
          var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
          var deferred = new Deferred();
          var valueCallback = function (expSnapshot, previousChildName) {
              var result = new DataSnapshot(_this.database, expSnapshot);
              if (callback) {
                  callback.call(ret.context, result, previousChildName);
              }
              deferred.resolve(result);
          };
          valueCallback.userCallback = callback;
          valueCallback.context = ret.context;
          var cancelCallback = function (error) {
              if (ret.cancel) {
                  ret.cancel.call(ret.context, error);
              }
              deferred.reject(error);
          };
          switch (eventType) {
              case 'value':
                  onValue(this._delegate, valueCallback, cancelCallback, {
                      onlyOnce: true
                  });
                  break;
              case 'child_added':
                  onChildAdded(this._delegate, valueCallback, cancelCallback, {
                      onlyOnce: true
                  });
                  break;
              case 'child_removed':
                  onChildRemoved(this._delegate, valueCallback, cancelCallback, {
                      onlyOnce: true
                  });
                  break;
              case 'child_changed':
                  onChildChanged(this._delegate, valueCallback, cancelCallback, {
                      onlyOnce: true
                  });
                  break;
              case 'child_moved':
                  onChildMoved(this._delegate, valueCallback, cancelCallback, {
                      onlyOnce: true
                  });
                  break;
              default:
                  throw new Error(errorPrefix('Query.once', 'eventType') +
                      'must be a valid event type = "value", "child_added", "child_removed", ' +
                      '"child_changed", or "child_moved".');
          }
          return deferred.promise;
      };
      /**
       * Set a limit and anchor it to the start of the window.
       */
      Query.prototype.limitToFirst = function (limit) {
          validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
          return new Query(this.database, query(this._delegate, limitToFirst(limit)));
      };
      /**
       * Set a limit and anchor it to the end of the window.
       */
      Query.prototype.limitToLast = function (limit) {
          validateArgCount('Query.limitToLast', 1, 1, arguments.length);
          return new Query(this.database, query(this._delegate, limitToLast(limit)));
      };
      /**
       * Given a child path, return a new query ordered by the specified grandchild path.
       */
      Query.prototype.orderByChild = function (path) {
          validateArgCount('Query.orderByChild', 1, 1, arguments.length);
          return new Query(this.database, query(this._delegate, orderByChild(path)));
      };
      /**
       * Return a new query ordered by the KeyIndex
       */
      Query.prototype.orderByKey = function () {
          validateArgCount('Query.orderByKey', 0, 0, arguments.length);
          return new Query(this.database, query(this._delegate, orderByKey()));
      };
      /**
       * Return a new query ordered by the PriorityIndex
       */
      Query.prototype.orderByPriority = function () {
          validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
          return new Query(this.database, query(this._delegate, orderByPriority()));
      };
      /**
       * Return a new query ordered by the ValueIndex
       */
      Query.prototype.orderByValue = function () {
          validateArgCount('Query.orderByValue', 0, 0, arguments.length);
          return new Query(this.database, query(this._delegate, orderByValue()));
      };
      Query.prototype.startAt = function (value, name) {
          if (value === void 0) { value = null; }
          validateArgCount('Query.startAt', 0, 2, arguments.length);
          return new Query(this.database, query(this._delegate, startAt(value, name)));
      };
      Query.prototype.startAfter = function (value, name) {
          if (value === void 0) { value = null; }
          validateArgCount('Query.startAfter', 0, 2, arguments.length);
          return new Query(this.database, query(this._delegate, startAfter(value, name)));
      };
      Query.prototype.endAt = function (value, name) {
          if (value === void 0) { value = null; }
          validateArgCount('Query.endAt', 0, 2, arguments.length);
          return new Query(this.database, query(this._delegate, endAt(value, name)));
      };
      Query.prototype.endBefore = function (value, name) {
          if (value === void 0) { value = null; }
          validateArgCount('Query.endBefore', 0, 2, arguments.length);
          return new Query(this.database, query(this._delegate, endBefore(value, name)));
      };
      /**
       * Load the selection of children with exactly the specified value, and, optionally,
       * the specified name.
       */
      Query.prototype.equalTo = function (value, name) {
          validateArgCount('Query.equalTo', 1, 2, arguments.length);
          return new Query(this.database, query(this._delegate, equalTo(value, name)));
      };
      /**
       * @returns URL for this location.
       */
      Query.prototype.toString = function () {
          validateArgCount('Query.toString', 0, 0, arguments.length);
          return this._delegate.toString();
      };
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users.
      Query.prototype.toJSON = function () {
          // An optional spacer argument is unnecessary for a string.
          validateArgCount('Query.toJSON', 0, 1, arguments.length);
          return this._delegate.toJSON();
      };
      /**
       * Return true if this query and the provided query are equivalent; otherwise, return false.
       */
      Query.prototype.isEqual = function (other) {
          validateArgCount('Query.isEqual', 1, 1, arguments.length);
          if (!(other instanceof Query)) {
              var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
              throw new Error(error);
          }
          return this._delegate.isEqual(other._delegate);
      };
      /**
       * Helper used by .on and .once to extract the context and or cancel arguments.
       * @param fnName - The function name (on or once)
       *
       */
      Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
          var ret = { cancel: undefined, context: undefined };
          if (cancelOrContext && context) {
              ret.cancel = cancelOrContext;
              validateCallback(fnName, 'cancel', ret.cancel, true);
              ret.context = context;
              validateContextObject(fnName, 'context', ret.context, true);
          }
          else if (cancelOrContext) {
              // we have either a cancel callback or a context.
              if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                  // it's a context!
                  ret.context = cancelOrContext;
              }
              else if (typeof cancelOrContext === 'function') {
                  ret.cancel = cancelOrContext;
              }
              else {
                  throw new Error(errorPrefix(fnName, 'cancelOrContext') +
                      ' must either be a cancel callback or a context object.');
              }
          }
          return ret;
      };
      Object.defineProperty(Query.prototype, "ref", {
          get: function () {
              return new Reference(this.database, new ReferenceImpl(this._delegate._repo, this._delegate._path));
          },
          enumerable: false,
          configurable: true
      });
      return Query;
  }());
  var Reference = /** @class */ (function (_super) {
      __extends$4(Reference, _super);
      /**
       * Call options:
       *   new Reference(Repo, Path) or
       *   new Reference(url: string, string|RepoManager)
       *
       * Externally - this is the firebase.database.Reference type.
       */
      function Reference(database, _delegate) {
          var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;
          _this.database = database;
          _this._delegate = _delegate;
          return _this;
      }
      /** @returns {?string} */
      Reference.prototype.getKey = function () {
          validateArgCount('Reference.key', 0, 0, arguments.length);
          return this._delegate.key;
      };
      Reference.prototype.child = function (pathString) {
          validateArgCount('Reference.child', 1, 1, arguments.length);
          if (typeof pathString === 'number') {
              pathString = String(pathString);
          }
          return new Reference(this.database, child(this._delegate, pathString));
      };
      /** @returns {?Reference} */
      Reference.prototype.getParent = function () {
          validateArgCount('Reference.parent', 0, 0, arguments.length);
          var parent = this._delegate.parent;
          return parent ? new Reference(this.database, parent) : null;
      };
      /** @returns {!Reference} */
      Reference.prototype.getRoot = function () {
          validateArgCount('Reference.root', 0, 0, arguments.length);
          return new Reference(this.database, this._delegate.root);
      };
      Reference.prototype.set = function (newVal, onComplete) {
          validateArgCount('Reference.set', 1, 2, arguments.length);
          validateCallback('Reference.set', 'onComplete', onComplete, true);
          var result = set(this._delegate, newVal);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      Reference.prototype.update = function (values, onComplete) {
          validateArgCount('Reference.update', 1, 2, arguments.length);
          if (Array.isArray(values)) {
              var newObjectToMerge = {};
              for (var i = 0; i < values.length; ++i) {
                  newObjectToMerge['' + i] = values[i];
              }
              values = newObjectToMerge;
              warn('Passing an Array to Firebase.update() is deprecated. ' +
                  'Use set() if you want to overwrite the existing data, or ' +
                  'an Object with integer keys if you really do want to ' +
                  'only update some of the children.');
          }
          validateWritablePath('Reference.update', this._delegate._path);
          validateCallback('Reference.update', 'onComplete', onComplete, true);
          var result = update(this._delegate, values);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
          validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
          validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);
          var result = setWithPriority(this._delegate, newVal, newPriority);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      Reference.prototype.remove = function (onComplete) {
          validateArgCount('Reference.remove', 0, 1, arguments.length);
          validateCallback('Reference.remove', 'onComplete', onComplete, true);
          var result = remove(this._delegate);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
          var _this = this;
          validateArgCount('Reference.transaction', 1, 3, arguments.length);
          validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);
          validateCallback('Reference.transaction', 'onComplete', onComplete, true);
          validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);
          var result = runTransaction(this._delegate, transactionUpdate, {
              applyLocally: applyLocally
          }).then(function (transactionResult) {
              return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));
          });
          if (onComplete) {
              result.then(function (transactionResult) {
                  return onComplete(null, transactionResult.committed, transactionResult.snapshot);
              }, function (error) { return onComplete(error, false, null); });
          }
          return result;
      };
      Reference.prototype.setPriority = function (priority, onComplete) {
          validateArgCount('Reference.setPriority', 1, 2, arguments.length);
          validateCallback('Reference.setPriority', 'onComplete', onComplete, true);
          var result = setPriority(this._delegate, priority);
          if (onComplete) {
              result.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          return result;
      };
      Reference.prototype.push = function (value, onComplete) {
          var _this = this;
          validateArgCount('Reference.push', 0, 2, arguments.length);
          validateCallback('Reference.push', 'onComplete', onComplete, true);
          var expPromise = push(this._delegate, value);
          var promise = expPromise.then(function (expRef) { return new Reference(_this.database, expRef); });
          if (onComplete) {
              promise.then(function () { return onComplete(null); }, function (error) { return onComplete(error); });
          }
          var result = new Reference(this.database, expPromise);
          result.then = promise.then.bind(promise);
          result.catch = promise.catch.bind(promise, undefined);
          return result;
      };
      Reference.prototype.onDisconnect = function () {
          validateWritablePath('Reference.onDisconnect', this._delegate._path);
          return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));
      };
      Object.defineProperty(Reference.prototype, "key", {
          get: function () {
              return this.getKey();
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "parent", {
          get: function () {
              return this.getParent();
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "root", {
          get: function () {
              return this.getRoot();
          },
          enumerable: false,
          configurable: true
      });
      return Reference;
  }(Query));

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Class representing a firebase database.
   */
  var Database = /** @class */ (function () {
      /**
       * The constructor should not be called by users of our public API.
       */
      function Database(_delegate, app) {
          var _this = this;
          this._delegate = _delegate;
          this.app = app;
          this.INTERNAL = {
              delete: function () { return _this._delegate._delete(); }
          };
      }
      /**
       * Modify this instance to communicate with the Realtime Database emulator.
       *
       * <p>Note: This method must be called before performing any other operation.
       *
       * @param host - the emulator host (ex: localhost)
       * @param port - the emulator port (ex: 8080)
       * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
       */
      Database.prototype.useEmulator = function (host, port, options) {
          if (options === void 0) { options = {}; }
          connectDatabaseEmulator(this._delegate, host, port, options);
      };
      Database.prototype.ref = function (path) {
          validateArgCount('database.ref', 0, 1, arguments.length);
          if (path instanceof Reference) {
              var childRef = refFromURL(this._delegate, path.toString());
              return new Reference(this, childRef);
          }
          else {
              var childRef = ref(this._delegate, path);
              return new Reference(this, childRef);
          }
      };
      /**
       * Returns a reference to the root or the path specified in url.
       * We throw a exception if the url is not in the same domain as the
       * current repo.
       * @returns Firebase reference.
       */
      Database.prototype.refFromURL = function (url) {
          var apiName = 'database.refFromURL';
          validateArgCount(apiName, 1, 1, arguments.length);
          var childRef = refFromURL(this._delegate, url);
          return new Reference(this, childRef);
      };
      // Make individual repo go offline.
      Database.prototype.goOffline = function () {
          validateArgCount('database.goOffline', 0, 0, arguments.length);
          return goOffline(this._delegate);
      };
      Database.prototype.goOnline = function () {
          validateArgCount('database.goOnline', 0, 0, arguments.length);
          return goOnline(this._delegate);
      };
      Database.ServerValue = {
          TIMESTAMP: serverTimestamp(),
          increment: function (delta) { return increment(delta); }
      };
      return Database;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * INTERNAL methods for internal-use only (tests, etc.).
   *
   * Customers shouldn't use these or else should be aware that they could break at any time.
   */
  var forceLongPolling = function () {
      WebSocketConnection.forceDisallow();
      BrowserPollConnection.forceAllow();
  };
  var forceWebSockets = function () {
      BrowserPollConnection.forceDisallow();
  };
  /* Used by App Manager */
  var isWebSocketsAvailable = function () {
      return WebSocketConnection['isAvailable']();
  };
  var setSecurityDebugCallback = function (ref, callback) {
      var connection = ref._delegate._repo.persistentConnection_;
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      connection.securityDebugCallback_ = callback;
  };
  var stats = function (ref, showDelta) {
      repoStats(ref._delegate._repo, showDelta);
  };
  var statsIncrementCounter = function (ref, metric) {
      repoStatsIncrementCounter(ref._delegate._repo, metric);
  };
  var dataUpdateCount = function (ref) {
      return ref._delegate._repo.dataUpdateCount;
  };
  var interceptServerData = function (ref, callback) {
      return repoInterceptServerData(ref._delegate._repo, callback);
  };
  /**
   * Used by console to create a database based on the app,
   * passed database URL and a custom auth implementation.
   *
   * @param app - A valid FirebaseApp-like object
   * @param url - A valid Firebase databaseURL
   * @param version - custom version e.g. firebase-admin version
   * @param customAuthImpl - custom auth implementation
   */
  function initStandalone(_a) {
      var app = _a.app, url = _a.url, version = _a.version, customAuthImpl = _a.customAuthImpl, namespace = _a.namespace, _b = _a.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
      setSDKVersion(version);
      /**
       * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
       * any actual function.
       */
      var authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));
      authProvider.setComponent(new Component('auth-internal', function () { return customAuthImpl; }, "PRIVATE" /* PRIVATE */));
      return {
          instance: new Database(repoManagerDatabaseFromApp(app, authProvider, 
          /* appCheckProvider= */ undefined, url, nodeAdmin), app),
          namespace: namespace
      };
  }

  var INTERNAL = /*#__PURE__*/Object.freeze({
    __proto__: null,
    forceLongPolling: forceLongPolling,
    forceWebSockets: forceWebSockets,
    isWebSocketsAvailable: isWebSocketsAvailable,
    setSecurityDebugCallback: setSecurityDebugCallback,
    stats: stats,
    statsIncrementCounter: statsIncrementCounter,
    dataUpdateCount: dataUpdateCount,
    interceptServerData: interceptServerData,
    initStandalone: initStandalone
  });

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DataConnection = PersistentConnection;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
      this.sendRequest('q', { p: pathString }, onComplete);
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  PersistentConnection.prototype.echo = function (data, onEcho) {
      this.sendRequest('echo', { d: data }, onEcho);
  };
  // RealTimeConnection properties that we use in tests.
  var RealTimeConnection = Connection;
  var hijackHash = function (newHash) {
      var oldPut = PersistentConnection.prototype.put;
      PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
          if (hash !== undefined) {
              hash = newHash();
          }
          oldPut.call(this, pathString, data, onComplete, hash);
      };
      return function () {
          PersistentConnection.prototype.put = oldPut;
      };
  };
  var ConnectionTarget = RepoInfo;
  var queryIdentifier = function (query) {
      return query._delegate._queryIdentifier;
  };
  /**
   * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
   */
  var forceRestClient = function (forceRestClient) {
      repoManagerForceRestClient(forceRestClient);
  };

  var TEST_ACCESS = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DataConnection: DataConnection,
    RealTimeConnection: RealTimeConnection,
    hijackHash: hijackHash,
    ConnectionTarget: ConnectionTarget,
    queryIdentifier: queryIdentifier,
    forceRestClient: forceRestClient
  });

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ServerValue = Database.ServerValue;
  function registerDatabase(instance) {
      // set SDK_VERSION
      setSDKVersion(instance.SDK_VERSION);
      // Register the Database Service with the 'firebase' namespace.
      var namespace = instance.INTERNAL.registerComponent(new Component('database', function (container, _a) {
          var url = _a.instanceIdentifier;
          /* Dependencies */
          // getImmediate for FirebaseApp will always succeed
          var app = container.getProvider('app').getImmediate();
          var authProvider = container.getProvider('auth-internal');
          var appCheckProvider = container.getProvider('app-check-internal');
          return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);
      }, "PUBLIC" /* PUBLIC */)
          .setServiceProps(
      // firebase.database namespace properties
      {
          Reference: Reference,
          Query: Query,
          Database: Database,
          DataSnapshot: DataSnapshot,
          enableLogging: enableLogging,
          INTERNAL: INTERNAL,
          ServerValue: ServerValue,
          TEST_ACCESS: TEST_ACCESS
      })
          .setMultipleInstances(true));
      instance.registerVersion(name$e, version$3);
      if (isNodeSdk()) {
          module.exports = namespace;
      }
  }
  registerDatabase(firebase);

  (function() {/*

   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ba(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}return globalThis}var ca=ba(this);
  function da(a,b){if(b){var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function fa(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:ea(a)}}
  da("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(m){h.reject(m);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ca.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var m=
  g[h];g[h]=null;try{m();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(v){m||(m=!0,p.call(h,v));}}var h=this,m=!1;return {resolve:g(this.m),reject:g(this.g)}};b.prototype.m=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.s(g);else{a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.v(g):this.h(g);}};
  b.prototype.v=function(g){var h=void 0;try{h=g.then;}catch(m){this.g(m);return}"function"==typeof h?this.u(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.s=function(g){var h=this.f();
  g.Ra(h.resolve,h.reject);};b.prototype.u=function(g,h){var m=this.f();try{g.call(h,m.resolve,m.reject);}catch(p){m.reject(p);}};b.prototype.then=function(g,h){function m(A,Q){return "function"==typeof A?function(ya){try{p(A(ya));}catch(Ad){v(Ad);}}:Q}var p,v,B=new b(function(A,Q){p=A;v=Q;});this.Ra(m(g,p),m(h,v));return B};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.Ra=function(g,h){function m(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
  p.b);}}var p=this;null==this.a?f.b(m):this.a.push(m);};b.resolve=d;b.reject=function(g){return new b(function(h,m){m(g);})};b.race=function(g){return new b(function(h,m){for(var p=fa(g),v=p.next();!v.done;v=p.next())d(v.value).Ra(h,m);})};b.all=function(g){var h=fa(g),m=h.next();return m.done?d([]):new b(function(p,v){function B(ya){return function(Ad){A[ya]=Ad;Q--;0==Q&&p(A);}}var A=[],Q=0;do A.push(void 0),Q++,d(m.value).Ra(B(A.length-1),v),m=h.next();while(!m.done)})};return b});
  var ha=ha||{},l=this||self,ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(a){return (a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&ia.test(a)?a:""}function la(){}function ma(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"}function na(a){var b=ma(a);return "array"==b||"object"==b&&"number"==typeof a.length}function oa(a){return "function"==ma(a)}function n(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}
  function pa(a){return Object.prototype.hasOwnProperty.call(a,qa)&&a[qa]||(a[qa]=++ra)}var qa="closure_uid_"+(1E9*Math.random()>>>0),ra=0;function sa(a,b,c){return a.call.apply(a.bind,arguments)}function ta(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}
  function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=sa:q=ta;return q.apply(null,arguments)}function ua(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function r(a,b){function c(){}c.prototype=b.prototype;a.bb=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function wa(a){return a}function t(a,b,c){this.code=xa+a;this.message=b||za[a]||"";this.a=c||null;}r(t,Error);t.prototype.w=function(){var a={code:this.code,message:this.message};this.a&&(a.serverResponse=this.a);return a};t.prototype.toJSON=function(){return this.w()};function Aa(a){var b=a&&a.code;return b?new t(b.substring(xa.length),a.message,a.serverResponse):null}
  var xa="auth/",za={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
  "captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
  "requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
  "internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
  "invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
  "invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
  "invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.",
  "unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
  "invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
  "multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
  "missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
  "missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
  "no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
  "popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
  "rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.",
  "too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.",
  "unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.",
  "web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};var Ba={ld:{Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},sd:{Ua:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://securetoken.googleapis.com/v1/token",Xa:"https://identitytoolkit.googleapis.com/v2/",id:"p"},ud:{Ua:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
  $a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},vd:{Ua:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",$a:"https://test-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};
  function Ca(a){for(var b in Ba)if(Ba[b].id===a)return a=Ba[b],{firebaseEndpoint:a.Ua,secureTokenEndpoint:a.$a,identityPlatformEndpoint:a.Xa};return null}var Da;Da=Ca("__EID__")?"__EID__":void 0;function Ea(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}r(u,Error);u.prototype.name="CustomError";function Fa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d]);}r(Fa,u);Fa.prototype.name="AssertionError";function Ga(a,b){throw new Fa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function Ha(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}Ha.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Ia(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ja(){this.b=this.a=null;}var La=new Ha(function(){return new Ka},function(a){a.reset();});Ja.prototype.add=function(a,b){var c=La.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ma(){var a=Na,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ka(){this.next=this.b=this.a=null;}Ka.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ka.prototype.reset=function(){this.next=this.b=this.a=null;};var Oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
  function Pa(a,b){for(var c="string"===typeof a?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
  var Qa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f="string"===typeof a?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h);}return d},Ra=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Sa=Array.prototype.some?function(a,
  b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};function Ta(a){a:{var b=Ua;for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function Va(a,b){return 0<=Oa(a,b)}
  function Wa(a,b){b=Oa(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Xa(a,b){var c=0;Pa(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Ya(a){return Array.prototype.concat.apply([],arguments)}function Za(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}var $a=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},ab=/&/g,bb=/</g,cb=/>/g,db=/"/g,eb=/'/g,fb=/\x00/g,gb=/[\x00&<>"']/;function x(a,b){return -1!=a.indexOf(b)}function hb(a,b){return a<b?-1:a>b?1:0}var ib;a:{var jb=l.navigator;if(jb){var kb=jb.userAgent;if(kb){ib=kb;break a}}ib="";}function y(a){return x(ib,a)}function lb(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function mb(a){for(var b in a)return !1;return !0}function nb(a){var b={},c;for(c in a)b[c]=a[c];return b}var ob="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function z(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ob.length;f++)c=ob[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function pb(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(n(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
  b,f);}}function qb(a,b){this.a=a===rb&&b||"";this.b=sb;}qb.prototype.ta=!0;qb.prototype.sa=function(){return this.a};qb.prototype.toString=function(){return "Const{"+this.a+"}"};function tb(a){if(a instanceof qb&&a.constructor===qb&&a.b===sb)return a.a;Ga("expected object of type Const, got '"+a+"'");return "type_error:Const"}var sb={},rb={};var ub;function vb(){if(void 0===ub){var a=null,b=l.trustedTypes;if(b&&b.createPolicy){try{a=b.createPolicy("goog#html",{createHTML:wa,createScript:wa,createScriptURL:wa});}catch(c){l.console&&l.console.error(c.message);}ub=a;}else ub=a;}return ub}function wb(a,b){this.a=b===xb?a:"";}wb.prototype.ta=!0;wb.prototype.sa=function(){return this.a.toString()};wb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function yb(a){if(a instanceof wb&&a.constructor===wb)return a.a;Ga("expected object of type TrustedResourceUrl, got '"+a+"' of type "+ma(a));return "type_error:TrustedResourceUrl"}
  function zb(a,b){var c=tb(a);if(!Ab.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(Bb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof qb?tb(d):encodeURIComponent(String(d))});return Cb(a)}var Bb=/%{(\w+)}/g,Ab=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,xb={};
  function Cb(a){var b=vb();a=b?b.createScriptURL(a):a;return new wb(a,xb)}function C(a,b){this.a=b===Db?a:"";}C.prototype.ta=!0;C.prototype.sa=function(){return this.a.toString()};C.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function Eb(a){if(a instanceof C&&a.constructor===C)return a.a;Ga("expected object of type SafeUrl, got '"+a+"' of type "+ma(a));return "type_error:SafeUrl"}
  var Fb=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Gb=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Hb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
  function Ib(a){if(a instanceof C)return a;a="object"==typeof a&&a.ta?a.sa():String(a);if(Hb.test(a))a=new C(a,Db);else{a=String(a);a=a.replace(/(%0A|%0D)/g,"");var b=a.match(Gb);a=b&&Fb.test(b[1])?new C(a,Db):null;}return a}function Jb(a){if(a instanceof C)return a;a="object"==typeof a&&a.ta?a.sa():String(a);Hb.test(a)||(a="about:invalid#zClosurez");return new C(a,Db)}var Db={},Kb=new C("about:invalid#zClosurez",Db);function Lb(a,b,c){this.a=c===Mb?a:"";}Lb.prototype.ta=!0;Lb.prototype.sa=function(){return this.a.toString()};Lb.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Nb(a){if(a instanceof Lb&&a.constructor===Lb)return a.a;Ga("expected object of type SafeHtml, got '"+a+"' of type "+ma(a));return "type_error:SafeHtml"}var Mb={};function Ob(a,b){pb(a,"HTMLScriptElement");a.src=yb(b);(b=a.ownerDocument&&a.ownerDocument.defaultView)&&b!=l?b=ka(b.document):(null===ja&&(ja=ka(l.document)),b=ja);b&&a.setAttribute("nonce",b);}function Pb(a,b,c,d){a=a instanceof C?a:Jb(a);b=b||l;c=c instanceof qb?tb(c):c||"";return b.open(Eb(a),c,d,void 0)}function Qb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Rb(a){gb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(ab,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace(bb,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(cb,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(db,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(eb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(fb,"&#0;")));return a}function Sb(a){Sb[" "](a);return a}Sb[" "]=la;function Tb(a,b){var c=Ub;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Vb=y("Opera"),Wb=y("Trident")||y("MSIE"),Xb=y("Edge"),Yb=Xb||Wb,Zb=y("Gecko")&&!(x(ib.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),$b=x(ib.toLowerCase(),"webkit")&&!y("Edge");function ac(){var a=l.document;return a?a.documentMode:void 0}var bc;
  a:{var cc="",dc=function(){var a=ib;if(Zb)return /rv:([^\);]+)(\)|;)/.exec(a);if(Xb)return /Edge\/([\d\.]+)/.exec(a);if(Wb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if($b)return /WebKit\/(\S+)/.exec(a);if(Vb)return /(?:Version)[ \/]?(\S+)/.exec(a)}();dc&&(cc=dc?dc[1]:"");if(Wb){var ec=ac();if(null!=ec&&ec>parseFloat(cc)){bc=String(ec);break a}}bc=cc;}var Ub={};
  function fc(a){return Tb(a,function(){for(var b=0,c=$a(String(bc)).split("."),d=$a(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=hb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||hb(0==g[2].length,0==h[2].length)||hb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var gc;
  if(l.document&&Wb){var hc=ac();gc=hc?hc:parseInt(bc,10)||void 0;}else gc=void 0;var ic=gc;try{(new self.OffscreenCanvas(0,0)).getContext("2d");}catch(a){}var jc=!Wb||9<=Number(ic);function kc(a){var b=document;return "string"===typeof a?b.getElementById(a):a}function lc(a,b){lb(b,function(c,d){c&&"object"==typeof c&&c.ta&&(c=c.sa());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:mc.hasOwnProperty(d)?a.setAttribute(mc[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
  var mc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
  function nc(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!jc&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Rb(g.name),'"');if(g.type){f.push(' type="',Rb(g.type),'"');var h={};z(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=oc(e,f);g&&("string"===typeof g?f.className=g:Array.isArray(g)?f.className=g.join(" "):lc(f,g));2<d.length&&pc(e,f,d);return f}
  function pc(a,b,c){function d(h){h&&b.appendChild("string"===typeof h?a.createTextNode(h):h);}for(var e=2;e<c.length;e++){var f=c[e];if(!na(f)||n(f)&&0<f.nodeType)d(f);else{a:{if(f&&"number"==typeof f.length){if(n(f)){var g="function"==typeof f.item||"string"==typeof f.item;break a}if(oa(f)){g="function"==typeof f.item;break a}}g=!1;}w(g?Za(f):f,d);}}}function oc(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}function qc(a){l.setTimeout(function(){throw a;},0);}var rc;
  function sc(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var e=oc(document,"IFRAME");e.style.display="none";document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=q(function(m){if(("*"==h||m.origin==h)&&m.data==g)this.port1.onmessage();},this);
  f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.Hb;c.Hb=null;e();}};return function(e){d.next={Hb:e};d=d.next;b.port2.postMessage(0);}}return function(e){l.setTimeout(e,0);}}function tc(a,b){uc||vc();wc||(uc(),wc=!0);Na.add(a,b);}var uc;function vc(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);uc=function(){a.then(xc);};}else uc=function(){var b=xc;!oa(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(rc||(rc=sc()),rc(b)):l.setImmediate(b);};}var wc=!1,Na=new Ja;function xc(){for(var a;a=Ma();){try{a.a.call(a.b);}catch(b){qc(b);}Ia(La,a);}wc=!1;}function D(a,b){this.a=yc;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=la)try{var c=this;a.call(b,function(d){zc(c,Ac,d);},function(d){if(!(d instanceof Bc))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}zc(c,Cc,d);});}catch(d){zc(this,Cc,d);}}var yc=0,Ac=2,Cc=3;function Dc(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}Dc.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Ec=new Ha(function(){return new Dc},function(a){a.reset();});
  function Fc(a,b,c){var d=Ec.get();d.g=a;d.b=b;d.f=c;return d}function E(a){if(a instanceof D)return a;var b=new D(la);zc(b,Ac,a);return b}function F(a){return new D(function(b,c){c(a);})}function Gc(a,b,c){Hc(a,b,c,null)||tc(ua(b,a));}function Ic(a){return new D(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,v){d--;e[p]=v;0==d&&b(e);},g=function(p){c(p);},h=0,m;h<a.length;h++)m=a[h],Gc(m,ua(f,h),g);else b(e);})}
  function Jc(a){return new D(function(b){var c=a.length,d=[];if(c)for(var e=function(h,m,p){c--;d[h]=m?{Qb:!0,value:p}:{Qb:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Gc(g,ua(e,f,!0),ua(e,f,!1));else b(d);})}D.prototype.then=function(a,b,c){return Kc(this,oa(a)?a:null,oa(b)?b:null,c)};D.prototype.$goog_Thenable=!0;k=D.prototype;k.oa=function(a,b){a=Fc(a,a,b);a.c=!0;Lc(this,a);return this};k.o=function(a,b){return Kc(this,null,a,b)};
  k.cancel=function(a){if(this.a==yc){var b=new Bc(a);tc(function(){Mc(this,b);},this);}};function Mc(a,b){if(a.a==yc)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==yc&&1==d?Mc(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Nc(c),Oc(c,e,Cc,b)));}a.c=null;}else zc(a,Cc,b);}function Lc(a,b){a.b||a.a!=Ac&&a.a!=Cc||Pc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
  function Kc(a,b,c,d){var e=Fc(null,null,null);e.a=new D(function(f,g){e.g=b?function(h){try{var m=b.call(d,h);f(m);}catch(p){g(p);}}:f;e.b=c?function(h){try{var m=c.call(d,h);void 0===m&&h instanceof Bc?g(h):f(m);}catch(p){g(p);}}:g;});e.a.c=a;Lc(a,e);return e.a}k.$c=function(a){this.a=yc;zc(this,Ac,a);};k.ad=function(a){this.a=yc;zc(this,Cc,a);};
  function zc(a,b,c){a.a==yc&&(a===c&&(b=Cc,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Hc(c,a.$c,a.ad,a)||(a.i=c,a.a=b,a.c=null,Pc(a),b!=Cc||c instanceof Bc||Qc(a,c)));}function Hc(a,b,c,d){if(a instanceof D)return Lc(a,Fc(b||la,c||null,d)),!0;if(Ea(a))return a.then(b,c,d),!0;if(n(a))try{var e=a.then;if(oa(e))return Rc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
  function Rc(a,b,c,d,e){function f(m){h||(h=!0,d.call(e,m));}function g(m){h||(h=!0,c.call(e,m));}var h=!1;try{b.call(a,g,f);}catch(m){f(m);}}function Pc(a){a.h||(a.h=!0,tc(a.gc,a));}function Nc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.gc=function(){for(var a;a=Nc(this);)Oc(this,a,this.a,this.i);this.h=!1;};
  function Oc(a,b,c,d){if(c==Cc&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Sc(b,c,d);else try{b.c?b.g.call(b.f):Sc(b,c,d);}catch(e){Tc.call(null,e);}Ia(Ec,b);}function Sc(a,b,c){b==Ac?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function Qc(a,b){a.g=!0;tc(function(){a.g&&Tc.call(null,b);});}var Tc=qc;function Bc(a){u.call(this,a);}r(Bc,u);Bc.prototype.name="cancel";function Uc(){this.ya=this.ya;this.pa=this.pa;}var Vc=0;Uc.prototype.ya=!1;function Xc(a){if(!a.ya&&(a.ya=!0,a.Da(),0!=Vc)){var b=pa(a);}}Uc.prototype.Da=function(){if(this.pa)for(;this.pa.length;)this.pa.shift()();};var Yc=Object.freeze||function(a){return a};var Zc=!Wb||9<=Number(ic),$c=Wb&&!fc("9"),ad=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",la,b),l.removeEventListener("test",la,b);}catch(c){}return a}();function G(a,b){this.type=a;this.b=this.target=b;this.defaultPrevented=!1;}G.prototype.preventDefault=function(){this.defaultPrevented=!0;};function bd(a,b){G.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Zb){a:{try{Sb(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else"mouseover"==
  c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
  a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:cd[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}r(bd,G);var cd=Yc({2:"touch",3:"pen",4:"mouse"});bd.prototype.preventDefault=function(){bd.bb.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$c)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};bd.prototype.g=function(){return this.a};var dd="closure_listenable_"+(1E6*Math.random()|0),ed=0;function fd(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Wa=e;this.key=++ed;this.wa=this.Qa=!1;}function gd(a){a.wa=!0;a.listener=null;a.proxy=null;a.src=null;a.Wa=null;}function hd(a){this.src=a;this.a={};this.b=0;}hd.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=id(a,b,d,e);-1<g?(b=a[g],c||(b.Qa=!1)):(b=new fd(b,this.src,f,!!d,e),b.Qa=c,a.push(b));return b};function jd(a,b){var c=b.type;c in a.a&&Wa(a.a[c],b)&&(gd(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function id(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.wa&&f.listener==b&&f.capture==!!c&&f.Wa==d)return e}return -1}var kd="closure_lm_"+(1E6*Math.random()|0),ld={};function nd(a,b,c,d,e){if(d&&d.once)od(a,b,c,d,e);else if(Array.isArray(b))for(var f=0;f<b.length;f++)nd(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?qd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!1,d,e);}
  function rd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=n(e)?!!e.capture:!!e,h=sd(a);h||(a[kd]=h=new hd(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=td();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ad||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(ud(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
  function td(){var a=vd,b=Zc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function od(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)od(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?wd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!0,d,e);}
  function xd(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)xd(a,b[f],c,d,e);else(d=n(d)?!!d.capture:!!d,c=pd(c),a&&a[dd])?(a=a.v,b=String(b).toString(),b in a.a&&(f=a.a[b],c=id(f,c,d,e),-1<c&&(gd(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=sd(a))&&(b=a.a[b.toString()],a=-1,b&&(a=id(b,c,d,e)),(c=-1<a?b[a]:null)&&yd(c));}
  function yd(a){if("number"!==typeof a&&a&&!a.wa){var b=a.src;if(b&&b[dd])jd(b.v,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(ud(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=sd(b))?(jd(c,a),0==c.b&&(c.src=null,b[kd]=null)):gd(a);}}}function ud(a){return a in ld?ld[a]:ld[a]="on"+a}
  function zd(a,b,c,d){var e=!0;if(a=sd(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.wa&&(f=Bd(f,d),e=e&&!1!==f);}return e}function Bd(a,b){var c=a.listener,d=a.Wa||a.src;a.Qa&&yd(a);return c.call(d,b)}
  function vd(a,b){if(a.wa)return !0;if(!Zc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new bd(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=zd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=zd(d[e],a,!1,b),c=c&&f;}return c}return Bd(a,
  new bd(b,this))}function sd(a){a=a[kd];return a instanceof hd?a:null}var Cd="__closure_events_fn_"+(1E9*Math.random()>>>0);function pd(a){if(oa(a))return a;a[Cd]||(a[Cd]=function(b){return a.handleEvent(b)});return a[Cd]}function H(){Uc.call(this);this.v=new hd(this);this.bc=this;this.hb=null;}r(H,Uc);H.prototype[dd]=!0;H.prototype.addEventListener=function(a,b,c,d){nd(this,a,b,c,d);};H.prototype.removeEventListener=function(a,b,c,d){xd(this,a,b,c,d);};
  H.prototype.dispatchEvent=function(a){var b,c=this.hb;if(c)for(b=[];c;c=c.hb)b.push(c);c=this.bc;var d=a.type||a;if("string"===typeof a)a=new G(a,c);else if(a instanceof G)a.target=a.target||c;else{var e=a;a=new G(d,c);z(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=Dd(g,d,!0,a)&&e;}g=a.b=c;e=Dd(g,d,!0,a)&&e;e=Dd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=Dd(g,d,!1,a)&&e;return e};
  H.prototype.Da=function(){H.bb.Da.call(this);if(this.v){var a=this.v,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)gd(d[e]);delete a.a[c];a.b--;}}this.hb=null;};function qd(a,b,c,d,e){a.v.add(String(b),c,!1,d,e);}function wd(a,b,c,d,e){a.v.add(String(b),c,!0,d,e);}
  function Dd(a,b,c,d){b=a.v.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.wa&&g.capture==c){var h=g.listener,m=g.Wa||g.src;g.Qa&&jd(a.v,g);e=!1!==h.call(m,d)&&e;}}return e&&!d.defaultPrevented}function Ed(a,b,c){if(oa(a))c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Fd(a){var b=null;return (new D(function(c,d){b=Ed(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).o(function(c){l.clearTimeout(b);throw c;})}function Gd(a){if(a.X&&"function"==typeof a.X)return a.X();if("string"===typeof a)return a.split("");if(na(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Hd(a){if(a.Y&&"function"==typeof a.Y)return a.Y();if(!a.X||"function"!=typeof a.X){if(na(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
  function Id(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(na(a)||"string"===typeof a)w(a,b,void 0);else for(var c=Hd(a),d=Gd(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function Jd(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Jd)for(c=a.Y(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=Jd.prototype;k.X=function(){Kd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.Y=function(){Kd(this);return this.a.concat()};
  k.clear=function(){this.b={};this.c=this.a.length=0;};function Kd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Ld(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Ld(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return Ld(this.b,a)?this.b[a]:b};k.set=function(a,b){Ld(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
  k.forEach=function(a,b){for(var c=this.Y(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function Ld(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Md=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Nd(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function Od(a,b){this.a=this.l=this.c="";this.g=null;this.h=this.f="";this.i=!1;var c;a instanceof Od?(this.i=void 0!==b?b:a.i,Pd(this,a.c),this.l=a.l,this.a=a.a,Qd(this,a.g),this.f=a.f,Rd(this,Sd(a.b)),this.h=a.h):a&&(c=String(a).match(Md))?(this.i=!!b,Pd(this,c[1]||"",!0),this.l=Td(c[2]||""),this.a=Td(c[3]||"",!0),Qd(this,c[4]),this.f=Td(c[5]||"",!0),Rd(this,c[6]||"",!0),this.h=Td(c[7]||"")):(this.i=!!b,this.b=new Ud(null,this.i));}
  Od.prototype.toString=function(){var a=[],b=this.c;b&&a.push(Vd(b,Wd,!0),":");var c=this.a;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Vd(b,Wd,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.g,null!=c&&a.push(":",String(c));if(c=this.f)this.a&&"/"!=c.charAt(0)&&a.push("/"),a.push(Vd(c,"/"==c.charAt(0)?Xd:Yd,!0));(c=this.b.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Vd(c,Zd));return a.join("")};
  Od.prototype.resolve=function(a){var b=new Od(this),c=!!a.c;c?Pd(b,a.c):c=!!a.l;c?b.l=a.l:c=!!a.a;c?b.a=a.a:c=null!=a.g;var d=a.f;if(c)Qd(b,a.g);else if(c=!!a.f){if("/"!=d.charAt(0))if(this.a&&!this.f)d="/"+d;else{var e=b.f.lastIndexOf("/");-1!=e&&(d=b.f.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(x(e,"./")||x(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
  d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.f=d:c=""!==a.b.toString();c?Rd(b,Sd(a.b)):c=!!a.h;c&&(b.h=a.h);return b};function Pd(a,b,c){a.c=c?Td(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""));}function Qd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.g=b;}else a.g=null;}function Rd(a,b,c){b instanceof Ud?(a.b=b,$d(a.b,a.i)):(c||(b=Vd(b,ae)),a.b=new Ud(b,a.i));}function I(a,b,c){a.b.set(b,c);}function be(a,b){return a.b.get(b)}
  function J(a){return a instanceof Od?new Od(a):new Od(a,void 0)}function ce(a,b,c,d){var e=new Od(null,void 0);a&&Pd(e,a);b&&(e.a=b);c&&Qd(e,c);d&&(e.f=d);return e}function Td(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Vd(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,de),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function de(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
  var Wd=/[#\/\?@]/g,Yd=/[#\?:]/g,Xd=/[#\?]/g,ae=/[#\?@]/g,Zd=/#/g;function Ud(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function ee(a){a.a||(a.a=new Jd,a.b=0,a.c&&Nd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function fe(a){var b=Hd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Ud(null,void 0);a=Gd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];Array.isArray(f)?ge(c,e,f):c.add(e,f);}return c}k=Ud.prototype;
  k.add=function(a,b){ee(this);this.c=null;a=he(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function ie(a,b){ee(a);b=he(a,b);Ld(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Ld(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Kd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function je(a,b){ee(a);b=he(a,b);return Ld(a.a.b,b)}k.forEach=function(a,b){ee(this);this.a.forEach(function(c,d){w(c,function(e){a.call(b,e,d,this);},this);},this);};
  k.Y=function(){ee(this);for(var a=this.a.X(),b=this.a.Y(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.X=function(a){ee(this);var b=[];if("string"===typeof a)je(this,a)&&(b=Ya(b,this.a.get(he(this,a))));else{a=this.a.X();for(var c=0;c<a.length;c++)b=Ya(b,a[c]);}return b};k.set=function(a,b){ee(this);this.c=null;a=he(this,a);je(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
  k.get=function(a,b){if(!a)return b;a=this.X(a);return 0<a.length?String(a[0]):b};function ge(a,b,c){ie(a,b);0<c.length&&(a.c=null,a.a.set(he(a,b),Za(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.Y(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.X(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
  function Sd(a){var b=new Ud;b.c=a.c;a.a&&(b.a=new Jd(a.a),b.b=a.b);return b}function he(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function $d(a,b){b&&!a.f&&(ee(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(ie(this,d),ge(this,e,c));},a));a.f=b;}function ke(a){var b=[];le(new me,a,b);return b.join("")}function me(){}
  function le(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),le(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),ne(d,c),c.push(":"),le(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":ne(b,c);break;case "number":c.push(isFinite(b)&&
  !isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var oe={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},pe=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
  function ne(a,b){b.push('"',a.replace(pe,function(c){var d=oe[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),oe[c]=d);return d}),'"');}function qe(){var a=K();return Wb&&!!ic&&11==ic||/Edge\/\d+/.test(a)}function re(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function se(a,b){b=b||l.window;var c="about:blank";a&&(c=Eb(Ib(a)||Kb));b.location.href=c;}function te(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<te(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
  function ue(){var a=K();a=ve(a)!=we?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Wb||!ic||9<ic}function xe(a){a=(a||K()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function ye(a){a=a||l.window;try{a.close();}catch(b){}}
  function ze(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=K().toLowerCase();d&&(b.target=d,x(c,"crios/")&&(b.target="_blank"));ve(K())==Ae&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof C?c:Ib("undefined"!=typeof c.href?c.href:String(c))||Kb;c=a.target||c.target;e=
  [];for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");if((y("iPhone")&&!y("iPod")&&!y("iPad")||y("iPad")||y("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c)g=oc(document,"A"),pb(g,"HTMLAnchorElement"),b=b instanceof C?b:Jb(b),g.href=Eb(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),
  a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={};else if(a.noreferrer){if(g=Pb("",d,c,g),a=Eb(b),g&&(Yb&&x(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Rb(a)+'">',a=(d=vb())?d.createHTML(a):a,a=new Lb(a,null,Mb),d=g.document))d.write(Nb(a)),d.close();}else(g=Pb(b,d,c,g))&&a.noopener&&(g.opener=null);if(g)try{g.focus();}catch(h){}return g}
  function Be(a){return new D(function(b){function c(){Fd(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var Ce=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,De=/^[^@]+@[^@]+$/;function Ee(){var a=null;return (new D(function(b){"complete"==l.document.readyState?b():(a=function(){b();},od(window,"load",a));})).o(function(b){xd(window,"load",a);throw b;})}
  function Fe(){return Ge(void 0)?Ee().then(function(){return new D(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):F(Error("Cordova must run in an Android or iOS file scheme."))}function Ge(a){a=a||K();return !("file:"!==He()&&"ionic:"!==He()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ie(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
  function Je(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function Ke(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":Je()?"Worker":"Browser"}function Le(){var a=Ke();return "ReactNative"===a||"Node"===a}function Me(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
  var Ae="Firefox",we="Chrome";
  function ve(a){var b=a.toLowerCase();if(x(b,"opera/")||x(b,"opr/")||x(b,"opios/"))return "Opera";if(x(b,"iemobile"))return "IEMobile";if(x(b,"msie")||x(b,"trident/"))return "IE";if(x(b,"edge/"))return "Edge";if(x(b,"firefox/"))return Ae;if(x(b,"silk/"))return "Silk";if(x(b,"blackberry"))return "Blackberry";if(x(b,"webos"))return "Webos";if(!x(b,"safari/")||x(b,"chrome/")||x(b,"crios/")||x(b,"android"))if(!x(b,"chrome/")&&!x(b,"crios/")||x(b,"edge/")){if(x(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
  2==a.length)return a[1]}else return we;else return "Safari";return "Other"}var Ne={md:"FirebaseCore-web",od:"FirebaseUI-web"};function Oe(a,b){b=b||[];var c=[],d={},e;for(e in Ne)d[Ne[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=Ke();"Browser"===c?(d=K(),c=ve(d)):"Worker"===c&&(d=K(),c=ve(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function K(){return l.navigator&&l.navigator.userAgent||""}
  function L(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Pe(){try{var a=l.localStorage,b=Qe();if(a)return a.setItem(b,"1"),a.removeItem(b),qe()?!!l.indexedDB:!0}catch(c){return Je()&&!!l.indexedDB}return !1}function Re(){return (Se()||"chrome-extension:"===He()||Ge())&&!Le()&&Pe()&&!Je()}function Se(){return "http:"===He()||"https:"===He()}function He(){return l.location&&l.location.protocol||null}
  function Te(a){a=a||K();return xe(a)||ve(a)==Ae?!1:!0}function Ue(a){return "undefined"===typeof a?null:ke(a)}function Ve(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function We(a){if(null!==a)return JSON.parse(a)}function Qe(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Xe(a){a=a||K();return "Safari"==ve(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
  function Ye(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function Ze(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=K();b=Ke();this.b=xe(a)||"ReactNative"===b;}
  Ze.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Se()||"chrome-extension:"===He()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function $e(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
  function af(){var a=l.document,b=null;return $e()||!a?E():(new D(function(c){b=function(){$e()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).o(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function bf(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function cf(){return !(!L("fireauth.oauthhelper",l)&&!L("fireauth.iframe",l))}
  function df(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function ef(){var a=l.navigator;return a&&a.serviceWorker?E().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).o(function(){return null}):E(null)}var ff={};function gf(a){ff[a]||(ff[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a));}var hf;try{var jf={};Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:2});hf=2==jf.abcd;}catch(a){hf=!1;}function M(a,b,c){hf?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function N(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&M(a,c,b[c]);}function kf(a){var b={};N(b,a);return b}function lf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
  function mf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function nf(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)M(b,c,nf(a[c]));}return b}function of(a){var b=a&&(a[pf]?"phone":null);if(b&&a&&a[qf]){M(this,"uid",a[qf]);M(this,"displayName",a[rf]||null);var c=null;a[sf]&&(c=(new Date(a[sf])).toUTCString());M(this,"enrollmentTime",c);M(this,"factorId",b);}else throw new t("internal-error","Internal assert: invalid MultiFactorInfo object");}of.prototype.w=function(){return {uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};function tf(a){try{var b=new uf(a);}catch(c){b=null;}return b}
  var rf="displayName",sf="enrolledAt",qf="mfaEnrollmentId",pf="phoneInfo";function uf(a){of.call(this,a);M(this,"phoneNumber",a[pf]);}r(uf,of);uf.prototype.w=function(){var a=uf.bb.w.call(this);a.phoneNumber=this.phoneNumber;return a};function vf(a){var b={},c=a[wf],d=a[xf],e=a[yf];a=tf(a[zf]);if(!e||e!=Af&&e!=Bf&&!c||e==Bf&&!d||e==Cf&&!a)throw Error("Invalid checkActionCode response!");e==Bf?(b[Df]=c||null,b[Ef]=c||null,b[Ff]=d):(b[Df]=d||null,b[Ef]=d||null,b[Ff]=c||null);b[Gf]=a||null;M(this,Hf,e);M(this,If,nf(b));}
  var Cf="REVERT_SECOND_FACTOR_ADDITION",Af="EMAIL_SIGNIN",Bf="VERIFY_AND_CHANGE_EMAIL",wf="email",zf="mfaInfo",xf="newEmail",yf="requestType",Ff="email",Df="fromEmail",Gf="multiFactorInfo",Ef="previousEmail",If="data",Hf="operation";function Jf(a){a=J(a);var b=be(a,Kf)||null,c=be(a,Lf)||null,d=be(a,Mf)||null;d=d?Nf[d]||null:null;if(!b||!c||!d)throw new t("argument-error",Kf+", "+Lf+"and "+Mf+" are required in a valid action code URL.");N(this,{apiKey:b,operation:d,code:c,continueUrl:be(a,Of)||null,languageCode:be(a,Pf)||null,tenantId:be(a,Qf)||null});}
  var Kf="apiKey",Lf="oobCode",Of="continueUrl",Pf="languageCode",Mf="mode",Qf="tenantId",Nf={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:Cf,signIn:Af,verifyAndChangeEmail:Bf,verifyEmail:"VERIFY_EMAIL"};function Rf(a){try{return new Jf(a)}catch(b){return null}}function Sf(a){var b=a[Tf];if("undefined"===typeof b)throw new t("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new t("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Uf];if(c&&"object"===typeof c){b=c[Vf];var d=c[Wf];c=c[Xf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new t("argument-error",Wf+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
  typeof c||"string"===typeof c&&!c.length))throw new t("argument-error",Xf+" property must be a non empty string when specified.");this.b=c||null;}else{if("undefined"!==typeof b)throw new t("argument-error",Vf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new t("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new t("argument-error",Uf+" property must be a non null object when specified.");this.f=null;if((b=a[Yf])&&"object"===
  typeof b)if(b=b[Zf],"string"===typeof b&&b.length)this.f=b;else{if("undefined"!==typeof b)throw new t("argument-error",Zf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new t("argument-error",Yf+" property must be a non null object when specified.");b=a[$f];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new t("argument-error",$f+" property must be a boolean when specified.");this.c=!!b;a=a[ag];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
  typeof a&&!a.length))throw new t("argument-error",ag+" property must be a non empty string when specified.");this.i=a||null;}var Uf="android",ag="dynamicLinkDomain",$f="handleCodeInApp",Yf="iOS",Tf="url",Wf="installApp",Xf="minimumVersion",Vf="packageName",Zf="bundleId";
  function bg(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function cg(a){return Ra(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var dg=null;function eg(a){var b=[];fg(a,function(c){b.push(c);});return b}function fg(a,b){function c(m){for(;d<a.length;){var p=a.charAt(d++),v=dg[p];if(null!=v)return v;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return m}gg();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
  function gg(){if(!dg){dg={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++)for(var d=a.concat(b[c].split("")),e=0;e<d.length;e++){var f=d[e];void 0===dg[f]&&(dg[f]=e);}}}function hg(a){var b=ig(a);if(!(b&&b.sub&&b.iss&&b.aud&&b.exp))throw Error("Invalid JWT");this.h=a;this.a=b.exp;this.i=b.sub;a=Date.now()/1E3;this.g=b.iat||(a>this.a?this.a:a);this.b=b.provider_id||b.firebase&&b.firebase.sign_in_provider||null;this.f=b.firebase&&b.firebase.tenant||null;this.c=!!b.is_anonymous||"anonymous"==this.b;}hg.prototype.T=function(){return this.f};hg.prototype.l=function(){return this.c};hg.prototype.toString=function(){return this.h};
  function jg(a){try{return new hg(a)}catch(b){return null}}
  function ig(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{var d=eg(a);a=[];for(c=b=0;b<d.length;){var e=d[b++];if(128>e)a[c++]=String.fromCharCode(e);else if(191<e&&224>e){var f=d[b++];a[c++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){f=d[b++];var g=d[b++],h=d[b++],m=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;a[c++]=String.fromCharCode(55296+(m>>10));a[c++]=String.fromCharCode(56320+(m&1023));}else f=d[b++],g=
  d[b++],a[c++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return JSON.parse(a.join(""))}catch(p){}return null}var kg="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),lg=["client_id","response_type","scope","redirect_uri","state"],mg={nd:{Ja:"locale",va:700,ua:600,fa:"facebook.com",Ya:lg},pd:{Ja:null,va:500,ua:750,fa:"github.com",Ya:lg},qd:{Ja:"hl",va:515,ua:680,fa:"google.com",Ya:lg},wd:{Ja:"lang",va:485,ua:705,fa:"twitter.com",Ya:kg},kd:{Ja:"locale",va:640,ua:600,fa:"apple.com",Ya:[]}};
  function ng(a){for(var b in mg)if(mg[b].fa==a)return mg[b];return null}function og(a){var c=a&&a[tg];try{if(c)return new ug(a);if("undefined"!==typeof a[vg])return new wg(a)}catch(d){}return null}var vg="idToken",tg="providerId";
  function wg(a){var b=a[tg];if(!b&&a[vg]){var c=jg(a[vg]);c&&c.b&&(b=c.b);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);M(this,"providerId",b);M(this,"isNewUser",c);}function ug(a){wg.call(this,a);a=We(a.rawUserInfo||"{}");M(this,"profile",nf(a||{}));}r(ug,wg);
  function pg(a){ug.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}r(pg,ug);function rg(a){ug.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",this.profile&&this.profile.login||null);}r(rg,ug);function qg(a){ug.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}r(qg,ug);
  function sg(a){ug.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",a.screenName||null);}r(sg,ug);function xg(a){var b=J(a),c=be(b,"link"),d=be(J(c),"link");b=be(b,"deep_link_id");return be(J(b),"link")||b||d||c||a}function yg(a,b){if(!a&&!b)throw new t("internal-error","Internal assert: no raw session string available");if(a&&b)throw new t("internal-error","Internal assert: unable to determine the session type");this.a=a||null;this.b=b||null;this.type=this.a?zg:Ag;}var zg="enroll",Ag="signin";yg.prototype.Ha=function(){return this.a?E(this.a):E(this.b)};yg.prototype.w=function(){return this.type==zg?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}};function Bg(){}Bg.prototype.ka=function(){};Bg.prototype.b=function(){};Bg.prototype.c=function(){};Bg.prototype.w=function(){};function Cg(a,b){return a.then(function(c){if(c[Dg]){var d=jg(c[Dg]);if(!d||b!=d.i)throw new t("user-mismatch");return c}throw new t("user-mismatch");}).o(function(c){throw c&&c.code&&c.code==xa+"user-not-found"?new t("user-mismatch"):c;})}
  function Eg(a,b){if(b)this.a=b;else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",a);}Eg.prototype.ka=function(a){return Fg(a,Gg(this))};Eg.prototype.b=function(a,b){var c=Gg(this);c.idToken=b;return Hg(a,c)};Eg.prototype.c=function(a,b){return Cg(Ig(a,Gg(this)),b)};function Gg(a){return {pendingToken:a.a,requestUri:"http://localhost"}}Eg.prototype.w=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};
  function Jg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new Eg(a.providerId,a.pendingToken)}catch(b){}return null}
  function Kg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&M(this,"idToken",b.idToken),b.accessToken&&M(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&M(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)M(this,"accessToken",b.oauthToken),M(this,"secret",b.oauthTokenSecret);else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",c);}
  Kg.prototype.ka=function(a){return Fg(a,Lg(this))};Kg.prototype.b=function(a,b){var c=Lg(this);c.idToken=b;return Hg(a,c)};Kg.prototype.c=function(a,b){var c=Lg(this);return Cg(Ig(a,c),b)};
  function Lg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:fe(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
  Kg.prototype.w=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
  function Mg(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new Kg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function Ng(a,b){this.Qc=b||[];N(this,{providerId:a,isOAuthProvider:!0});this.Jb={};this.qb=(ng(a)||{}).Ja||null;this.pb=null;}
  Ng.prototype.Ka=function(a){this.Jb=nb(a);return this};function Og(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new t("argument-error",'SAML provider IDs must be prefixed with "saml."');Ng.call(this,a,[]);}r(Og,Ng);function Pg(a){Ng.call(this,a,lg);this.a=[];}r(Pg,Ng);Pg.prototype.Ca=function(a){Va(this.a,a)||this.a.push(a);return this};Pg.prototype.Rb=function(){return Za(this.a)};
  Pg.prototype.credential=function(a,b){var c;n(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new t("argument-error","credential failed: must provide the ID token and/or the access token.");return new Kg(this.providerId,c,this.providerId)};function Qg(){Pg.call(this,"facebook.com");}r(Qg,Pg);M(Qg,"PROVIDER_ID","facebook.com");M(Qg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
  function Rg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Qg).credential({accessToken:b})}function Sg(){Pg.call(this,"github.com");}r(Sg,Pg);M(Sg,"PROVIDER_ID","github.com");M(Sg,"GITHUB_SIGN_IN_METHOD","github.com");
  function Tg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Sg).credential({accessToken:b})}function Ug(){Pg.call(this,"google.com");this.Ca("profile");}r(Ug,Pg);M(Ug,"PROVIDER_ID","google.com");M(Ug,"GOOGLE_SIGN_IN_METHOD","google.com");function Vg(a,b){var c=a;n(a)&&(c=a.idToken,b=a.accessToken);return (new Ug).credential({idToken:c,accessToken:b})}function Wg(){Ng.call(this,"twitter.com",kg);}
  r(Wg,Ng);M(Wg,"PROVIDER_ID","twitter.com");M(Wg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Xg(a,b){var c=a;n(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new t("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Kg("twitter.com",c,"twitter.com")}
  function Yg(a,b,c){this.a=a;this.f=b;M(this,"providerId","password");M(this,"signInMethod",c===Zg.EMAIL_LINK_SIGN_IN_METHOD?Zg.EMAIL_LINK_SIGN_IN_METHOD:Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);}Yg.prototype.ka=function(a){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,$g,{email:this.a,oobCode:this.f}):O(a,ah,{email:this.a,password:this.f})};
  Yg.prototype.b=function(a,b){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,bh,{idToken:b,email:this.a,oobCode:this.f}):O(a,ch,{idToken:b,email:this.a,password:this.f})};Yg.prototype.c=function(a,b){return Cg(this.ka(a),b)};Yg.prototype.w=function(){return {email:this.a,password:this.f,signInMethod:this.signInMethod}};function dh(a){return a&&a.email&&a.password?new Yg(a.email,a.password,a.signInMethod):null}function Zg(){N(this,{providerId:"password",isOAuthProvider:!1});}
  function eh(a,b){b=fh(b);if(!b)throw new t("argument-error","Invalid email link!");return new Yg(a,b.code,Zg.EMAIL_LINK_SIGN_IN_METHOD)}function fh(a){a=xg(a);return (a=Rf(a))&&a.operation===Af?a:null}N(Zg,{PROVIDER_ID:"password"});N(Zg,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});N(Zg,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function gh(a){if(!(a.fb&&a.eb||a.La&&a.ea))throw new t("internal-error");this.a=a;M(this,"providerId","phone");this.fa="phone";M(this,"signInMethod","phone");}
  gh.prototype.ka=function(a){return a.gb(hh(this))};gh.prototype.b=function(a,b){var c=hh(this);c.idToken=b;return O(a,ih,c)};gh.prototype.c=function(a,b){var c=hh(this);c.operation="REAUTH";a=O(a,jh,c);return Cg(a,b)};gh.prototype.w=function(){var a={providerId:"phone"};this.a.fb&&(a.verificationId=this.a.fb);this.a.eb&&(a.verificationCode=this.a.eb);this.a.La&&(a.temporaryProof=this.a.La);this.a.ea&&(a.phoneNumber=this.a.ea);return a};
  function kh(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};w(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new gh(b)}return null}function hh(a){return a.a.La&&a.a.ea?{temporaryProof:a.a.La,phoneNumber:a.a.ea}:{sessionInfo:a.a.fb,code:a.a.eb}}
  function lh(a){try{this.a=a||firebase.auth();}catch(b){throw new t("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}N(this,{providerId:"phone",isOAuthProvider:!1});}
  lh.prototype.gb=function(a,b){var c=this.a.a;return E(b.verify()).then(function(d){if("string"!==typeof d)throw new t("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":var e=n(a)?a.session:null,f=n(a)?a.phoneNumber:a,g;e&&e.type==zg?g=e.Ha().then(function(h){return mh(c,{idToken:h,phoneEnrollmentInfo:{phoneNumber:f,recaptchaToken:d}})}):e&&e.type==Ag?g=e.Ha().then(function(h){return nh(c,
  {mfaPendingCredential:h,mfaEnrollmentId:a.multiFactorHint&&a.multiFactorHint.uid||a.multiFactorUid,phoneSignInInfo:{recaptchaToken:d}})}):g=oh(c,{phoneNumber:f,recaptchaToken:d});return g.then(function(h){"function"===typeof b.reset&&b.reset();return h},function(h){"function"===typeof b.reset&&b.reset();throw h;});default:throw new t("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};
  function ph(a,b){if(!a)throw new t("missing-verification-id");if(!b)throw new t("missing-verification-code");return new gh({fb:a,eb:b})}N(lh,{PROVIDER_ID:"phone"});N(lh,{PHONE_SIGN_IN_METHOD:"phone"});
  function qh(a){if(a.temporaryProof&&a.phoneNumber)return new gh({La:a.temporaryProof,ea:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Vg(f,c);case "facebook.com":return Rg(c);case "github.com":return Tg(c);case "twitter.com":return Xg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new Eg(b,g):new Kg(b,{pendingToken:g,idToken:a.oauthIdToken,
  accessToken:a.oauthAccessToken},b):(new Pg(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function rh(a){if(!a.isOAuthProvider)throw new t("invalid-oauth-provider");}function sh(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new t("invalid-auth-event");if(this.g&&!this.f)throw new t("invalid-auth-event");}else throw new t("invalid-auth-event");}sh.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};sh.prototype.T=function(){return this.h};
  sh.prototype.w=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};function th(a){a=a||{};return a.type?new sh(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Aa(a.error),a.postBody,a.tenantId):null}function uh(){this.b=null;this.a=[];}var vh=null;function wh(a){var b=vh;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=L("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function xh(a){var b="unauthorized-domain",c=void 0,d=J(a);a=d.a;d=d.c;"chrome-extension"==d?c=Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
  t.call(this,b,c);}r(xh,t);function yh(a,b,c){t.call(this,a,c);a=b||{};a.Kb&&M(this,"email",a.Kb);a.ea&&M(this,"phoneNumber",a.ea);a.credential&&M(this,"credential",a.credential);a.$b&&M(this,"tenantId",a.$b);}r(yh,t);yh.prototype.w=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.w();b&&z(a,b);return a};yh.prototype.toJSON=function(){return this.w()};
  function zh(a){if(a.code){var b=a.code||"";0==b.indexOf(xa)&&(b=b.substring(xa.length));var c={credential:qh(a),$b:a.tenantId};if(a.email)c.Kb=a.email;else if(a.phoneNumber)c.ea=a.phoneNumber;else if(!c.credential)return new t(b,a.message||void 0);return new yh(b,c,a.message)}return null}function Ah(){}Ah.prototype.c=null;function Bh(a){return a.c||(a.c=a.b())}var Ch;function Dh(){}r(Dh,Ah);Dh.prototype.a=function(){var a=Eh(this);return a?new ActiveXObject(a):new XMLHttpRequest};Dh.prototype.b=function(){var a={};Eh(this)&&(a[0]=!0,a[1]=!0);return a};
  function Eh(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}Ch=new Dh;function Fh(){}r(Fh,Ah);Fh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Gh;throw Error("Unsupported browser");};Fh.prototype.b=function(){return {}};
  function Gh(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=q(this.qc,this);this.a.onerror=q(this.Tb,this);this.a.onprogress=q(this.rc,this);this.a.ontimeout=q(this.vc,this);}k=Gh.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
  k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.qc=function(){this.status=200;this.response=this.responseText=this.a.responseText;Hh(this,4);};k.Tb=function(){this.status=500;this.response=this.responseText="";Hh(this,4);};k.vc=function(){this.Tb();};
  k.rc=function(){this.status=200;Hh(this,1);};function Hh(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function Ih(a,b,c){this.reset(a,b,c,void 0,void 0);}Ih.prototype.a=null;Ih.prototype.reset=function(a,b,c,d,e){delete this.a;};function Kh(a){this.f=a;this.b=this.c=this.a=null;}function Lh(a,b){this.name=a;this.value=b;}Lh.prototype.toString=function(){return this.name};var Mh=new Lh("SEVERE",1E3),Nh=new Lh("WARNING",900),Oh=new Lh("CONFIG",700),Ph=new Lh("FINE",500);function Qh(a){if(a.c)return a.c;if(a.a)return Qh(a.a);Ga("Root logger has no level set.");return null}Kh.prototype.log=function(a,b,c){if(a.value>=Qh(this).value)for(oa(b)&&(b=b()),a=new Ih(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var Rh={},Sh=null;
  function Th(a){Sh||(Sh=new Kh(""),Rh[""]=Sh,Sh.c=Oh);var b;if(!(b=Rh[a])){b=new Kh(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Th(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Rh[a]=b;}return b}function Uh(a,b){a&&a.log(Ph,b,void 0);}function Vh(a){this.f=a;}r(Vh,Ah);Vh.prototype.a=function(){return new Wh(this.f)};Vh.prototype.b=function(a){return function(){return a}}({});function Wh(a){H.call(this);this.u=a;this.h=void 0;this.readyState=Xh;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.l=new Headers;this.b=null;this.s="GET";this.f="";this.a=!1;this.i=Th("goog.net.FetchXmlHttp");this.m=this.c=this.g=null;}r(Wh,H);var Xh=0;k=Wh.prototype;
  k.open=function(a,b){if(this.readyState!=Xh)throw this.abort(),Error("Error reopening a connection");this.s=a;this.f=b;this.readyState=1;Yh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.l,method:this.s,credentials:this.h,cache:void 0};a&&(b.body=a);this.u.fetch(new Request(this.f,b)).then(this.uc.bind(this),this.Va.bind(this));};
  k.abort=function(){this.response=this.responseText="";this.l=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Zh(this));this.readyState=Xh;};
  k.uc=function(a){this.a&&(this.g=a,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=a.headers,this.readyState=2,Yh(this)),this.a&&(this.readyState=3,Yh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.sc.bind(this),this.Va.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.m=new TextDecoder,$h(this)):a.text().then(this.tc.bind(this),this.Va.bind(this)))));};
  function $h(a){a.c.read().then(a.pc.bind(a)).catch(a.Va.bind(a));}k.pc=function(a){if(this.a){var b=this.m.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?Zh(this):Yh(this);3==this.readyState&&$h(this);}};k.tc=function(a){this.a&&(this.response=this.responseText=a,Zh(this));};k.sc=function(a){this.a&&(this.response=a,Zh(this));};k.Va=function(a){var b=this.i;b&&b.log(Nh,"Failed to fetch url "+this.f,a instanceof Error?a:Error(a));this.a&&Zh(this);};
  function Zh(a){a.readyState=4;a.g=null;a.c=null;a.m=null;Yh(a);}k.setRequestHeader=function(a,b){this.l.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.i)&&a.log(Nh,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")};
  k.getAllResponseHeaders=function(){if(!this.b){var a=this.i;a&&a.log(Nh,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Yh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(Wh.prototype,"withCredentials",{get:function(){return "include"===this.h},set:function(a){this.h=a?"include":"same-origin";}});function ai(a){H.call(this);this.headers=new Jd;this.D=a||null;this.c=!1;this.C=this.a=null;this.h=this.P=this.l="";this.f=this.N=this.i=this.J=!1;this.g=0;this.s=null;this.m=bi;this.u=this.S=!1;}r(ai,H);var bi="";ai.prototype.b=Th("goog.net.XhrIo");var ci=/^https?$/i,di=["POST","PUT"];
  function ei(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.P=c;a.J=!1;a.c=!0;a.a=a.D?a.D.a():Ch.a();a.C=a.D?Bh(a.D):Bh(Ch);a.a.onreadystatechange=q(a.Wb,a);try{Uh(a.b,fi(a,"Opening Xhr")),a.N=!0,a.a.open(c,String(b),!0),a.N=!1;}catch(g){Uh(a.b,fi(a,"Error opening Xhr: "+g.message));gi(a,g);return}b=d||"";var f=new Jd(a.headers);e&&Id(e,function(g,h){f.set(h,g);});e=Ta(f.Y());d=l.FormData&&b instanceof
  l.FormData;!Va(di,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.S&&(a.a.withCredentials=a.S);try{hi(a),0<a.g&&(a.u=ii(a.a),Uh(a.b,fi(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.u)),a.u?(a.a.timeout=a.g,a.a.ontimeout=q(a.Ma,a)):a.s=Ed(a.Ma,a.g,a)),Uh(a.b,fi(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){Uh(a.b,
  fi(a,"Send error: "+g.message)),gi(a,g);}}function ii(a){return Wb&&fc(9)&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function Ua(a){return "content-type"==a.toLowerCase()}k=ai.prototype;k.Ma=function(){"undefined"!=typeof ha&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Uh(this.b,fi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function gi(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;ji(a);ki(a);}
  function ji(a){a.J||(a.J=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(Uh(this.b,fi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ki(this));};k.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ki(this,!0));ai.bb.Da.call(this);};k.Wb=function(){this.ya||(this.N||this.i||this.f?li(this):this.Jc());};k.Jc=function(){li(this);};
  function li(a){if(a.c&&"undefined"!=typeof ha)if(a.C[1]&&4==mi(a)&&2==ni(a))Uh(a.b,fi(a,"Local request error detected and ignored"));else if(a.i&&4==mi(a))Ed(a.Wb,0,a);else if(a.dispatchEvent("readystatechange"),4==mi(a)){Uh(a.b,fi(a,"Request complete"));a.c=!1;try{var b=ni(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Md)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
  f=g.substr(0,g.length-1);}e=!ci.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else{try{var h=2<mi(a)?a.a.statusText:"";}catch(m){Uh(a.b,"Can not get status: "+m.message),h="";}a.h=h+" ["+ni(a)+"]";ji(a);}}finally{ki(a);}}}function ki(a,b){if(a.a){hi(a);var c=a.a,d=a.C[0]?la:null;a.a=null;a.C=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(Mh,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
  function hi(a){a.a&&a.u&&(a.a.ontimeout=null);a.s&&(l.clearTimeout(a.s),a.s=null);}function mi(a){return a.a?a.a.readyState:0}function ni(a){try{return 2<mi(a)?a.a.status:-1}catch(b){return -1}}function oi(a){try{return a.a?a.a.responseText:""}catch(b){return Uh(a.b,"Can not get responseText: "+b.message),""}}
  k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case bi:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Mh,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Uh(this.b,"Can not get response: "+b.message),null}};function fi(a,b){return b+" ["+a.P+" "+a.l+" "+ni(a)+"]"}function pi(a){var b=qi;this.g=[];this.u=b;this.s=a||null;this.f=this.a=!1;this.c=void 0;this.v=this.C=this.i=!1;this.h=0;this.b=null;this.l=0;}pi.prototype.cancel=function(a){if(this.a)this.c instanceof pi&&this.c.cancel();else{if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.u?this.u.call(this.s,this):this.v=!0;this.a||(a=new ri(this),si(this),ti(this,!1,a));}};pi.prototype.m=function(a,b){this.i=!1;ti(this,a,b);};function ti(a,b,c){a.a=!0;a.c=c;a.f=!b;ui(a);}
  function si(a){if(a.a){if(!a.v)throw new vi(a);a.v=!1;}}function wi(a,b){xi(a,null,b,void 0);}function xi(a,b,c,d){a.g.push([b,c,d]);a.a&&ui(a);}pi.prototype.then=function(a,b,c){var d,e,f=new D(function(g,h){d=g;e=h;});xi(this,d,function(g){g instanceof ri?f.cancel():e(g);});return f.then(a,b,c)};pi.prototype.$goog_Thenable=!0;function yi(a){return Sa(a.g,function(b){return oa(b[1])})}
  function ui(a){if(a.h&&a.a&&yi(a)){var b=a.h,c=zi[b];c&&(l.clearTimeout(c.a),delete zi[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.s,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(Ea(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(m){b=m,a.f=!0,yi(a)||(c=!0);}}a.c=b;d&&(h=q(a.m,a,!0),d=q(a.m,a,!1),b instanceof pi?(xi(b,h,d),b.C=!0):b.then(h,d));c&&(b=
  new Ai(b),zi[b.a]=b,a.h=b.a);}function vi(){u.call(this);}r(vi,u);vi.prototype.message="Deferred has already fired";vi.prototype.name="AlreadyCalledError";function ri(){u.call(this);}r(ri,u);ri.prototype.message="Deferred was canceled";ri.prototype.name="CanceledError";function Ai(a){this.a=l.setTimeout(q(this.c,this),0);this.b=a;}Ai.prototype.c=function(){delete zi[this.a];throw this.b;};var zi={};function Bi(a){var c=document,d=yb(a).toString(),e=oc(document,"SCRIPT"),f={Xb:e,Ma:void 0},g=new pi(f),h=null,m=5E3;(h=window.setTimeout(function(){Ci(e,!0);var p=new Di(Ei,"Timeout reached for loading script "+d);si(g);ti(g,!1,p);},m),f.Ma=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(Ci(e,!1,h),si(g),ti(g,!0,null));};e.onerror=function(){Ci(e,!0,h);var p=new Di(Fi,"Error while loading script "+
  d);si(g);ti(g,!1,p);};f={};z(f,{type:"text/javascript",charset:"UTF-8"});lc(e,f);Ob(e,a);Gi(c).appendChild(e);return g}function Gi(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function qi(){if(this&&this.Xb){var a=this.Xb;a&&"SCRIPT"==a.tagName&&Ci(a,!0,this.Ma);}}
  function Ci(a,b,c){null!=c&&l.clearTimeout(c);a.onload=la;a.onerror=la;a.onreadystatechange=la;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var Fi=0,Ei=1;function Di(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a;}r(Di,u);function Hi(a){this.f=a;}r(Hi,Ah);Hi.prototype.a=function(){return new this.f};Hi.prototype.b=function(){return {}};
  function Ii(a,b,c){this.c=a;a=b||{};this.l=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.m=a.secureTokenTimeout||Ji;this.g=nb(a.secureTokenHeaders||Ki);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.i=a.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/";this.v=a.firebaseTimeout||Li;this.a=nb(a.firebaseHeaders||Mi);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==Ke();c=l.XMLHttpRequest||
  c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&!Je())throw new t("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;Je()?this.f=new Vh(self):Le()?this.f=new Hi(c):this.f=new Fh;this.b=null;}var Ni,Dg="idToken",Ji=new Ze(3E4,6E4),Ki={"Content-Type":"application/x-www-form-urlencoded"},Li=new Ze(3E4,6E4),Mi={"Content-Type":"application/json"};function Oi(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
  function Pi(a,b){b&&(a.l=Qi("https://securetoken.googleapis.com/v1/token",b),a.h=Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",b),a.i=Qi("https://identitytoolkit.googleapis.com/v2/",b));}function Qi(a,b){a=J(a);b=J(b.url);a.f=a.a+a.f;Pd(a,b.c);a.a=b.a;Qd(a,b.g);return a.toString()}function Ri(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}Ii.prototype.T=function(){return this.b};
  function Si(a,b,c,d,e,f,g){ue()||Je()?a=q(a.u,a):(Ni||(Ni=new D(function(h,m){Ti(h,m);})),a=q(a.s,a));a(b,c,d,e,f,g);}
  Ii.prototype.u=function(a,b,c,d,e,f){if(Je()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new t("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new ai(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}qd(g,"complete",function(){h&&clearTimeout(h);var m=null;try{m=
  JSON.parse(oi(this))||null;}catch(p){m=null;}b&&b(m);});wd(g,"ready",function(){h&&clearTimeout(h);Xc(this);});wd(g,"timeout",function(){h&&clearTimeout(h);Xc(this);b&&b(null);});ei(g,a,c,d,e);};var Ui=new qb(rb,"https://apis.google.com/js/client.js?onload=%{onload}"),Vi="__fcb"+Math.floor(1E6*Math.random()).toString();
  function Ti(a,b){if(((window.gapi||{}).client||{}).request)a();else{l[Vi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=zb(Ui,{onload:Vi});wi(Bi(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
  Ii.prototype.s=function(a,b,c,d,e){var f=this;Ni.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).o(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
  function Wi(a,b){return new D(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Si(a,a.l+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Xi(e)):e.access_token&&e.refresh_token?c(e):d(new t("internal-error")):d(new t("network-request-failed"));},"POST",fe(b).toString(),a.g,a.m.get()):d(new t("internal-error"));})}
  function Yi(a,b,c,d,e,f,g){var h=J(b+c);I(h,"key",a.c);g&&I(h,"cb",Date.now().toString());var m="GET"==d;if(m)for(var p in e)e.hasOwnProperty(p)&&I(h,p,e[p]);return new D(function(v,B){Si(a,h.toString(),function(A){A?A.error?B(Xi(A,f||{})):v(A):B(new t("network-request-failed"));},d,m?void 0:ke(Ve(e)),a.a,a.v.get());})}function Zi(a){a=a.email;if("string"!==typeof a||!De.test(a))throw new t("invalid-email");}function $i(a){"email"in a&&Zi(a);}
  function aj(a,b){return O(a,bj,{identifier:b,continueUri:Se()?re():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function cj(a){return O(a,dj,{}).then(function(b){return b.authorizedDomains||[]})}function P(a){if(!a[Dg]){if(a.mfaPendingCredential)throw new t("multi-factor-auth-required",null,nb(a));throw new t("internal-error");}}
  function ej(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new t("internal-error");}else{if(!a.sessionInfo)throw new t("missing-verification-id");if(!a.code)throw new t("missing-verification-code");}}Ii.prototype.Ab=function(){return O(this,fj,{})};Ii.prototype.Cb=function(a,b){return O(this,gj,{idToken:a,email:b})};Ii.prototype.Db=function(a,b){return O(this,ch,{idToken:a,password:b})};var hj={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=Ii.prototype;
  k.Eb=function(a,b){var c={idToken:a},d=[];lb(hj,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return O(this,gj,c)};k.wb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};z(a,b);return O(this,ij,a)};k.xb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};z(a,b);return O(this,jj,a)};k.vb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};z(a,b);return O(this,kj,a)};
  k.Fb=function(a,b,c){a={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:a,newEmail:b};z(a,c);return O(this,lj,a)};function oh(a,b){return O(a,mj,b)}k.gb=function(a){return O(this,nj,a)};function mh(a,b){return O(a,oj,b).then(function(c){return c.phoneSessionInfo.sessionInfo})}
  function pj(a){if(!a.phoneVerificationInfo)throw new t("internal-error");if(!a.phoneVerificationInfo.sessionInfo)throw new t("missing-verification-id");if(!a.phoneVerificationInfo.code)throw new t("missing-verification-code");}function nh(a,b){return O(a,qj,b).then(function(c){return c.phoneResponseInfo.sessionInfo})}function rj(a,b,c){return O(a,sj,{idToken:b,deleteProvider:c})}function tj(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new t("internal-error");}
  function uj(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Ud(a.postBody),je(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
  function vj(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=zh(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=zh(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=zh(a)):a.errorMessage&&(b=wj(a.errorMessage));if(b)throw b;P(a);}function Fg(a,b){b.returnIdpCredential=!0;return O(a,xj,b)}function Hg(a,b){b.returnIdpCredential=!0;return O(a,yj,b)}
  function Ig(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return O(a,zj,b)}function Aj(a){if(!a.oobCode)throw new t("invalid-action-code");}k.ob=function(a,b){return O(this,Bj,{oobCode:a,newPassword:b})};k.Sa=function(a){return O(this,Cj,{oobCode:a})};k.kb=function(a){return O(this,Dj,{oobCode:a})};
  var Dj={endpoint:"setAccountInfo",A:Aj,Z:"email",B:!0},Cj={endpoint:"resetPassword",A:Aj,G:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b&&"VERIFY_AND_CHANGE_EMAIL"!=b)throw new t("internal-error");},B:!0},Ej={endpoint:"signupNewUser",A:function(a){Zi(a);if(!a.password)throw new t("weak-password");},G:P,V:!0,B:!0},bj={endpoint:"createAuthUri",B:!0},Fj={endpoint:"deleteAccount",O:["idToken"]},sj={endpoint:"setAccountInfo",O:["idToken","deleteProvider"],A:function(a){if(!Array.isArray(a.deleteProvider))throw new t("internal-error");
  }},$g={endpoint:"emailLinkSignin",O:["email","oobCode"],A:Zi,G:P,V:!0,B:!0},bh={endpoint:"emailLinkSignin",O:["idToken","email","oobCode"],A:Zi,G:P,V:!0},Gj={endpoint:"accounts/mfaEnrollment:finalize",O:["idToken","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Hj={endpoint:"accounts/mfaSignIn:finalize",O:["mfaPendingCredential","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Ij={endpoint:"getAccountInfo"},jj={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new t("internal-error");
  Zi(a);},Z:"email",B:!0},kj={endpoint:"getOobConfirmationCode",O:["idToken","requestType"],A:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},lj={endpoint:"getOobConfirmationCode",O:["idToken","newEmail","requestType"],A:function(a){if("VERIFY_AND_CHANGE_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},ij={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(a){if("PASSWORD_RESET"!=a.requestType)throw new t("internal-error");
  Zi(a);},Z:"email",B:!0},dj={mb:!0,endpoint:"getProjectConfig",Vb:"GET"},Jj={mb:!0,endpoint:"getRecaptchaParam",Vb:"GET",G:function(a){if(!a.recaptchaSiteKey)throw new t("internal-error");}},Bj={endpoint:"resetPassword",A:Aj,Z:"email",B:!0},mj={endpoint:"sendVerificationCode",O:["phoneNumber","recaptchaToken"],Z:"sessionInfo",B:!0},gj={endpoint:"setAccountInfo",O:["idToken"],A:$i,V:!0},ch={endpoint:"setAccountInfo",O:["idToken"],A:function(a){$i(a);if(!a.password)throw new t("weak-password");},G:P,
  V:!0},fj={endpoint:"signupNewUser",G:P,V:!0,B:!0},oj={endpoint:"accounts/mfaEnrollment:start",O:["idToken","phoneEnrollmentInfo"],A:function(a){if(!a.phoneEnrollmentInfo)throw new t("internal-error");if(!a.phoneEnrollmentInfo.phoneNumber)throw new t("missing-phone-number");if(!a.phoneEnrollmentInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneSessionInfo||!a.phoneSessionInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},qj={endpoint:"accounts/mfaSignIn:start",
  O:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(a){if(!a.phoneSignInInfo||!a.phoneSignInInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneResponseInfo||!a.phoneResponseInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},xj={endpoint:"verifyAssertion",A:tj,Za:uj,G:vj,V:!0,B:!0},zj={endpoint:"verifyAssertion",A:tj,Za:uj,G:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new t("user-not-found");if(a.errorMessage)throw wj(a.errorMessage);
  P(a);},V:!0,B:!0},yj={endpoint:"verifyAssertion",A:function(a){tj(a);if(!a.idToken)throw new t("internal-error");},Za:uj,G:vj,V:!0},Kj={endpoint:"verifyCustomToken",A:function(a){if(!a.token)throw new t("invalid-custom-token");},G:P,V:!0,B:!0},ah={endpoint:"verifyPassword",A:function(a){Zi(a);if(!a.password)throw new t("wrong-password");},G:P,V:!0,B:!0},nj={endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},ih={endpoint:"verifyPhoneNumber",A:function(a){if(!a.idToken)throw new t("internal-error");ej(a);},
  G:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",zh(a);P(a);}},jh={Ib:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},Lj={endpoint:"accounts/mfaEnrollment:withdraw",O:["idToken","mfaEnrollmentId"],G:function(a){if(!!a[Dg]^!!a.refreshToken)throw new t("internal-error");},B:!0,Na:!0};
  function O(a,b,c){if(!mf(c,b.O))return F(new t("internal-error"));var d=!!b.Na,e=b.Vb||"POST",f;return E(c).then(b.A).then(function(){b.V&&(c.returnSecureToken=!0);b.B&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return d?Yi(a,a.i,b.endpoint,e,c,b.Ib,b.mb||!1):Yi(a,a.h,b.endpoint,e,c,b.Ib,b.mb||!1)}).then(function(g){f=g;return b.Za?b.Za(c,f):f}).then(b.G).then(function(){if(!b.Z)return f;if(!(b.Z in f))throw new t("internal-error");return f[b.Z]})}
  function wj(a){return Xi({error:{errors:[{message:a}],code:400,message:a}})}
  function Xi(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new t(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
  MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
  EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
  OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
  QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
  INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",
  UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"};z(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new t(d[e],b);!b&&a&&(b=Ue(a));return new t("internal-error",b)}function Mj(a){this.b=a;this.a=null;this.sb=Nj(this);}
  function Nj(a){return Oj().then(function(){return new D(function(b,c){L("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},Pj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
  function Qj(a,b){return a.sb.then(function(){return new D(function(c){a.a.send(b.type,b,c,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function Rj(a,b){a.sb.then(function(){a.a.register("authEvent",b,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var Sj=new qb(rb,"https://apis.google.com/js/api.js?onload=%{onload}"),Tj=new Ze(3E4,6E4),Pj=new Ze(5E3,15E3),Uj=null;
  function Oj(){return Uj?Uj:Uj=(new D(function(a,b){function c(){Ye();L("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ye();b(Error("Network Error"));},timeout:Tj.get()});}if(L("gapi.iframes.Iframe"))a();else if(L("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){L("gapi.load")?c():b(Error("Network Error"));};d=zb(Sj,{onload:d});E(Bi(d)).o(function(){b(Error("Network Error"));});}})).o(function(a){Uj=null;throw a;})}function Vj(a,b,c,d){this.l=a;this.h=b;this.i=c;this.g=d;this.f=null;this.g?(a=J(this.g.url),a=ce(a.c,a.a,a.g,"/emulator/auth/iframe")):a=ce("https",this.l,null,"/__/auth/iframe");this.a=a;I(this.a,"apiKey",this.h);I(this.a,"appName",this.i);this.b=null;this.c=[];}Vj.prototype.toString=function(){this.f?I(this.a,"v",this.f):ie(this.a.b,"v");this.b?I(this.a,"eid",this.b):ie(this.a.b,"eid");this.c.length?I(this.a,"fw",this.c.join(",")):ie(this.a.b,"fw");return this.a.toString()};
  function Wj(a,b,c,d,e,f){this.u=a;this.s=b;this.c=c;this.m=d;this.v=f;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}Wj.prototype.zb=function(a){this.h=a;return this};
  Wj.prototype.toString=function(){if(this.v){var a=J(this.v.url);a=ce(a.c,a.a,a.g,"/emulator/auth/handler");}else a=ce("https",this.u,null,"/__/auth/handler");I(a,"apiKey",this.s);I(a,"appName",this.c);I(a,"authType",this.m);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().la();}catch(h){c=null;}b.pb=c;I(a,"providerId",this.a.providerId);c=this.a;b=Ve(c.Jb);for(var d in b)b[d]=b[d].toString();d=c.Qc;b=nb(b);for(var e=0;e<d.length;e++){var f=d[e];f in b&&delete b[f];}c.qb&&
  c.pb&&!b[c.qb]&&(b[c.qb]=c.pb);mb(b)||I(a,"customParameters",Ue(b));}"function"===typeof this.a.Rb&&(c=this.a.Rb(),c.length&&I(a,"scopes",c.join(",")));this.l?I(a,"redirectUrl",this.l):ie(a.b,"redirectUrl");this.g?I(a,"eventId",this.g):ie(a.b,"eventId");this.i?I(a,"v",this.i):ie(a.b,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!be(a,g)&&I(a,g,this.b[g]);this.h?I(a,"tid",this.h):ie(a.b,"tid");this.f?I(a,"eid",this.f):ie(a.b,"eid");g=Xj(this.c);g.length&&I(a,"fw",g.join(","));return a.toString()};
  function Xj(a){try{return firebase.app(a).auth().Ga()}catch(b){return []}}function Yj(a,b,c,d,e,f){this.s=a;this.g=b;this.b=c;this.f=f;this.c=d||null;this.i=e||null;this.l=this.u=this.C=null;this.h=[];this.m=this.a=null;}
  function Zj(a){var b=re();return cj(a).then(function(c){a:{var d=J(b),e=d.c;d=d.a;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var m=e;0==g.indexOf("chrome-extension://")?h=J(g).a==h&&"chrome-extension"==m:"http"!=m&&"https"!=m?h=!1:Ce.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new xh(re());})}
  function ak(a){if(a.m)return a.m;a.m=Ee().then(function(){if(!a.u){var b=a.c,c=a.i,d=Xj(a.b),e=new Vj(a.s,a.g,a.b,a.f);e.f=b;e.b=c;e.c=Za(d||[]);a.u=e.toString();}a.v=new Mj(a.u);bk(a);});return a.m}k=Yj.prototype;k.Pb=function(a,b,c){var d=new t("popup-closed-by-user"),e=new t("web-storage-unsupported"),f=this,g=!1;return this.ma().then(function(){ck(f).then(function(h){h||(a&&ye(a),b(e),g=!0);});}).o(function(){}).then(function(){if(!g)return Be(a)}).then(function(){if(!g)return Fd(c).then(function(){b(d);})})};
  k.Yb=function(){var a=K();return !Te(a)&&!Xe(a)};k.Ub=function(){return !1};
  k.Nb=function(a,b,c,d,e,f,g,h){if(!a)return F(new t("popup-blocked"));if(g&&!Te())return this.ma().o(function(p){ye(a);e(p);}),d(),E();this.a||(this.a=Zj(dk(this)));var m=this;return this.a.then(function(){var p=m.ma().o(function(v){ye(a);e(v);throw v;});d();return p}).then(function(){rh(c);if(!g){var p=ek(m.s,m.g,m.b,b,c,null,f,m.c,void 0,m.i,h,m.f);se(p,a);}}).o(function(p){"auth/network-request-failed"==p.code&&(m.a=null);throw p;})};
  function dk(a){a.l||(a.C=a.c?Oe(a.c,Xj(a.b)):null,a.l=new Ii(a.g,Ca(a.i),a.C),a.f&&Pi(a.l,a.f));return a.l}k.Ob=function(a,b,c,d){this.a||(this.a=Zj(dk(this)));var e=this;return this.a.then(function(){rh(b);var f=ek(e.s,e.g,e.b,a,b,re(),c,e.c,void 0,e.i,d,e.f);se(f);}).o(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.ma=function(){var a=this;return ak(this).then(function(){return a.v.sb}).o(function(){a.a=null;throw new t("network-request-failed");})};k.ac=function(){return !0};
  function ek(a,b,c,d,e,f,g,h,m,p,v,B){a=new Wj(a,b,c,d,e,B);a.l=f;a.g=g;a.i=h;a.b=nb(m||null);a.f=p;return a.zb(v).toString()}function bk(a){if(!a.v)throw Error("IfcHandler must be initialized!");Rj(a.v,function(b){var c={};if(b&&b.authEvent){var d=!1;b=th(b.authEvent);for(c=0;c<a.h.length;c++)d=a.h[c](b)||d;c={};c.status=d?"ACK":"ERROR";return E(c)}c.status="ERROR";return E(c)});}
  function ck(a){var b={type:"webStorageSupport"};return ak(a).then(function(){return Qj(a.v,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Ea=function(a){this.h.push(a);};k.Ta=function(a){Xa(this.h,function(b){return b==a});};function fk(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new t("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=fk.prototype;k.get=function(a){return E(this.a.getItem(a)).then(function(b){return b&&We(b)})};k.set=function(a,b){return E(this.a.setItem(a,Ue(b)))};k.U=function(a){return E(this.a.removeItem(a))};k.ca=function(){};k.ia=function(){};function gk(a){this.b=a;this.a={};this.f=q(this.c,this);}var hk=[];function ik(){var a=Je()?self:null;w(hk,function(c){c.b==a&&(b=c);});if(!b){var b=new gk(a);hk.push(b);}return b}
  gk.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];w(d,function(f){e.push(E().then(function(){return f(a.origin,a.data.data)}));});Jc(e).then(function(f){var g=[];w(f,function(h){g.push({fulfilled:h.Qb,value:h.value,reason:h.reason?h.reason.message:void 0});});w(g,function(h){for(var m in h)"undefined"===typeof h[m]&&delete h[m];});a.ports[0].postMessage({status:"done",eventId:c,
  eventType:b,response:g});});}};function jk(a,b,c){mb(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function kk(a){this.a=a;}kk.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function lk(a){this.c=a;this.b=!1;this.a=[];}
  function mk(a,b,c,d){var e,f=c||{},g,h,m,p=null;if(a.b)return F(Error("connection_unavailable"));var v=d?800:50,B="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new D(function(A,Q){B?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),B.port1.start(),h=setTimeout(function(){Q(Error("unsupported_event"));},v),g=function(ya){ya.data.eventId===e&&("ack"===ya.data.status?(clearTimeout(h),m=setTimeout(function(){Q(Error("timeout"));},3E3)):"done"===ya.data.status?(clearTimeout(m),
  "undefined"!==typeof ya.data.response?A(ya.data.response):Q(Error("unknown_error"))):(clearTimeout(h),clearTimeout(m),Q(Error("invalid_response"))));},p={messageChannel:B,onMessage:g},a.a.push(p),B.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[B.port2])):Q(Error("connection_unavailable"));})).then(function(A){nk(a,p);return A}).o(function(A){nk(a,p);throw A;})}
  function nk(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Xa(a.a,function(e){return e==b});}}lk.prototype.close=function(){for(;0<this.a.length;)nk(this,this.a[0]);this.b=!0;};function ok(){if(!pk())throw new t("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.m=l.indexedDB;this.type="indexedDB";this.g=this.v=this.f=this.l=null;this.s=!1;this.h=null;var a=this;Je()&&self?(this.v=ik(),jk(this.v,"keyChanged",function(b,c){return qk(a).then(function(d){0<d.length&&w(a.a,function(e){e(d);});return {keyProcessed:Va(d,c.key)}})}),jk(this.v,"ping",function(){return E(["keyChanged"])})):ef().then(function(b){if(a.h=b)a.g=new lk(new kk(b)),mk(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
  Va(c[0].value,"keyChanged")&&(a.s=!0);}).o(function(){});});}var rk;function sk(a){return new D(function(b,c){var d=a.m.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
  function tk(a){return new D(function(b,c){var d=a.m.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):sk(a).then(function(){return tk(a)}).then(function(f){b(f);}).o(function(f){c(f);});};})}
  function uk(a){a.i||(a.i=tk(a));return a.i}function vk(a,b){function c(e,f){uk(a).then(b).then(e).o(function(g){if(3<++d)f(g);else return uk(a).then(function(h){h.close();a.i=void 0;return c(e,f)}).o(function(h){f(h);})});}var d=0;return new D(c)}function pk(){try{return !!l.indexedDB}catch(a){return !1}}function wk(a){return a.objectStore("firebaseLocalStorage")}function xk(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}
  function yk(a){return new D(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=ok.prototype;k.set=function(a,b){var c=this,d=!1;return vk(this,function(e){e=wk(xk(e,!0));return yk(e.get(a))}).then(function(e){return vk(c,function(f){f=wk(xk(f,!0));if(e)return e.value=b,yk(f.put(e));c.b++;d=!0;var g={};g.fbase_key=a;g.value=b;return yk(f.add(g))})}).then(function(){c.c[a]=b;return zk(c,a)}).oa(function(){d&&c.b--;})};
  function zk(a,b){return a.g&&a.h&&df()===a.h?mk(a.g,"keyChanged",{key:b},a.s).then(function(){}).o(function(){}):E()}k.get=function(a){return vk(this,function(b){return yk(wk(xk(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.U=function(a){var b=this,c=!1;return vk(this,function(d){c=!0;b.b++;return yk(wk(xk(d,!0))["delete"](a))}).then(function(){delete b.c[a];return zk(b,a)}).oa(function(){c&&b.b--;})};
  function qk(a){return uk(a).then(function(b){var c=wk(xk(b,!1));return c.getAll?yk(c.getAll()):new D(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=te(a.c,c);a.c=c;}return d})}k.ca=function(a){0==this.a.length&&Ak(this);this.a.push(a);};
  k.ia=function(a){Xa(this.a,function(b){return b==a});0==this.a.length&&Bk(this);};function Ak(a){function b(){a.f=setTimeout(function(){a.l=qk(a).then(function(c){0<c.length&&w(a.a,function(d){d(c);});}).then(function(){b();}).o(function(c){"STOP_EVENT"!=c.message&&b();});},800);}Bk(a);b();}function Bk(a){a.l&&a.l.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function Ck(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=E().then(function(){if(pk()){var d=Qe(),e="__sak"+d;rk||(rk=new ok);c=rk;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.U(e)}).then(function(){return c}).o(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.ca(function(e){w(b.a,function(f){f(e);});});return d});}k=Ck.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
  k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.U=function(a){return this.b.then(function(b){return b.U(a)})};k.ca=function(a){this.a.push(a);};k.ia=function(a){Xa(this.a,function(b){return b==a});};function Dk(){this.a={};this.type="inMemory";}k=Dk.prototype;k.get=function(a){return E(this.a[a])};k.set=function(a,b){this.a[a]=b;return E()};k.U=function(a){delete this.a[a];return E()};k.ca=function(){};k.ia=function(){};function Ek(){if(!Fk()){if("Node"==Ke())throw new t("internal-error","The LocalStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Gk()||firebase.INTERNAL.node.localStorage;this.type="localStorage";}function Gk(){try{var a=l.localStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
  function Fk(){var a="Node"==Ke();a=Gk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ek.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};
  k.ca=function(a){l.window&&nd(l.window,"storage",a);};k.ia=function(a){l.window&&xd(l.window,"storage",a);};function Hk(){this.type="nullStorage";}k=Hk.prototype;k.get=function(){return E(null)};k.set=function(){return E()};k.U=function(){return E()};k.ca=function(){};k.ia=function(){};function Ik(){if(!Jk()){if("Node"==Ke())throw new t("internal-error","The SessionStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Kk()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function Kk(){try{var a=l.sessionStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
  function Jk(){var a="Node"==Ke();a=Kk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ik.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};k.ca=function(){};
  k.ia=function(){};function Lk(){var a={};a.Browser=Mk;a.Node=Nk;a.ReactNative=Ok;a.Worker=Pk;this.a=a[Ke()];}var Qk,Mk={F:Ek,cb:Ik},Nk={F:Ek,cb:Ik},Ok={F:fk,cb:Hk},Pk={F:Ek,cb:Hk};var Rk={rd:"local",NONE:"none",td:"session"};function Sk(a){var b=new t("invalid-persistence-type"),c=new t("unsupported-persistence-type");a:{for(d in Rk)if(Rk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(Ke()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;case "Worker":if("session"===a||!pk()&&"none"!==a)throw c;break;default:if(!Pe()&&"none"!==a)throw c;}}
  function Tk(){var a=!Xe(K())&&Ie()?!0:!1,b=Te(),c=Pe();this.m=a;this.h=b;this.l=c;this.a={};Qk||(Qk=new Lk);a=Qk;try{this.g=!qe()&&cf()||!l.indexedDB?new a.a.F:new Ck(Je()?new Dk:new a.a.F);}catch(d){this.g=new Dk,this.h=!0;}try{this.i=new a.a.cb;}catch(d){this.i=new Dk;}this.v=new Dk;this.f=q(this.Zb,this);this.b={};}var Uk;function Vk(){Uk||(Uk=new Tk);return Uk}function Wk(a,b){switch(b){case "session":return a.i;case "none":return a.v;default:return a.g}}
  function Xk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function Yk(a,b,c){var d=Xk(b,c),e=Wk(a,b.F);return a.get(b,c).then(function(f){var g=null;try{g=We(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=Tk.prototype;k.get=function(a,b){return Wk(this,a.F).get(Xk(a,b))};function Zk(a,b,c){c=Xk(b,c);"local"==b.F&&(a.b[c]=null);return Wk(a,b.F).U(c)}
  k.set=function(a,b,c){var d=Xk(a,c),e=this,f=Wk(this,a.F);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.F&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=Xk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));mb(this.a)&&(Wk(this,"local").ca(this.f),this.h||(qe()||!cf())&&l.indexedDB||!this.l||$k(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
  k.removeListener=function(a,b,c){a=Xk(a,b);this.a[a]&&(Xa(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);mb(this.a)&&(Wk(this,"local").ia(this.f),al(this));};function $k(a){al(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new bd({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Zb(c));}},1E3);}function al(a){a.c&&(clearInterval(a.c),a.c=null);}
  k.Zb=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.nb(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Wk(this,"local").ia(this.f):al(this);if(this.m)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
  typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.nb(b);};Wb&&ic&&10==ic&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else w(a,q(this.nb,this));};k.nb=function(a){this.a[a]&&w(this.a[a],function(b){b();});};function bl(a){this.a=a;this.b=Vk();}var cl={name:"authEvent",F:"local"};function dl(a){return a.b.get(cl,a.a).then(function(b){return th(b)})}function el(){this.a=Vk();}function fl(){this.b=-1;}function gl(a,b){this.b=hl;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0===il&&(l.Int32Array?il=new Int32Array(jl):il=jl);this.reset();}var il;r(gl,fl);for(var hl=64,kl=hl-1,ll=[],ml=0;ml<kl;ml++)ll[ml]=0;var nl=Ya(128,ll);gl.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Za(this.h);};
  function ol(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,m=a.a[3]|0,p=a.a[4]|0,v=a.a[5]|0,B=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var A=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&v^~p&B;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
  7))|0;g=g+(il[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=B;B=v;v=p;p=m+g|0;m=h;h=e;e=d;d=g+A|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+m|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+v|0;a.a[6]=a.a[6]+B|0;a.a[7]=a.a[7]+f|0;}
  function pl(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if("string"===typeof b)for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(ol(a),e=0);else if(na(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(ol(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
  var jl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
  4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ql(){gl.call(this,8,rl);}r(ql,gl);var rl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function sl(a,b,c,d,e,f){this.v=a;this.i=b;this.l=c;this.m=d||null;this.u=e||null;this.s=f;this.h=b+":"+c;this.C=new el;this.g=new bl(this.h);this.f=null;this.b=[];this.a=this.c=null;}function tl(a){return new t("invalid-cordova-configuration",a)}k=sl.prototype;
  k.ma=function(){return this.Ia?this.Ia:this.Ia=Fe().then(function(){if("function"!==typeof L("universalLinks.subscribe",l))throw tl("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof L("BuildInfo.packageName",l))throw tl("cordova-plugin-buildinfo is not installed");if("function"!==typeof L("cordova.plugins.browsertab.openUrl",l))throw tl("cordova-plugin-browsertab is not installed");if("function"!==typeof L("cordova.InAppBrowser.open",l))throw tl("cordova-plugin-inappbrowser is not installed");
  },function(){throw new t("cordova-not-ready");})};function ul(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function vl(a){var b=new ql;pl(b,a);a=[];var c=8*b.g;56>b.c?pl(b,nl,56-b.c):pl(b,nl,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;ol(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return cg(a)}
  k.Pb=function(a,b){b(new t("operation-not-supported-in-this-environment"));return E()};k.Nb=function(){return F(new t("operation-not-supported-in-this-environment"))};k.ac=function(){return !1};k.Yb=function(){return !0};k.Ub=function(){return !0};
  k.Ob=function(a,b,c,d){if(this.c)return F(new t("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,m=null,p=null;return this.c=E().then(function(){rh(b);return wl(e)}).then(function(){return xl(e,a,b,c,d)}).then(function(){return (new D(function(v,B){h=function(){var A=L("cordova.plugins.browsertab.close",l);v();"function"===typeof A&&A();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Ea(h);m=function(){g||(g=Fd(2E3).then(function(){B(new t("redirect-cancelled-by-user"));}));};
  p=function(){$e()&&m();};f.addEventListener("resume",m,!1);K().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).o(function(v){return yl(e).then(function(){throw v;})})}).oa(function(){m&&f.removeEventListener("resume",m,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Ta(h);e.c=null;})};
  function xl(a,b,c,d,e){var f=ul(),g=new sh(b,d,null,f,new t("no-auth-event"),null,e),h=L("BuildInfo.packageName",l);if("string"!==typeof h)throw new t("invalid-cordova-configuration");var m=L("BuildInfo.displayName",l),p={};if(K().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(K().toLowerCase().match(/android/))p.apn=h;else return F(new t("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);f=vl(f);p.sessionId=f;var v=ek(a.v,a.i,a.l,b,c,null,d,a.m,p,a.u,e,a.s);return a.ma().then(function(){var B=
  a.h;return a.C.a.set(cl,g.w(),B)}).then(function(){var B=L("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof B)throw new t("invalid-cordova-configuration");var A=null;B(function(Q){if(Q){A=L("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");A(v);}else{A=L("cordova.InAppBrowser.open",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");Q=K();a.a=A(v,Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
  "_blank":"_system","location=yes");}});})}function zl(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function wl(a){a.f||(a.f=a.ma().then(function(){return new D(function(b){function c(d){b(d);a.Ta(c);return !1}a.Ea(c);Al(a);})}));return a.f}function yl(a){var b=null;return dl(a.g).then(function(c){b=c;c=a.g;return Zk(c.b,cl,c.a)}).then(function(){return b})}
  function Al(a){function b(g){d=!0;e&&e.cancel();yl(a).then(function(h){var m=c;if(h&&g&&g.url){var p=null;m=xg(g.url);-1!=m.indexOf("/__/auth/callback")&&(p=J(m),p=We(be(p,"firebaseError")||null),p=(p="object"===typeof p?Aa(p):null)?new sh(h.c,h.b,null,null,p,null,h.T()):new sh(h.c,h.b,m,h.f,null,null,h.T()));m=p||c;}zl(a,m);});}var c=new sh("unknown",null,null,null,new t("no-auth-event")),d=!1,e=Fd(500).then(function(){return yl(a).then(function(){d||zl(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
  g.toLowerCase().indexOf(L("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};vh||(vh=new uh);wh(b);}k.Ea=function(a){this.b.push(a);wl(this).o(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new sh("unknown",null,null,null,new t("no-auth-event")),a(b));});};k.Ta=function(a){Xa(this.b,function(b){return b==a});};function Bl(a){this.a=a;this.b=Vk();}var Cl={name:"pendingRedirect",F:"session"};function Dl(a){return a.b.set(Cl,"pending",a.a)}function El(a){return Zk(a.b,Cl,a.a)}function Fl(a){return a.b.get(Cl,a.a).then(function(b){return "pending"==b})}function Gl(a,b,c,d){this.i={};this.u=0;this.D=a;this.v=b;this.m=c;this.J=d;this.h=[];this.f=!1;this.l=q(this.s,this);this.b=new Hl;this.C=new Il;this.g=new Bl(Jl(this.v,this.m));this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.C;this.c.linkViaPopup=this.C;this.c.reauthViaPopup=this.C;this.a=Kl(this.D,this.v,this.m,Da,this.J);}
  function Kl(a,b,c,d,e){var f=firebase.SDK_VERSION||null;return Ge()?new sl(a,b,c,f,d,e):new Yj(a,b,c,f,d,e)}Gl.prototype.reset=function(){this.f=!1;this.a.Ta(this.l);this.a=Kl(this.D,this.v,this.m,null,this.J);this.i={};};function Ll(a){a.f||(a.f=!0,a.a.Ea(a.l));var b=a.a;return a.a.ma().o(function(c){a.a==b&&a.reset();throw c;})}
  function Ml(a){a.a.Yb()&&Ll(a).o(function(b){var c=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(b)&&a.s(c);});a.a.Ub()||Ol(a.b);}function Pl(a,b){Va(a.h,b)||a.h.push(b);a.f||Fl(a.g).then(function(c){c?El(a.g).then(function(){Ll(a).o(function(d){var e=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(d)&&a.s(e);});}):Ml(a);}).o(function(){Ml(a);});}function Ql(a,b){Xa(a.h,function(c){return c==b});}
  Gl.prototype.s=function(a){if(!a)throw new t("invalid-auth-event");6E5<=Date.now()-this.u&&(this.i={},this.u=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.Gb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.u=Date.now());b=!0;break}}Ol(this.b);return b};var Rl=new Ze(2E3,1E4),Sl=new Ze(3E4,6E4);Gl.prototype.ra=function(){return this.b.ra()};
  function Tl(a,b,c,d,e,f,g){return a.a.Nb(b,c,d,function(){a.f||(a.f=!0,a.a.Ea(a.l));},function(){a.reset();},e,f,g)}function Nl(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
  function Ul(a,b,c,d,e){var f;return Dl(a.g).then(function(){return a.a.Ob(b,c,d,e).o(function(g){if(Nl(g))throw new t("operation-not-supported-in-this-environment");f=g;return El(a.g).then(function(){throw f;})}).then(function(){return a.a.ac()?new D(function(){}):El(a.g).then(function(){return a.ra()}).then(function(){}).o(function(){})})})}function Vl(a,b,c,d,e){return a.a.Pb(d,function(f){b.na(c,null,f,e);},Rl.get())}var Wl={};function Jl(a,b,c){a=a+":"+b;c&&(a=a+":"+c.url);return a}
  function Xl(a,b,c,d){var e=Jl(b,c,d);Wl[e]||(Wl[e]=new Gl(a,b,c,d));return Wl[e]}function Hl(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}Hl.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
  Hl.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Yl(this,!0,null,a.a),E()):b.Fa(c,d)?Zl(this,a,b):F(new t("invalid-auth-event")):(Yl(this,!1,null,null),E());}else F(new t("invalid-auth-event"));};function Ol(a){a.g||(a.g=!0,Yl(a,!1,null,null));}function $l(a){a.g&&!a.i&&Yl(a,!1,null,null);}
  function Zl(a,b,c){c=c.Fa(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.T(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(m){Yl(a,h,m,null);}).o(function(m){Yl(a,h,null,m);});}function am(a,b){a.b=function(){return F(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function bm(a,b){a.b=function(){return E(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function Yl(a,b,c,d){b?d?am(a,d):bm(a,c):bm(a,{user:null});a.f=[];a.c=[];}
  Hl.prototype.ra=function(){var a=this;return new D(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),cm(a));})};function cm(a){var b=new t("timeout");a.a&&a.a.cancel();a.a=Fd(Sl.get()).then(function(){a.b||(a.g=!0,Yl(a,!0,null,b));});}function Il(){}Il.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.na(a.c,null,a.a,a.b),E()):b.Fa(c,d)?dm(a,b):F(new t("invalid-auth-event"));}else F(new t("invalid-auth-event"));};
  function dm(a,b){var c=a.b,d=a.c;b.Fa(d,c)(a.g,a.f,a.T(),a.i).then(function(e){b.na(d,e,null,c);}).o(function(e){b.na(d,null,e,c);});}function em(){this.jb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.jb},set:function(a){this.jb=a;},enumerable:!1});}function fm(a,b){this.a=b;M(this,"verificationId",a);}fm.prototype.confirm=function(a){a=ph(this.verificationId,a);return this.a(a)};function gm(a,b,c,d){return (new lh(a)).gb(b,c).then(function(e){return new fm(e,d)})}function hm(a){var b=ig(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new t("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");N(this,{token:a,expirationTime:bf(1E3*b.exp),authTime:bf(1E3*b.auth_time),issuedAtTime:bf(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,signInSecondFactor:b.firebase&&b.firebase.sign_in_second_factor?b.firebase.sign_in_second_factor:null,claims:b});}
  function im(a,b,c){var d=b&&b[jm];if(!d)throw new t("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=a;this.f=nb(b);this.g=c;this.c=new yg(null,d);this.b=[];var e=this;w(b[km]||[],function(f){(f=tf(f))&&e.b.push(f);});M(this,"auth",this.a);M(this,"session",this.c);M(this,"hints",this.b);}var km="mfaInfo",jm="mfaPendingCredential";im.prototype.Rc=function(a){var b=this;return a.tb(this.a.a,this.c).then(function(c){var d=nb(b.f);delete d[km];delete d[jm];z(d,c);return b.g(d)})};function lm(a,b,c,d){t.call(this,"multi-factor-auth-required",d,b);this.b=new im(a,b,c);M(this,"resolver",this.b);}r(lm,t);function mm(a,b,c){if(a&&n(a.serverResponse)&&"auth/multi-factor-auth-required"===a.code)try{return new lm(b,a.serverResponse,c,a.message)}catch(d){}return null}function nm(){}nm.prototype.tb=function(a,b,c){return b.type==zg?om(this,a,b,c):pm(this,a,b)};function om(a,b,c,d){return c.Ha().then(function(e){e={idToken:e};"undefined"!==typeof d&&(e.displayName=d);z(e,{phoneVerificationInfo:hh(a.a)});return O(b,Gj,e)})}function pm(a,b,c){return c.Ha().then(function(d){d={mfaPendingCredential:d};z(d,{phoneVerificationInfo:hh(a.a)});return O(b,Hj,d)})}function qm(a){M(this,"factorId",a.fa);this.a=a;}r(qm,nm);
  function rm(a){qm.call(this,a);if(this.a.fa!=lh.PROVIDER_ID)throw new t("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");}r(rm,qm);function sm(a,b){G.call(this,a);for(var c in b)this[c]=b[c];}r(sm,G);function tm(a,b){this.a=a;this.b=[];this.c=q(this.yc,this);nd(this.a,"userReloaded",this.c);var c=[];b&&b.multiFactor&&b.multiFactor.enrolledFactors&&w(b.multiFactor.enrolledFactors,function(d){var e=null,f={};if(d){d.uid&&(f[qf]=d.uid);d.displayName&&(f[rf]=d.displayName);d.enrollmentTime&&(f[sf]=(new Date(d.enrollmentTime)).toISOString());d.phoneNumber&&(f[pf]=d.phoneNumber);try{e=new uf(f);}catch(g){}d=e;}else d=null;d&&c.push(d);});um(this,c);}
  function vm(a){var b=[];w(a.mfaInfo||[],function(c){(c=tf(c))&&b.push(c);});return b}k=tm.prototype;k.yc=function(a){um(this,vm(a.hd));};function um(a,b){a.b=b;M(a,"enrolledFactors",b);}k.Sb=function(){return this.a.I().then(function(a){return new yg(a,null)})};k.fc=function(a,b){var c=this,d=this.a.a;return this.Sb().then(function(e){return a.tb(d,e,b)}).then(function(e){wm(c.a,e);return c.a.reload()})};
  k.bd=function(a){var b=this,c="string"===typeof a?a:a.uid,d=this.a.a;return this.a.I().then(function(e){return O(d,Lj,{idToken:e,mfaEnrollmentId:c})}).then(function(e){var f=Qa(b.b,function(g){return g.uid!=c});um(b,f);wm(b.a,e);return b.a.reload().o(function(g){if("auth/user-token-expired"!=g.code)throw g;})})};k.w=function(){return {multiFactor:{enrolledFactors:Ra(this.b,function(a){return a.w()})}}};function xm(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}xm.prototype.start=function(){this.a=this.c;ym(this,!0);};function zm(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function ym(a,b){a.stop();a.b=Fd(zm(a,b)).then(function(){return af()}).then(function(){return a.h()}).then(function(){ym(a,!0);}).o(function(c){a.i(c)&&ym(a,!1);});}
  xm.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function Am(a){this.f=a;this.b=this.a=null;this.c=Date.now();}Am.prototype.w=function(){return {apiKey:this.f.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:this.c}};function Bm(a,b){"undefined"===typeof b&&(a.b?(b=a.b,b=b.a-b.g):b=0);a.c=Date.now()+1E3*b;}function Cm(a,b){a.b=jg(b[Dg]||"");a.a=b.refreshToken;b=b.expiresIn;Bm(a,"undefined"!==typeof b?Number(b):void 0);}function Dm(a,b){a.b=b.b;a.a=b.a;a.c=b.c;}
  function Em(a,b){return Wi(a.f,b).then(function(c){a.b=jg(c.access_token);a.a=c.refresh_token;Bm(a,c.expires_in);return {accessToken:a.b.toString(),refreshToken:a.a}}).o(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}Am.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?F(new t("user-token-expired")):a||!this.b||Date.now()>this.c-3E4?this.a?Em(this,{grant_type:"refresh_token",refresh_token:this.a}):E(null):E({accessToken:this.b.toString(),refreshToken:this.a})};function Fm(a,b){this.a=a||null;this.b=b||null;N(this,{lastSignInTime:bf(b||null),creationTime:bf(a||null)});}function Gm(a){return new Fm(a.a,a.b)}Fm.prototype.w=function(){return {lastLoginAt:this.b,createdAt:this.a}};function Hm(a,b,c,d,e,f){N(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}
  function Im(a,b,c){this.N=[];this.l=a.apiKey;this.m=a.appName;this.s=a.authDomain||null;var d=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION):null;this.a=new Ii(this.l,Ca(Da),d);(this.u=a.emulatorConfig||null)&&Pi(this.a,this.u);this.h=new Am(this.a);Jm(this,b[Dg]);Cm(this.h,b);M(this,"refreshToken",this.h.a);Km(this,c||{});H.call(this);this.P=!1;this.s&&Re()&&(this.b=Xl(this.s,this.l,this.m,this.u));this.W=[];this.i=null;this.D=Lm(this);this.ba=q(this.ib,this);var e=this;this.za=null;this.Pa=function(f){e.xa(f.h);};
  this.qa=null;this.Ba=function(f){Mm(e,f.c);};this.$=null;this.aa=[];this.Oa=function(f){Nm(e,f.f);};this.ja=null;this.S=new tm(this,c);M(this,"multiFactor",this.S);}r(Im,H);Im.prototype.xa=function(a){this.za=a;Oi(this.a,a);};function Mm(a,b){a.u=b;Pi(a.a,b);a.b&&(b=a.b,a.b=Xl(a.s,a.l,a.m,a.u),a.P&&(Ql(b,a),Pl(a.b,a)));}Im.prototype.la=function(){return this.za};function Om(a,b){a.qa&&xd(a.qa,"languageCodeChanged",a.Pa);(a.qa=b)&&nd(b,"languageCodeChanged",a.Pa);}
  function Pm(a,b){a.$&&xd(a.$,"emulatorConfigChanged",a.Ba);(a.$=b)&&nd(b,"emulatorConfigChanged",a.Ba);}function Nm(a,b){a.aa=b;Ri(a.a,firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,a.aa):null);}Im.prototype.Ga=function(){return Za(this.aa)};function Qm(a,b){a.ja&&xd(a.ja,"frameworkChanged",a.Oa);(a.ja=b)&&nd(b,"frameworkChanged",a.Oa);}Im.prototype.ib=function(){this.D.b&&(this.D.stop(),this.D.start());};
  function Rm(a){try{return firebase.app(a.m).auth()}catch(b){throw new t("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}function Lm(a){return new xm(function(){return a.I(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=a.h.c-Date.now()-3E5;return 0<b?b:0})}function Sm(a){a.J||a.D.b||(a.D.start(),xd(a,"tokenChanged",a.ba),nd(a,"tokenChanged",a.ba));}function Tm(a){xd(a,"tokenChanged",a.ba);a.D.stop();}
  function Jm(a,b){a.Aa=b;M(a,"_lat",b);}function Um(a,b){Xa(a.W,function(c){return c==b});}function Vm(a){for(var b=[],c=0;c<a.W.length;c++)b.push(a.W[c](a));return Jc(b).then(function(){return a})}function Wm(a){a.b&&!a.P&&(a.P=!0,Pl(a.b,a));}
  function Km(a,b){N(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new Fm(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}M(Im.prototype,"providerId","firebase");function Xm(){}function Ym(a){return E().then(function(){if(a.J)throw new t("app-deleted");})}
  function Zm(a){return Ra(a.providerData,function(b){return b.providerId})}function $m(a,b){b&&(an(a,b.providerId),a.providerData.push(b));}function an(a,b){Xa(a.providerData,function(c){return c.providerId==b});}function bn(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&M(a,b,c);}
  function cn(a,b){a!=b&&(N(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?M(a,"metadata",Gm(b.metadata)):M(a,"metadata",new Fm),w(b.providerData,function(c){$m(a,c);}),Dm(a.h,b.h),M(a,"refreshToken",a.h.a),um(a.S,b.S.b));}k=Im.prototype;k.reload=function(){var a=this;return R(this,Ym(this).then(function(){return dn(a).then(function(){return Vm(a)}).then(Xm)}))};
  function dn(a){return a.I().then(function(b){var c=a.isAnonymous;return en(a,b).then(function(){c||bn(a,"isAnonymous",!1);return b})})}k.oc=function(a){return this.I(a).then(function(b){return new hm(b)})};k.I=function(a){var b=this;return R(this,Ym(this).then(function(){return b.h.getToken(a)}).then(function(c){if(!c)throw new t("internal-error");c.accessToken!=b.Aa&&(Jm(b,c.accessToken),b.dispatchEvent(new sm("tokenChanged")));bn(b,"refreshToken",c.refreshToken);return c.accessToken}))};
  function wm(a,b){b[Dg]&&a.Aa!=b[Dg]&&(Cm(a.h,b),a.dispatchEvent(new sm("tokenChanged")),Jm(a,b[Dg]),bn(a,"refreshToken",a.h.a));}function en(a,b){return O(a.a,Ij,{idToken:b}).then(q(a.Kc,a))}
  k.Kc=function(a){a=a.users;if(!a||!a.length)throw new t("internal-error");a=a[0];Km(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=fn(a),c=0;c<b.length;c++)$m(this,b[c]);bn(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));this.dispatchEvent(new sm("userReloaded",{hd:a}));};
  function fn(a){return (a=a.providerUserInfo)&&a.length?Ra(a,function(b){return new Hm(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Lc=function(a){gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.ub(a)};
  k.ub=function(a){var b=this,c=null;return R(this,a.c(this.a,this.uid).then(function(d){wm(b,d);c=gn(b,d,"reauthenticate");b.i=null;return b.reload()}).then(function(){return c}),!0)};function hn(a,b){return dn(a).then(function(){if(Va(Zm(a),b))return Vm(a).then(function(){throw new t("provider-already-linked");})})}k.Cc=function(a){gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.rb(a)};
  k.rb=function(a){var b=this,c=null;return R(this,hn(this,a.providerId).then(function(){return b.I()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=gn(b,d,"link");return jn(b,d)}).then(function(){return c}))};k.Dc=function(a,b){var c=this;return R(this,hn(this,"phone").then(function(){return gm(Rm(c),a,b,q(c.rb,c))}))};k.Mc=function(a,b){var c=this;return R(this,E().then(function(){return gm(Rm(c),a,b,q(c.ub,c))}),!0)};
  function gn(a,b,c){var d=qh(b);b=og(b);return kf({user:a,credential:d,additionalUserInfo:b,operationType:c})}function jn(a,b){wm(a,b);return a.reload().then(function(){return a})}k.Cb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Cb(c,a)}).then(function(c){wm(b,c);return b.reload()}))};k.ed=function(a){var b=this;return R(this,this.I().then(function(c){return a.b(b.a,c)}).then(function(c){wm(b,c);return b.reload()}))};
  k.Db=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Db(c,a)}).then(function(c){wm(b,c);return b.reload()}))};
  k.Eb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Ym(this);var b=this;return R(this,this.I().then(function(c){return b.a.Eb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){wm(b,c);bn(b,"displayName",c.displayName||null);bn(b,"photoURL",c.photoUrl||null);w(b.providerData,function(d){"password"===d.providerId&&(M(d,"displayName",b.displayName),M(d,"photoURL",b.photoURL));});return Vm(b)}).then(Xm))};
  k.cd=function(a){var b=this;return R(this,dn(this).then(function(c){return Va(Zm(b),a)?rj(b.a,c,[a]).then(function(d){var e={};w(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});w(Zm(b),function(f){e[f]||an(b,f);});e[lh.PROVIDER_ID]||M(b,"phoneNumber",null);return Vm(b)}):Vm(b).then(function(){throw new t("no-such-provider");})}))};
  k.delete=function(){var a=this;return R(this,this.I().then(function(b){return O(a.a,Fj,{idToken:b})}).then(function(){a.dispatchEvent(new sm("userDeleted"));})).then(function(){for(var b=0;b<a.N.length;b++)a.N[b].cancel("app-deleted");Om(a,null);Pm(a,null);Qm(a,null);a.N=[];a.J=!0;Tm(a);M(a,"refreshToken",null);a.b&&Ql(a.b,a);})};
  k.Gb=function(a,b){return "linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.ga||null)==b||"reauthViaRedirect"==a&&(this.ga||null)==b?!0:!1};k.na=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};
  k.Fa=function(a,b){return "linkViaPopup"==a&&b==(this.g||null)?q(this.Lb,this):"reauthViaPopup"==a&&b==(this.g||null)?q(this.Mb,this):"linkViaRedirect"==a&&(this.ga||null)==b?q(this.Lb,this):"reauthViaRedirect"==a&&(this.ga||null)==b?q(this.Mb,this):null};k.Ec=function(a){var b=this;return kn(this,"linkViaPopup",a,function(){return hn(b,a.providerId).then(function(){return Vm(b)})},!1)};k.Nc=function(a){return kn(this,"reauthViaPopup",a,function(){return E()},!0)};
  function kn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.i&&!e)return F(a.i);var f=ng(c.providerId),g=Qe(a.uid+":::"),h=null;(!Te()||Ie())&&a.s&&c.isOAuthProvider&&(h=ek(a.s,a.l,a.m,b,c,null,g,firebase.SDK_VERSION||null,null,null,a.tenantId,a.u));var m=ze(h,f&&f.va,f&&f.ua);d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){return Tl(a.b,m,b,c,g,!!h,a.tenantId)}).then(function(){return new D(function(p,v){a.na(b,null,new t("cancelled-popup-request"),
  a.g||null);a.f=p;a.C=v;a.g=g;a.c=Vl(a.b,a,b,m,g);})}).then(function(p){m&&ye(m);return p?kf(p):null}).o(function(p){m&&ye(m);throw p;});return R(a,d,e)}k.Fc=function(a){var b=this;return mn(this,"linkViaRedirect",a,function(){return hn(b,a.providerId)},!1)};k.Oc=function(a){return mn(this,"reauthViaRedirect",a,function(){return E()},!0)};
  function mn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.i&&!e)return F(a.i);var f=null,g=Qe(a.uid+":::");d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){a.ga=g;return Vm(a)}).then(function(h){a.ha&&(h=a.ha,h=h.b.set(nn,a.w(),h.a));return h}).then(function(){return Ul(a.b,b,c,g,a.tenantId)}).o(function(h){f=h;if(a.ha)return on(a.ha);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
  function ln(a){if(!a.b||!a.P){if(a.b&&!a.P)throw new t("internal-error");throw new t("auth-domain-config-required");}}k.Lb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.I().then(function(g){return Hg(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=gn(e,g,"link");return jn(e,g)}).then(function(){return f});return R(this,c)};
  k.Mb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=E().then(function(){return Cg(Ig(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=gn(e,h,"reauthenticate");wm(e,h);e.i=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
  k.vb=function(a){var b=this,c=null;return R(this,this.I().then(function(d){c=d;return "undefined"===typeof a||mb(a)?{}:bg(new Sf(a))}).then(function(d){return b.a.vb(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};k.Fb=function(a,b){var c=this,d=null;return R(this,this.I().then(function(e){d=e;return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(e){return c.a.Fb(d,a,e)}).then(function(e){if(c.email!=e)return c.reload()}).then(function(){}))};
  function R(a,b,c){var d=pn(a,b,c);a.N.push(d);d.oa(function(){Wa(a.N,d);});return d.o(function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),Rm(a),q(a.jc,a)));throw f||e;})}k.jc=function(a){var b=null,c=this;a=Cg(E(a),c.uid).then(function(d){b=gn(c,d,"reauthenticate");wm(c,d);c.i=null;return c.reload()}).then(function(){return b});return R(this,a,!0)};
  function pn(a,b,c){return a.i&&!c?(b.cancel(),F(a.i)):b.o(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.i||a.dispatchEvent(new sm("userInvalidated")),a.i=d);throw d;})}k.toJSON=function(){return this.w()};
  k.w=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.h.w(),redirectEventId:this.ga||null};this.metadata&&z(a,this.metadata.w());w(this.providerData,function(b){a.providerData.push(lf(b));});z(a,this.S.w());return a};
  function qn(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName,emulatorConfig:a.emulatorConfig},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken){c[Dg]=a.stsTokenManager.accessToken;c.refreshToken=a.stsTokenManager.refreshToken||null;var d=a.stsTokenManager.expirationTime;d&&(c.expiresIn=(d-Date.now())/1E3);}else return null;var e=new Im(b,c,a);a.providerData&&w(a.providerData,function(f){f&&$m(e,kf(f));});a.redirectEventId&&(e.ga=a.redirectEventId);
  return e}function rn(a,b,c,d){var e=new Im(a,b);c&&(e.ha=c);d&&Nm(e,d);return e.reload().then(function(){return e})}function sn(a,b,c,d){var e=a.h,f={};f[Dg]=e.b&&e.b.toString();f.refreshToken=e.a;b=new Im(b||{apiKey:a.l,authDomain:a.s,appName:a.m},f);c&&(b.ha=c);d&&Nm(b,d);cn(b,a);return b}function tn(a){this.a=a;this.b=Vk();}var nn={name:"redirectUser",F:"session"};function on(a){return Zk(a.b,nn,a.a)}function un(a,b){return a.b.get(nn,a.a).then(function(c){c&&b&&(c.authDomain=b);return qn(c||{})})}function vn(a){this.a=a;this.b=Vk();this.c=null;this.f=wn(this);this.b.addListener(xn("local"),this.a,q(this.g,this));}vn.prototype.g=function(){var a=this,b=xn("local");yn(this,function(){return E().then(function(){return a.c&&"local"!=a.c.F?a.b.get(b,a.a):null}).then(function(c){if(c)return zn(a,"local").then(function(){a.c=b;})})});};function zn(a,b){var c=[],d;for(d in Rk)Rk[d]!==b&&c.push(Zk(a.b,xn(Rk[d]),a.a));c.push(Zk(a.b,An,a.a));return Ic(c)}
  function wn(a){var b=xn("local"),c=xn("session"),d=xn("none");return Yk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(An,a.a).then(function(h){return h?xn(h):b})})})}).then(function(e){a.c=e;return zn(a,e.F)}).o(function(){a.c||(a.c=b);})}var An={name:"persistence",F:"session"};function xn(a){return {name:"authUser",F:a}}
  vn.prototype.yb=function(a){var b=null,c=this;Sk(a);return yn(this,function(){return a!=c.c.F?c.b.get(c.c,c.a).then(function(d){b=d;return zn(c,a)}).then(function(){c.c=xn(a);if(b)return c.b.set(c.c,b,c.a)}):E()})};function Bn(a){return yn(a,function(){return a.b.set(An,a.c.F,a.a)})}function Cn(a,b){return yn(a,function(){return a.b.set(a.c,b.w(),a.a)})}function Dn(a){return yn(a,function(){return Zk(a.b,a.c,a.a)})}
  function En(a,b,c){return yn(a,function(){return a.b.get(a.c,a.a).then(function(d){d&&b&&(d.authDomain=b);d&&c&&(d.emulatorConfig=c);return qn(d||{})})})}function yn(a,b){a.f=a.f.then(b,b);return a.f}function Fn(a){this.l=!1;M(this,"settings",new em);M(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION):null,this.a=new Ii(S(this).options&&S(this).options.apiKey,Ca(Da),a);else throw new t("invalid-api-key");this.P=[];this.s=[];this.N=[];this.Pa=firebase.INTERNAL.createSubscribe(q(this.zc,this));this.W=void 0;this.ib=firebase.INTERNAL.createSubscribe(q(this.Ac,this));Gn(this,null);this.i=new vn(S(this).options.apiKey+":"+S(this).name);this.D=
  new tn(S(this).options.apiKey+":"+S(this).name);this.$=T(this,Hn(this));this.h=T(this,In(this));this.ba=!1;this.ja=q(this.Zc,this);this.Ba=q(this.da,this);this.qa=q(this.mc,this);this.za=q(this.wc,this);this.Aa=q(this.xc,this);this.b=null;Jn(this);this.INTERNAL={};this.INTERNAL["delete"]=q(this.delete,this);this.INTERNAL.logFramework=q(this.Gc,this);this.u=0;H.call(this);Kn(this);this.J=[];this.R=null;}r(Fn,H);function Ln(a){G.call(this,"languageCodeChanged");this.h=a;}r(Ln,G);
  function Mn(a){G.call(this,"emulatorConfigChanged");this.c=a;}r(Mn,G);function Nn(a){G.call(this,"frameworkChanged");this.f=a;}r(Nn,G);k=Fn.prototype;k.yb=function(a){a=this.i.yb(a);return T(this,a)};k.xa=function(a){this.aa===a||this.l||(this.aa=a,Oi(this.a,this.aa),this.dispatchEvent(new Ln(this.la())));};k.la=function(){return this.aa};k.fd=function(){var a=l.navigator;this.xa(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};
  k.gd=function(a,b){if(!this.R){if(!/^https?:\/\//.test(a))throw new t("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");b=b?!!b.disableWarnings:!1;On(b);this.R={url:a,ec:b};this.settings.jb=!0;Pi(this.a,this.R);this.dispatchEvent(new Mn(this.R));}};
  function On(a){"undefined"!==typeof console&&"function"===typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");l.document&&!a&&Ee().then(function(){var b=l.document.createElement("div");b.innerText="Running in emulator mode. Do not use with production credentials.";b.style.position="fixed";b.style.width="100%";b.style.backgroundColor="#ffffff";b.style.border=".1em solid #000000";b.style.color=
  "#b50000";b.style.bottom="0px";b.style.left="0px";b.style.margin="0px";b.style.zIndex=1E4;b.style.textAlign="center";b.classList.add("firebase-emulator-warning");l.document.body.appendChild(b);});}k.Gc=function(a){this.J.push(a);Ri(this.a,firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,this.J):null);this.dispatchEvent(new Nn(this.J));};k.Ga=function(){return Za(this.J)};k.zb=function(a){this.S===a||this.l||(this.S=a,this.a.b=this.S);};k.T=function(){return this.S};
  function Kn(a){Object.defineProperty(a,"lc",{get:function(){return this.la()},set:function(b){this.xa(b);},enumerable:!1});a.aa=null;Object.defineProperty(a,"ti",{get:function(){return this.T()},set:function(b){this.zb(b);},enumerable:!1});a.S=null;Object.defineProperty(a,"emulatorConfig",{get:function(){if(this.R){var b=J(this.R.url);b=kf({protocol:b.c,host:b.a,port:b.g,options:kf({disableWarnings:this.R.ec})});}else b=null;return b},enumerable:!1});}
  k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).w()}};function Pn(a){return a.Oa||F(new t("auth-domain-config-required"))}function Jn(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Re()&&(a.Oa=a.$.then(function(){if(!a.l){a.b=Xl(b,c,S(a).name,a.R);Pl(a.b,a);U(a)&&Wm(U(a));if(a.m){Wm(a.m);var d=a.m;d.xa(a.la());Om(d,a);d=a.m;Nm(d,a.J);Qm(d,a);d=a.m;Mm(d,a.R);Pm(d,a);a.m=null;}return a.b}}));}
  k.Gb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.g==b&&!!this.f;default:return !1}};k.na=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};k.Fa=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?q(this.ic,this):null};
  k.ic=function(a,b,c,d){var e=this,f={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);return e.$.then(function(){return Qn(e,Fg(e.a,f))})};
  k.Xc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=ng(a.providerId),d=Qe(),e=null;(!Te()||Ie())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=ek(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null,null,null,this.T(),this.R));var f=ze(e,c&&c.va,c&&c.ua);c=Pn(this).then(function(g){return Tl(g,f,"signInViaPopup",a,d,!!e,b.T())}).then(function(){return new D(function(g,h){b.na("signInViaPopup",
  null,new t("cancelled-popup-request"),b.g);b.f=g;b.C=h;b.g=d;b.c=Vl(b.b,b,"signInViaPopup",f,d);})}).then(function(g){f&&ye(f);return g?kf(g):null}).o(function(g){f&&ye(f);throw g;});return T(this,c)};k.Yc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=Pn(this).then(function(){return Bn(b.i)}).then(function(){return Ul(b.b,"signInViaRedirect",a,void 0,b.T())});return T(this,c)};
  function Rn(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=Pn(a).then(function(){return a.b.ra()}).then(function(c){return c?kf(c):null});return T(a,b)}k.ra=function(){var a=this;return Rn(this).then(function(b){a.b&&$l(a.b.b);return b}).o(function(b){a.b&&$l(a.b.b);throw b;})};
  k.dd=function(a){if(!a)return F(new t("null-user"));if(this.S!=a.tenantId)return F(new t("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=sn(a,c,b.D,b.Ga());return T(this,this.h.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return cn(U(b),a),b.da(a);Gn(b,d);Wm(d);return b.da(d)}).then(function(){Sn(b);}))};
  function Tn(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;a.R&&(c.emulatorConfig=a.R);return a.$.then(function(){return rn(c,b,a.D,a.Ga())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return cn(U(a),d),a.da(d);Gn(a,d);Wm(d);return a.da(d)}).then(function(){Sn(a);})}
  function Gn(a,b){U(a)&&(Um(U(a),a.Ba),xd(U(a),"tokenChanged",a.qa),xd(U(a),"userDeleted",a.za),xd(U(a),"userInvalidated",a.Aa),Tm(U(a)));b&&(b.W.push(a.Ba),nd(b,"tokenChanged",a.qa),nd(b,"userDeleted",a.za),nd(b,"userInvalidated",a.Aa),0<a.u&&Sm(b));M(a,"currentUser",b);b&&(b.xa(a.la()),Om(b,a),Nm(b,a.J),Qm(b,a),Mm(b,a.R),Pm(b,a));}k.Bb=function(){var a=this,b=this.h.then(function(){a.b&&$l(a.b.b);if(!U(a))return E();Gn(a,null);return Dn(a.i).then(function(){Sn(a);})});return T(this,b)};
  function Un(a){var b=un(a.D,S(a).options.authDomain).then(function(c){if(a.m=c)c.ha=a.D;return on(a.D)});return T(a,b)}function Hn(a){var b=S(a).options.authDomain,c=Un(a).then(function(){return En(a.i,b,a.R)}).then(function(d){return d?(d.ha=a.D,a.m&&(a.m.ga||null)==(d.ga||null)?d:d.reload().then(function(){return Cn(a.i,d).then(function(){return d})}).o(function(e){return "auth/network-request-failed"==e.code?d:Dn(a.i)})):null}).then(function(d){Gn(a,d||null);});return T(a,c)}
  function In(a){return a.$.then(function(){return Rn(a)}).o(function(){}).then(function(){if(!a.l)return a.ja()}).o(function(){}).then(function(){if(!a.l){a.ba=!0;var b=a.i;b.b.addListener(xn("local"),b.a,a.ja);}})}
  k.Zc=function(){var a=this;return En(this.i,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return cn(U(a),b),U(a).I();if(U(a)||b)Gn(a,b),b&&(Wm(b),b.ha=a.D),a.b&&Pl(a.b,a),Sn(a);}})};k.da=function(a){return Cn(this.i,a)};k.mc=function(){Sn(this);this.da(U(this));};k.wc=function(){this.Bb();};k.xc=function(){this.Bb();};
  function Qn(a,b){var c=null,d=null;return T(a,b.then(function(e){c=qh(e);d=og(e);return Tn(a,e)},function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),a,q(a.kc,a)));throw f||e;}).then(function(){return kf({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.kc=function(a){var b=this;return this.h.then(function(){return Qn(b,E(a))})};k.zc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};
  k.Ac=function(a){var b=this;Vn(this,function(){a.next(U(b));});};k.Ic=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.Pa(a,b,c)};k.Hc=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){d.W=d.getUid();"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.ib(a,b,c)};
  k.nc=function(a){var b=this,c=this.h.then(function(){return U(b)?U(b).I(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Tc=function(a){var b=this;return this.h.then(function(){return Qn(b,O(b.a,Kj,{token:a}))}).then(function(c){var d=c.user;bn(d,"isAnonymous",!1);b.da(d);return c})};k.Uc=function(a,b){var c=this;return this.h.then(function(){return Qn(c,O(c.a,ah,{email:a,password:b}))})};
  k.dc=function(a,b){var c=this;return this.h.then(function(){return Qn(c,O(c.a,Ej,{email:a,password:b}))})};k.ab=function(a){var b=this;return this.h.then(function(){return Qn(b,a.ka(b.a))})};k.Sc=function(a){gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.ab(a)};
  k.Ab=function(){var a=this;return this.h.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=kf({providerId:null,isNewUser:!1});return kf({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Qn(a,a.a.Ab()).then(function(d){var e=d.user;bn(e,"isAnonymous",!0);a.da(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Wn(a){return U(a)&&U(a)._lat||null}
  function Sn(a){if(a.ba){for(var b=0;b<a.s.length;b++)if(a.s[b])a.s[b](Wn(a));if(a.W!==a.getUid()&&a.N.length)for(a.W=a.getUid(),b=0;b<a.N.length;b++)if(a.N[b])a.N[b](Wn(a));}}k.cc=function(a){this.addAuthTokenListener(a);this.u++;0<this.u&&U(this)&&Sm(U(this));};k.Pc=function(a){var b=this;w(this.s,function(c){c==a&&b.u--;});0>this.u&&(this.u=0);0==this.u&&U(this)&&Tm(U(this));this.removeAuthTokenListener(a);};
  k.addAuthTokenListener=function(a){var b=this;this.s.push(a);T(this,this.h.then(function(){b.l||Va(b.s,a)&&a(Wn(b));}));};k.removeAuthTokenListener=function(a){Xa(this.s,function(b){return b==a});};function Vn(a,b){a.N.push(b);T(a,a.h.then(function(){!a.l&&Va(a.N,b)&&a.W!==a.getUid()&&(a.W=a.getUid(),b(Wn(a)));}));}
  k.delete=function(){this.l=!0;for(var a=0;a<this.P.length;a++)this.P[a].cancel("app-deleted");this.P=[];this.i&&(a=this.i,a.b.removeListener(xn("local"),a.a,this.ja));this.b&&(Ql(this.b,this),$l(this.b.b));return Promise.resolve()};function T(a,b){a.P.push(b);b.oa(function(){Wa(a.P,b);});return b}k.hc=function(a){return T(this,aj(this.a,a))};k.Bc=function(a){return !!fh(a)};
  k.xb=function(a,b){var c=this;return T(this,E().then(function(){var d=new Sf(b);if(!d.c)throw new t("argument-error",$f+" must be true when sending sign in link to email");return bg(d)}).then(function(d){return c.a.xb(a,d)}).then(function(){}))};k.jd=function(a){return this.Sa(a).then(function(b){return b.data.email})};k.ob=function(a,b){return T(this,this.a.ob(a,b).then(function(){}))};k.Sa=function(a){return T(this,this.a.Sa(a).then(function(b){return new vf(b)}))};
  k.kb=function(a){return T(this,this.a.kb(a).then(function(){}))};k.wb=function(a,b){var c=this;return T(this,E().then(function(){return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(d){return c.a.wb(a,d)}).then(function(){}))};k.Wc=function(a,b){return T(this,gm(this,a,b,q(this.ab,this)))};
  k.Vc=function(a,b){var c=this;return T(this,E().then(function(){var d=b||re(),e=eh(a,d);d=fh(d);if(!d)throw new t("argument-error","Invalid email link!");if(d.tenantId!==c.T())throw new t("tenant-id-mismatch");return c.ab(e)}))};function Xn(){}Xn.prototype.render=function(){};Xn.prototype.reset=function(){};Xn.prototype.getResponse=function(){};Xn.prototype.execute=function(){};function Yn(){this.a={};this.b=1E12;}var Zn=null;Yn.prototype.render=function(a,b){this.a[this.b.toString()]=new $n(a,b);return this.b++};Yn.prototype.reset=function(a){var b=ao(this,a);a=bo(a);b&&a&&(b.delete(),delete this.a[a]);};Yn.prototype.getResponse=function(a){return (a=ao(this,a))?a.getResponse():null};Yn.prototype.execute=function(a){(a=ao(this,a))&&a.execute();};function ao(a,b){return (b=bo(b))?a.a[b]||null:null}function bo(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
  function $n(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=kc(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():nd(this.f,"click",this.i);}$n.prototype.getResponse=function(){co(this);return this.b};
  $n.prototype.execute=function(){co(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Me();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};$n.prototype.delete=function(){co(this);this.g=!0;clearTimeout(this.a);this.a=null;xd(this.f,"click",this.i);};function co(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function eo(){}M(eo,"FACTOR_ID","phone");function fo(){}fo.prototype.g=function(){Zn||(Zn=new Yn);return E(Zn)};fo.prototype.c=function(){};var go=null;function ho(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var io=new qb(rb,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),jo=new Ze(3E4,6E4);
  ho.prototype.g=function(a){var b=this;return new D(function(c,d){var e=setTimeout(function(){d(new t("network-request-failed"));},jo.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,m){h=g(h,m);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new t("internal-error"));delete l[b.a];};var f=zb(io,{onload:b.a,hl:a||""});E(Bi(f)).o(function(){clearTimeout(e);d(new t("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
  c(l.grecaptcha);})};ho.prototype.c=function(){this.b--;};var ko=null;function lo(a,b,c,d,e,f,g){M(this,"type","recaptcha");this.c=this.f=null;this.J=!1;this.v=b;this.g=null;g?(go||(go=new fo),g=go):(ko||(ko=new ho),g=ko);this.m=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[mo])throw new t("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[no];if(!l.document)throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
  if(!kc(b)||!this.i&&kc(b).hasChildNodes())throw new t("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Ii(a,f||null,e||null);this.u=d||function(){return null};var h=this;this.l=[];var m=this.a[oo];this.a[oo]=function(v){po(h,v);if("function"===typeof m)m(v);else if("string"===typeof m){var B=L(m,l);"function"===typeof B&&B(v);}};var p=this.a[qo];this.a[qo]=function(){po(h,null);if("function"===typeof p)p();else if("string"===typeof p){var v=
  L(p,l);"function"===typeof v&&v();}};}var oo="callback",qo="expired-callback",mo="sitekey",no="size";function po(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function ro(a,b){Xa(a.l,function(c){return c==b});}function so(a,b){a.h.push(b);b.oa(function(){Wa(a.h,b);});return b}k=lo.prototype;
  k.Ia=function(){var a=this;return this.f?this.f:this.f=so(this,E().then(function(){if(Se()&&!Je())return Ee();throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.m.g(a.u())}).then(function(b){a.g=b;return O(a.s,Jj,{})}).then(function(b){a.a[mo]=b.recaptchaSiteKey;}).o(function(b){a.f=null;throw b;}))};
  k.render=function(){to(this);var a=this;return so(this,this.Ia().then(function(){if(null===a.c){var b=a.v;if(!a.i){var c=kc(b);b=nc("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){to(this);var a=this;return so(this,this.render().then(function(b){return new D(function(c){var d=a.g.getResponse(b);if(d)c(d);else{var e=function(f){f&&(ro(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){to(this);null!==this.c&&this.g.reset(this.c);};
  function to(a){if(a.J)throw new t("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){to(this);this.J=!0;this.m.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=kc(this.v);for(var b;b=a.firstChild;)a.removeChild(b);}};
  function uo(a,b,c){var d=!1;try{this.b=c||firebase.app();}catch(g){throw new t("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new t("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ga();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,f):null;lo.call(this,c,a,b,function(){try{var g=e.b.auth().la();}catch(h){g=
  null;}return g},f,Ca(Da),d);}r(uo,lo);function vo(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else{if(f)throw new t("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else{for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=wo.length)throw new t("internal-error",
  "Argument validator received an unsupported number of arguments.");c=wo[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null;}}if(d)throw new t("argument-error",a+" failed: "+d);}var wo="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",K:"a valid string",optional:!!b,M:function(c){return "string"===typeof c}}}
  function xo(a,b){return {name:a||"",K:"a boolean",optional:!!b,M:function(c){return "boolean"===typeof c}}}function W(a,b){return {name:a||"",K:"a valid object",optional:!!b,M:n}}function yo(a,b){return {name:a||"",K:"a function",optional:!!b,M:function(c){return "function"===typeof c}}}function zo(a,b){return {name:a||"",K:"null",optional:!!b,M:function(c){return null===c}}}function Ao(){return {name:"",K:"an HTML element",optional:!1,M:function(a){return !!(a&&a instanceof Element)}}}
  function Bo(){return {name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return !!(a&&a instanceof Fn)}}}function Co(){return {name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return !!(a&&a instanceof firebase.app.App)}}}function Do(a){return {name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.ka||!c)}}}
  function Eo(){return {name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(a){return a?!!a.tb:!1}}}function Fo(){return {name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Go(a,b){return n(a)&&"string"===typeof a.type&&a.type===b&&"function"===typeof a.Ha}function Ho(a){return n(a)&&"string"===typeof a.uid}
  function Io(){return {name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return !(!a||"string"!==typeof a.type||"function"!==typeof a.verify)}}}function X(a,b,c,d){return {name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(e){return a.M(e)||b.M(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=Jo(d,a[c],b[c].j);}}function Ko(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ua(function(e){return this[e]},c),set:ua(function(e,f,g,h){vo(e,[g],[h],!0);this[f]=h;},d,c,b[c].lb),enumerable:!0});}}function Z(a,b,c,d){a[b]=Jo(b,c,d);}
  function Jo(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);vo(e,c,g);return b.apply(this,g)}if(!c)return b;var e=Lo(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Lo(a){a=a.split(".");return a[a.length-1]}Y(Fn.prototype,{kb:{name:"applyActionCode",j:[V("code")]},Sa:{name:"checkActionCode",j:[V("code")]},ob:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},hc:{name:"fetchSignInMethodsForEmail",j:[V("email")]},ra:{name:"getRedirectResult",j:[]},Bc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},Hc:{name:"onAuthStateChanged",j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},Ic:{name:"onIdTokenChanged",
  j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},wb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},xb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},yb:{name:"setPersistence",j:[V("persistence")]},Sc:{name:"signInAndRetrieveDataWithCredential",j:[Do()]},Ab:{name:"signInAnonymously",j:[]},ab:{name:"signInWithCredential",j:[Do()]},Tc:{name:"signInWithCustomToken",j:[V("token")]},
  Uc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Vc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Wc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Io()]},Xc:{name:"signInWithPopup",j:[Fo()]},Yc:{name:"signInWithRedirect",j:[Fo()]},dd:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",K:"an instance of Firebase User",optional:!!a,M:function(b){return !!(b&&b instanceof Im)}}}(),zo(),"user")]},Bb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,
  !0)]},fd:{name:"useDeviceLanguage",j:[]},gd:{name:"useEmulator",j:[V("url"),W("options",!0)]},jd:{name:"verifyPasswordResetCode",j:[V("code")]}});Ko(Fn.prototype,{lc:{name:"languageCode",lb:X(V(),zo(),"languageCode")},ti:{name:"tenantId",lb:X(V(),zo(),"tenantId")}});Fn.Persistence=Rk;Fn.Persistence.LOCAL="local";Fn.Persistence.SESSION="session";Fn.Persistence.NONE="none";
  Y(Im.prototype,{"delete":{name:"delete",j:[]},oc:{name:"getIdTokenResult",j:[xo("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[xo("opt_forceRefresh",!0)]},Cc:{name:"linkAndRetrieveDataWithCredential",j:[Do()]},rb:{name:"linkWithCredential",j:[Do()]},Dc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Io()]},Ec:{name:"linkWithPopup",j:[Fo()]},Fc:{name:"linkWithRedirect",j:[Fo()]},Lc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Do()]},ub:{name:"reauthenticateWithCredential",j:[Do()]},Mc:{name:"reauthenticateWithPhoneNumber",
  j:[V("phoneNumber"),Io()]},Nc:{name:"reauthenticateWithPopup",j:[Fo()]},Oc:{name:"reauthenticateWithRedirect",j:[Fo()]},reload:{name:"reload",j:[]},vb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},cd:{name:"unlink",j:[V("provider")]},Cb:{name:"updateEmail",j:[V("email")]},Db:{name:"updatePassword",j:[V("password")]},ed:{name:"updatePhoneNumber",j:[Do("phone")]},Eb:{name:"updateProfile",j:[W("profile")]},
  Fb:{name:"verifyBeforeUpdateEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]}});Y(Yn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(Xn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(D.prototype,{oa:{name:"finally"},o:{name:"catch"},then:{name:"then"}});
  Ko(em.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",lb:xo("appVerificationDisabledForTesting")}});Y(fm.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(Bg,"fromJSON",function(a){a="string"===typeof a?JSON.parse(a):a;for(var b,c=[Mg,dh,kh,Jg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z(Zg,"credential",function(a,b){return new Yg(a,b)},[V("email"),V("password")]);Y(Yg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
  Y(Qg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Qg,"credential",Rg,[X(V(),W(),"token")]);Z(Zg,"credentialWithLink",eh,[V("email"),V("emailLink")]);Y(Sg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Sg,"credential",Tg,[X(V(),W(),"token")]);Y(Ug.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
  Z(Ug,"credential",Vg,[X(V(),X(W(),zo()),"idToken"),X(V(),zo(),"accessToken",!0)]);Y(Wg.prototype,{Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Wg,"credential",Xg,[X(V(),W(),"token"),V("secret",!0)]);Y(Pg.prototype,{Ca:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),zo()),"optionsOrIdToken"),X(V(),zo(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(Kg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
  Y(Eg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Z(lh,"credential",ph,[V("verificationId"),V("verificationCode")]);
  Y(lh.prototype,{gb:{name:"verifyPhoneNumber",j:[X(V(),function(a,b){return {name:a||"phoneInfoOptions",K:"valid phone info options",optional:!!b,M:function(c){return c?c.session&&c.phoneNumber?Go(c.session,zg)&&"string"===typeof c.phoneNumber:c.session&&c.multiFactorHint?Go(c.session,Ag)&&Ho(c.multiFactorHint):c.session&&c.multiFactorUid?Go(c.session,Ag)&&"string"===typeof c.multiFactorUid:c.phoneNumber?"string"===typeof c.phoneNumber:!1:!1}}}(),"phoneInfoOptions"),Io()]}});
  Y(gh.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Y(t.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(yh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(xh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(lm.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(im.prototype,{Rc:{name:"resolveSignIn",j:[Eo()]}});
  Y(tm.prototype,{Sb:{name:"getSession",j:[]},fc:{name:"enroll",j:[Eo(),V("displayName",!0)]},bd:{name:"unenroll",j:[X({name:"multiFactorInfo",K:"a valid multiFactorInfo",optional:!1,M:Ho},V(),"multiFactorInfoIdentifier")]}});Y(uo.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(Jf,"parseLink",Rf,[V("link")]);Z(eo,"assertion",function(a){return new rm(a)},[Do("phone")]);
  (function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerComponent){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Af,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:Cf,VERIFY_AND_CHANGE_EMAIL:Bf,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Fn,AuthCredential:Bg,Error:t};Z(a,"EmailAuthProvider",Zg,[]);Z(a,"FacebookAuthProvider",Qg,[]);Z(a,"GithubAuthProvider",Sg,[]);Z(a,"GoogleAuthProvider",Ug,[]);Z(a,"TwitterAuthProvider",Wg,[]);
  Z(a,"OAuthProvider",Pg,[V("providerId")]);Z(a,"SAMLAuthProvider",Og,[V("providerId")]);Z(a,"PhoneAuthProvider",lh,[Bo()]);Z(a,"RecaptchaVerifier",uo,[X(V(),Ao(),"recaptchaContainer"),W("recaptchaParameters",!0),Co()]);Z(a,"ActionCodeURL",Jf,[]);Z(a,"PhoneMultiFactorGenerator",eo,[]);firebase.INTERNAL.registerComponent({name:"auth",instanceFactory:function(b){b=b.getProvider("app").getImmediate();return new Fn(b)},multipleInstances:!1,serviceProps:a,instantiationMode:"LAZY",type:"PUBLIC",onInstanceCreated:function(b){b.getProvider("auth-internal").initialize();}});
  firebase.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(b){b=b.getProvider("auth").getImmediate();return {getUid:q(b.getUid,b),getToken:q(b.nc,b),addAuthTokenListener:q(b.cc,b),removeAuthTokenListener:q(b.Pc,b)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"});firebase.registerVersion("@firebase/auth","0.16.8");firebase.INTERNAL.extendNamespace({User:Im});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$5 = function(d, b) {
      extendStatics$5 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics$5(d, b);
  };

  function __extends$5(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics$5(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __awaiter$5(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator$5(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Standard error codes for different ways a request can fail, as defined by:
   * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   *
   * This map is used primarily to convert from a backend error code string to
   * a client SDK error code string, and make sure it's in the supported set.
   */
  var errorCodeMap = {
      OK: 'ok',
      CANCELLED: 'cancelled',
      UNKNOWN: 'unknown',
      INVALID_ARGUMENT: 'invalid-argument',
      DEADLINE_EXCEEDED: 'deadline-exceeded',
      NOT_FOUND: 'not-found',
      ALREADY_EXISTS: 'already-exists',
      PERMISSION_DENIED: 'permission-denied',
      UNAUTHENTICATED: 'unauthenticated',
      RESOURCE_EXHAUSTED: 'resource-exhausted',
      FAILED_PRECONDITION: 'failed-precondition',
      ABORTED: 'aborted',
      OUT_OF_RANGE: 'out-of-range',
      UNIMPLEMENTED: 'unimplemented',
      INTERNAL: 'internal',
      UNAVAILABLE: 'unavailable',
      DATA_LOSS: 'data-loss'
  };
  /**
   * An explicit error that can be thrown from a handler to send an error to the
   * client that called the function.
   */
  var HttpsErrorImpl = /** @class */ (function (_super) {
      __extends$5(HttpsErrorImpl, _super);
      function HttpsErrorImpl(code, message, details) {
          var _this = _super.call(this, message) || this;
          // This is a workaround for a bug in TypeScript when extending Error:
          // tslint:disable-next-line
          // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);
          _this.code = code;
          _this.details = details;
          return _this;
      }
      return HttpsErrorImpl;
  }(Error));
  /**
   * Takes an HTTP status code and returns the corresponding ErrorCode.
   * This is the standard HTTP status code -> error mapping defined in:
   * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   *
   * @param status An HTTP status code.
   * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
   */
  function codeForHTTPStatus(status) {
      // Make sure any successful status is OK.
      if (status >= 200 && status < 300) {
          return 'ok';
      }
      switch (status) {
          case 0:
              // This can happen if the server returns 500.
              return 'internal';
          case 400:
              return 'invalid-argument';
          case 401:
              return 'unauthenticated';
          case 403:
              return 'permission-denied';
          case 404:
              return 'not-found';
          case 409:
              return 'aborted';
          case 429:
              return 'resource-exhausted';
          case 499:
              return 'cancelled';
          case 500:
              return 'internal';
          case 501:
              return 'unimplemented';
          case 503:
              return 'unavailable';
          case 504:
              return 'deadline-exceeded';
      }
      return 'unknown';
  }
  /**
   * Takes an HTTP response and returns the corresponding Error, if any.
   */
  function _errorForResponse(status, bodyJSON, serializer) {
      var code = codeForHTTPStatus(status);
      // Start with reasonable defaults from the status code.
      var description = code;
      var details = undefined;
      // Then look through the body for explicit details.
      try {
          var errorJSON = bodyJSON && bodyJSON.error;
          if (errorJSON) {
              var status_1 = errorJSON.status;
              if (typeof status_1 === 'string') {
                  if (!errorCodeMap[status_1]) {
                      // They must've included an unknown error code in the body.
                      return new HttpsErrorImpl('internal', 'internal');
                  }
                  code = errorCodeMap[status_1];
                  // TODO(klimt): Add better default descriptions for error enums.
                  // The default description needs to be updated for the new code.
                  description = status_1;
              }
              var message = errorJSON.message;
              if (typeof message === 'string') {
                  description = message;
              }
              details = errorJSON.details;
              if (details !== undefined) {
                  details = serializer.decode(details);
              }
          }
      }
      catch (e) {
          // If we couldn't parse explicit error data, that's fine.
      }
      if (code === 'ok') {
          // Technically, there's an edge case where a developer could explicitly
          // return an error code of OK, and we will treat it as success, but that
          // seems reasonable.
          return null;
      }
      return new HttpsErrorImpl(code, description, details);
  }

  /**
   * Helper class to get metadata that should be included with a function call.
   */
  var ContextProvider = /** @class */ (function () {
      function ContextProvider(authProvider, messagingProvider) {
          var _this = this;
          this.auth = null;
          this.messaging = null;
          this.auth = authProvider.getImmediate({ optional: true });
          this.messaging = messagingProvider.getImmediate({
              optional: true
          });
          if (!this.auth) {
              authProvider.get().then(function (auth) { return (_this.auth = auth); }, function () {
                  /* get() never rejects */
              });
          }
          if (!this.messaging) {
              messagingProvider.get().then(function (messaging) { return (_this.messaging = messaging); }, function () {
                  /* get() never rejects */
              });
          }
      }
      ContextProvider.prototype.getAuthToken = function () {
          return __awaiter$5(this, void 0, void 0, function () {
              var token;
              return __generator$5(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (!this.auth) {
                              return [2 /*return*/, undefined];
                          }
                          _a.label = 1;
                      case 1:
                          _a.trys.push([1, 3, , 4]);
                          return [4 /*yield*/, this.auth.getToken()];
                      case 2:
                          token = _a.sent();
                          if (!token) {
                              return [2 /*return*/, undefined];
                          }
                          return [2 /*return*/, token.accessToken];
                      case 3:
                          _a.sent();
                          // If there's any error when trying to get the auth token, leave it off.
                          return [2 /*return*/, undefined];
                      case 4: return [2 /*return*/];
                  }
              });
          });
      };
      ContextProvider.prototype.getInstanceIdToken = function () {
          return __awaiter$5(this, void 0, void 0, function () {
              return __generator$5(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (!this.messaging ||
                              !('Notification' in self) ||
                              Notification.permission !== 'granted') {
                              return [2 /*return*/, undefined];
                          }
                          _a.label = 1;
                      case 1:
                          _a.trys.push([1, 3, , 4]);
                          return [4 /*yield*/, this.messaging.getToken()];
                      case 2: return [2 /*return*/, _a.sent()];
                      case 3:
                          _a.sent();
                          // We don't warn on this, because it usually means messaging isn't set up.
                          // console.warn('Failed to retrieve instance id token.', e);
                          // If there's any error when trying to get the token, leave it off.
                          return [2 /*return*/, undefined];
                      case 4: return [2 /*return*/];
                  }
              });
          });
      };
      ContextProvider.prototype.getContext = function () {
          return __awaiter$5(this, void 0, void 0, function () {
              var authToken, instanceIdToken;
              return __generator$5(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.getAuthToken()];
                      case 1:
                          authToken = _a.sent();
                          return [4 /*yield*/, this.getInstanceIdToken()];
                      case 2:
                          instanceIdToken = _a.sent();
                          return [2 /*return*/, { authToken: authToken, instanceIdToken: instanceIdToken }];
                  }
              });
          });
      };
      return ContextProvider;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
  var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
  function mapValues(
  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  o, f) {
      var result = {};
      for (var key in o) {
          if (o.hasOwnProperty(key)) {
              result[key] = f(o[key]);
          }
      }
      return result;
  }
  var Serializer = /** @class */ (function () {
      function Serializer() {
      }
      // Takes data and encodes it in a JSON-friendly way, such that types such as
      // Date are preserved.
      Serializer.prototype.encode = function (data) {
          var _this = this;
          if (data == null) {
              return null;
          }
          if (data instanceof Number) {
              data = data.valueOf();
          }
          if (typeof data === 'number' && isFinite(data)) {
              // Any number in JS is safe to put directly in JSON and parse as a double
              // without any loss of precision.
              return data;
          }
          if (data === true || data === false) {
              return data;
          }
          if (Object.prototype.toString.call(data) === '[object String]') {
              return data;
          }
          if (data instanceof Date) {
              return data.toISOString();
          }
          if (Array.isArray(data)) {
              return data.map(function (x) { return _this.encode(x); });
          }
          if (typeof data === 'function' || typeof data === 'object') {
              return mapValues(data, function (x) { return _this.encode(x); });
          }
          // If we got this far, the data is not encodable.
          throw new Error('Data cannot be encoded in JSON: ' + data);
      };
      // Takes data that's been encoded in a JSON-friendly form and returns a form
      // with richer datatypes, such as Dates, etc.
      Serializer.prototype.decode = function (json) {
          var _this = this;
          if (json == null) {
              return json;
          }
          if (json['@type']) {
              switch (json['@type']) {
                  case LONG_TYPE:
                  // Fall through and handle this the same as unsigned.
                  case UNSIGNED_LONG_TYPE: {
                      // Technically, this could work return a valid number for malformed
                      // data if there was a number followed by garbage. But it's just not
                      // worth all the extra code to detect that case.
                      var value = Number(json['value']);
                      if (isNaN(value)) {
                          throw new Error('Data cannot be decoded from JSON: ' + json);
                      }
                      return value;
                  }
                  default: {
                      throw new Error('Data cannot be decoded from JSON: ' + json);
                  }
              }
          }
          if (Array.isArray(json)) {
              return json.map(function (x) { return _this.decode(x); });
          }
          if (typeof json === 'function' || typeof json === 'object') {
              return mapValues(json, function (x) { return _this.decode(x); });
          }
          // Anything else is safe to return.
          return json;
      };
      return Serializer;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns a Promise that will be rejected after the given duration.
   * The error will be of type HttpsErrorImpl.
   *
   * @param millis Number of milliseconds to wait before rejecting.
   */
  function failAfter(millis) {
      var timer;
      var promise = new Promise(function (_, reject) {
          timer = setTimeout(function () {
              reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));
          }, millis);
      });
      return {
          timer: timer,
          promise: promise
      };
  }
  /**
   * The main class for the Firebase Functions SDK.
   */
  var Service = /** @class */ (function () {
      /**
       * Creates a new Functions service for the given app and (optional) region or custom domain.
       * @param app_ The FirebaseApp to use.
       * @param regionOrCustomDomain_ one of:
       *   a) A region to call functions from, such as us-central1
       *   b) A custom domain to use as a functions prefix, such as https://mydomain.com
       */
      function Service(app_, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain_, fetchImpl) {
          var _this = this;
          if (regionOrCustomDomain_ === void 0) { regionOrCustomDomain_ = 'us-central1'; }
          this.app_ = app_;
          this.appCheckProvider = appCheckProvider;
          this.fetchImpl = fetchImpl;
          this.serializer = new Serializer();
          this.emulatorOrigin = null;
          this.INTERNAL = {
              delete: function () {
                  return Promise.resolve(_this.deleteService());
              }
          };
          this.contextProvider = new ContextProvider(authProvider, messagingProvider);
          // Cancels all ongoing requests when resolved.
          this.cancelAllRequests = new Promise(function (resolve) {
              _this.deleteService = function () {
                  return resolve();
              };
          });
          // Resolve the region or custom domain overload by attempting to parse it.
          try {
              var url = new URL(regionOrCustomDomain_);
              this.customDomain = url.origin;
              this.region = 'us-central1';
          }
          catch (e) {
              this.customDomain = null;
              this.region = regionOrCustomDomain_;
          }
      }
      Object.defineProperty(Service.prototype, "app", {
          get: function () {
              return this.app_;
          },
          enumerable: false,
          configurable: true
      });
      /**
       * Returns the URL for a callable with the given name.
       * @param name The name of the callable.
       */
      Service.prototype._url = function (name) {
          var projectId = this.app_.options.projectId;
          if (this.emulatorOrigin !== null) {
              var origin_1 = this.emulatorOrigin;
              return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
          }
          if (this.customDomain !== null) {
              return this.customDomain + "/" + name;
          }
          return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
      };
      /**
       * Modify this instance to communicate with the Cloud Functions emulator.
       *
       * Note: this must be called before this instance has been used to do any operations.
       *
       * @param host The emulator host (ex: localhost)
       * @param port The emulator port (ex: 5001)
       */
      Service.prototype.useEmulator = function (host, port) {
          this.emulatorOrigin = "http://" + host + ":" + port;
      };
      /**
       * Changes this instance to point to a Cloud Functions emulator running
       * locally. See https://firebase.google.com/docs/functions/local-emulator
       *
       * @deprecated Prefer the useEmulator(host, port) method.
       * @param origin The origin of the local emulator, such as
       * "http://localhost:5005".
       */
      Service.prototype.useFunctionsEmulator = function (origin) {
          this.emulatorOrigin = origin;
      };
      /**
       * Returns a reference to the callable https trigger with the given name.
       * @param name The name of the trigger.
       */
      Service.prototype.httpsCallable = function (name, options) {
          var _this = this;
          return function (data) {
              return _this.call(name, data, options || {});
          };
      };
      /**
       * Does an HTTP POST and returns the completed response.
       * @param url The url to post to.
       * @param body The JSON body of the post.
       * @param headers The HTTP headers to include in the request.
       * @return A Promise that will succeed when the request finishes.
       */
      Service.prototype.postJSON = function (url, body, headers) {
          return __awaiter$5(this, void 0, void 0, function () {
              var appCheckToken, response, json;
              return __generator$5(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          headers['Content-Type'] = 'application/json';
                          return [4 /*yield*/, this.getAppCheckToken()];
                      case 1:
                          appCheckToken = _a.sent();
                          if (appCheckToken !== null) {
                              headers['X-Firebase-AppCheck'] = appCheckToken;
                          }
                          _a.label = 2;
                      case 2:
                          _a.trys.push([2, 4, , 5]);
                          return [4 /*yield*/, this.fetchImpl(url, {
                                  method: 'POST',
                                  body: JSON.stringify(body),
                                  headers: headers
                              })];
                      case 3:
                          response = _a.sent();
                          return [3 /*break*/, 5];
                      case 4:
                          _a.sent();
                          // This could be an unhandled error on the backend, or it could be a
                          // network error. There's no way to know, since an unhandled error on the
                          // backend will fail to set the proper CORS header, and thus will be
                          // treated as a network error by fetch.
                          return [2 /*return*/, {
                                  status: 0,
                                  json: null
                              }];
                      case 5:
                          json = null;
                          _a.label = 6;
                      case 6:
                          _a.trys.push([6, 8, , 9]);
                          return [4 /*yield*/, response.json()];
                      case 7:
                          json = _a.sent();
                          return [3 /*break*/, 9];
                      case 8:
                          _a.sent();
                          return [3 /*break*/, 9];
                      case 9: return [2 /*return*/, {
                              status: response.status,
                              json: json
                          }];
                  }
              });
          });
      };
      Service.prototype.getAppCheckToken = function () {
          return __awaiter$5(this, void 0, void 0, function () {
              var appCheck, result;
              return __generator$5(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          appCheck = this.appCheckProvider.getImmediate({ optional: true });
                          if (!appCheck) return [3 /*break*/, 2];
                          return [4 /*yield*/, appCheck.getToken()];
                      case 1:
                          result = _a.sent();
                          // If getToken() fails, it will still return a dummy token that also has
                          // an error field containing the error message. We will send any token
                          // provided here and show an error if/when it is rejected by the functions
                          // endpoint.
                          return [2 /*return*/, result.token];
                      case 2: return [2 /*return*/, null];
                  }
              });
          });
      };
      /**
       * Calls a callable function asynchronously and returns the result.
       * @param name The name of the callable trigger.
       * @param data The data to pass as params to the function.s
       */
      Service.prototype.call = function (name, data, options) {
          return __awaiter$5(this, void 0, void 0, function () {
              var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;
              return __generator$5(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          url = this._url(name);
                          // Encode any special types, such as dates, in the input data.
                          data = this.serializer.encode(data);
                          body = { data: data };
                          headers = {};
                          return [4 /*yield*/, this.contextProvider.getContext()];
                      case 1:
                          context = _b.sent();
                          if (context.authToken) {
                              headers['Authorization'] = 'Bearer ' + context.authToken;
                          }
                          if (context.instanceIdToken) {
                              headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;
                          }
                          timeout = options.timeout || 70000;
                          _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;
                          return [4 /*yield*/, Promise.race([
                                  clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),
                                  failAfterPromise,
                                  clearTimeoutWrapper(timer, this.cancelAllRequests)
                              ])];
                      case 2:
                          response = _b.sent();
                          // If service was deleted, interrupted response throws an error.
                          if (!response) {
                              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');
                          }
                          error = _errorForResponse(response.status, response.json, this.serializer);
                          if (error) {
                              throw error;
                          }
                          if (!response.json) {
                              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');
                          }
                          responseData = response.json.data;
                          // TODO(klimt): For right now, allow "result" instead of "data", for
                          // backwards compatibility.
                          if (typeof responseData === 'undefined') {
                              responseData = response.json.result;
                          }
                          if (typeof responseData === 'undefined') {
                              // Consider the response malformed.
                              throw new HttpsErrorImpl('internal', 'Response is missing data field.');
                          }
                          decodedData = this.serializer.decode(responseData);
                          return [2 /*return*/, { data: decodedData }];
                  }
              });
          });
      };
      return Service;
  }());
  function clearTimeoutWrapper(timer, promise) {
      return __awaiter$5(this, void 0, void 0, function () {
          var result;
          return __generator$5(this, function (_a) {
              switch (_a.label) {
                  case 0: return [4 /*yield*/, promise];
                  case 1:
                      result = _a.sent();
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      clearTimeout(timer);
                      return [2 /*return*/, result];
              }
          });
      });
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Type constant for Firebase Functions.
   */
  var FUNCTIONS_TYPE = 'functions';
  function registerFunctions(instance, fetchImpl) {
      var namespaceExports = {
          // no-inline
          Functions: Service
      };
      function factory(container, _a) {
          var regionOrCustomDomain = _a.instanceIdentifier;
          // Dependencies
          var app = container.getProvider('app').getImmediate();
          var authProvider = container.getProvider('auth-internal');
          var appCheckProvider = container.getProvider('app-check-internal');
          var messagingProvider = container.getProvider('messaging');
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return new Service(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);
      }
      instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory, "PUBLIC" /* PUBLIC */)
          .setServiceProps(namespaceExports)
          .setMultipleInstances(true));
  }

  var name$f = "@firebase/functions";
  var version$4 = "0.6.15";

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  registerFunctions(firebase, fetch.bind(self));
  firebase.registerVersion(name$f, version$4);

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$6 = function(d, b) {
      extendStatics$6 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics$6(d, b);
  };

  function __extends$6(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics$6(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __awaiter$6(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator$6(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __spreadArray$5(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$7 = function(d, b) {
      extendStatics$7 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics$7(d, b);
  };

  function __extends$7(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics$7(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __values$7(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var k, goog = goog || {}, l = commonjsGlobal || self;
  function aa() { }
  function ba(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
  function p(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
  function da(a) { return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa); }
  var ea = "closure_uid_" + (1E9 * Math.random() >>> 0), fa = 0;
  function ha(a, b, c) { return a.call.apply(a.bind, arguments); }
  function ia(a, b, c) { if (!a)
      throw Error(); if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
  } return function () { return a.apply(b, arguments); }; }
  function q(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = ha : q = ia; return q.apply(null, arguments); }
  function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
  function t(a, b) { function c() { } c.prototype = b.prototype; a.Z = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Vb = function (d, e, f) { for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)
      h[n - 2] = arguments[n]; return b.prototype[e].apply(d, h); }; }
  function v() { this.s = this.s; this.o = this.o; }
  var ka = 0;
  v.prototype.s = !1;
  v.prototype.na = function () { if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
      var a = da(this);
  } };
  v.prototype.M = function () { if (this.o)
      for (; this.o.length;)
          this.o.shift()(); };
  var ma = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
      return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
      if (c in a && a[c] === b)
          return c; return -1; }, na = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { var d = a.length, e = "string" === typeof a ? a.split("") : a; for (var f = 0; f < d; f++)
      f in e && b.call(c, e[f], f, a); };
  function oa(a) { a: {
      var b = pa;
      var c = a.length, d = "string" === typeof a ? a.split("") : a;
      for (var e = 0; e < c; e++)
          if (e in d && b.call(void 0, d[e], e, a)) {
              b = e;
              break a;
          }
      b = -1;
  } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
  function qa(a) { return Array.prototype.concat.apply([], arguments); }
  function ra(a) { var b = a.length; if (0 < b) {
      var c = Array(b);
      for (var d = 0; d < b; d++)
          c[d] = a[d];
      return c;
  } return []; }
  function sa(a) { return /^[\s\xa0]*$/.test(a); }
  var ta = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
  function w(a, b) { return -1 != a.indexOf(b); }
  function ua(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
  var x;
  a: {
      var va = l.navigator;
      if (va) {
          var wa = va.userAgent;
          if (wa) {
              x = wa;
              break a;
          }
      }
      x = "";
  }
  function xa(a, b, c) { for (var d in a)
      b.call(c, a[d], d, a); }
  function ya(a) { var b = {}; for (var c in a)
      b[c] = a[c]; return b; }
  var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function Aa(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
      d = arguments[e];
      for (c in d)
          a[c] = d[c];
      for (var f = 0; f < za.length; f++)
          c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  } }
  function Ca(a) { Ca[" "](a); return a; }
  Ca[" "] = aa;
  function Fa(a) { var b = Ga; return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9); }
  var Ha = w(x, "Opera"), y = w(x, "Trident") || w(x, "MSIE"), Ia = w(x, "Edge"), Ja = Ia || y, Ka = w(x, "Gecko") && !(w(x.toLowerCase(), "webkit") && !w(x, "Edge")) && !(w(x, "Trident") || w(x, "MSIE")) && !w(x, "Edge"), La = w(x.toLowerCase(), "webkit") && !w(x, "Edge");
  function Ma() { var a = l.document; return a ? a.documentMode : void 0; }
  var Na;
  a: {
      var Oa = "", Pa = function () { var a = x; if (Ka)
          return /rv:([^\);]+)(\)|;)/.exec(a); if (Ia)
          return /Edge\/([\d\.]+)/.exec(a); if (y)
          return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (La)
          return /WebKit\/(\S+)/.exec(a); if (Ha)
          return /(?:Version)[ \/]?(\S+)/.exec(a); }();
      Pa && (Oa = Pa ? Pa[1] : "");
      if (y) {
          var Qa = Ma();
          if (null != Qa && Qa > parseFloat(Oa)) {
              Na = String(Qa);
              break a;
          }
      }
      Na = Oa;
  }
  var Ga = {};
  function Ra() { return Fa(function () { var a = 0; var b = ta(String(Na)).split("."), c = ta("9").split("."), d = Math.max(b.length, c.length); for (var h = 0; 0 == a && h < d; h++) {
      var e = b[h] || "", f = c[h] || "";
      do {
          e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
          f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
          if (0 == e[0].length && 0 == f[0].length)
              break;
          a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
          e = e[3];
          f = f[3];
      } while (0 == a);
  } return 0 <= a; }); }
  var Sa;
  if (l.document && y) {
      var Ta = Ma();
      Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
  }
  else
      Sa = void 0;
  var Ua = Sa;
  var Va = function () { if (!l.addEventListener || !Object.defineProperty)
      return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
      l.addEventListener("test", aa, b), l.removeEventListener("test", aa, b);
  }
  catch (c) { } return a; }();
  function z(a, b) { this.type = a; this.g = this.target = b; this.defaultPrevented = !1; }
  z.prototype.h = function () { this.defaultPrevented = !0; };
  function A(a, b) {
      z.call(this, a ? a.type : "");
      this.relatedTarget = this.g = this.target = null;
      this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
      this.key = "";
      this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
      this.state = null;
      this.pointerId = 0;
      this.pointerType = "";
      this.i = null;
      if (a) {
          var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
          this.target = a.target || a.srcElement;
          this.g = b;
          if (b = a.relatedTarget) {
              if (Ka) {
                  a: {
                      try {
                          Ca(b.nodeName);
                          var e = !0;
                          break a;
                      }
                      catch (f) { }
                      e =
                          !1;
                  }
                  e || (b = null);
              }
          }
          else
              "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
          this.relatedTarget = b;
          d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
          this.button = a.button;
          this.key = a.key || "";
          this.ctrlKey = a.ctrlKey;
          this.altKey = a.altKey;
          this.shiftKey =
              a.shiftKey;
          this.metaKey = a.metaKey;
          this.pointerId = a.pointerId || 0;
          this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
          this.state = a.state;
          this.i = a;
          a.defaultPrevented && A.Z.h.call(this);
      }
  }
  t(A, z);
  var Wa = { 2: "touch", 3: "pen", 4: "mouse" };
  A.prototype.h = function () { A.Z.h.call(this); var a = this.i; a.preventDefault ? a.preventDefault() : a.returnValue = !1; };
  var B = "closure_listenable_" + (1E6 * Math.random() | 0);
  var Xa = 0;
  function Ya(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ia = e; this.key = ++Xa; this.ca = this.fa = !1; }
  function Za(a) { a.ca = !0; a.listener = null; a.proxy = null; a.src = null; a.ia = null; }
  function $a(a) { this.src = a; this.g = {}; this.h = 0; }
  $a.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.g[f]; a || (a = this.g[f] = [], this.h++); var h = ab(a, b, d, e); -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b)); return b; };
  function bb(a, b) { var c = b.type; if (c in a.g) {
      var d = a.g[c], e = ma(d, b), f;
      (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
      f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
  } }
  function ab(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d)
          return e;
  } return -1; }
  var cb = "closure_lm_" + (1E6 * Math.random() | 0), db = {};
  function fb(a, b, c, d, e) { if (d && d.once)
      return gb(a, b, c, d, e); if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++)
          fb(a, b[f], c, d, e);
      return null;
  } c = hb(c); return a && a[B] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e); }
  function ib(a, b, c, d, e, f) { if (!b)
      throw Error("Invalid event type"); var h = p(e) ? !!e.capture : !!e, n = jb(a); n || (a[cb] = n = new $a(a)); c = n.add(b, c, d, h, f); if (c.proxy)
      return c; d = kb(); c.proxy = d; d.src = a; d.listener = c; if (a.addEventListener)
      Va || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
  else if (a.attachEvent)
      a.attachEvent(lb(b.toString()), d);
  else if (a.addListener && a.removeListener)
      a.addListener(d);
  else
      throw Error("addEventListener and attachEvent are unavailable."); return c; }
  function kb() { function a(c) { return b.call(a.src, a.listener, c); } var b = mb; return a; }
  function gb(a, b, c, d, e) { if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++)
          gb(a, b[f], c, d, e);
      return null;
  } c = hb(c); return a && a[B] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e); }
  function nb(a, b, c, d, e) { if (Array.isArray(b))
      for (var f = 0; f < b.length; f++)
          nb(a, b[f], c, d, e);
  else
      (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c)); }
  function ob(a) { if ("number" !== typeof a && a && !a.ca) {
      var b = a.src;
      if (b && b[B])
          bb(b.i, a);
      else {
          var c = a.type, d = a.proxy;
          b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
          (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
      }
  } }
  function lb(a) { return a in db ? db[a] : db[a] = "on" + a; }
  function mb(a, b) { if (a.ca)
      a = !0;
  else {
      b = new A(b, this);
      var c = a.listener, d = a.ia || a.src;
      a.fa && ob(a);
      a = c.call(d, b);
  } return a; }
  function jb(a) { a = a[cb]; return a instanceof $a ? a : null; }
  var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
  function hb(a) { if ("function" === typeof a)
      return a; a[pb] || (a[pb] = function (b) { return a.handleEvent(b); }); return a[pb]; }
  function C() { v.call(this); this.i = new $a(this); this.P = this; this.I = null; }
  t(C, v);
  C.prototype[B] = !0;
  C.prototype.removeEventListener = function (a, b, c, d) { nb(this, a, b, c, d); };
  function D(a, b) { var c, d = a.I; if (d)
      for (c = []; d; d = d.I)
          c.push(d); a = a.P; d = b.type || b; if ("string" === typeof b)
      b = new z(b, a);
  else if (b instanceof z)
      b.target = b.target || a;
  else {
      var e = b;
      b = new z(d, a);
      Aa(b, e);
  } e = !0; if (c)
      for (var f = c.length - 1; 0 <= f; f--) {
          var h = b.g = c[f];
          e = qb(h, d, !0, b) && e;
      } h = b.g = a; e = qb(h, d, !0, b) && e; e = qb(h, d, !1, b) && e; if (c)
      for (f = 0; f < c.length; f++)
          h = b.g = c[f], e = qb(h, d, !1, b) && e; }
  C.prototype.M = function () { C.Z.M.call(this); if (this.i) {
      var a = this.i, c;
      for (c in a.g) {
          for (var d = a.g[c], e = 0; e < d.length; e++)
              Za(d[e]);
          delete a.g[c];
          a.h--;
      }
  } this.I = null; };
  C.prototype.N = function (a, b, c, d) { return this.i.add(String(a), b, !1, c, d); };
  C.prototype.O = function (a, b, c, d) { return this.i.add(String(a), b, !0, c, d); };
  function qb(a, b, c, d) { b = a.i.g[String(b)]; if (!b)
      return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
      var h = b[f];
      if (h && !h.ca && h.capture == c) {
          var n = h.listener, u = h.ia || h.src;
          h.fa && bb(a.i, h);
          e = !1 !== n.call(u, d) && e;
      }
  } return e && !d.defaultPrevented; }
  var rb = l.JSON.stringify;
  function sb() { var a = tb; var b = null; a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null); return b; }
  var ub = /** @class */ (function () {
      function ub() {
          this.h = this.g = null;
      }
      ub.prototype.add = function (a, b) { var c = vb.get(); c.set(a, b); this.h ? this.h.next = c : this.g = c; this.h = c; };
      return ub;
  }());
  var vb = new /** @class */ (function () {
      function class_2(a, b) {
          this.i = a;
          this.j = b;
          this.h = 0;
          this.g = null;
      }
      class_2.prototype.get = function () { var a; 0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i(); return a; };
      return class_2;
  }())(function () { return new wb; }, function (a) { return a.reset(); });
  var wb = /** @class */ (function () {
      function wb() {
          this.next = this.g = this.h = null;
      }
      wb.prototype.set = function (a, b) { this.h = a; this.g = b; this.next = null; };
      wb.prototype.reset = function () { this.next = this.g = this.h = null; };
      return wb;
  }());
  function yb(a) { l.setTimeout(function () { throw a; }, 0); }
  function zb(a, b) { Ab || Bb(); Cb || (Ab(), Cb = !0); tb.add(a, b); }
  var Ab;
  function Bb() { var a = l.Promise.resolve(void 0); Ab = function () { a.then(Db); }; }
  var Cb = !1, tb = new ub;
  function Db() { for (var a; a = sb();) {
      try {
          a.h.call(a.g);
      }
      catch (c) {
          yb(c);
      }
      var b = vb;
      b.j(a);
      100 > b.h && (b.h++, a.next = b.g, b.g = a);
  } Cb = !1; }
  function Eb(a, b) { C.call(this); this.h = a || 1; this.g = b || l; this.j = q(this.kb, this); this.l = Date.now(); }
  t(Eb, C);
  k = Eb.prototype;
  k.da = !1;
  k.S = null;
  k.kb = function () { if (this.da) {
      var a = Date.now() - this.l;
      0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D(this, "tick"), this.da && (Fb(this), this.start()));
  } };
  k.start = function () { this.da = !0; this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now()); };
  function Fb(a) { a.da = !1; a.S && (a.g.clearTimeout(a.S), a.S = null); }
  k.M = function () { Eb.Z.M.call(this); Fb(this); delete this.g; };
  function Gb(a, b, c) { if ("function" === typeof a)
      c && (a = q(a, c));
  else if (a && "function" == typeof a.handleEvent)
      a = q(a.handleEvent, a);
  else
      throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0); }
  function Hb(a) { a.g = Gb(function () { a.g = null; a.i && (a.i = !1, Hb(a)); }, a.j); var b = a.h; a.h = null; a.m.apply(null, b); }
  var Ib = /** @class */ (function (_super) {
      __extends$7(Ib, _super);
      function Ib(a, b) {
          var _this = _super.call(this) || this;
          _this.m = a;
          _this.j = b;
          _this.h = null;
          _this.i = !1;
          _this.g = null;
          return _this;
      }
      Ib.prototype.l = function (a) { this.h = arguments; this.g ? this.i = !0 : Hb(this); };
      Ib.prototype.M = function () { _super.prototype.M.call(this); this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null); };
      return Ib;
  }(v));
  function E(a) { v.call(this); this.h = a; this.g = {}; }
  t(E, v);
  var Jb = [];
  function Kb(a, b, c, d) { Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb); for (var e = 0; e < c.length; e++) {
      var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
      if (!f)
          break;
      a.g[f.key] = f;
  } }
  function Lb(a) { xa(a.g, function (b, c) { this.g.hasOwnProperty(c) && ob(b); }, a); a.g = {}; }
  E.prototype.M = function () { E.Z.M.call(this); Lb(this); };
  E.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
  function Mb() { this.g = !0; }
  Mb.prototype.Aa = function () { this.g = !1; };
  function Nb(a, b, c, d, e, f) { a.info(function () { if (a.g)
      if (f) {
          var h = "";
          for (var n = f.split("&"), u = 0; u < n.length; u++) {
              var m = n[u].split("=");
              if (1 < m.length) {
                  var r = m[0];
                  m = m[1];
                  var G = r.split("_");
                  h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
              }
          }
      }
      else
          h = null;
  else
      h = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h; }); }
  function Ob(a, b, c, d, e, f, h) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h; }); }
  function F(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : ""); }); }
  function Qb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
  Mb.prototype.info = function () { };
  function Pb(a, b) { if (!a.g)
      return b; if (!b)
      return null; try {
      var c = JSON.parse(b);
      if (c)
          for (a = 0; a < c.length; a++)
              if (Array.isArray(c[a])) {
                  var d = c[a];
                  if (!(2 > d.length)) {
                      var e = d[1];
                      if (Array.isArray(e) && !(1 > e.length)) {
                          var f = e[0];
                          if ("noop" != f && "stop" != f && "close" != f)
                              for (var h = 1; h < e.length; h++)
                                  e[h] = "";
                      }
                  }
              }
      return rb(c);
  }
  catch (n) {
      return b;
  } }
  var H = {}, Rb = null;
  function Sb() { return Rb = Rb || new C; }
  H.Ma = "serverreachability";
  function Tb(a) { z.call(this, H.Ma, a); }
  t(Tb, z);
  function I(a) { var b = Sb(); D(b, new Tb(b, a)); }
  H.STAT_EVENT = "statevent";
  function Ub(a, b) { z.call(this, H.STAT_EVENT, a); this.stat = b; }
  t(Ub, z);
  function J(a) { var b = Sb(); D(b, new Ub(b, a)); }
  H.Na = "timingevent";
  function Vb(a, b) { z.call(this, H.Na, a); this.size = b; }
  t(Vb, z);
  function K(a, b) { if ("function" !== typeof a)
      throw Error("Fn must not be null and must be a function"); return l.setTimeout(function () { a(); }, b); }
  var Wb = { NO_ERROR: 0, lb: 1, yb: 2, xb: 3, sb: 4, wb: 5, zb: 6, Ja: 7, TIMEOUT: 8, Cb: 9 };
  var Xb = { qb: "complete", Mb: "success", Ka: "error", Ja: "abort", Eb: "ready", Fb: "readystatechange", TIMEOUT: "timeout", Ab: "incrementaldata", Db: "progress", tb: "downloadprogress", Ub: "uploadprogress" };
  function Yb() { }
  Yb.prototype.h = null;
  function Zb(a) { return a.h || (a.h = a.i()); }
  function $b() { }
  var L = { OPEN: "a", pb: "b", Ka: "c", Bb: "d" };
  function ac() { z.call(this, "d"); }
  t(ac, z);
  function bc() { z.call(this, "c"); }
  t(bc, z);
  var cc;
  function dc() { }
  t(dc, Yb);
  dc.prototype.g = function () { return new XMLHttpRequest; };
  dc.prototype.i = function () { return {}; };
  cc = new dc;
  function M(a, b, c, d) { this.l = a; this.j = b; this.m = c; this.X = d || 1; this.V = new E(this); this.P = ec; a = Ja ? 125 : void 0; this.W = new Eb(a); this.H = null; this.i = !1; this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null; this.D = []; this.g = null; this.C = 0; this.o = this.u = null; this.N = -1; this.I = !1; this.O = 0; this.L = null; this.aa = this.J = this.$ = this.U = !1; this.h = new fc; }
  function fc() { this.i = null; this.g = ""; this.h = !1; }
  var ec = 45E3, gc = {}, hc = {};
  k = M.prototype;
  k.setTimeout = function (a) { this.P = a; };
  function ic(a, b, c) { a.K = 1; a.v = jc(N(b)); a.s = c; a.U = !0; kc(a, null); }
  function kc(a, b) { a.F = Date.now(); lc(a); a.A = N(a.v); var c = a.A, d = a.X; Array.isArray(d) || (d = [String(d)]); mc(c.h, "t", d); a.C = 0; c = a.l.H; a.h = new fc; a.g = nc(a.l, c ? b : null, !a.s); 0 < a.O && (a.L = new Ib(q(a.Ia, a, a.g), a.O)); Kb(a.V, a.g, "readystatechange", a.gb); b = a.H ? ya(a.H) : {}; a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b)); I(1); Nb(a.j, a.u, a.A, a.m, a.X, a.s); }
  k.gb = function (a) { a = a.target; var b = this.L; b && 3 == O(a) ? b.l() : this.Ia(a); };
  k.Ia = function (a) {
      try {
          if (a == this.g)
              a: {
                  var r = O(this.g);
                  var b = this.g.Da();
                  var G = this.g.ba();
                  if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
                      this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
                      pc(this);
                      var c = this.g.ba();
                      this.N = c;
                      b: if (qc(this)) {
                          var d = oc(this.g);
                          a = "";
                          var e = d.length, f = 4 == O(this.g);
                          if (!this.h.i) {
                              if ("undefined" === typeof TextDecoder) {
                                  P(this);
                                  rc(this);
                                  var h = "";
                                  break b;
                              }
                              this.h.i = new l.TextDecoder;
                          }
                          for (b = 0; b < e; b++)
                              this.h.h = !0, a += this.h.i.decode(d[b], { stream: f && b == e - 1 });
                          d.splice(0, e);
                          this.h.g += a;
                          this.C = 0;
                          h = this.h.g;
                      }
                      else
                          h = this.g.ga();
                      this.i = 200 == c;
                      Ob(this.j, this.u, this.A, this.m, this.X, r, c);
                      if (this.i) {
                          if (this.$ && !this.J) {
                              b: {
                                  if (this.g) {
                                      var n, u = this.g;
                                      if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                                          var m = n;
                                          break b;
                                      }
                                  }
                                  m = null;
                              }
                              if (c = m)
                                  F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc(this, c);
                              else {
                                  this.i = !1;
                                  this.o = 3;
                                  J(12);
                                  P(this);
                                  rc(this);
                                  break a;
                              }
                          }
                          this.U ? (tc(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb),
                              this.W.start())) : (F(this.j, this.m, h, null), sc(this, h));
                          4 == r && P(this);
                          this.i && !this.I && (4 == r ? uc(this.l, this) : (this.i = !1, lc(this)));
                      }
                      else
                          400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J(12)) : (this.o = 0, J(13)), P(this), rc(this);
                  }
              }
      }
      catch (r) { }
      finally { }
  };
  function qc(a) { return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1; }
  function tc(a, b, c) {
      var d = !0, e;
      for (; !a.I && a.C < c.length;)
          if (e = vc(a, c), e == hc) {
              4 == b && (a.o = 4, J(14), d = !1);
              F(a.j, a.m, null, "[Incomplete Response]");
              break;
          }
          else if (e == gc) {
              a.o = 4;
              J(15);
              F(a.j, a.m, c, "[Invalid Chunk]");
              d = !1;
              break;
          }
          else
              F(a.j, a.m, e, null), sc(a, e);
      qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
      4 != b || 0 != c.length || a.h.h || (a.o = 1, J(16), d = !1);
      a.i = a.i && d;
      d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, J(11))) : (F(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc(a));
  }
  k.fb = function () { if (this.g) {
      var a = O(this.g), b = this.g.ga();
      this.C < b.length && (pc(this), tc(this, a, b), this.i && 4 != a && lc(this));
  } };
  function vc(a, b) { var c = a.C, d = b.indexOf("\n", c); if (-1 == d)
      return hc; c = Number(b.substring(c, d)); if (isNaN(c))
      return gc; d += 1; if (d + c > b.length)
      return hc; b = b.substr(d, c); a.C = d + c; return b; }
  k.cancel = function () { this.I = !0; P(this); };
  function lc(a) { a.Y = Date.now() + a.P; xc(a, a.P); }
  function xc(a, b) { if (null != a.B)
      throw Error("WatchDog timer not null"); a.B = K(q(a.eb, a), b); }
  function pc(a) { a.B && (l.clearTimeout(a.B), a.B = null); }
  k.eb = function () { this.B = null; var a = Date.now(); 0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J(17)), P(this), this.o = 2, rc(this)) : xc(this, this.Y - a); };
  function rc(a) { 0 == a.l.G || a.I || uc(a.l, a); }
  function P(a) { pc(a); var b = a.L; b && "function" == typeof b.na && b.na(); a.L = null; Fb(a.W); Lb(a.V); a.g && (b = a.g, a.g = null, b.abort(), b.na()); }
  function sc(a, b) {
      try {
          var c = a.l;
          if (0 != c.G && (c.g == a || yc(c.i, a)))
              if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
                  try {
                      var d = c.Ca.g.parse(b);
                  }
                  catch (m) {
                      d = null;
                  }
                  if (Array.isArray(d) && 3 == d.length) {
                      var e = d;
                      if (0 == e[0])
                          a: {
                              if (!c.u) {
                                  if (c.g)
                                      if (c.g.F + 3E3 < a.F)
                                          zc(c), Ac(c);
                                      else
                                          break a;
                                  Bc(c);
                                  J(18);
                              }
                          }
                      else
                          c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K(q(c.ab, c), 6E3));
                      if (1 >= Cc(c.i) && c.ka) {
                          try {
                              c.ka();
                          }
                          catch (m) { }
                          c.ka = void 0;
                      }
                  }
                  else
                      Q(c, 11);
              }
              else if ((a.J || c.g == a) && zc(c), !sa(b))
                  for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
                      var m = e[b];
                      c.U = m[0];
                      m = m[1];
                      if (2 == c.G)
                          if ("c" == m[0]) {
                              c.J = m[1];
                              c.la = m[2];
                              var r = m[3];
                              null != r && (c.ma = r, c.h.info("VER=" + c.ma));
                              var G = m[4];
                              null != G && (c.za = G, c.h.info("SVER=" + c.za));
                              var Da = m[5];
                              null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
                              d = c;
                              var ca = a.g;
                              if (ca) {
                                  var Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                                  if (Ea) {
                                      var f = d.i;
                                      !f.g && (w(Ea, "spdy") || w(Ea, "quic") || w(Ea, "h2")) && (f.j = f.l, f.g = new Set, f.h && (Dc(f, f.h), f.h = null));
                                  }
                                  if (d.D) {
                                      var xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
                                      xb && (d.sa = xb, R(d.F, d.D, xb));
                                  }
                              }
                              c.G = 3;
                              c.j && c.j.xa();
                              c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
                              d = c;
                              var h = a;
                              d.oa = Ec(d, d.H ? d.la : null, d.W);
                              if (h.J) {
                                  Fc(d.i, h);
                                  var n = h, u = d.K;
                                  u && n.setTimeout(u);
                                  n.B && (pc(n), lc(n));
                                  d.g = h;
                              }
                              else
                                  Gc(d);
                              0 < c.l.length && Hc(c);
                          }
                          else
                              "stop" != m[0] && "close" != m[0] || Q(c, 7);
                      else
                          3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q(c, 7) : Ic(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
                  }
          I(4);
      }
      catch (m) { }
  }
  function Jc(a) { if (a.R && "function" == typeof a.R)
      return a.R(); if ("string" === typeof a)
      return a.split(""); if (ba(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++)
          b.push(a[d]);
      return b;
  } b = []; c = 0; for (d in a)
      b[c++] = a[d]; return b; }
  function Kc(a, b) { if (a.forEach && "function" == typeof a.forEach)
      a.forEach(b, void 0);
  else if (ba(a) || "string" === typeof a)
      na(a, b, void 0);
  else {
      if (a.T && "function" == typeof a.T)
          var c = a.T();
      else if (a.R && "function" == typeof a.R)
          c = void 0;
      else if (ba(a) || "string" === typeof a) {
          c = [];
          for (var d = a.length, e = 0; e < d; e++)
              c.push(e);
      }
      else
          for (e in c = [], d = 0, a)
              c[d++] = e;
      d = Jc(a);
      e = d.length;
      for (var f = 0; f < e; f++)
          b.call(void 0, d[f], c && c[f], a);
  } }
  function S(a, b) { this.h = {}; this.g = []; this.i = 0; var c = arguments.length; if (1 < c) {
      if (c % 2)
          throw Error("Uneven number of arguments");
      for (var d = 0; d < c; d += 2)
          this.set(arguments[d], arguments[d + 1]);
  }
  else if (a)
      if (a instanceof S)
          for (c = a.T(), d = 0; d < c.length; d++)
              this.set(c[d], a.get(c[d]));
      else
          for (d in a)
              this.set(d, a[d]); }
  k = S.prototype;
  k.R = function () { Lc(this); for (var a = [], b = 0; b < this.g.length; b++)
      a.push(this.h[this.g[b]]); return a; };
  k.T = function () { Lc(this); return this.g.concat(); };
  function Lc(a) { if (a.i != a.g.length) {
      for (var b = 0, c = 0; b < a.g.length;) {
          var d = a.g[b];
          T(a.h, d) && (a.g[c++] = d);
          b++;
      }
      a.g.length = c;
  } if (a.i != a.g.length) {
      var e = {};
      for (c = b = 0; b < a.g.length;)
          d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
      a.g.length = c;
  } }
  k.get = function (a, b) { return T(this.h, a) ? this.h[a] : b; };
  k.set = function (a, b) { T(this.h, a) || (this.i++, this.g.push(a)); this.h[a] = b; };
  k.forEach = function (a, b) { for (var c = this.T(), d = 0; d < c.length; d++) {
      var e = c[d], f = this.get(e);
      a.call(b, f, e, this);
  } };
  function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
  var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
  function Nc(a, b) { if (a) {
      a = a.split("&");
      for (var c = 0; c < a.length; c++) {
          var d = a[c].indexOf("="), e = null;
          if (0 <= d) {
              var f = a[c].substring(0, d);
              e = a[c].substring(d + 1);
          }
          else
              f = a[c];
          b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
  } }
  function U(a, b) { this.i = this.s = this.j = ""; this.m = null; this.o = this.l = ""; this.g = !1; if (a instanceof U) {
      this.g = void 0 !== b ? b : a.g;
      Oc(this, a.j);
      this.s = a.s;
      Pc(this, a.i);
      Qc(this, a.m);
      this.l = a.l;
      b = a.h;
      var c = new Rc;
      c.i = b.i;
      b.g && (c.g = new S(b.g), c.h = b.h);
      Sc(this, c);
      this.o = a.o;
  }
  else
      a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", !0), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc(c[5] || "", !0), Sc(this, c[6] || "", !0), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g)); }
  U.prototype.toString = function () { var a = [], b = this.j; b && a.push(Uc(b, Vc, !0), ":"); var c = this.i; if (c || "file" == b)
      a.push("//"), (b = this.s) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c)); if (c = this.l)
      this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0)); (c = this.h.toString()) && a.push("?", c); (c = this.o) && a.push("#", Uc(c, Yc)); return a.join(""); };
  function N(a) { return new U(a); }
  function Oc(a, b, c) { a.j = c ? Tc(b, !0) : b; a.j && (a.j = a.j.replace(/:$/, "")); }
  function Pc(a, b, c) { a.i = c ? Tc(b, !0) : b; }
  function Qc(a, b) { if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b)
          throw Error("Bad port number " + b);
      a.m = b;
  }
  else
      a.m = null; }
  function Sc(a, b, c) { b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g)); }
  function R(a, b, c) { a.h.set(b, c); }
  function jc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)); return a; }
  function ad(a) { return a instanceof U ? N(a) : new U(a, void 0); }
  function bd(a, b, c, d) { var e = new U(null, void 0); a && Oc(e, a); b && Pc(e, b); c && Qc(e, c); d && (e.l = d); return e; }
  function Tc(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
  function Uc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
  function cd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
  var Vc = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c = /[#\?@]/g, Yc = /#/g;
  function Rc(a, b) { this.h = this.g = null; this.i = a || null; this.j = !!b; }
  function V(a) { a.g || (a.g = new S, a.h = 0, a.i && Nc(a.i, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
  k = Rc.prototype;
  k.add = function (a, b) { V(this); this.i = null; a = W(this, a); var c = this.g.get(a); c || this.g.set(a, c = []); c.push(b); this.h += 1; return this; };
  function dd(a, b) { V(a); b = W(a, b); T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a))); }
  function ed(a, b) { V(a); b = W(a, b); return T(a.g.h, b); }
  k.forEach = function (a, b) { V(this); this.g.forEach(function (c, d) { na(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
  k.T = function () { V(this); for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)
      for (var e = a[d], f = 0; f < e.length; f++)
          c.push(b[d]); return c; };
  k.R = function (a) { V(this); var b = []; if ("string" === typeof a)
      ed(this, a) && (b = qa(b, this.g.get(W(this, a))));
  else {
      a = this.g.R();
      for (var c = 0; c < a.length; c++)
          b = qa(b, a[c]);
  } return b; };
  k.set = function (a, b) { V(this); this.i = null; a = W(this, a); ed(this, a) && (this.h -= this.g.get(a).length); this.g.set(a, [b]); this.h += 1; return this; };
  k.get = function (a, b) { if (!a)
      return b; a = this.R(a); return 0 < a.length ? String(a[0]) : b; };
  function mc(a, b, c) { dd(a, b); 0 < c.length && (a.i = null, a.g.set(W(a, b), ra(c)), a.h += c.length); }
  k.toString = function () { if (this.i)
      return this.i; if (!this.g)
      return ""; for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
      var d = b[c], e = encodeURIComponent(String(d));
      d = this.R(d);
      for (var f = 0; f < d.length; f++) {
          var h = e;
          "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
          a.push(h);
      }
  } return this.i = a.join("&"); };
  function W(a, b) { b = String(b); a.j && (b = b.toLowerCase()); return b; }
  function Zc(a, b) { b && !a.j && (V(a), a.i = null, a.g.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (dd(this, d), mc(this, e, c)); }, a)); a.j = b; }
  var fd = /** @class */ (function () {
      function fd(a, b) {
          this.h = a;
          this.g = b;
      }
      return fd;
  }());
  function gd(a) { this.l = a || hd; l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb); this.j = a ? this.l : 1; this.g = null; 1 < this.j && (this.g = new Set); this.h = null; this.i = []; }
  var hd = 10;
  function id(a) { return a.h ? !0 : a.g ? a.g.size >= a.j : !1; }
  function Cc(a) { return a.h ? 1 : a.g ? a.g.size : 0; }
  function yc(a, b) { return a.h ? a.h == b : a.g ? a.g.has(b) : !1; }
  function Dc(a, b) { a.g ? a.g.add(b) : a.h = b; }
  function Fc(a, b) { a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b); }
  gd.prototype.cancel = function () {
      var e_1, _a;
      this.i = jd(this);
      if (this.h)
          this.h.cancel(), this.h = null;
      else if (this.g && 0 !== this.g.size) {
          try {
              for (var _b = __values$7(this.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var a = _c.value;
                  a.cancel();
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_1) throw e_1.error; }
          }
          this.g.clear();
      }
  };
  function jd(a) {
      var e_2, _a;
      if (null != a.h)
          return a.i.concat(a.h.D);
      if (null != a.g && 0 !== a.g.size) {
          var b = a.i;
          try {
              for (var _b = __values$7(a.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var c = _c.value;
                  b = b.concat(c.D);
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_2) throw e_2.error; }
          }
          return b;
      }
      return ra(a.i);
  }
  function kd() { }
  kd.prototype.stringify = function (a) { return l.JSON.stringify(a, void 0); };
  kd.prototype.parse = function (a) { return l.JSON.parse(a, void 0); };
  function ld() { this.g = new kd; }
  function md(a, b, c) { var d = c || ""; try {
      Kc(a, function (e, f) { var h = e; p(e) && (h = rb(e)); b.push(d + f + "=" + encodeURIComponent(h)); });
  }
  catch (e) {
      throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  } }
  function nd(a, b) { var c = new Mb; if (l.Image) {
      var d_1 = new Image;
      d_1.onload = ja(od, c, d_1, "TestLoadImage: loaded", !0, b);
      d_1.onerror = ja(od, c, d_1, "TestLoadImage: error", !1, b);
      d_1.onabort = ja(od, c, d_1, "TestLoadImage: abort", !1, b);
      d_1.ontimeout = ja(od, c, d_1, "TestLoadImage: timeout", !1, b);
      l.setTimeout(function () { if (d_1.ontimeout)
          d_1.ontimeout(); }, 1E4);
      d_1.src = a;
  }
  else
      b(!1); }
  function od(a, b, c, d, e) { try {
      b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  }
  catch (f) { } }
  function pd(a) { this.l = a.$b || null; this.j = a.ib || !1; }
  t(pd, Yb);
  pd.prototype.g = function () { return new qd(this.l, this.j); };
  pd.prototype.i = function (a) { return function () { return a; }; }({});
  function qd(a, b) { C.call(this); this.D = a; this.u = b; this.m = void 0; this.readyState = rd; this.status = 0; this.responseType = this.responseText = this.response = this.statusText = ""; this.onreadystatechange = null; this.v = new Headers; this.h = null; this.C = "GET"; this.B = ""; this.g = !1; this.A = this.j = this.l = null; }
  t(qd, C);
  var rd = 0;
  k = qd.prototype;
  k.open = function (a, b) { if (this.readyState != rd)
      throw this.abort(), Error("Error reopening a connection"); this.C = a; this.B = b; this.readyState = 1; sd(this); };
  k.send = function (a) { if (1 != this.readyState)
      throw this.abort(), Error("need to call open() first. "); this.g = !0; var b = { headers: this.v, method: this.C, credentials: this.m, cache: void 0 }; a && (b.body = a); (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this)); };
  k.abort = function () { this.response = this.responseText = ""; this.v = new Headers; this.status = 0; this.j && this.j.cancel("Request was aborted."); 1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this)); this.readyState = rd; };
  k.Va = function (a) {
      if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g)))
          if ("arraybuffer" === this.responseType)
              a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
          else if ("undefined" !== typeof l.ReadableStream && "body" in a) {
              this.j = a.body.getReader();
              if (this.u) {
                  if (this.responseType)
                      throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
                  this.response =
                      [];
              }
              else
                  this.response = this.responseText = "", this.A = new TextDecoder;
              ud(this);
          }
          else
              a.text().then(this.Ua.bind(this), this.ha.bind(this));
  };
  function ud(a) { a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a)); }
  k.Sa = function (a) { if (this.g) {
      if (this.u && a.value)
          this.response.push(a.value);
      else if (!this.u) {
          var b = a.value ? a.value : new Uint8Array(0);
          if (b = this.A.decode(b, { stream: !a.done }))
              this.response = this.responseText += b;
      }
      a.done ? td(this) : sd(this);
      3 == this.readyState && ud(this);
  } };
  k.Ua = function (a) { this.g && (this.response = this.responseText = a, td(this)); };
  k.Ta = function (a) { this.g && (this.response = a, td(this)); };
  k.ha = function () { this.g && td(this); };
  function td(a) { a.readyState = 4; a.l = null; a.j = null; a.A = null; sd(a); }
  k.setRequestHeader = function (a, b) { this.v.append(a, b); };
  k.getResponseHeader = function (a) { return this.h ? this.h.get(a.toLowerCase()) || "" : ""; };
  k.getAllResponseHeaders = function () { if (!this.h)
      return ""; var a = [], b = this.h.entries(); for (var c = b.next(); !c.done;)
      c = c.value, a.push(c[0] + ": " + c[1]), c = b.next(); return a.join("\r\n"); };
  function sd(a) { a.onreadystatechange && a.onreadystatechange.call(a); }
  Object.defineProperty(qd.prototype, "withCredentials", { get: function () { return "include" === this.m; }, set: function (a) { this.m = a ? "include" : "same-origin"; } });
  var vd = l.JSON.parse;
  function X(a) { C.call(this); this.headers = new S; this.u = a || null; this.h = !1; this.C = this.g = null; this.H = ""; this.m = 0; this.j = ""; this.l = this.F = this.v = this.D = !1; this.B = 0; this.A = null; this.J = wd; this.K = this.L = !1; }
  t(X, C);
  var wd = "", xd = /^https?$/i, yd = ["POST", "PUT"];
  k = X.prototype;
  k.ea = function (a, b, c, d) {
      if (this.g)
          throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
      b = b ? b.toUpperCase() : "GET";
      this.H = a;
      this.j = "";
      this.m = 0;
      this.D = !1;
      this.h = !0;
      this.g = this.u ? this.u.g() : cc.g();
      this.C = this.u ? Zb(this.u) : Zb(cc);
      this.g.onreadystatechange = q(this.Fa, this);
      try {
          this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
      }
      catch (f) {
          zd(this, f);
          return;
      }
      a = c || "";
      var e = new S(this.headers);
      d && Kc(d, function (f, h) { e.set(h, f); });
      d = oa(e.T());
      c = l.FormData && a instanceof l.FormData;
      !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
      e.forEach(function (f, h) { this.g.setRequestHeader(h, f); }, this);
      this.J && (this.g.responseType = this.J);
      "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
      try {
          Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
      }
      catch (f) {
          zd(this, f);
      }
  };
  function Bd(a) { return y && Ra() && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
  function pa(a) { return "content-type" == a.toLowerCase(); }
  k.pa = function () { "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8)); };
  function zd(a, b) { a.h = !1; a.g && (a.l = !0, a.g.abort(), a.l = !1); a.j = b; a.m = 5; Cd(a); Dd(a); }
  function Cd(a) { a.D || (a.D = !0, D(a, "complete"), D(a, "error")); }
  k.abort = function (a) { this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D(this, "complete"), D(this, "abort"), Dd(this)); };
  k.M = function () { this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0)); X.Z.M.call(this); };
  k.Fa = function () { this.s || (this.F || this.v || this.l ? Ed(this) : this.cb()); };
  k.cb = function () { Ed(this); };
  function Ed(a) {
      if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O(a) || 2 != a.ba()))
          if (a.v && 4 == O(a))
              Gb(a.Fa, 0, a);
          else if (D(a, "readystatechange"), 4 == O(a)) {
              a.h = !1;
              try {
                  var n = a.ba();
                  a: switch (n) {
                      case 200:
                      case 201:
                      case 202:
                      case 204:
                      case 206:
                      case 304:
                      case 1223:
                          var b = !0;
                          break a;
                      default: b = !1;
                  }
                  var c;
                  if (!(c = b)) {
                      var d;
                      if (d = 0 === n) {
                          var e = String(a.H).match(Mc)[1] || null;
                          if (!e && l.self && l.self.location) {
                              var f = l.self.location.protocol;
                              e = f.substr(0, f.length - 1);
                          }
                          d = !xd.test(e ? e.toLowerCase() : "");
                      }
                      c = d;
                  }
                  if (c)
                      D(a, "complete"), D(a, "success");
                  else {
                      a.m = 6;
                      try {
                          var h = 2 < O(a) ? a.g.statusText : "";
                      }
                      catch (u) {
                          h = "";
                      }
                      a.j = h + " [" + a.ba() + "]";
                      Cd(a);
                  }
              }
              finally {
                  Dd(a);
              }
          }
  }
  function Dd(a, b) { if (a.g) {
      Ad(a);
      var c = a.g, d = a.C[0] ? aa : null;
      a.g = null;
      a.C = null;
      b || D(a, "ready");
      try {
          c.onreadystatechange = d;
      }
      catch (e) { }
  } }
  function Ad(a) { a.g && a.K && (a.g.ontimeout = null); a.A && (l.clearTimeout(a.A), a.A = null); }
  function O(a) { return a.g ? a.g.readyState : 0; }
  k.ba = function () { try {
      return 2 < O(this) ? this.g.status : -1;
  }
  catch (a) {
      return -1;
  } };
  k.ga = function () { try {
      return this.g ? this.g.responseText : "";
  }
  catch (a) {
      return "";
  } };
  k.Qa = function (a) { if (this.g) {
      var b = this.g.responseText;
      a && 0 == b.indexOf(a) && (b = b.substring(a.length));
      return vd(b);
  } };
  function oc(a) { try {
      if (!a.g)
          return null;
      if ("response" in a.g)
          return a.g.response;
      switch (a.J) {
          case wd:
          case "text": return a.g.responseText;
          case "arraybuffer": if ("mozResponseArrayBuffer" in a.g)
              return a.g.mozResponseArrayBuffer;
      }
      return null;
  }
  catch (b) {
      return null;
  } }
  k.Da = function () { return this.m; };
  k.La = function () { return "string" === typeof this.j ? this.j : String(this.j); };
  function Fd(a) { var b = ""; xa(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
  function Gd(a, b, c) { a: {
      for (d in c) {
          var d = !1;
          break a;
      }
      d = !0;
  } d || (c = Fd(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
  function Hd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
  function Id(a) {
      this.za = 0;
      this.l = [];
      this.h = new Mb;
      this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
      this.Za = this.V = 0;
      this.Xa = Hd("failFast", !1, a);
      this.N = this.v = this.u = this.m = this.j = null;
      this.X = !0;
      this.I = this.ta = this.U = -1;
      this.Y = this.A = this.C = 0;
      this.Pa = Hd("baseRetryDelayMs", 5E3, a);
      this.$a = Hd("retryDelaySeedMs", 1E4, a);
      this.Ya = Hd("forwardChannelMaxRetries", 2, a);
      this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
      this.qa = a && a.xmlHttpFactory || void 0;
      this.Ba = a && a.Yb || !1;
      this.K = void 0;
      this.H = a && a.supportsCrossDomainXhr || !1;
      this.J = "";
      this.i = new gd(a && a.concurrentRequestLimit);
      this.Ca = new ld;
      this.ja = a && a.fastHandshake || !1;
      this.Ra = a && a.Wb || !1;
      a && a.Aa && this.h.Aa();
      a && a.forceLongPolling && (this.X = !1);
      this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
      this.ka = void 0;
      this.O = 0;
      this.L = !1;
      this.B = null;
      this.Wa = !a || !1 !== a.Xb;
  }
  k = Id.prototype;
  k.ma = 8;
  k.G = 1;
  function Ic(a) { Jd(a); if (3 == a.G) {
      var b = a.V++, c = N(a.F);
      R(c, "SID", a.J);
      R(c, "RID", b);
      R(c, "TYPE", "terminate");
      Kd(a, c);
      b = new M(a, a.h, b, void 0);
      b.K = 2;
      b.v = jc(N(c));
      c = !1;
      l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
      !c && l.Image && ((new Image).src = b.v, c = !0);
      c || (b.g = nc(b.l, null), b.g.ea(b.v));
      b.F = Date.now();
      lc(b);
  } Ld(a); }
  k.hb = function (a) { try {
      this.h.info("Origin Trials invoked: " + a);
  }
  catch (b) { } };
  function Ac(a) { a.g && (wc(a), a.g.cancel(), a.g = null); }
  function Jd(a) { Ac(a); a.u && (l.clearTimeout(a.u), a.u = null); zc(a); a.i.cancel(); a.m && ("number" === typeof a.m && l.clearTimeout(a.m), a.m = null); }
  function Md(a, b) { a.l.push(new fd(a.Za++, b)); 3 == a.G && Hc(a); }
  function Hc(a) { id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0); }
  function Nd(a, b) { if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0))
      return !1; if (a.m)
      return a.l = b.D.concat(a.l), !0; if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya))
      return !1; a.m = K(q(a.Ha, a, b), Od(a, a.C)); a.C++; return !0; }
  k.Ha = function (a) {
      if (this.m)
          if (this.m = null, 1 == this.G) {
              if (!a) {
                  this.V = Math.floor(1E5 * Math.random());
                  a = this.V++;
                  var e = new M(this, this.h, a, void 0);
                  var f = this.s;
                  this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
                  null === this.o && (e.H = f);
                  if (this.ja)
                      a: {
                          var b = 0;
                          for (var c = 0; c < this.l.length; c++) {
                              b: {
                                  var d = this.l[c];
                                  if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
                                      d = d.length;
                                      break b;
                                  }
                                  d = void 0;
                              }
                              if (void 0 === d)
                                  break;
                              b += d;
                              if (4096 < b) {
                                  b = c;
                                  break a;
                              }
                              if (4096 === b || c === this.l.length - 1) {
                                  b = c + 1;
                                  break a;
                              }
                          }
                          b = 1E3;
                      }
                  else
                      b = 1E3;
                  b =
                      Pd(this, e, b);
                  c = N(this.F);
                  R(c, "RID", a);
                  R(c, "CVER", 22);
                  this.D && R(c, "X-HTTP-Session-Id", this.D);
                  Kd(this, c);
                  this.o && f && Gd(c, this.o, f);
                  Dc(this.i, e);
                  this.Ra && R(c, "TYPE", "init");
                  this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = !0, ic(e, c, null)) : ic(e, c, b);
                  this.G = 2;
              }
          }
          else
              3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
  };
  function Qd(a, b) { var c; b ? c = b.m : c = a.V++; var d = N(a.F); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.U); Kd(a, d); a.o && a.s && Gd(d, a.o, a.s); c = new M(a, a.h, c, a.C + 1); null === a.o && (c.H = a.s); b && (a.l = b.D.concat(a.l)); b = Pd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random())); Dc(a.i, c); ic(c, d, b); }
  function Kd(a, b) { a.j && Kc({}, function (c, d) { R(b, d, c); }); }
  function Pd(a, b, c) { c = Math.min(a.l.length, c); var d = a.j ? q(a.j.Oa, a.j, a) : null; a: {
      var e = a.l;
      var f = -1;
      for (;;) {
          var h = ["count=" + c];
          -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
          var n = !0;
          for (var u = 0; u < c; u++) {
              var m = e[u].h;
              var r = e[u].g;
              m -= f;
              if (0 > m)
                  f = Math.max(0, e[u].h - 100), n = !1;
              else
                  try {
                      md(r, h, "req" + m + "_");
                  }
                  catch (G) {
                      d && d(r);
                  }
          }
          if (n) {
              d = h.join("&");
              break a;
          }
      }
  } a = a.l.splice(0, c); b.D = a; return d; }
  function Gc(a) { a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0); }
  function Bc(a) { if (a.g || a.u || 3 <= a.A)
      return !1; a.Y++; a.u = K(q(a.Ga, a), Od(a, a.A)); a.A++; return !0; }
  k.Ga = function () { this.u = null; Rd(this); if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
      var a = 2 * this.O;
      this.h.info("BP detection timer enabled: " + a);
      this.B = K(q(this.bb, this), a);
  } };
  k.bb = function () { this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J(10), Ac(this), Rd(this)); };
  function wc(a) { null != a.B && (l.clearTimeout(a.B), a.B = null); }
  function Rd(a) { a.g = new M(a, a.h, "rpc", a.Y); null === a.o && (a.g.H = a.s); a.g.O = 0; var b = N(a.oa); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.N ? "0" : "1"); R(b, "AID", a.U); Kd(a, b); R(b, "TYPE", "xmlhttp"); a.o && a.s && Gd(b, a.o, a.s); a.K && a.g.setTimeout(a.K); var c = a.g; a = a.la; c.K = 1; c.v = jc(N(b)); c.s = null; c.U = !0; kc(c, a); }
  k.ab = function () { null != this.v && (this.v = null, Ac(this), Bc(this), J(19)); };
  function zc(a) { null != a.v && (l.clearTimeout(a.v), a.v = null); }
  function uc(a, b) { var c = null; if (a.g == b) {
      zc(a);
      wc(a);
      a.g = null;
      var d = 2;
  }
  else if (yc(a.i, b))
      c = b.D, Fc(a.i, b), d = 1;
  else
      return; a.I = b.N; if (0 != a.G)
      if (b.i)
          if (1 == d) {
              c = b.s ? b.s.length : 0;
              b = Date.now() - b.F;
              var e = a.C;
              d = Sb();
              D(d, new Vb(d, c, b, e));
              Hc(a);
          }
          else
              Gc(a);
      else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a)))
          switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
              case 1:
                  Q(a, 5);
                  break;
              case 4:
                  Q(a, 10);
                  break;
              case 3:
                  Q(a, 6);
                  break;
              default: Q(a, 2);
          } }
  function Od(a, b) { var c = a.Pa + Math.floor(Math.random() * a.$a); a.j || (c *= 2); return c * b; }
  function Q(a, b) { a.h.info("Error code " + b); if (2 == b) {
      var c = null;
      a.j && (c = null);
      var d = q(a.jb, a);
      c || (c = new U("//www.google.com/images/cleardot.gif"), l.location && "http" == l.location.protocol || Oc(c, "https"), jc(c));
      nd(c.toString(), d);
  }
  else
      J(2); a.G = 0; a.j && a.j.va(b); Ld(a); Jd(a); }
  k.jb = function (a) { a ? (this.h.info("Successfully pinged google.com"), J(2)) : (this.h.info("Failed to ping google.com"), J(1)); };
  function Ld(a) { a.G = 0; a.I = -1; if (a.j) {
      if (0 != jd(a.i).length || 0 != a.l.length)
          a.i.i.length = 0, ra(a.l), a.l.length = 0;
      a.j.ua();
  } }
  function Ec(a, b, c) { var d = ad(c); if ("" != d.i)
      b && Pc(d, b + "." + d.i), Qc(d, d.m);
  else {
      var e = l.location;
      d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
  } a.aa && xa(a.aa, function (e, f) { R(d, f, e); }); b = a.D; c = a.sa; b && c && R(d, b, c); R(d, "VER", a.ma); Kd(a, d); return d; }
  function nc(a, b, c) { if (b && !a.H)
      throw Error("Can't create secondary domain capable XhrIo object."); b = c && a.Ba && !a.qa ? new X(new pd({ ib: !0 })) : new X(a.qa); b.L = a.H; return b; }
  function Sd() { }
  k = Sd.prototype;
  k.xa = function () { };
  k.wa = function () { };
  k.va = function () { };
  k.ua = function () { };
  k.Oa = function () { };
  function Td() { if (y && !(10 <= Number(Ua)))
      throw Error("Environmental error: no available transport."); }
  Td.prototype.g = function (a, b) { return new Y(a, b); };
  function Y(a, b) {
      C.call(this);
      this.g = new Id(b);
      this.l = a;
      this.h = b && b.messageUrlParams || null;
      a = b && b.messageHeaders || null;
      b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
      this.g.s = a;
      a = b && b.initMessageHeaders || null;
      b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
      b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = { "X-WebChannel-Client-Profile": b.ya });
      this.g.P =
          a;
      (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
      this.A = b && b.supportsCrossDomainXhr || !1;
      this.v = b && b.sendRawJson || !1;
      (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
      this.j = new Z(this);
  }
  t(Y, C);
  Y.prototype.m = function () { this.g.j = this.j; this.A && (this.g.H = !0); var a = this.g, b = this.l, c = this.h || void 0; a.Wa && (a.h.info("Origin Trials enabled."), zb(q(a.hb, a, b))); J(0); a.W = b; a.aa = c || {}; a.N = a.X; a.F = Ec(a, null, a.W); Hc(a); };
  Y.prototype.close = function () { Ic(this.g); };
  Y.prototype.u = function (a) { if ("string" === typeof a) {
      var b = {};
      b.__data__ = a;
      Md(this.g, b);
  }
  else
      this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a); };
  Y.prototype.M = function () { this.g.j = null; delete this.j; Ic(this.g); delete this.g; Y.Z.M.call(this); };
  function Ud(a) { ac.call(this); var b = a.__sm__; if (b) {
      a: {
          for (var c in b) {
              a = c;
              break a;
          }
          a = void 0;
      }
      if (this.i = a)
          a = this.i, b = null !== b && a in b ? b[a] : void 0;
      this.data = b;
  }
  else
      this.data = a; }
  t(Ud, ac);
  function Vd() { bc.call(this); this.status = 1; }
  t(Vd, bc);
  function Z(a) { this.g = a; }
  t(Z, Sd);
  Z.prototype.xa = function () { D(this.g, "a"); };
  Z.prototype.wa = function (a) { D(this.g, new Ud(a)); };
  Z.prototype.va = function (a) { D(this.g, new Vd(a)); };
  Z.prototype.ua = function () { D(this.g, "b"); }; /*

   Copyright 2017 Google LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  */
  Td.prototype.createWebChannel = Td.prototype.g;
  Y.prototype.send = Y.prototype.u;
  Y.prototype.open = Y.prototype.m;
  Y.prototype.close = Y.prototype.close;
  Wb.NO_ERROR = 0;
  Wb.TIMEOUT = 8;
  Wb.HTTP_ERROR = 6;
  Xb.COMPLETE = "complete";
  $b.EventType = L;
  L.OPEN = "a";
  L.CLOSE = "b";
  L.ERROR = "c";
  L.MESSAGE = "d";
  C.prototype.listen = C.prototype.N;
  X.prototype.listenOnce = X.prototype.O;
  X.prototype.getLastError = X.prototype.La;
  X.prototype.getLastErrorCode = X.prototype.Da;
  X.prototype.getStatus = X.prototype.ba;
  X.prototype.getResponseJson = X.prototype.Qa;
  X.prototype.getResponseText = X.prototype.ga;
  X.prototype.send = X.prototype.ea;
  var createWebChannelTransport = function () { return new Td; };
  var getStatEventTarget = function () { return Sb(); };
  var ErrorCode = Wb;
  var EventType = Xb;
  var Event = H;
  var Stat = { rb: 0, ub: 1, vb: 2, Ob: 3, Tb: 4, Qb: 5, Rb: 6, Pb: 7, Nb: 8, Sb: 9, PROXY: 10, NOPROXY: 11, Lb: 12, Hb: 13, Ib: 14, Gb: 15, Jb: 16, Kb: 17, nb: 18, mb: 19, ob: 20 };
  var FetchXmlHttpFactory = pd;
  var WebChannel = $b;
  var XhrIo = X;

  /**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
   * exceed. All subsequent calls to next will return increasing values. If provided with a
   * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
   * well as write out sequence numbers that it produces via `next()`.
   */ var S$1 = /** @class */ function() {
      function t(t, e) {
          var n = this;
          this.previousValue = t, e && (e.sequenceNumberHandler = function(t) {
              return n.t(t);
          }, this.i = function(t) {
              return e.writeSequenceNumber(t);
          });
      }
      return t.prototype.t = function(t) {
          return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
      }, t.prototype.next = function() {
          var t = ++this.previousValue;
          return this.i && this.i(t), t;
      }, t;
  }();

  S$1.o = -1;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var N$1 = {
      // Causes are copied from:
      // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
      /** Not an error; returned on success. */
      OK: "ok",
      /** The operation was cancelled (typically by the caller). */
      CANCELLED: "cancelled",
      /** Unknown error or an error from a different error domain. */
      UNKNOWN: "unknown",
      /**
       * Client specified an invalid argument. Note that this differs from
       * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
       * problematic regardless of the state of the system (e.g., a malformed file
       * name).
       */
      INVALID_ARGUMENT: "invalid-argument",
      /**
       * Deadline expired before operation could complete. For operations that
       * change the state of the system, this error may be returned even if the
       * operation has completed successfully. For example, a successful response
       * from a server could have been delayed long enough for the deadline to
       * expire.
       */
      DEADLINE_EXCEEDED: "deadline-exceeded",
      /** Some requested entity (e.g., file or directory) was not found. */
      NOT_FOUND: "not-found",
      /**
       * Some entity that we attempted to create (e.g., file or directory) already
       * exists.
       */
      ALREADY_EXISTS: "already-exists",
      /**
       * The caller does not have permission to execute the specified operation.
       * PERMISSION_DENIED must not be used for rejections caused by exhausting
       * some resource (use RESOURCE_EXHAUSTED instead for those errors).
       * PERMISSION_DENIED must not be used if the caller can not be identified
       * (use UNAUTHENTICATED instead for those errors).
       */
      PERMISSION_DENIED: "permission-denied",
      /**
       * The request does not have valid authentication credentials for the
       * operation.
       */
      UNAUTHENTICATED: "unauthenticated",
      /**
       * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
       * entire file system is out of space.
       */
      RESOURCE_EXHAUSTED: "resource-exhausted",
      /**
       * Operation was rejected because the system is not in a state required for
       * the operation's execution. For example, directory to be deleted may be
       * non-empty, an rmdir operation is applied to a non-directory, etc.
       *
       * A litmus test that may help a service implementor in deciding
       * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
       *  (a) Use UNAVAILABLE if the client can retry just the failing call.
       *  (b) Use ABORTED if the client should retry at a higher-level
       *      (e.g., restarting a read-modify-write sequence).
       *  (c) Use FAILED_PRECONDITION if the client should not retry until
       *      the system state has been explicitly fixed. E.g., if an "rmdir"
       *      fails because the directory is non-empty, FAILED_PRECONDITION
       *      should be returned since the client should not retry unless
       *      they have first fixed up the directory by deleting files from it.
       *  (d) Use FAILED_PRECONDITION if the client performs conditional
       *      REST Get/Update/Delete on a resource and the resource on the
       *      server does not match the condition. E.g., conflicting
       *      read-modify-write on the same resource.
       */
      FAILED_PRECONDITION: "failed-precondition",
      /**
       * The operation was aborted, typically due to a concurrency issue like
       * sequencer check failures, transaction aborts, etc.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      ABORTED: "aborted",
      /**
       * Operation was attempted past the valid range. E.g., seeking or reading
       * past end of file.
       *
       * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
       * if the system state changes. For example, a 32-bit file system will
       * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
       * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
       * an offset past the current file size.
       *
       * There is a fair bit of overlap between FAILED_PRECONDITION and
       * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
       * when it applies so that callers who are iterating through a space can
       * easily look for an OUT_OF_RANGE error to detect when they are done.
       */
      OUT_OF_RANGE: "out-of-range",
      /** Operation is not implemented or not supported/enabled in this service. */
      UNIMPLEMENTED: "unimplemented",
      /**
       * Internal errors. Means some invariants expected by underlying System has
       * been broken. If you see one of these errors, Something is very broken.
       */
      INTERNAL: "internal",
      /**
       * The service is currently unavailable. This is a most likely a transient
       * condition and may be corrected by retrying with a backoff.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      UNAVAILABLE: "unavailable",
      /** Unrecoverable data loss or corruption. */
      DATA_LOSS: "data-loss"
  }, D$1 = /** @class */ function(e) {
      /** @hideconstructor */
      function n(
      /**
       * The backend error code associated with this error.
       */
      t, 
      /**
       * A custom error description.
       */
      n) {
          var r = this;
          return (r = e.call(this, n) || this).code = t, r.message = n, 
          /** The custom name for all FirestoreErrors. */
          r.name = "FirebaseError", 
          // HACK: We write a toString property directly because Error is not a real
          // class and so inheritance does not work correctly. We could alternatively
          // do the same "back-door inheritance" trick that FirebaseError does.
          r.toString = function() {
              return r.name + ": [code=" + r.code + "]: " + r.message;
          }, r;
      }
      return __extends$6(n, e), n;
  }(Error), A$1 = new Logger("@firebase/firestore");

  /** An error returned by a Firestore operation. */
  // Helper methods are needed because variables can't be exported as read/write
  function k$1() {
      return A$1.logLevel;
  }

  /**
   * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
   *
   * @param logLevel - The verbosity you set for activity and error logging. Can
   *   be any of the following values:
   *
   *   <ul>
   *     <li>`debug` for the most verbose logging level, primarily for
   *     debugging.</li>
   *     <li>`error` to log errors only.</li>
   *     <li><code>`silent` to turn off logging.</li>
   *   </ul>
   */ function C$1(t) {
      for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
      if (A$1.logLevel <= LogLevel.DEBUG) {
          var i = n.map(L$1);
          A$1.debug.apply(A$1, __spreadArray$5([ "Firestore (8.10.0): " + t ], i));
      }
  }

  function x$1(t) {
      for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
      if (A$1.logLevel <= LogLevel.ERROR) {
          var i = n.map(L$1);
          A$1.error.apply(A$1, __spreadArray$5([ "Firestore (8.10.0): " + t ], i));
      }
  }

  function R$1(t) {
      for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
      if (A$1.logLevel <= LogLevel.WARN) {
          var i = n.map(L$1);
          A$1.warn.apply(A$1, __spreadArray$5([ "Firestore (8.10.0): " + t ], i));
      }
  }

  /**
   * Converts an additional log parameter to a string representation.
   */ function L$1(t) {
      if ("string" == typeof t) return t;
      try {
          return e = t, JSON.stringify(e);
      } catch (e) {
          // Converting to JSON failed, just log the object directly
          return t;
      }
      var e;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Unconditionally fails, throwing an Error with the given message.
   * Messages are stripped in production builds.
   *
   * Returns `never` and can be used in expressions:
   * @example
   * let futureVar = fail('not implemented yet');
   */ function O$1(t) {
      void 0 === t && (t = "Unexpected state");
      // Log the failure in addition to throw an exception, just in case the
      // exception is swallowed.
          var e = "FIRESTORE (8.10.0) INTERNAL ASSERTION FAILED: " + t;
      // NOTE: We don't use FirestoreError here because these are internal failures
      // that cannot be handled by the user. (Also it would create a circular
      // dependency between the error and assert modules which doesn't work.)
          throw x$1(e), new Error(e)
      /**
   * Fails if the given assertion condition is false, throwing an Error with the
   * given message if it did.
   *
   * Messages are stripped in production builds.
   */;
  }

  function P$1(t, e) {
      t || O$1();
  }

  /**
   * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
   * instance of `T` before casting.
   */ function F$1(t, 
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  e) {
      return t;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Generates `nBytes` of random bytes.
   *
   * If `nBytes < 0` , an error will be thrown.
   */ function M$1(t) {
      // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
      var e = 
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
      if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
      // Falls back to Math.random
      for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
      return n;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var V$1 = /** @class */ function() {
      function t() {}
      return t.u = function() {
          for (
          // Alphanumeric characters
          var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""
          // The largest byte value that is a multiple of `char.length`.
          ; n.length < 20; ) for (var r = M$1(40), i = 0; i < r.length; ++i) 
          // Only accept values that are [0, maxMultiple), this ensures they can
          // be evenly mapped to indices of `chars` via a modulo operation.
          n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
          return n;
      }, t;
  }();

  function q$1(t, e) {
      return t < e ? -1 : t > e ? 1 : 0;
  }

  /** Helper to compare arrays using isEqual(). */ function U$1(t, e, n) {
      return t.length === e.length && t.every((function(t, r) {
          return n(t, e[r]);
      }));
  }

  /**
   * Returns the immediate lexicographically-following string. This is useful to
   * construct an inclusive range for indexeddb iterators.
   */ function B$1(t) {
      // Return the input string, with an additional NUL byte appended.
      return t + "\0";
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
  /**
   * A `Timestamp` represents a point in time independent of any time zone or
   * calendar, represented as seconds and fractions of seconds at nanosecond
   * resolution in UTC Epoch time.
   *
   * It is encoded using the Proleptic Gregorian Calendar which extends the
   * Gregorian calendar backwards to year one. It is encoded assuming all minutes
   * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
   * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
   * 9999-12-31T23:59:59.999999999Z.
   *
   * For examples and further specifications, refer to the
   * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
   */ var j = /** @class */ function() {
      /**
       * Creates a new timestamp.
       *
       * @param seconds - The number of seconds of UTC time since Unix epoch
       *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
       *     9999-12-31T23:59:59Z inclusive.
       * @param nanoseconds - The non-negative fractions of a second at nanosecond
       *     resolution. Negative second values with fractions must still have
       *     non-negative nanoseconds values that count forward in time. Must be
       *     from 0 to 999,999,999 inclusive.
       */
      function t(
      /**
       * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
       */
      t, 
      /**
       * The fractions of a second at nanosecond resolution.*
       */
      e) {
          if (this.seconds = t, this.nanoseconds = e, e < 0) throw new D$1(N$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
          if (e >= 1e9) throw new D$1(N$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
          if (t < -62135596800) throw new D$1(N$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
          // This will break in the year 10,000.
                  if (t >= 253402300800) throw new D$1(N$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
      }
      /**
       * Creates a new timestamp with the current date, with millisecond precision.
       *
       * @returns a new timestamp representing the current date.
       */    return t.now = function() {
          return t.fromMillis(Date.now());
      }, 
      /**
       * Creates a new timestamp from the given date.
       *
       * @param date - The date to initialize the `Timestamp` from.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     date.
       */
      t.fromDate = function(e) {
          return t.fromMillis(e.getTime());
      }, 
      /**
       * Creates a new timestamp from the given number of milliseconds.
       *
       * @param milliseconds - Number of milliseconds since Unix epoch
       *     1970-01-01T00:00:00Z.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     number of milliseconds.
       */
      t.fromMillis = function(e) {
          var n = Math.floor(e / 1e3);
          return new t(n, Math.floor(1e6 * (e - 1e3 * n)));
      }, 
      /**
       * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
       * causes a loss of precision since `Date` objects only support millisecond
       * precision.
       *
       * @returns JavaScript `Date` object representing the same point in time as
       *     this `Timestamp`, with millisecond precision.
       */
      t.prototype.toDate = function() {
          return new Date(this.toMillis());
      }, 
      /**
       * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
       * epoch). This operation causes a loss of precision.
       *
       * @returns The point in time corresponding to this timestamp, represented as
       *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
       */
      t.prototype.toMillis = function() {
          return 1e3 * this.seconds + this.nanoseconds / 1e6;
      }, t.prototype._compareTo = function(t) {
          return this.seconds === t.seconds ? q$1(this.nanoseconds, t.nanoseconds) : q$1(this.seconds, t.seconds);
      }, 
      /**
       * Returns true if this `Timestamp` is equal to the provided one.
       *
       * @param other - The `Timestamp` to compare against.
       * @returns true if this `Timestamp` is equal to the provided one.
       */
      t.prototype.isEqual = function(t) {
          return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
      }, 
      /** Returns a textual representation of this Timestamp. */ t.prototype.toString = function() {
          return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      }, 
      /** Returns a JSON-serializable representation of this Timestamp. */ t.prototype.toJSON = function() {
          return {
              seconds: this.seconds,
              nanoseconds: this.nanoseconds
          };
      }, 
      /**
       * Converts this object to a primitive string, which allows Timestamp objects
       * to be compared using the `>`, `<=`, `>=` and `>` operators.
       */
      t.prototype.valueOf = function() {
          // This method returns a string of the form <seconds>.<nanoseconds> where
          // <seconds> is translated to have a non-negative value and both <seconds>
          // and <nanoseconds> are left-padded with zeroes to be a consistent length.
          // Strings with this format then have a lexiographical ordering that matches
          // the expected ordering. The <seconds> translation is done to avoid having
          // a leading negative sign (i.e. a leading '-' character) in its string
          // representation, which would affect its lexiographical ordering.
          var t = this.seconds - -62135596800;
          // Note: Up to 12 decimal digits are required to represent all valid
          // 'seconds' values.
                  return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
      }, t;
  }(), K$1 = /** @class */ function() {
      function t(t) {
          this.timestamp = t;
      }
      return t.fromTimestamp = function(e) {
          return new t(e);
      }, t.min = function() {
          return new t(new j(0, 0));
      }, t.prototype.compareTo = function(t) {
          return this.timestamp._compareTo(t.timestamp);
      }, t.prototype.isEqual = function(t) {
          return this.timestamp.isEqual(t.timestamp);
      }, 
      /** Returns a number representation of the version for use in spec tests. */ t.prototype.toMicroseconds = function() {
          // Convert to microseconds.
          return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
      }, t.prototype.toString = function() {
          return "SnapshotVersion(" + this.timestamp.toString() + ")";
      }, t.prototype.toTimestamp = function() {
          return this.timestamp;
      }, t;
  }();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A version of a document in Firestore. This corresponds to the version
   * timestamp, such as update_time or read_time.
   */
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function Q$1(t) {
      var e = 0;
      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
      return e;
  }

  function G(t, e) {
      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
  }

  function z$1(t) {
      for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
      return !0;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Path represents an ordered sequence of string segments.
   */ var W$1 = /** @class */ function() {
      function t(t, e, n) {
          void 0 === e ? e = 0 : e > t.length && O$1(), void 0 === n ? n = t.length - e : n > t.length - e && O$1(), 
          this.segments = t, this.offset = e, this.len = n;
      }
      return Object.defineProperty(t.prototype, "length", {
          get: function() {
              return this.len;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.isEqual = function(e) {
          return 0 === t.comparator(this, e);
      }, t.prototype.child = function(e) {
          var n = this.segments.slice(this.offset, this.limit());
          return e instanceof t ? e.forEach((function(t) {
              n.push(t);
          })) : n.push(e), this.construct(n);
      }, 
      /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
          return this.offset + this.length;
      }, t.prototype.popFirst = function(t) {
          return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
      }, t.prototype.popLast = function() {
          return this.construct(this.segments, this.offset, this.length - 1);
      }, t.prototype.firstSegment = function() {
          return this.segments[this.offset];
      }, t.prototype.lastSegment = function() {
          return this.get(this.length - 1);
      }, t.prototype.get = function(t) {
          return this.segments[this.offset + t];
      }, t.prototype.isEmpty = function() {
          return 0 === this.length;
      }, t.prototype.isPrefixOf = function(t) {
          if (t.length < this.length) return !1;
          for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
          return !0;
      }, t.prototype.isImmediateParentOf = function(t) {
          if (this.length + 1 !== t.length) return !1;
          for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
          return !0;
      }, t.prototype.forEach = function(t) {
          for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
      }, t.prototype.toArray = function() {
          return this.segments.slice(this.offset, this.limit());
      }, t.comparator = function(t, e) {
          for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
              var i = t.get(r), o = e.get(r);
              if (i < o) return -1;
              if (i > o) return 1;
          }
          return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
      }, t;
  }(), H$1 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n.prototype.construct = function(t, e, r) {
          return new n(t, e, r);
      }, n.prototype.canonicalString = function() {
          // NOTE: The client is ignorant of any path segments containing escape
          // sequences (e.g. __id123__) and just passes them through raw (they exist
          // for legacy reasons and should not be used frequently).
          return this.toArray().join("/");
      }, n.prototype.toString = function() {
          return this.canonicalString();
      }, 
      /**
       * Creates a resource path from the given slash-delimited string. If multiple
       * arguments are provided, all components are combined. Leading and trailing
       * slashes from all components are ignored.
       */
      n.fromString = function() {
          for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
          // NOTE: The client is ignorant of any path segments containing escape
          // sequences (e.g. __id123__) and just passes them through raw (they exist
          // for legacy reasons and should not be used frequently).
                  for (var r = [], i = 0, o = t; i < o.length; i++) {
              var s = o[i];
              if (s.indexOf("//") >= 0) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid segment (" + s + "). Paths must not contain // in them.");
              // Strip leading and traling slashed.
                          r.push.apply(r, s.split("/").filter((function(t) {
                  return t.length > 0;
              })));
          }
          return new n(r);
      }, n.emptyPath = function() {
          return new n([]);
      }, n;
  }(W$1), Y$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/, $ = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n.prototype.construct = function(t, e, r) {
          return new n(t, e, r);
      }, 
      /**
       * Returns true if the string could be used as a segment in a field path
       * without escaping.
       */
      n.isValidIdentifier = function(t) {
          return Y$1.test(t);
      }, n.prototype.canonicalString = function() {
          return this.toArray().map((function(t) {
              return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), n.isValidIdentifier(t) || (t = "`" + t + "`"), 
              t;
          })).join(".");
      }, n.prototype.toString = function() {
          return this.canonicalString();
      }, 
      /**
       * Returns true if this field references the key of a document.
       */
      n.prototype.isKeyField = function() {
          return 1 === this.length && "__name__" === this.get(0);
      }, 
      /**
       * The field designating the key of a document.
       */
      n.keyField = function() {
          return new n([ "__name__" ]);
      }, 
      /**
       * Parses a field string from the given server-formatted string.
       *
       * - Splitting the empty string is not allowed (for now at least).
       * - Empty segments within the string (e.g. if there are two consecutive
       *   separators) are not allowed.
       *
       * TODO(b/37244157): we should make this more strict. Right now, it allows
       * non-identifier path components, even if they aren't escaped.
       */
      n.fromServerFormat = function(t) {
          for (var e = [], r = "", i = 0, o = function() {
              if (0 === r.length) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
              e.push(r), r = "";
          }, s = !1; i < t.length; ) {
              var u = t[i];
              if ("\\" === u) {
                  if (i + 1 === t.length) throw new D$1(N$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                  var a = t[i + 1];
                  if ("\\" !== a && "." !== a && "`" !== a) throw new D$1(N$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                  r += a, i += 2;
              } else "`" === u ? (s = !s, i++) : "." !== u || s ? (r += u, i++) : (o(), i++);
          }
          if (o(), s) throw new D$1(N$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
          return new n(e);
      }, n.emptyPath = function() {
          return new n([]);
      }, n;
  }(W$1), X$1 = /** @class */ function() {
      function t(t) {
          this.fields = t, 
          // TODO(dimond): validation of FieldMask
          // Sort the field mask to support `FieldMask.isEqual()` and assert below.
          t.sort($.comparator)
          /**
       * Verifies that `fieldPath` is included by at least one field in this field
       * mask.
       *
       * This is an O(n) operation, where `n` is the size of the field mask.
       */;
      }
      return t.prototype.covers = function(t) {
          for (var e = 0, n = this.fields; e < n.length; e++) {
              if (n[e].isPrefixOf(t)) return !0;
          }
          return !1;
      }, t.prototype.isEqual = function(t) {
          return U$1(this.fields, t.fields, (function(t, e) {
              return t.isEqual(e);
          }));
      }, t;
  }(), J$1 = /** @class */ function() {
      function t(t) {
          this.binaryString = t;
      }
      return t.fromBase64String = function(e) {
          return new t(atob(e));
      }, t.fromUint8Array = function(e) {
          return new t(
          /**
   * Helper function to convert an Uint8array to a binary string.
   */
          function(t) {
              for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
              return e;
          }(e));
      }, t.prototype.toBase64 = function() {
          return t = this.binaryString, btoa(t);
          /** Converts a binary string to a Base64 encoded string. */        var t;
          /** True if and only if the Base64 conversion functions are available. */    }, 
      t.prototype.toUint8Array = function() {
          return function(t) {
              for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
              return e;
          }(this.binaryString);
      }, t.prototype.approximateByteSize = function() {
          return 2 * this.binaryString.length;
      }, t.prototype.compareTo = function(t) {
          return q$1(this.binaryString, t.binaryString);
      }, t.prototype.isEqual = function(t) {
          return this.binaryString === t.binaryString;
      }, t;
  }();

  /**
   * A slash-separated path for navigating resources (documents and collections)
   * within Firestore.
   */ J$1.EMPTY_BYTE_STRING = new J$1("");

  var Z$1 = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

  /**
   * Converts the possible Proto values for a timestamp value into a "seconds and
   * nanos" representation.
   */ function tt(t) {
      // The json interface (for the browser) will return an iso timestamp string,
      // while the proto js library (for node) will return a
      // google.protobuf.Timestamp instance.
      if (P$1(!!t), "string" == typeof t) {
          // The date string can have higher precision (nanos) than the Date class
          // (millis), so we do some custom parsing here.
          // Parse the nanos right out of the string.
          var e = 0, n = Z$1.exec(t);
          if (P$1(!!n), n[1]) {
              // Pad the fraction out to 9 digits (nanos).
              var r = n[1];
              r = (r + "000000000").substr(0, 9), e = Number(r);
          }
          // Parse the date to get the seconds.
                  var i = new Date(t);
          return {
              seconds: Math.floor(i.getTime() / 1e3),
              nanos: e
          };
      }
      return {
          seconds: et(t.seconds),
          nanos: et(t.nanos)
      };
  }

  /**
   * Converts the possible Proto types for numbers into a JavaScript number.
   * Returns 0 if the value is not numeric.
   */ function et(t) {
      // TODO(bjornick): Handle int64 greater than 53 bits.
      return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
  }

  /** Converts the possible Proto types for Blobs into a ByteString. */ function nt(t) {
      return "string" == typeof t ? J$1.fromBase64String(t) : J$1.fromUint8Array(t);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Represents a locally-applied ServerTimestamp.
   *
   * Server Timestamps are backed by MapValues that contain an internal field
   * `__type__` with a value of `server_timestamp`. The previous value and local
   * write time are stored in its `__previous_value__` and `__local_write_time__`
   * fields respectively.
   *
   * Notes:
   * - ServerTimestampValue instances are created as the result of applying a
   *   transform. They can only exist in the local view of a document. Therefore
   *   they do not need to be parsed or serialized.
   * - When evaluated locally (e.g. for snapshot.data()), they by default
   *   evaluate to `null`. This behavior can be configured by passing custom
   *   FieldValueOptions to value().
   * - With respect to other ServerTimestampValues, they sort by their
   *   localWriteTime.
   */ function rt(t) {
      var e, n;
      return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
  }

  /**
   * Creates a new ServerTimestamp proto value (using the internal format).
   */
  /**
   * Returns the value of the field before this ServerTimestamp was set.
   *
   * Preserving the previous values allows the user to display the last resoled
   * value until the backend responds with the timestamp.
   */ function it(t) {
      var e = t.mapValue.fields.__previous_value__;
      return rt(e) ? it(e) : e;
  }

  /**
   * Returns the local time at which this timestamp was first set.
   */ function ot(t) {
      var e = tt(t.mapValue.fields.__local_write_time__.timestampValue);
      return new j(e.seconds, e.nanos);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Sentinel value that sorts before any Mutation Batch ID. */
  /**
   * Returns whether a variable is either undefined or null.
   */ function st(t) {
      return null == t;
  }

  /** Returns whether the value represents -0. */ function ut(t) {
      // Detect if the value is -0.0. Based on polyfill from
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
      return 0 === t && 1 / t == -1 / 0;
  }

  /**
   * Returns whether a value is an integer and in the safe integer range
   * @param value - The value to test for being an integer and in the safe range
   */ function at(t) {
      return "number" == typeof t && Number.isInteger(t) && !ut(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var ct = /** @class */ function() {
      function t(t) {
          this.path = t;
      }
      return t.fromPath = function(e) {
          return new t(H$1.fromString(e));
      }, t.fromName = function(e) {
          return new t(H$1.fromString(e).popFirst(5));
      }, 
      /** Returns true if the document is in the specified collectionId. */ t.prototype.hasCollectionId = function(t) {
          return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
      }, t.prototype.isEqual = function(t) {
          return null !== t && 0 === H$1.comparator(this.path, t.path);
      }, t.prototype.toString = function() {
          return this.path.toString();
      }, t.comparator = function(t, e) {
          return H$1.comparator(t.path, e.path);
      }, t.isDocumentKey = function(t) {
          return t.length % 2 == 0;
      }, 
      /**
       * Creates and returns a new document key with the given segments.
       *
       * @param segments - The segments of the path to the document
       * @returns A new instance of DocumentKey
       */
      t.fromSegments = function(e) {
          return new t(new H$1(e.slice()));
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Extracts the backend's type order for the provided value. */ function ht(t) {
      return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? rt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : O$1();
  }

  /** Tests `left` and `right` for equality based on the backend semantics. */ function ft(t, e) {
      var n = ht(t);
      if (n !== ht(e)) return !1;
      switch (n) {
        case 0 /* NullValue */ :
          return !0;

        case 1 /* BooleanValue */ :
          return t.booleanValue === e.booleanValue;

        case 4 /* ServerTimestampValue */ :
          return ot(t).isEqual(ot(e));

        case 3 /* TimestampValue */ :
          return function(t, e) {
              if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
              // Use string equality for ISO 8601 timestamps
              return t.timestampValue === e.timestampValue;
              var n = tt(t.timestampValue), r = tt(e.timestampValue);
              return n.seconds === r.seconds && n.nanos === r.nanos;
          }(t, e);

        case 5 /* StringValue */ :
          return t.stringValue === e.stringValue;

        case 6 /* BlobValue */ :
          return function(t, e) {
              return nt(t.bytesValue).isEqual(nt(e.bytesValue));
          }(t, e);

        case 7 /* RefValue */ :
          return t.referenceValue === e.referenceValue;

        case 8 /* GeoPointValue */ :
          return function(t, e) {
              return et(t.geoPointValue.latitude) === et(e.geoPointValue.latitude) && et(t.geoPointValue.longitude) === et(e.geoPointValue.longitude);
          }(t, e);

        case 2 /* NumberValue */ :
          return function(t, e) {
              if ("integerValue" in t && "integerValue" in e) return et(t.integerValue) === et(e.integerValue);
              if ("doubleValue" in t && "doubleValue" in e) {
                  var n = et(t.doubleValue), r = et(e.doubleValue);
                  return n === r ? ut(n) === ut(r) : isNaN(n) && isNaN(r);
              }
              return !1;
          }(t, e);

        case 9 /* ArrayValue */ :
          return U$1(t.arrayValue.values || [], e.arrayValue.values || [], ft);

        case 10 /* ObjectValue */ :
          return function(t, e) {
              var n = t.mapValue.fields || {}, r = e.mapValue.fields || {};
              if (Q$1(n) !== Q$1(r)) return !1;
              for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !ft(n[i], r[i]))) return !1;
              return !0;
          }(t, e);

        default:
          return O$1();
      }
  }

  function lt(t, e) {
      return void 0 !== (t.values || []).find((function(t) {
          return ft(t, e);
      }));
  }

  function dt(t, e) {
      var n = ht(t), r = ht(e);
      if (n !== r) return q$1(n, r);
      switch (n) {
        case 0 /* NullValue */ :
          return 0;

        case 1 /* BooleanValue */ :
          return q$1(t.booleanValue, e.booleanValue);

        case 2 /* NumberValue */ :
          return function(t, e) {
              var n = et(t.integerValue || t.doubleValue), r = et(e.integerValue || e.doubleValue);
              return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
              // one or both are NaN.
              isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
          }(t, e);

        case 3 /* TimestampValue */ :
          return pt(t.timestampValue, e.timestampValue);

        case 4 /* ServerTimestampValue */ :
          return pt(ot(t), ot(e));

        case 5 /* StringValue */ :
          return q$1(t.stringValue, e.stringValue);

        case 6 /* BlobValue */ :
          return function(t, e) {
              var n = nt(t), r = nt(e);
              return n.compareTo(r);
          }(t.bytesValue, e.bytesValue);

        case 7 /* RefValue */ :
          return function(t, e) {
              for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
                  var o = q$1(n[i], r[i]);
                  if (0 !== o) return o;
              }
              return q$1(n.length, r.length);
          }(t.referenceValue, e.referenceValue);

        case 8 /* GeoPointValue */ :
          return function(t, e) {
              var n = q$1(et(t.latitude), et(e.latitude));
              return 0 !== n ? n : q$1(et(t.longitude), et(e.longitude));
          }(t.geoPointValue, e.geoPointValue);

        case 9 /* ArrayValue */ :
          return function(t, e) {
              for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
                  var o = dt(n[i], r[i]);
                  if (o) return o;
              }
              return q$1(n.length, r.length);
          }(t.arrayValue, e.arrayValue);

        case 10 /* ObjectValue */ :
          return function(t, e) {
              var n = t.fields || {}, r = Object.keys(n), i = e.fields || {}, o = Object.keys(i);
              // Even though MapValues are likely sorted correctly based on their insertion
              // order (e.g. when received from the backend), local modifications can bring
              // elements out of order. We need to re-sort the elements to ensure that
              // canonical IDs are independent of insertion order.
                          r.sort(), o.sort();
              for (var s = 0; s < r.length && s < o.length; ++s) {
                  var u = q$1(r[s], o[s]);
                  if (0 !== u) return u;
                  var a = dt(n[r[s]], i[o[s]]);
                  if (0 !== a) return a;
              }
              return q$1(r.length, o.length);
          }(t.mapValue, e.mapValue);

        default:
          throw O$1();
      }
  }

  function pt(t, e) {
      if ("string" == typeof t && "string" == typeof e && t.length === e.length) return q$1(t, e);
      var n = tt(t), r = tt(e), i = q$1(n.seconds, r.seconds);
      return 0 !== i ? i : q$1(n.nanos, r.nanos);
  }

  function yt(t) {
      return vt(t);
  }

  function vt(t) {
      return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
          var e = tt(t);
          return "time(" + e.seconds + "," + e.nanos + ")";
      }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? nt(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
      ct.fromName(n).toString()) : "geoPointValue" in t ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t ? function(t) {
          for (var e = "[", n = !0, r = 0, i = t.values || []; r < i.length; r++) {
              n ? n = !1 : e += ",", e += vt(i[r]);
          }
          return e + "]";
      }(t.arrayValue) : "mapValue" in t ? function(t) {
          for (
          // Iteration order in JavaScript is not guaranteed. To ensure that we generate
          // matching canonical IDs for identical maps, we need to sort the keys.
          var e = "{", n = !0, r = 0, i = Object.keys(t.fields || {}).sort(); r < i.length; r++) {
              var o = i[r];
              n ? n = !1 : e += ",", e += o + ":" + vt(t.fields[o]);
          }
          return e + "}";
      }(t.mapValue) : O$1();
      var e, n;
  }

  function mt(t, e) {
      return {
          referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.canonicalString()
      };
  }

  /** Returns true if `value` is an IntegerValue . */ function gt(t) {
      return !!t && "integerValue" in t;
  }

  /** Returns true if `value` is a DoubleValue. */
  /** Returns true if `value` is an ArrayValue. */ function wt(t) {
      return !!t && "arrayValue" in t;
  }

  /** Returns true if `value` is a NullValue. */ function bt(t) {
      return !!t && "nullValue" in t;
  }

  /** Returns true if `value` is NaN. */ function It(t) {
      return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
  }

  /** Returns true if `value` is a MapValue. */ function Tt(t) {
      return !!t && "mapValue" in t;
  }

  /** Creates a deep copy of `source`. */ function Et(t) {
      if (t.geoPointValue) return {
          geoPointValue: Object.assign({}, t.geoPointValue)
      };
      if (t.timestampValue && "object" == typeof t.timestampValue) return {
          timestampValue: Object.assign({}, t.timestampValue)
      };
      if (t.mapValue) {
          var e = {
              mapValue: {
                  fields: {}
              }
          };
          return G(t.mapValue.fields, (function(t, n) {
              return e.mapValue.fields[t] = Et(n);
          })), e;
      }
      if (t.arrayValue) {
          for (var n = {
              arrayValue: {
                  values: []
              }
          }, r = 0; r < (t.arrayValue.values || []).length; ++r) n.arrayValue.values[r] = Et(t.arrayValue.values[r]);
          return n;
      }
      return Object.assign({}, t);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An ObjectValue represents a MapValue in the Firestore Proto and offers the
   * ability to add and remove fields (via the ObjectValueBuilder).
   */ var _t = /** @class */ function() {
      function t(t) {
          this.value = t;
      }
      return t.empty = function() {
          return new t({
              mapValue: {}
          });
      }, 
      /**
       * Returns the value at the given path or null.
       *
       * @param path - the path to search
       * @returns The value at the path or null if the path is not set.
       */
      t.prototype.field = function(t) {
          if (t.isEmpty()) return this.value;
          for (var e = this.value, n = 0; n < t.length - 1; ++n) if (!Tt(e = (e.mapValue.fields || {})[t.get(n)])) return null;
          return (e = (e.mapValue.fields || {})[t.lastSegment()]) || null;
      }, 
      /**
       * Sets the field to the provided value.
       *
       * @param path - The field path to set.
       * @param value - The value to set.
       */
      t.prototype.set = function(t, e) {
          this.getFieldsMap(t.popLast())[t.lastSegment()] = Et(e);
      }, 
      /**
       * Sets the provided fields to the provided values.
       *
       * @param data - A map of fields to values (or null for deletes).
       */
      t.prototype.setAll = function(t) {
          var e = this, n = $.emptyPath(), r = {}, i = [];
          t.forEach((function(t, o) {
              if (!n.isImmediateParentOf(o)) {
                  // Insert the accumulated changes at this parent location
                  var s = e.getFieldsMap(n);
                  e.applyChanges(s, r, i), r = {}, i = [], n = o.popLast();
              }
              t ? r[o.lastSegment()] = Et(t) : i.push(o.lastSegment());
          }));
          var o = this.getFieldsMap(n);
          this.applyChanges(o, r, i);
      }, 
      /**
       * Removes the field at the specified path. If there is no field at the
       * specified path, nothing is changed.
       *
       * @param path - The field path to remove.
       */
      t.prototype.delete = function(t) {
          var e = this.field(t.popLast());
          Tt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
      }, t.prototype.isEqual = function(t) {
          return ft(this.value, t.value);
      }, 
      /**
       * Returns the map that contains the leaf element of `path`. If the parent
       * entry does not yet exist, or if it is not a map, a new map will be created.
       */
      t.prototype.getFieldsMap = function(t) {
          var e = this.value;
          e.mapValue.fields || (e.mapValue = {
              fields: {}
          });
          for (var n = 0; n < t.length; ++n) {
              var r = e.mapValue.fields[t.get(n)];
              Tt(r) && r.mapValue.fields || (r = {
                  mapValue: {
                      fields: {}
                  }
              }, e.mapValue.fields[t.get(n)] = r), e = r;
          }
          return e.mapValue.fields;
      }, 
      /**
       * Modifies `fieldsMap` by adding, replacing or deleting the specified
       * entries.
       */
      t.prototype.applyChanges = function(t, e, n) {
          G(e, (function(e, n) {
              return t[e] = n;
          }));
          for (var r = 0, i = n; r < i.length; r++) {
              var o = i[r];
              delete t[o];
          }
      }, t.prototype.clone = function() {
          return new t(Et(this.value));
      }, t;
  }();

  /**
   * Returns a FieldMask built from all fields in a MapValue.
   */ function St(t) {
      var e = [];
      return G(t.fields, (function(t, n) {
          var r = new $([ t ]);
          if (Tt(n)) {
              var i = St(n.mapValue).fields;
              if (0 === i.length) 
              // Preserve the empty map by adding it to the FieldMask.
              e.push(r); else 
              // For nested and non-empty ObjectValues, add the FieldPath of the
              // leaf nodes.
              for (var o = 0, s = i; o < s.length; o++) {
                  var u = s[o];
                  e.push(r.child(u));
              }
          } else 
          // For nested and non-empty ObjectValues, add the FieldPath of the leaf
          // nodes.
          e.push(r);
      })), new X$1(e)
      /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
      /**
   * Represents a document in Firestore with a key, version, data and whether it
   * has local mutations applied to it.
   *
   * Documents can transition between states via `convertToFoundDocument()`,
   * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
   * not transition to one of these states even after all mutations have been
   * applied, `isValidDocument()` returns false and the document should be removed
   * from all views.
   */;
  }

  var Nt = /** @class */ function() {
      function t(t, e, n, r, i) {
          this.key = t, this.documentType = e, this.version = n, this.data = r, this.documentState = i
          /**
       * Creates a document with no known version or data, but which can serve as
       * base document for mutations.
       */;
      }
      return t.newInvalidDocument = function(e) {
          return new t(e, 0 /* INVALID */ , K$1.min(), _t.empty(), 0 /* SYNCED */);
      }, 
      /**
       * Creates a new document that is known to exist with the given data at the
       * given version.
       */
      t.newFoundDocument = function(e, n, r) {
          return new t(e, 1 /* FOUND_DOCUMENT */ , n, r, 0 /* SYNCED */);
      }, 
      /** Creates a new document that is known to not exist at the given version. */ t.newNoDocument = function(e, n) {
          return new t(e, 2 /* NO_DOCUMENT */ , n, _t.empty(), 0 /* SYNCED */);
      }, 
      /**
       * Creates a new document that is known to exist at the given version but
       * whose data is not known (e.g. a document that was updated without a known
       * base document).
       */
      t.newUnknownDocument = function(e, n) {
          return new t(e, 3 /* UNKNOWN_DOCUMENT */ , n, _t.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);
      }, 
      /**
       * Changes the document type to indicate that it exists and that its version
       * and data are known.
       */
      t.prototype.convertToFoundDocument = function(t, e) {
          return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, 
          this.documentState = 0 /* SYNCED */ , this;
      }, 
      /**
       * Changes the document type to indicate that it doesn't exist at the given
       * version.
       */
      t.prototype.convertToNoDocument = function(t) {
          return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = _t.empty(), 
          this.documentState = 0 /* SYNCED */ , this;
      }, 
      /**
       * Changes the document type to indicate that it exists at a given version but
       * that its data is not known (e.g. a document that was updated without a known
       * base document).
       */
      t.prototype.convertToUnknownDocument = function(t) {
          return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = _t.empty(), 
          this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
      }, t.prototype.setHasCommittedMutations = function() {
          return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
      }, t.prototype.setHasLocalMutations = function() {
          return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
      }, Object.defineProperty(t.prototype, "hasLocalMutations", {
          get: function() {
              return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "hasCommittedMutations", {
          get: function() {
              return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "hasPendingWrites", {
          get: function() {
              return this.hasLocalMutations || this.hasCommittedMutations;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.isValidDocument = function() {
          return 0 /* INVALID */ !== this.documentType;
      }, t.prototype.isFoundDocument = function() {
          return 1 /* FOUND_DOCUMENT */ === this.documentType;
      }, t.prototype.isNoDocument = function() {
          return 2 /* NO_DOCUMENT */ === this.documentType;
      }, t.prototype.isUnknownDocument = function() {
          return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;
      }, t.prototype.isEqual = function(e) {
          return e instanceof t && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
      }, t.prototype.clone = function() {
          return new t(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
      }, t.prototype.toString = function() {
          return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.value) + ", {documentType: " + this.documentType + "}), {documentState: " + this.documentState + "})";
      }, t;
  }(), Dt = function(t, e, n, r, i, o, s) {
      void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
      void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
      this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, 
      this.startAt = o, this.endAt = s, this.h = null;
  };

  /**
   * Compares the value for field `field` in the provided documents. Throws if
   * the field does not exist in both documents.
   */
  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Visible for testing
  /**
   * Initializes a Target with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   *
   * NOTE: you should always construct `Target` from `Query.toTarget` instead of
   * using this factory method, because `Query` provides an implicit `orderBy`
   * property.
   */
  function At(t, e, n, r, i, o, s) {
      return void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
      void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
      new Dt(t, e, n, r, i, o, s);
  }

  function kt(t) {
      var e = F$1(t);
      if (null === e.h) {
          var n = e.path.canonicalString();
          null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((function(t) {
              return function(t) {
                  // TODO(b/29183165): Technically, this won't be unique if two values have
                  // the same description, such as the int 3 and the string "3". So we should
                  // add the types in here somehow, too.
                  return t.field.canonicalString() + t.op.toString() + yt(t.value);
              }(t);
          })).join(","), n += "|ob:", n += e.orderBy.map((function(t) {
              return function(t) {
                  // TODO(b/29183165): Make this collision robust.
                  return t.field.canonicalString() + t.dir;
              }(t);
          })).join(","), st(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", 
          n += jt(e.startAt)), e.endAt && (n += "|ub:", n += jt(e.endAt)), e.h = n;
      }
      return e.h;
  }

  function Ct(t, e) {
      if (t.limit !== e.limit) return !1;
      if (t.orderBy.length !== e.orderBy.length) return !1;
      for (var n = 0; n < t.orderBy.length; n++) if (!Qt(t.orderBy[n], e.orderBy[n])) return !1;
      if (t.filters.length !== e.filters.length) return !1;
      for (var r = 0; r < t.filters.length; r++) if (i = t.filters[r], o = e.filters[r], 
      i.op !== o.op || !i.field.isEqual(o.field) || !ft(i.value, o.value)) return !1;
      var i, o;
      return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!zt(t.startAt, e.startAt) && zt(t.endAt, e.endAt);
  }

  function xt(t) {
      return ct.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
  }

  var Rt = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).field = t, i.op = n, i.value = r, i;
      }
      /**
       * Creates a filter based on the provided arguments.
       */    return __extends$6(n, e), n.create = function(t, e, r) {
          return t.isKeyField() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.l(t, e, r) : new Lt(t, e, r) : "array-contains" /* ARRAY_CONTAINS */ === e ? new Mt(t, r) : "in" /* IN */ === e ? new Vt(t, r) : "not-in" /* NOT_IN */ === e ? new qt(t, r) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new Ut(t, r) : new n(t, e, r);
      }, n.l = function(t, e, n) {
          return "in" /* IN */ === e ? new Ot(t, n) : new Pt(t, n);
      }, n.prototype.matches = function(t) {
          var e = t.data.field(this.field);
          // Types do not have to match in NOT_EQUAL filters.
                  return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.m(dt(e, this.value)) : null !== e && ht(this.value) === ht(e) && this.m(dt(e, this.value));
          // Only compare types with matching backend order (such as double and int).
          }, n.prototype.m = function(t) {
          switch (this.op) {
            case "<" /* LESS_THAN */ :
              return t < 0;

            case "<=" /* LESS_THAN_OR_EQUAL */ :
              return t <= 0;

            case "==" /* EQUAL */ :
              return 0 === t;

            case "!=" /* NOT_EQUAL */ :
              return 0 !== t;

            case ">" /* GREATER_THAN */ :
              return t > 0;

            case ">=" /* GREATER_THAN_OR_EQUAL */ :
              return t >= 0;

            default:
              return O$1();
          }
      }, n.prototype.g = function() {
          return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
      }, n;
  }((function() {}));

  var Lt = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this, t, n, r) || this).key = ct.fromName(r.referenceValue), 
          i;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          var e = ct.comparator(t.key, this.key);
          return this.m(e);
      }, n;
  }(Rt), Ot = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t, "in" /* IN */ , n) || this).keys = Ft("in" /* IN */ , n), 
          r;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          return this.keys.some((function(e) {
              return e.isEqual(t.key);
          }));
      }, n;
  }(Rt), Pt = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t, "not-in" /* NOT_IN */ , n) || this).keys = Ft("not-in" /* NOT_IN */ , n), 
          r;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          return !this.keys.some((function(e) {
              return e.isEqual(t.key);
          }));
      }, n;
  }(Rt);

  /** Filter that matches on key fields within an array. */ function Ft(t, e) {
      var n;
      return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((function(t) {
          return ct.fromName(t.referenceValue);
      }));
  }

  /** A Filter that implements the array-contains operator. */ var Mt = /** @class */ function(e) {
      function n(t, n) {
          return e.call(this, t, "array-contains" /* ARRAY_CONTAINS */ , n) || this;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          var e = t.data.field(this.field);
          return wt(e) && lt(e.arrayValue, this.value);
      }, n;
  }(Rt), Vt = /** @class */ function(e) {
      function n(t, n) {
          return e.call(this, t, "in" /* IN */ , n) || this;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          var e = t.data.field(this.field);
          return null !== e && lt(this.value.arrayValue, e);
      }, n;
  }(Rt), qt = /** @class */ function(e) {
      function n(t, n) {
          return e.call(this, t, "not-in" /* NOT_IN */ , n) || this;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          if (lt(this.value.arrayValue, {
              nullValue: "NULL_VALUE"
          })) return !1;
          var e = t.data.field(this.field);
          return null !== e && !lt(this.value.arrayValue, e);
      }, n;
  }(Rt), Ut = /** @class */ function(e) {
      function n(t, n) {
          return e.call(this, t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n) || this;
      }
      return __extends$6(n, e), n.prototype.matches = function(t) {
          var e = this, n = t.data.field(this.field);
          return !(!wt(n) || !n.arrayValue.values) && n.arrayValue.values.some((function(t) {
              return lt(e.value.arrayValue, t);
          }));
      }, n;
  }(Rt), Bt = function(t, e) {
      this.position = t, this.before = e;
  };

  /** A Filter that implements the IN operator. */ function jt(t) {
      // TODO(b/29183165): Make this collision robust.
      return (t.before ? "b" : "a") + ":" + t.position.map((function(t) {
          return yt(t);
      })).join(",");
  }

  /**
   * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
   */ var Kt = function(t, e /* ASCENDING */) {
      void 0 === e && (e = "asc"), this.field = t, this.dir = e;
  };

  function Qt(t, e) {
      return t.dir === e.dir && t.field.isEqual(e.field);
  }

  /**
   * Returns true if a document sorts before a bound using the provided sort
   * order.
   */ function Gt(t, e, n) {
      for (var r = 0, i = 0; i < t.position.length; i++) {
          var o = e[i], s = t.position[i];
          if (r = o.field.isKeyField() ? ct.comparator(ct.fromName(s.referenceValue), n.key) : dt(s, n.data.field(o.field)), 
          "desc" /* DESCENDING */ === o.dir && (r *= -1), 0 !== r) break;
      }
      return t.before ? r <= 0 : r < 0;
  }

  function zt(t, e) {
      if (null === t) return null === e;
      if (null === e) return !1;
      if (t.before !== e.before || t.position.length !== e.position.length) return !1;
      for (var n = 0; n < t.position.length; n++) if (!ft(t.position[n], e.position[n])) return !1;
      return !0;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Query encapsulates all the query attributes we support in the SDK. It can
   * be run against the LocalStore, as well as be converted to a `Target` to
   * query the RemoteStore results.
   *
   * Visible for testing.
   */ var Wt = 
  /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
  function(t, e, n, r, i, o /* First */ , s, u) {
      void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
      void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === s && (s = null), 
      void 0 === u && (u = null), this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, 
      this.filters = r, this.limit = i, this.limitType = o, this.startAt = s, this.endAt = u, 
      this.p = null, 
      // The corresponding `Target` of this `Query` instance.
      this.T = null, this.startAt, this.endAt;
  };

  /** Creates a new Query instance with the options provided. */ function Ht(t, e, n, r, i, o, s, u) {
      return new Wt(t, e, n, r, i, o, s, u);
  }

  /** Creates a new Query for a query that matches all documents at `path` */ function Yt(t) {
      return new Wt(t);
  }

  /**
   * Helper to convert a collection group query into a collection query at a
   * specific path. This is used when executing collection group queries, since
   * we have to split the query into a set of collection queries at multiple
   * paths.
   */ function $t(t) {
      return !st(t.limit) && "F" /* First */ === t.limitType;
  }

  function Xt(t) {
      return !st(t.limit) && "L" /* Last */ === t.limitType;
  }

  function Jt(t) {
      return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
  }

  function Zt(t) {
      for (var e = 0, n = t.filters; e < n.length; e++) {
          var r = n[e];
          if (r.g()) return r.field;
      }
      return null;
  }

  /**
   * Checks if any of the provided Operators are included in the query and
   * returns the first one that is, or null if none are.
   */
  /**
   * Returns whether the query matches a collection group rather than a specific
   * collection.
   */ function te(t) {
      return null !== t.collectionGroup;
  }

  /**
   * Returns the implicit order by constraint that is used to execute the Query,
   * which can be different from the order by constraints the user provided (e.g.
   * the SDK and backend always orders by `__name__`).
   */ function ee(t) {
      var e = F$1(t);
      if (null === e.p) {
          e.p = [];
          var n = Zt(e), r = Jt(e);
          if (null !== n && null === r) 
          // In order to implicitly add key ordering, we must also add the
          // inequality filter field for it to be a valid query.
          // Note that the default inequality field and key ordering is ascending.
          n.isKeyField() || e.p.push(new Kt(n)), e.p.push(new Kt($.keyField(), "asc" /* ASCENDING */)); else {
              for (var i = !1, o = 0, s = e.explicitOrderBy; o < s.length; o++) {
                  var u = s[o];
                  e.p.push(u), u.field.isKeyField() && (i = !0);
              }
              if (!i) {
                  // The order of the implicit key ordering always matches the last
                  // explicit order by
                  var a = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */;
                  e.p.push(new Kt($.keyField(), a));
              }
          }
      }
      return e.p;
  }

  /**
   * Converts this `Query` instance to it's corresponding `Target` representation.
   */ function ne(t) {
      var e = F$1(t);
      if (!e.T) if ("F" /* First */ === e.limitType) e.T = At(e.path, e.collectionGroup, ee(e), e.filters, e.limit, e.startAt, e.endAt); else {
          for (
          // Flip the orderBy directions since we want the last results
          var n = [], r = 0, i = ee(e); r < i.length; r++) {
              var o = i[r], s = "desc" /* DESCENDING */ === o.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
              n.push(new Kt(o.field, s));
          }
          // We need to swap the cursors to match the now-flipped query ordering.
                  var u = e.endAt ? new Bt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Bt(e.startAt.position, !e.startAt.before) : null;
          // Now return as a LimitType.First query.
                  e.T = At(e.path, e.collectionGroup, n, e.filters, e.limit, u, a);
      }
      return e.T;
  }

  function re(t, e, n) {
      return new Wt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
  }

  function ie(t, e) {
      return Ct(ne(t), ne(e)) && t.limitType === e.limitType;
  }

  // TODO(b/29183165): This is used to get a unique string from a query to, for
  // example, use as a dictionary key, but the implementation is subject to
  // collisions. Make it collision-free.
  function oe(t) {
      return kt(ne(t)) + "|lt:" + t.limitType;
  }

  function se(t) {
      return "Query(target=" + function(t) {
          var e = t.path.canonicalString();
          return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
          t.filters.length > 0 && (e += ", filters: [" + t.filters.map((function(t) {
              return (e = t).field.canonicalString() + " " + e.op + " " + yt(e.value);
              /** Returns a debug description for `filter`. */            var e;
              /** Filter that matches on key fields (i.e. '__name__'). */        })).join(", ") + "]"), 
          st(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map((function(t) {
              return function(t) {
                  return t.field.canonicalString() + " (" + t.dir + ")";
              }(t);
          })).join(", ") + "]"), t.startAt && (e += ", startAt: " + jt(t.startAt)), t.endAt && (e += ", endAt: " + jt(t.endAt)), 
          "Target(" + e + ")";
      }(ne(t)) + "; limitType=" + t.limitType + ")";
  }

  /** Returns whether `doc` matches the constraints of `query`. */ function ue(t, e) {
      return e.isFoundDocument() && function(t, e) {
          var n = e.key.path;
          return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : ct.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
      }(t, e) && function(t, e) {
          for (var n = 0, r = t.explicitOrderBy; n < r.length; n++) {
              var i = r[n];
              // order by key always matches
                          if (!i.field.isKeyField() && null === e.data.field(i.field)) return !1;
          }
          return !0;
      }(t, e) && function(t, e) {
          for (var n = 0, r = t.filters; n < r.length; n++) {
              if (!r[n].matches(e)) return !1;
          }
          return !0;
      }(t, e) && function(t, e) {
          return !(t.startAt && !Gt(t.startAt, ee(t), e)) && (!t.endAt || !Gt(t.endAt, ee(t), e));
      }(t, e);
  }

  function ae(t) {
      return function(e, n) {
          for (var r = !1, i = 0, o = ee(t); i < o.length; i++) {
              var s = o[i], u = ce(s, e, n);
              if (0 !== u) return u;
              r = r || s.field.isKeyField();
          }
          return 0;
      };
  }

  function ce(t, e, n) {
      var r = t.field.isKeyField() ? ct.comparator(e.key, n.key) : function(t, e, n) {
          var r = e.data.field(t), i = n.data.field(t);
          return null !== r && null !== i ? dt(r, i) : O$1();
      }(t.field, e, n);
      switch (t.dir) {
        case "asc" /* ASCENDING */ :
          return r;

        case "desc" /* DESCENDING */ :
          return -1 * r;

        default:
          return O$1();
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns an DoubleValue for `value` that is encoded based the serializer's
   * `useProto3Json` setting.
   */ function he(t, e) {
      if (t.I) {
          if (isNaN(e)) return {
              doubleValue: "NaN"
          };
          if (e === 1 / 0) return {
              doubleValue: "Infinity"
          };
          if (e === -1 / 0) return {
              doubleValue: "-Infinity"
          };
      }
      return {
          doubleValue: ut(e) ? "-0" : e
      };
  }

  /**
   * Returns an IntegerValue for `value`.
   */ function fe(t) {
      return {
          integerValue: "" + t
      };
  }

  /**
   * Returns a value for a number that's appropriate to put into a proto.
   * The return value is an IntegerValue if it can safely represent the value,
   * otherwise a DoubleValue is returned.
   */ function le(t, e) {
      return at(e) ? fe(e) : he(t, e);
  }

  /**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Used to represent a field transform on a mutation. */ var de = function() {
      // Make sure that the structural type of `TransformOperation` is unique.
      // See https://github.com/microsoft/TypeScript/issues/5451
      this._ = void 0;
  };

  /**
   * Computes the local transform result against the provided `previousValue`,
   * optionally using the provided localWriteTime.
   */ function pe(t, e, n) {
      return t instanceof me ? function(t, e) {
          var n = {
              fields: {
                  __type__: {
                      stringValue: "server_timestamp"
                  },
                  __local_write_time__: {
                      timestampValue: {
                          seconds: t.seconds,
                          nanos: t.nanoseconds
                      }
                  }
              }
          };
          return e && (n.fields.__previous_value__ = e), {
              mapValue: n
          };
      }(n, e) : t instanceof ge ? we(t, e) : t instanceof be ? Ie(t, e) : function(t, e) {
          // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
          // precision and resolves overflows by reducing precision, we do not
          // manually cap overflows at 2^63.
          var n = ve(t, e), r = Ee(n) + Ee(t.A);
          return gt(n) && gt(t.A) ? fe(r) : he(t.R, r);
      }(t, e);
  }

  /**
   * Computes a final transform result after the transform has been acknowledged
   * by the server, potentially using the server-provided transformResult.
   */ function ye(t, e, n) {
      // The server just sends null as the transform result for array operations,
      // so we have to calculate a result the same as we do for local
      // applications.
      return t instanceof ge ? we(t, e) : t instanceof be ? Ie(t, e) : n;
  }

  /**
   * If this transform operation is not idempotent, returns the base value to
   * persist for this transform. If a base value is returned, the transform
   * operation is always applied to this base value, even if document has
   * already been updated.
   *
   * Base values provide consistent behavior for non-idempotent transforms and
   * allow us to return the same latency-compensated value even if the backend
   * has already applied the transform operation. The base value is null for
   * idempotent transforms, as they can be re-played even if the backend has
   * already applied them.
   *
   * @returns a base value to store along with the mutation, or null for
   * idempotent transforms.
   */ function ve(t, e) {
      return t instanceof Te ? gt(n = e) || function(t) {
          return !!t && "doubleValue" in t;
      }(n) ? e : {
          integerValue: 0
      } : null;
      var n;
  }

  /** Transforms a value into a server-generated timestamp. */ var me = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n;
  }(de), ge = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).elements = t, n;
      }
      return __extends$6(n, e), n;
  }(de);

  /** Transforms an array value via a union operation. */ function we(t, e) {
      for (var n = _e(e), r = function(t) {
          n.some((function(e) {
              return ft(e, t);
          })) || n.push(t);
      }, i = 0, o = t.elements; i < o.length; i++) {
          r(o[i]);
      }
      return {
          arrayValue: {
              values: n
          }
      };
  }

  /** Transforms an array value via a remove operation. */ var be = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).elements = t, n;
      }
      return __extends$6(n, e), n;
  }(de);

  function Ie(t, e) {
      for (var n = _e(e), r = function(t) {
          n = n.filter((function(e) {
              return !ft(e, t);
          }));
      }, i = 0, o = t.elements; i < o.length; i++) {
          r(o[i]);
      }
      return {
          arrayValue: {
              values: n
          }
      };
  }

  /**
   * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
   * transforms. Converts all field values to integers or doubles, but unlike the
   * backend does not cap integer values at 2^63. Instead, JavaScript number
   * arithmetic is used and precision loss can occur for values greater than 2^53.
   */ var Te = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).R = t, r.A = n, r;
      }
      return __extends$6(n, e), n;
  }(de);

  function Ee(t) {
      return et(t.integerValue || t.doubleValue);
  }

  function _e(t) {
      return wt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** A field path and the TransformOperation to perform upon it. */ var Se = function(t, e) {
      this.field = t, this.transform = e;
  };

  /** The result of successfully applying a mutation to the backend. */
  var Ne = function(
  /**
       * The version at which the mutation was committed:
       *
       * - For most operations, this is the updateTime in the WriteResult.
       * - For deletes, the commitTime of the WriteResponse (because deletes are
       *   not stored and have no updateTime).
       *
       * Note that these versions can be different: No-op writes will not change
       * the updateTime even though the commitTime advances.
       */
  t, 
  /**
       * The resulting fields returned from the backend after a mutation
       * containing field transforms has been committed. Contains one FieldValue
       * for each FieldTransform that was in the mutation.
       *
       * Will be empty if the mutation did not contain any field transforms.
       */
  e) {
      this.version = t, this.transformResults = e;
  }, De = /** @class */ function() {
      function t(t, e) {
          this.updateTime = t, this.exists = e
          /** Creates a new empty Precondition. */;
      }
      return t.none = function() {
          return new t;
      }, 
      /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
          return new t(void 0, e);
      }, 
      /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
          return new t(e);
      }, Object.defineProperty(t.prototype, "isNone", {
          /** Returns whether this Precondition is empty. */ get: function() {
              return void 0 === this.updateTime && void 0 === this.exists;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.isEqual = function(t) {
          return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
      }, t;
  }();

  /**
   * Encodes a precondition for a mutation. This follows the model that the
   * backend accepts with the special case of an explicit "empty" precondition
   * (meaning no precondition).
   */
  /** Returns true if the preconditions is valid for the given document. */ function Ae(t, e) {
      return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
  }

  /**
   * A mutation describes a self-contained change to a document. Mutations can
   * create, replace, delete, and update subsets of documents.
   *
   * Mutations not only act on the value of the document but also its version.
   *
   * For local mutations (mutations that haven't been committed yet), we preserve
   * the existing version for Set and Patch mutations. For Delete mutations, we
   * reset the version to 0.
   *
   * Here's the expected transition table.
   *
   * MUTATION           APPLIED TO            RESULTS IN
   *
   * SetMutation        Document(v3)          Document(v3)
   * SetMutation        NoDocument(v3)        Document(v0)
   * SetMutation        InvalidDocument(v0)   Document(v0)
   * PatchMutation      Document(v3)          Document(v3)
   * PatchMutation      NoDocument(v3)        NoDocument(v3)
   * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
   * DeleteMutation     Document(v3)          NoDocument(v0)
   * DeleteMutation     NoDocument(v3)        NoDocument(v0)
   * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
   *
   * For acknowledged mutations, we use the updateTime of the WriteResponse as
   * the resulting version for Set and Patch mutations. As deletes have no
   * explicit update time, we use the commitTime of the WriteResponse for
   * Delete mutations.
   *
   * If a mutation is acknowledged by the backend but fails the precondition check
   * locally, we transition to an `UnknownDocument` and rely on Watch to send us
   * the updated version.
   *
   * Field transforms are used only with Patch and Set Mutations. We use the
   * `updateTransforms` message to store transforms, rather than the `transforms`s
   * messages.
   *
   * ## Subclassing Notes
   *
   * Every type of mutation needs to implement its own applyToRemoteDocument() and
   * applyToLocalView() to implement the actual behavior of applying the mutation
   * to some source document (see `applySetMutationToRemoteDocument()` for an
   * example).
   */ var ke = function() {};

  /**
   * Applies this mutation to the given document for the purposes of computing a
   * new remote document. If the input document doesn't match the expected state
   * (e.g. it is invalid or outdated), the document type may transition to
   * unknown.
   *
   * @param mutation - The mutation to apply.
   * @param document - The document to mutate. The input document can be an
   *     invalid document if the client has no knowledge of the pre-mutation state
   *     of the document.
   * @param mutationResult - The result of applying the mutation from the backend.
   */ function Ce(t, e, n) {
      t instanceof Pe ? function(t, e, n) {
          // Unlike applySetMutationToLocalView, if we're applying a mutation to a
          // remote document the server has accepted the mutation so the precondition
          // must have held.
          var r = t.value.clone(), i = Ve(t.fieldTransforms, e, n.transformResults);
          r.setAll(i), e.convertToFoundDocument(n.version, r).setHasCommittedMutations();
      }(t, e, n) : t instanceof Fe ? function(t, e, n) {
          if (Ae(t.precondition, e)) {
              var r = Ve(t.fieldTransforms, e, n.transformResults), i = e.data;
              i.setAll(Me(t)), i.setAll(r), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
          } else e.convertToUnknownDocument(n.version);
      }(t, e, n) : function(t, e, n) {
          // Unlike applyToLocalView, if we're applying a mutation to a remote
          // document the server has accepted the mutation so the precondition must
          // have held.
          e.convertToNoDocument(n.version).setHasCommittedMutations();
      }(0, e, n);
  }

  /**
   * Applies this mutation to the given document for the purposes of computing
   * the new local view of a document. If the input document doesn't match the
   * expected state, the document is not modified.
   *
   * @param mutation - The mutation to apply.
   * @param document - The document to mutate. The input document can be an
   *     invalid document if the client has no knowledge of the pre-mutation state
   *     of the document.
   * @param localWriteTime - A timestamp indicating the local write time of the
   *     batch this mutation is a part of.
   */ function xe(t, e, n) {
      t instanceof Pe ? function(t, e, n) {
          if (Ae(t.precondition, e)) {
              var r = t.value.clone(), i = qe(t.fieldTransforms, n, e);
              r.setAll(i), e.convertToFoundDocument(Oe(e), r).setHasLocalMutations();
          }
      }(t, e, n) : t instanceof Fe ? function(t, e, n) {
          if (Ae(t.precondition, e)) {
              var r = qe(t.fieldTransforms, n, e), i = e.data;
              i.setAll(Me(t)), i.setAll(r), e.convertToFoundDocument(Oe(e), i).setHasLocalMutations();
          }
      }(t, e, n) : function(t, e) {
          Ae(t.precondition, e) && 
          // We don't call `setHasLocalMutations()` since we want to be backwards
          // compatible with the existing SDK behavior.
          e.convertToNoDocument(K$1.min());
      }(t, e);
  }

  /**
   * If this mutation is not idempotent, returns the base value to persist with
   * this mutation. If a base value is returned, the mutation is always applied
   * to this base value, even if document has already been updated.
   *
   * The base value is a sparse object that consists of only the document
   * fields for which this mutation contains a non-idempotent transformation
   * (e.g. a numeric increment). The provided value guarantees consistent
   * behavior for non-idempotent transforms and allow us to return the same
   * latency-compensated value even if the backend has already applied the
   * mutation. The base value is null for idempotent mutations, as they can be
   * re-played even if the backend has already applied them.
   *
   * @returns a base value to store along with the mutation, or null for
   * idempotent mutations.
   */ function Re(t, e) {
      for (var n = null, r = 0, i = t.fieldTransforms; r < i.length; r++) {
          var o = i[r], s = e.data.field(o.field), u = ve(o.transform, s || null);
          null != u && (null == n && (n = _t.empty()), n.set(o.field, u));
      }
      return n || null;
  }

  function Le(t, e) {
      return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function(t, e) {
          return void 0 === t && void 0 === e || !(!t || !e) && U$1(t, e, (function(t, e) {
              return function(t, e) {
                  return t.field.isEqual(e.field) && function(t, e) {
                      return t instanceof ge && e instanceof ge || t instanceof be && e instanceof be ? U$1(t.elements, e.elements, ft) : t instanceof Te && e instanceof Te ? ft(t.A, e.A) : t instanceof me && e instanceof me;
                  }(t.transform, e.transform);
              }(t, e);
          }));
      }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
  }

  /**
   * Returns the version from the given document for use as the result of a
   * mutation. Mutations are defined to return the version of the base document
   * only if it is an existing document. Deleted and unknown documents have a
   * post-mutation version of SnapshotVersion.min().
   */ function Oe(t) {
      return t.isFoundDocument() ? t.version : K$1.min();
  }

  /**
   * A mutation that creates or replaces the document at the given key with the
   * object value contents.
   */ var Pe = /** @class */ function(e) {
      function n(t, n, r, i) {
          void 0 === i && (i = []);
          var o = this;
          return (o = e.call(this) || this).key = t, o.value = n, o.precondition = r, o.fieldTransforms = i, 
          o.type = 0 /* Set */ , o;
      }
      return __extends$6(n, e), n;
  }(ke), Fe = /** @class */ function(e) {
      function n(t, n, r, i, o) {
          void 0 === o && (o = []);
          var s = this;
          return (s = e.call(this) || this).key = t, s.data = n, s.fieldMask = r, s.precondition = i, 
          s.fieldTransforms = o, s.type = 1 /* Patch */ , s;
      }
      return __extends$6(n, e), n;
  }(ke);

  function Me(t) {
      var e = new Map;
      return t.fieldMask.fields.forEach((function(n) {
          if (!n.isEmpty()) {
              var r = t.data.field(n);
              e.set(n, r);
          }
      })), e
      /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use after a mutation
   * containing transforms has been acknowledged by the server.
   *
   * @param fieldTransforms - The field transforms to apply the result to.
   * @param mutableDocument - The current state of the document after applying all
   * previous mutations.
   * @param serverTransformResults - The transform results received by the server.
   * @returns The transform results list.
   */;
  }

  function Ve(t, e, n) {
      var r = new Map;
      P$1(t.length === n.length);
      for (var i = 0; i < n.length; i++) {
          var o = t[i], s = o.transform, u = e.data.field(o.field);
          r.set(o.field, ye(s, u, n[i]));
      }
      return r;
  }

  /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use when applying a
   * transform locally.
   *
   * @param fieldTransforms - The field transforms to apply the result to.
   * @param localWriteTime - The local time of the mutation (used to
   *     generate ServerTimestampValues).
   * @param mutableDocument - The current state of the document after applying all
   *     previous mutations.
   * @returns The transform results list.
   */ function qe(t, e, n) {
      for (var r = new Map, i = 0, o = t; i < o.length; i++) {
          var s = o[i], u = s.transform, a = n.data.field(s.field);
          r.set(s.field, pe(u, a, e));
      }
      return r;
  }

  /** A mutation that deletes the document at the given key. */ var Ue, Be, je = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).key = t, r.precondition = n, r.type = 2 /* Delete */ , 
          r.fieldTransforms = [], r;
      }
      return __extends$6(n, e), n;
  }(ke), Ke = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).key = t, r.precondition = n, r.type = 3 /* Verify */ , 
          r.fieldTransforms = [], r;
      }
      return __extends$6(n, e), n;
  }(ke), Qe = 
  // TODO(b/33078163): just use simplest form of existence filter for now
  function(t) {
      this.count = t;
  };

  /**
   * Determines whether an error code represents a permanent error when received
   * in response to a non-write operation.
   *
   * See isPermanentWriteError for classifying write errors.
   */
  function Ge(t) {
      switch (t) {
        case N$1.OK:
          return O$1();

        case N$1.CANCELLED:
        case N$1.UNKNOWN:
        case N$1.DEADLINE_EXCEEDED:
        case N$1.RESOURCE_EXHAUSTED:
        case N$1.INTERNAL:
        case N$1.UNAVAILABLE:
   // Unauthenticated means something went wrong with our token and we need
          // to retry with new credentials which will happen automatically.
                case N$1.UNAUTHENTICATED:
          return !1;

        case N$1.INVALID_ARGUMENT:
        case N$1.NOT_FOUND:
        case N$1.ALREADY_EXISTS:
        case N$1.PERMISSION_DENIED:
        case N$1.FAILED_PRECONDITION:
   // Aborted might be retried in some scenarios, but that is dependant on
          // the context and should handled individually by the calling code.
          // See https://cloud.google.com/apis/design/errors.
                case N$1.ABORTED:
        case N$1.OUT_OF_RANGE:
        case N$1.UNIMPLEMENTED:
        case N$1.DATA_LOSS:
          return !0;

        default:
          return O$1();
      }
  }

  /**
   * Determines whether an error code represents a permanent error when received
   * in response to a write operation.
   *
   * Write operations must be handled specially because as of b/119437764, ABORTED
   * errors on the write stream should be retried too (even though ABORTED errors
   * are not generally retryable).
   *
   * Note that during the initial handshake on the write stream an ABORTED error
   * signals that we should discard our stream token (i.e. it is permanent). This
   * means a handshake error should be classified with isPermanentError, above.
   */
  /**
   * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
   * are not the same as HTTP status codes.
   *
   * @returns The Code equivalent to the given GRPC status code. Fails if there
   *     is no match.
   */ function ze(t) {
      if (void 0 === t) 
      // This shouldn't normally happen, but in certain error cases (like trying
      // to send invalid proto messages) we may get an error with no GRPC code.
      return x$1("GRPC error has no .code"), N$1.UNKNOWN;
      switch (t) {
        case Ue.OK:
          return N$1.OK;

        case Ue.CANCELLED:
          return N$1.CANCELLED;

        case Ue.UNKNOWN:
          return N$1.UNKNOWN;

        case Ue.DEADLINE_EXCEEDED:
          return N$1.DEADLINE_EXCEEDED;

        case Ue.RESOURCE_EXHAUSTED:
          return N$1.RESOURCE_EXHAUSTED;

        case Ue.INTERNAL:
          return N$1.INTERNAL;

        case Ue.UNAVAILABLE:
          return N$1.UNAVAILABLE;

        case Ue.UNAUTHENTICATED:
          return N$1.UNAUTHENTICATED;

        case Ue.INVALID_ARGUMENT:
          return N$1.INVALID_ARGUMENT;

        case Ue.NOT_FOUND:
          return N$1.NOT_FOUND;

        case Ue.ALREADY_EXISTS:
          return N$1.ALREADY_EXISTS;

        case Ue.PERMISSION_DENIED:
          return N$1.PERMISSION_DENIED;

        case Ue.FAILED_PRECONDITION:
          return N$1.FAILED_PRECONDITION;

        case Ue.ABORTED:
          return N$1.ABORTED;

        case Ue.OUT_OF_RANGE:
          return N$1.OUT_OF_RANGE;

        case Ue.UNIMPLEMENTED:
          return N$1.UNIMPLEMENTED;

        case Ue.DATA_LOSS:
          return N$1.DATA_LOSS;

        default:
          return O$1();
      }
  }

  /**
   * Converts an HTTP response's error status to the equivalent error code.
   *
   * @param status - An HTTP error response status ("FAILED_PRECONDITION",
   * "UNKNOWN", etc.)
   * @returns The equivalent Code. Non-matching responses are mapped to
   *     Code.UNKNOWN.
   */ (Be = Ue || (Ue = {}))[Be.OK = 0] = "OK", Be[Be.CANCELLED = 1] = "CANCELLED", 
  Be[Be.UNKNOWN = 2] = "UNKNOWN", Be[Be.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
  Be[Be.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Be[Be.NOT_FOUND = 5] = "NOT_FOUND", 
  Be[Be.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Be[Be.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
  Be[Be.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Be[Be.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
  Be[Be.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Be[Be.ABORTED = 10] = "ABORTED", 
  Be[Be.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Be[Be.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
  Be[Be.INTERNAL = 13] = "INTERNAL", Be[Be.UNAVAILABLE = 14] = "UNAVAILABLE", Be[Be.DATA_LOSS = 15] = "DATA_LOSS";

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // An immutable sorted map implementation, based on a Left-leaning Red-Black
  // tree.
  var We = /** @class */ function() {
      function t(t, e) {
          this.comparator = t, this.root = e || Ye.EMPTY;
      }
      // Returns a copy of the map, with the specified key/value added or replaced.
          return t.prototype.insert = function(e, n) {
          return new t(this.comparator, this.root.insert(e, n, this.comparator).copy(null, null, Ye.BLACK, null, null));
      }, 
      // Returns a copy of the map, with the specified key removed.
      t.prototype.remove = function(e) {
          return new t(this.comparator, this.root.remove(e, this.comparator).copy(null, null, Ye.BLACK, null, null));
      }, 
      // Returns the value of the node with the given key, or null.
      t.prototype.get = function(t) {
          for (var e = this.root; !e.isEmpty(); ) {
              var n = this.comparator(t, e.key);
              if (0 === n) return e.value;
              n < 0 ? e = e.left : n > 0 && (e = e.right);
          }
          return null;
      }, 
      // Returns the index of the element in this sorted map, or -1 if it doesn't
      // exist.
      t.prototype.indexOf = function(t) {
          for (
          // Number of nodes that were pruned when descending right
          var e = 0, n = this.root; !n.isEmpty(); ) {
              var r = this.comparator(t, n.key);
              if (0 === r) return e + n.left.size;
              r < 0 ? n = n.left : (
              // Count all nodes left of the node plus the node itself
              e += n.left.size + 1, n = n.right);
          }
          // Node not found
                  return -1;
      }, t.prototype.isEmpty = function() {
          return this.root.isEmpty();
      }, Object.defineProperty(t.prototype, "size", {
          // Returns the total number of nodes in the map.
          get: function() {
              return this.root.size;
          },
          enumerable: !1,
          configurable: !0
      }), 
      // Returns the minimum key in the map.
      t.prototype.minKey = function() {
          return this.root.minKey();
      }, 
      // Returns the maximum key in the map.
      t.prototype.maxKey = function() {
          return this.root.maxKey();
      }, 
      // Traverses the map in key order and calls the specified action function
      // for each key/value pair. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      t.prototype.inorderTraversal = function(t) {
          return this.root.inorderTraversal(t);
      }, t.prototype.forEach = function(t) {
          this.inorderTraversal((function(e, n) {
              return t(e, n), !1;
          }));
      }, t.prototype.toString = function() {
          var t = [];
          return this.inorderTraversal((function(e, n) {
              return t.push(e + ":" + n), !1;
          })), "{" + t.join(", ") + "}";
      }, 
      // Traverses the map in reverse key order and calls the specified action
      // function for each key/value pair. If action returns true, traversal is
      // aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      t.prototype.reverseTraversal = function(t) {
          return this.root.reverseTraversal(t);
      }, 
      // Returns an iterator over the SortedMap.
      t.prototype.getIterator = function() {
          return new He(this.root, null, this.comparator, !1);
      }, t.prototype.getIteratorFrom = function(t) {
          return new He(this.root, t, this.comparator, !1);
      }, t.prototype.getReverseIterator = function() {
          return new He(this.root, null, this.comparator, !0);
      }, t.prototype.getReverseIteratorFrom = function(t) {
          return new He(this.root, t, this.comparator, !0);
      }, t;
  }(), He = /** @class */ function() {
      function t(t, e, n, r) {
          this.isReverse = r, this.nodeStack = [];
          for (var i = 1; !t.isEmpty(); ) if (i = e ? n(t.key, e) : 1, 
          // flip the comparison if we're going in reverse
          r && (i *= -1), i < 0) 
          // This node is less than our start key. ignore it
          t = this.isReverse ? t.left : t.right; else {
              if (0 === i) {
                  // This node is exactly equal to our start key. Push it on the stack,
                  // but stop iterating;
                  this.nodeStack.push(t);
                  break;
              }
              // This node is greater than our start key, add it to the stack and move
              // to the next one
                          this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
          }
      }
      return t.prototype.getNext = function() {
          var t = this.nodeStack.pop(), e = {
              key: t.key,
              value: t.value
          };
          if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
          t = t.left;
          return e;
      }, t.prototype.hasNext = function() {
          return this.nodeStack.length > 0;
      }, t.prototype.peek = function() {
          if (0 === this.nodeStack.length) return null;
          var t = this.nodeStack[this.nodeStack.length - 1];
          return {
              key: t.key,
              value: t.value
          };
      }, t;
  }(), Ye = /** @class */ function() {
      function t(e, n, r, i, o) {
          this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, 
          this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
      }
      // Returns a copy of the current node, optionally replacing pieces of it.
          return t.prototype.copy = function(e, n, r, i, o) {
          return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
      }, t.prototype.isEmpty = function() {
          return !1;
      }, 
      // Traverses the tree in key order and calls the specified action function
      // for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      t.prototype.inorderTraversal = function(t) {
          return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
      }, 
      // Traverses the tree in reverse key order and calls the specified action
      // function for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      t.prototype.reverseTraversal = function(t) {
          return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
      }, 
      // Returns the minimum node in the tree.
      t.prototype.min = function() {
          return this.left.isEmpty() ? this : this.left.min();
      }, 
      // Returns the maximum key in the tree.
      t.prototype.minKey = function() {
          return this.min().key;
      }, 
      // Returns the maximum key in the tree.
      t.prototype.maxKey = function() {
          return this.right.isEmpty() ? this.key : this.right.maxKey();
      }, 
      // Returns new tree, with the key/value added.
      t.prototype.insert = function(t, e, n) {
          var r = this, i = n(t, r.key);
          return (r = i < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n))).fixUp();
      }, t.prototype.removeMin = function() {
          if (this.left.isEmpty()) return t.EMPTY;
          var e = this;
          return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), (e = e.copy(null, null, null, e.left.removeMin(), null)).fixUp();
      }, 
      // Returns new tree, with the specified item removed.
      t.prototype.remove = function(e, n) {
          var r, i = this;
          if (n(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), 
          i = i.copy(null, null, null, i.left.remove(e, n), null); else {
              if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), 
              0 === n(e, i.key)) {
                  if (i.right.isEmpty()) return t.EMPTY;
                  r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
              }
              i = i.copy(null, null, null, null, i.right.remove(e, n));
          }
          return i.fixUp();
      }, t.prototype.isRed = function() {
          return this.color;
      }, 
      // Returns new tree after performing any needed rotations.
      t.prototype.fixUp = function() {
          var t = this;
          return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
          t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
      }, t.prototype.moveRedLeft = function() {
          var t = this.colorFlip();
          return t.right.left.isRed() && (t = (t = (t = t.copy(null, null, null, null, t.right.rotateRight())).rotateLeft()).colorFlip()), 
          t;
      }, t.prototype.moveRedRight = function() {
          var t = this.colorFlip();
          return t.left.left.isRed() && (t = (t = t.rotateRight()).colorFlip()), t;
      }, t.prototype.rotateLeft = function() {
          var e = this.copy(null, null, t.RED, null, this.right.left);
          return this.right.copy(null, null, this.color, e, null);
      }, t.prototype.rotateRight = function() {
          var e = this.copy(null, null, t.RED, this.left.right, null);
          return this.left.copy(null, null, this.color, null, e);
      }, t.prototype.colorFlip = function() {
          var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
          return this.copy(null, null, !this.color, t, e);
      }, 
      // For testing.
      t.prototype.checkMaxDepth = function() {
          var t = this.check();
          return Math.pow(2, t) <= this.size + 1;
      }, 
      // In a balanced RB tree, the black-depth (number of black nodes) from root to
      // leaves is equal on both sides.  This function verifies that or asserts.
      t.prototype.check = function() {
          if (this.isRed() && this.left.isRed()) throw O$1();
          if (this.right.isRed()) throw O$1();
          var t = this.left.check();
          if (t !== this.right.check()) throw O$1();
          return t + (this.isRed() ? 0 : 1);
      }, t;
  }();

  // end SortedMap
  // An iterator over an LLRBNode.
  // end LLRBNode
  // Empty node is shared between all LLRB trees.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  Ye.EMPTY = null, Ye.RED = !0, Ye.BLACK = !1, 
  // end LLRBEmptyNode
  Ye.EMPTY = new (/** @class */ function() {
      function t() {
          this.size = 0;
      }
      return Object.defineProperty(t.prototype, "key", {
          get: function() {
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "value", {
          get: function() {
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "color", {
          get: function() {
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "left", {
          get: function() {
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "right", {
          get: function() {
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), 
      // Returns a copy of the current node.
      t.prototype.copy = function(t, e, n, r, i) {
          return this;
      }, 
      // Returns a copy of the tree, with the specified key/value added.
      t.prototype.insert = function(t, e, n) {
          return new Ye(t, e);
      }, 
      // Returns a copy of the tree, with the specified key removed.
      t.prototype.remove = function(t, e) {
          return this;
      }, t.prototype.isEmpty = function() {
          return !0;
      }, t.prototype.inorderTraversal = function(t) {
          return !1;
      }, t.prototype.reverseTraversal = function(t) {
          return !1;
      }, t.prototype.minKey = function() {
          return null;
      }, t.prototype.maxKey = function() {
          return null;
      }, t.prototype.isRed = function() {
          return !1;
      }, 
      // For testing.
      t.prototype.checkMaxDepth = function() {
          return !0;
      }, t.prototype.check = function() {
          return 0;
      }, t;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * SortedSet is an immutable (copy-on-write) collection that holds elements
   * in order specified by the provided comparator.
   *
   * NOTE: if provided comparator returns 0 for two elements, we consider them to
   * be equal!
   */
  var $e = /** @class */ function() {
      function t(t) {
          this.comparator = t, this.data = new We(this.comparator);
      }
      return t.prototype.has = function(t) {
          return null !== this.data.get(t);
      }, t.prototype.first = function() {
          return this.data.minKey();
      }, t.prototype.last = function() {
          return this.data.maxKey();
      }, Object.defineProperty(t.prototype, "size", {
          get: function() {
              return this.data.size;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.indexOf = function(t) {
          return this.data.indexOf(t);
      }, 
      /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t) {
          this.data.inorderTraversal((function(e, n) {
              return t(e), !1;
          }));
      }, 
      /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ t.prototype.forEachInRange = function(t, e) {
          for (var n = this.data.getIteratorFrom(t[0]); n.hasNext(); ) {
              var r = n.getNext();
              if (this.comparator(r.key, t[1]) >= 0) return;
              e(r.key);
          }
      }, 
      /**
       * Iterates over `elem`s such that: start &lt;= elem until false is returned.
       */
      t.prototype.forEachWhile = function(t, e) {
          var n;
          for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) if (!t(n.getNext().key)) return;
      }, 
      /** Finds the least element greater than or equal to `elem`. */ t.prototype.firstAfterOrEqual = function(t) {
          var e = this.data.getIteratorFrom(t);
          return e.hasNext() ? e.getNext().key : null;
      }, t.prototype.getIterator = function() {
          return new Xe(this.data.getIterator());
      }, t.prototype.getIteratorFrom = function(t) {
          return new Xe(this.data.getIteratorFrom(t));
      }, 
      /** Inserts or updates an element */ t.prototype.add = function(t) {
          return this.copy(this.data.remove(t).insert(t, !0));
      }, 
      /** Deletes an element */ t.prototype.delete = function(t) {
          return this.has(t) ? this.copy(this.data.remove(t)) : this;
      }, t.prototype.isEmpty = function() {
          return this.data.isEmpty();
      }, t.prototype.unionWith = function(t) {
          var e = this;
          // Make sure `result` always refers to the larger one of the two sets.
                  return e.size < t.size && (e = t, t = this), t.forEach((function(t) {
              e = e.add(t);
          })), e;
      }, t.prototype.isEqual = function(e) {
          if (!(e instanceof t)) return !1;
          if (this.size !== e.size) return !1;
          for (var n = this.data.getIterator(), r = e.data.getIterator(); n.hasNext(); ) {
              var i = n.getNext().key, o = r.getNext().key;
              if (0 !== this.comparator(i, o)) return !1;
          }
          return !0;
      }, t.prototype.toArray = function() {
          var t = [];
          return this.forEach((function(e) {
              t.push(e);
          })), t;
      }, t.prototype.toString = function() {
          var t = [];
          return this.forEach((function(e) {
              return t.push(e);
          })), "SortedSet(" + t.toString() + ")";
      }, t.prototype.copy = function(e) {
          var n = new t(this.comparator);
          return n.data = e, n;
      }, t;
  }(), Xe = /** @class */ function() {
      function t(t) {
          this.iter = t;
      }
      return t.prototype.getNext = function() {
          return this.iter.getNext().key;
      }, t.prototype.hasNext = function() {
          return this.iter.hasNext();
      }, t;
  }(), Je = new We(ct.comparator);

  function Ze() {
      return Je;
  }

  var tn = new We(ct.comparator);

  function en() {
      return tn;
  }

  var nn = new We(ct.comparator);

  function rn() {
      return nn;
  }

  var on = new $e(ct.comparator);

  function sn() {
      for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
      for (var n = on, r = 0, i = t; r < i.length; r++) {
          var o = i[r];
          n = n.add(o);
      }
      return n;
  }

  var un = new $e(q$1);

  function an() {
      return un;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An event from the RemoteStore. It is split into targetChanges (changes to the
   * state or the set of documents in our watched targets) and documentUpdates
   * (changes to the actual documents).
   */ var cn = /** @class */ function() {
      function t(
      /**
       * The snapshot version this event brings us up to, or MIN if not set.
       */
      t, 
      /**
       * A map from target to changes to the target. See TargetChange.
       */
      e, 
      /**
       * A set of targets that is known to be inconsistent. Listens for these
       * targets should be re-established without resume tokens.
       */
      n, 
      /**
       * A set of which documents have changed or been deleted, along with the
       * doc's new values (if not deleted).
       */
      r, 
      /**
       * A set of which document updates are due only to limbo resolution targets.
       */
      i) {
          this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = r, 
          this.resolvedLimboDocuments = i;
      }
      /**
       * HACK: Views require RemoteEvents in order to determine whether the view is
       * CURRENT, but secondary tabs don't receive remote events. So this method is
       * used to create a synthesized RemoteEvent that can be used to apply a
       * CURRENT status change to a View, for queries executed in a different tab.
       */
      // PORTING NOTE: Multi-tab only
          return t.createSynthesizedRemoteEventForCurrentChange = function(e, n) {
          var r = new Map;
          return r.set(e, hn.createSynthesizedTargetChangeForCurrentChange(e, n)), new t(K$1.min(), r, an(), Ze(), sn());
      }, t;
  }(), hn = /** @class */ function() {
      function t(
      /**
       * An opaque, server-assigned token that allows watching a query to be resumed
       * after disconnecting without retransmitting all the data that matches the
       * query. The resume token essentially identifies a point in time from which
       * the server should resume sending results.
       */
      t, 
      /**
       * The "current" (synced) status of this target. Note that "current"
       * has special meaning in the RPC protocol that implies that a target is
       * both up-to-date and consistent with the rest of the watch stream.
       */
      e, 
      /**
       * The set of documents that were newly assigned to this target as part of
       * this remote event.
       */
      n, 
      /**
       * The set of documents that were already assigned to this target but received
       * an update during this remote event.
       */
      r, 
      /**
       * The set of documents that were removed from this target as part of this
       * remote event.
       */
      i) {
          this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = r, 
          this.removedDocuments = i
          /**
       * This method is used to create a synthesized TargetChanges that can be used to
       * apply a CURRENT status change to a View (for queries executed in a different
       * tab) or for new queries (to raise snapshots with correct CURRENT status).
       */;
      }
      return t.createSynthesizedTargetChangeForCurrentChange = function(e, n) {
          return new t(J$1.EMPTY_BYTE_STRING, n, sn(), sn(), sn());
      }, t;
  }(), fn = function(
  /** The new document applies to all of these targets. */
  t, 
  /** The new document is removed from all of these targets. */
  e, 
  /** The key of the document for this change. */
  n, 
  /**
       * The new document or NoDocument if it was deleted. Is null if the
       * document went out of view without the server sending a new document.
       */
  r) {
      this.v = t, this.removedTargetIds = e, this.key = n, this.P = r;
  }, ln = function(t, e) {
      this.targetId = t, this.V = e;
  }, dn = function(
  /** What kind of change occurred to the watch target. */
  t, 
  /** The target IDs that were added/removed/set. */
  e, 
  /**
       * An opaque, server-assigned token that allows watching a target to be
       * resumed after disconnecting without retransmitting all the data that
       * matches the target. The resume token essentially identifies a point in
       * time from which the server should resume sending results.
       */
  n
  /** An RPC error indicating why the watch failed. */ , r) {
      void 0 === n && (n = J$1.EMPTY_BYTE_STRING), void 0 === r && (r = null), this.state = t, 
      this.targetIds = e, this.resumeToken = n, this.cause = r;
  }, pn = /** @class */ function() {
      function t() {
          /**
           * The number of pending responses (adds or removes) that we are waiting on.
           * We only consider targets active that have no pending responses.
           */
          this.S = 0, 
          /**
               * Keeps track of the document changes since the last raised snapshot.
               *
               * These changes are continuously updated as we receive document updates and
               * always reflect the current set of changes against the last issued snapshot.
               */
          this.D = mn(), 
          /** See public getters for explanations of these fields. */
          this.C = J$1.EMPTY_BYTE_STRING, this.N = !1, 
          /**
               * Whether this target state should be included in the next snapshot. We
               * initialize to true so that newly-added targets are included in the next
               * RemoteEvent.
               */
          this.k = !0;
      }
      return Object.defineProperty(t.prototype, "current", {
          /**
           * Whether this target has been marked 'current'.
           *
           * 'Current' has special meaning in the RPC protocol: It implies that the
           * Watch backend has sent us all changes up to the point at which the target
           * was added and that the target is consistent with the rest of the watch
           * stream.
           */
          get: function() {
              return this.N;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "resumeToken", {
          /** The last resume token sent to us for this target. */ get: function() {
              return this.C;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "F", {
          /** Whether this target has pending target adds or target removes. */ get: function() {
              return 0 !== this.S;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "$", {
          /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
              return this.k;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */
      t.prototype.O = function(t) {
          t.approximateByteSize() > 0 && (this.k = !0, this.C = t);
      }, 
      /**
       * Creates a target change from the current set of changes.
       *
       * To reset the document changes after raising this snapshot, call
       * `clearPendingChanges()`.
       */
      t.prototype.M = function() {
          var t = sn(), e = sn(), n = sn();
          return this.D.forEach((function(r, i) {
              switch (i) {
                case 0 /* Added */ :
                  t = t.add(r);
                  break;

                case 2 /* Modified */ :
                  e = e.add(r);
                  break;

                case 1 /* Removed */ :
                  n = n.add(r);
                  break;

                default:
                  O$1();
              }
          })), new hn(this.C, this.N, t, e, n);
      }, 
      /**
       * Resets the document changes and sets `hasPendingChanges` to false.
       */
      t.prototype.L = function() {
          this.k = !1, this.D = mn();
      }, t.prototype.B = function(t, e) {
          this.k = !0, this.D = this.D.insert(t, e);
      }, t.prototype.q = function(t) {
          this.k = !0, this.D = this.D.remove(t);
      }, t.prototype.U = function() {
          this.S += 1;
      }, t.prototype.K = function() {
          this.S -= 1;
      }, t.prototype.j = function() {
          this.k = !0, this.N = !0;
      }, t;
  }(), yn = /** @class */ function() {
      function t(t) {
          this.W = t, 
          /** The internal state of all tracked targets. */
          this.G = new Map, 
          /** Keeps track of the documents to update since the last raised snapshot. */
          this.H = Ze(), 
          /** A mapping of document keys to their set of target IDs. */
          this.J = vn(), 
          /**
               * A list of targets with existence filter mismatches. These targets are
               * known to be inconsistent and their listens needs to be re-established by
               * RemoteStore.
               */
          this.Y = new $e(q$1)
          /**
       * Processes and adds the DocumentWatchChange to the current set of changes.
       */;
      }
      return t.prototype.X = function(t) {
          for (var e = 0, n = t.v; e < n.length; e++) {
              var r = n[e];
              t.P && t.P.isFoundDocument() ? this.Z(r, t.P) : this.tt(r, t.key, t.P);
          }
          for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
              r = o[i];
              this.tt(r, t.key, t.P);
          }
      }, 
      /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.et = function(t) {
          var e = this;
          this.forEachTarget(t, (function(n) {
              var r = e.nt(n);
              switch (t.state) {
                case 0 /* NoChange */ :
                  e.st(n) && r.O(t.resumeToken);
                  break;

                case 1 /* Added */ :
                  // We need to decrement the number of pending acks needed from watch
                  // for this targetId.
                  r.K(), r.F || 
                  // We have a freshly added target, so we need to reset any state
                  // that we had previously. This can happen e.g. when remove and add
                  // back a target for existence filter mismatches.
                  r.L(), r.O(t.resumeToken);
                  break;

                case 2 /* Removed */ :
                  // We need to keep track of removed targets to we can post-filter and
                  // remove any target changes.
                  // We need to decrement the number of pending acks needed from watch
                  // for this targetId.
                  r.K(), r.F || e.removeTarget(n);
                  break;

                case 3 /* Current */ :
                  e.st(n) && (r.j(), r.O(t.resumeToken));
                  break;

                case 4 /* Reset */ :
                  e.st(n) && (
                  // Reset the target and synthesizes removes for all existing
                  // documents. The backend will re-add any documents that still
                  // match the target before it sends the next global snapshot.
                  e.it(n), r.O(t.resumeToken));
                  break;

                default:
                  O$1();
              }
          }));
      }, 
      /**
       * Iterates over all targetIds that the watch change applies to: either the
       * targetIds explicitly listed in the change or the targetIds of all currently
       * active targets.
       */
      t.prototype.forEachTarget = function(t, e) {
          var n = this;
          t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.G.forEach((function(t, r) {
              n.st(r) && e(r);
          }));
      }, 
      /**
       * Handles existence filters and synthesizes deletes for filter mismatches.
       * Targets that are invalidated by filter mismatches are added to
       * `pendingTargetResets`.
       */
      t.prototype.rt = function(t) {
          var e = t.targetId, n = t.V.count, r = this.ot(e);
          if (r) {
              var i = r.target;
              if (xt(i)) if (0 === n) {
                  // The existence filter told us the document does not exist. We deduce
                  // that this document does not exist and apply a deleted document to
                  // our updates. Without applying this deleted document there might be
                  // another query that will raise this document as part of a snapshot
                  // until it is resolved, essentially exposing inconsistency between
                  // queries.
                  var o = new ct(i.path);
                  this.tt(e, o, Nt.newNoDocument(o, K$1.min()));
              } else P$1(1 === n); else this.ct(e) !== n && (
              // Existence filter mismatch: We reset the mapping and raise a new
              // snapshot with `isFromCache:true`.
              this.it(e), this.Y = this.Y.add(e));
          }
      }, 
      /**
       * Converts the currently accumulated state into a remote event at the
       * provided snapshot version. Resets the accumulated changes before returning.
       */
      t.prototype.ut = function(t) {
          var e = this, n = new Map;
          this.G.forEach((function(r, i) {
              var o = e.ot(i);
              if (o) {
                  if (r.current && xt(o.target)) {
                      // Document queries for document that don't exist can produce an empty
                      // result set. To update our local cache, we synthesize a document
                      // delete if we have not previously received the document. This
                      // resolves the limbo state of the document, removing it from
                      // limboDocumentRefs.
                      // TODO(dimond): Ideally we would have an explicit lookup target
                      // instead resulting in an explicit delete message and we could
                      // remove this special logic.
                      var s = new ct(o.target.path);
                      null !== e.H.get(s) || e.at(i, s) || e.tt(i, s, Nt.newNoDocument(s, t));
                  }
                  r.$ && (n.set(i, r.M()), r.L());
              }
          }));
          var r = sn();
          // We extract the set of limbo-only document updates as the GC logic
          // special-cases documents that do not appear in the target cache.
          // TODO(gsoltis): Expand on this comment once GC is available in the JS
          // client.
                  this.J.forEach((function(t, n) {
              var i = !0;
              n.forEachWhile((function(t) {
                  var n = e.ot(t);
                  return !n || 2 /* LimboResolution */ === n.purpose || (i = !1, !1);
              })), i && (r = r.add(t));
          }));
          var i = new cn(t, n, this.Y, this.H, r);
          return this.H = Ze(), this.J = vn(), this.Y = new $e(q$1), i;
      }, 
      /**
       * Adds the provided document to the internal list of document updates and
       * its document key to the given target's mapping.
       */
      // Visible for testing.
      t.prototype.Z = function(t, e) {
          if (this.st(t)) {
              var n = this.at(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
              this.nt(t).B(e.key, n), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t));
          }
      }, 
      /**
       * Removes the provided document from the target mapping. If the
       * document no longer matches the target, but the document's state is still
       * known (e.g. we know that the document was deleted or we received the change
       * that caused the filter mismatch), the new document can be provided
       * to update the remote document cache.
       */
      // Visible for testing.
      t.prototype.tt = function(t, e, n) {
          if (this.st(t)) {
              var r = this.nt(t);
              this.at(t, e) ? r.B(e, 1 /* Removed */) : 
              // The document may have entered and left the target before we raised a
              // snapshot, so we can just ignore the change.
              r.q(e), this.J = this.J.insert(e, this.ht(e).delete(t)), n && (this.H = this.H.insert(e, n));
          }
      }, t.prototype.removeTarget = function(t) {
          this.G.delete(t);
      }, 
      /**
       * Returns the current count of documents in the target. This includes both
       * the number of documents that the LocalStore considers to be part of the
       * target as well as any accumulated changes.
       */
      t.prototype.ct = function(t) {
          var e = this.nt(t).M();
          return this.W.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
      }, 
      /**
       * Increment the number of acks needed from watch before we can consider the
       * server to be 'in-sync' with the client's active targets.
       */
      t.prototype.U = function(t) {
          this.nt(t).U();
      }, t.prototype.nt = function(t) {
          var e = this.G.get(t);
          return e || (e = new pn, this.G.set(t, e)), e;
      }, t.prototype.ht = function(t) {
          var e = this.J.get(t);
          return e || (e = new $e(q$1), this.J = this.J.insert(t, e)), e;
      }, 
      /**
       * Verifies that the user is still interested in this target (by calling
       * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
       * from watch.
       */
      t.prototype.st = function(t) {
          var e = null !== this.ot(t);
          return e || C$1("WatchChangeAggregator", "Detected inactive target", t), e;
      }, 
      /**
       * Returns the TargetData for an active target (i.e. a target that the user
       * is still interested in that has no outstanding target change requests).
       */
      t.prototype.ot = function(t) {
          var e = this.G.get(t);
          return e && e.F ? null : this.W.lt(t);
      }, 
      /**
       * Resets the state of a Watch target to its initial state (e.g. sets
       * 'current' to false, clears the resume token and removes its target mapping
       * from all documents).
       */
      t.prototype.it = function(t) {
          var e = this;
          this.G.set(t, new pn), this.W.getRemoteKeysForTarget(t).forEach((function(n) {
              e.tt(t, n, /*updatedDocument=*/ null);
          }));
      }, 
      /**
       * Returns whether the LocalStore considers the document to be part of the
       * specified target.
       */
      t.prototype.at = function(t, e) {
          return this.W.getRemoteKeysForTarget(t).has(e);
      }, t;
  }();

  /**
   * A TargetChange specifies the set of changes for a specific target as part of
   * a RemoteEvent. These changes track which documents are added, modified or
   * removed, as well as the target's resume token and whether the target is
   * marked CURRENT.
   * The actual changes *to* documents are not part of the TargetChange since
   * documents may be part of multiple targets.
   */ function vn() {
      return new We(ct.comparator);
  }

  function mn() {
      return new We(ct.comparator);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var gn = {
      asc: "ASCENDING",
      desc: "DESCENDING"
  }, wn = {
      "<": "LESS_THAN",
      "<=": "LESS_THAN_OR_EQUAL",
      ">": "GREATER_THAN",
      ">=": "GREATER_THAN_OR_EQUAL",
      "==": "EQUAL",
      "!=": "NOT_EQUAL",
      "array-contains": "ARRAY_CONTAINS",
      in: "IN",
      "not-in": "NOT_IN",
      "array-contains-any": "ARRAY_CONTAINS_ANY"
  }, bn = function(t, e) {
      this.databaseId = t, this.I = e;
  };

  /**
   * This class generates JsonObject values for the Datastore API suitable for
   * sending to either GRPC stub methods or via the JSON/HTTP REST API.
   *
   * The serializer supports both Protobuf.js and Proto3 JSON formats. By
   * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
   * format.
   *
   * For a description of the Proto3 JSON format check
   * https://developers.google.com/protocol-buffers/docs/proto3#json
   *
   * TODO(klimt): We can remove the databaseId argument if we keep the full
   * resource name in documents.
   */
  /**
   * Returns a value for a Date that's appropriate to put into a proto.
   */
  function In(t, e) {
      return t.I ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
          seconds: "" + e.seconds,
          nanos: e.nanoseconds
      };
  }

  /**
   * Returns a value for bytes that's appropriate to put in a proto.
   *
   * Visible for testing.
   */ function Tn(t, e) {
      return t.I ? e.toBase64() : e.toUint8Array();
  }

  /**
   * Returns a ByteString based on the proto string value.
   */ function En(t, e) {
      return In(t, e.toTimestamp());
  }

  function _n(t) {
      return P$1(!!t), K$1.fromTimestamp(function(t) {
          var e = tt(t);
          return new j(e.seconds, e.nanos);
      }(t));
  }

  function Sn(t, e) {
      return function(t) {
          return new H$1([ "projects", t.projectId, "databases", t.database ]);
      }(t).child("documents").child(e).canonicalString();
  }

  function Nn(t) {
      var e = H$1.fromString(t);
      return P$1($n(e)), e;
  }

  function Dn(t, e) {
      return Sn(t.databaseId, e.path);
  }

  function An(t, e) {
      var n = Nn(e);
      if (n.get(1) !== t.databaseId.projectId) throw new D$1(N$1.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
      if (n.get(3) !== t.databaseId.database) throw new D$1(N$1.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
      return new ct(Rn(n));
  }

  function kn(t, e) {
      return Sn(t.databaseId, e);
  }

  function Cn(t) {
      var e = Nn(t);
      // In v1beta1 queries for collections at the root did not have a trailing
      // "/documents". In v1 all resource paths contain "/documents". Preserve the
      // ability to read the v1beta1 form for compatibility with queries persisted
      // in the local target cache.
          return 4 === e.length ? H$1.emptyPath() : Rn(e);
  }

  function xn(t) {
      return new H$1([ "projects", t.databaseId.projectId, "databases", t.databaseId.database ]).canonicalString();
  }

  function Rn(t) {
      return P$1(t.length > 4 && "documents" === t.get(4)), t.popFirst(5)
      /** Creates a Document proto from key and fields (but no create/update time) */;
  }

  function Ln(t, e, n) {
      return {
          name: Dn(t, e),
          fields: n.value.mapValue.fields
      };
  }

  function On(t, e, n) {
      var r = An(t, e.name), i = _n(e.updateTime), o = new _t({
          mapValue: {
              fields: e.fields
          }
      }), s = Nt.newFoundDocument(r, i, o);
      return n && s.setHasCommittedMutations(), n ? s.setHasCommittedMutations() : s;
  }

  function Pn(t, e) {
      var n;
      if (e instanceof Pe) n = {
          update: Ln(t, e.key, e.value)
      }; else if (e instanceof je) n = {
          delete: Dn(t, e.key)
      }; else if (e instanceof Fe) n = {
          update: Ln(t, e.key, e.data),
          updateMask: Yn(e.fieldMask)
      }; else {
          if (!(e instanceof Ke)) return O$1();
          n = {
              verify: Dn(t, e.key)
          };
      }
      return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((function(t) {
          return function(t, e) {
              var n = e.transform;
              if (n instanceof me) return {
                  fieldPath: e.field.canonicalString(),
                  setToServerValue: "REQUEST_TIME"
              };
              if (n instanceof ge) return {
                  fieldPath: e.field.canonicalString(),
                  appendMissingElements: {
                      values: n.elements
                  }
              };
              if (n instanceof be) return {
                  fieldPath: e.field.canonicalString(),
                  removeAllFromArray: {
                      values: n.elements
                  }
              };
              if (n instanceof Te) return {
                  fieldPath: e.field.canonicalString(),
                  increment: n.A
              };
              throw O$1();
          }(0, t);
      }))), e.precondition.isNone || (n.currentDocument = function(t, e) {
          return void 0 !== e.updateTime ? {
              updateTime: En(t, e.updateTime)
          } : void 0 !== e.exists ? {
              exists: e.exists
          } : O$1();
      }(t, e.precondition)), n;
  }

  function Fn(t, e) {
      var n = e.currentDocument ? function(t) {
          return void 0 !== t.updateTime ? De.updateTime(_n(t.updateTime)) : void 0 !== t.exists ? De.exists(t.exists) : De.none();
      }(e.currentDocument) : De.none(), r = e.updateTransforms ? e.updateTransforms.map((function(e) {
          return function(t, e) {
              var n = null;
              if ("setToServerValue" in e) P$1("REQUEST_TIME" === e.setToServerValue), n = new me; else if ("appendMissingElements" in e) {
                  var r = e.appendMissingElements.values || [];
                  n = new ge(r);
              } else if ("removeAllFromArray" in e) {
                  var i = e.removeAllFromArray.values || [];
                  n = new be(i);
              } else "increment" in e ? n = new Te(t, e.increment) : O$1();
              var o = $.fromServerFormat(e.fieldPath);
              return new Se(o, n);
          }(t, e);
      })) : [];
      if (e.update) {
          e.update.name;
          var i = An(t, e.update.name), o = new _t({
              mapValue: {
                  fields: e.update.fields
              }
          });
          if (e.updateMask) {
              var s = function(t) {
                  var e = t.fieldPaths || [];
                  return new X$1(e.map((function(t) {
                      return $.fromServerFormat(t);
                  })));
              }(e.updateMask);
              return new Fe(i, o, s, n, r);
          }
          return new Pe(i, o, n, r);
      }
      if (e.delete) {
          var u = An(t, e.delete);
          return new je(u, n);
      }
      if (e.verify) {
          var a = An(t, e.verify);
          return new Ke(a, n);
      }
      return O$1();
  }

  function Mn(t, e) {
      return {
          documents: [ kn(t, e.path) ]
      };
  }

  function Vn(t, e) {
      // Dissect the path into parent, collectionId, and optional key filter.
      var n = {
          structuredQuery: {}
      }, r = e.path;
      null !== e.collectionGroup ? (n.parent = kn(t, r), n.structuredQuery.from = [ {
          collectionId: e.collectionGroup,
          allDescendants: !0
      } ]) : (n.parent = kn(t, r.popLast()), n.structuredQuery.from = [ {
          collectionId: r.lastSegment()
      } ]);
      var i = function(t) {
          if (0 !== t.length) {
              var e = t.map((function(t) {
                  // visible for testing
                  return function(t) {
                      if ("==" /* EQUAL */ === t.op) {
                          if (It(t.value)) return {
                              unaryFilter: {
                                  field: Gn(t.field),
                                  op: "IS_NAN"
                              }
                          };
                          if (bt(t.value)) return {
                              unaryFilter: {
                                  field: Gn(t.field),
                                  op: "IS_NULL"
                              }
                          };
                      } else if ("!=" /* NOT_EQUAL */ === t.op) {
                          if (It(t.value)) return {
                              unaryFilter: {
                                  field: Gn(t.field),
                                  op: "IS_NOT_NAN"
                              }
                          };
                          if (bt(t.value)) return {
                              unaryFilter: {
                                  field: Gn(t.field),
                                  op: "IS_NOT_NULL"
                              }
                          };
                      }
                      return {
                          fieldFilter: {
                              field: Gn(t.field),
                              op: Qn(t.op),
                              value: t.value
                          }
                      };
                  }(t);
              }));
              return 1 === e.length ? e[0] : {
                  compositeFilter: {
                      op: "AND",
                      filters: e
                  }
              };
          }
      }(e.filters);
      i && (n.structuredQuery.where = i);
      var o = function(t) {
          if (0 !== t.length) return t.map((function(t) {
              // visible for testing
              return function(t) {
                  return {
                      field: Gn(t.field),
                      direction: Kn(t.dir)
                  };
              }(t);
          }));
      }(e.orderBy);
      o && (n.structuredQuery.orderBy = o);
      var s = function(t, e) {
          return t.I || st(e) ? e : {
              value: e
          };
      }(t, e.limit);
      return null !== s && (n.structuredQuery.limit = s), e.startAt && (n.structuredQuery.startAt = Bn(e.startAt)), 
      e.endAt && (n.structuredQuery.endAt = Bn(e.endAt)), n;
  }

  function qn(t) {
      var e = Cn(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
      if (r > 0) {
          P$1(1 === r);
          var o = n.from[0];
          o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
      }
      var s = [];
      n.where && (s = Un(n.where));
      var u = [];
      n.orderBy && (u = n.orderBy.map((function(t) {
          return function(t) {
              return new Kt(zn(t.field), 
              // visible for testing
              function(t) {
                  switch (t) {
                    case "ASCENDING":
                      return "asc" /* ASCENDING */;

                    case "DESCENDING":
                      return "desc" /* DESCENDING */;

                    default:
                      return;
                  }
              }(t.direction));
          }(t);
      })));
      var a = null;
      n.limit && (a = function(t) {
          var e;
          return st(e = "object" == typeof t ? t.value : t) ? null : e;
      }(n.limit));
      var c = null;
      n.startAt && (c = jn(n.startAt));
      var h = null;
      return n.endAt && (h = jn(n.endAt)), Ht(e, i, u, s, a, "F" /* First */ , c, h);
  }

  function Un(t) {
      return t ? void 0 !== t.unaryFilter ? [ Hn(t) ] : void 0 !== t.fieldFilter ? [ Wn(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
          return Un(t);
      })).reduce((function(t, e) {
          return t.concat(e);
      })) : O$1() : [];
  }

  function Bn(t) {
      return {
          before: t.before,
          values: t.position
      };
  }

  function jn(t) {
      var e = !!t.before, n = t.values || [];
      return new Bt(n, e);
  }

  // visible for testing
  function Kn(t) {
      return gn[t];
  }

  function Qn(t) {
      return wn[t];
  }

  function Gn(t) {
      return {
          fieldPath: t.canonicalString()
      };
  }

  function zn(t) {
      return $.fromServerFormat(t.fieldPath);
  }

  function Wn(t) {
      return Rt.create(zn(t.fieldFilter.field), function(t) {
          switch (t) {
            case "EQUAL":
              return "==" /* EQUAL */;

            case "NOT_EQUAL":
              return "!=" /* NOT_EQUAL */;

            case "GREATER_THAN":
              return ">" /* GREATER_THAN */;

            case "GREATER_THAN_OR_EQUAL":
              return ">=" /* GREATER_THAN_OR_EQUAL */;

            case "LESS_THAN":
              return "<" /* LESS_THAN */;

            case "LESS_THAN_OR_EQUAL":
              return "<=" /* LESS_THAN_OR_EQUAL */;

            case "ARRAY_CONTAINS":
              return "array-contains" /* ARRAY_CONTAINS */;

            case "IN":
              return "in" /* IN */;

            case "NOT_IN":
              return "not-in" /* NOT_IN */;

            case "ARRAY_CONTAINS_ANY":
              return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

            case "OPERATOR_UNSPECIFIED":
            default:
              return O$1();
          }
      }(t.fieldFilter.op), t.fieldFilter.value);
  }

  function Hn(t) {
      switch (t.unaryFilter.op) {
        case "IS_NAN":
          var e = zn(t.unaryFilter.field);
          return Rt.create(e, "==" /* EQUAL */ , {
              doubleValue: NaN
          });

        case "IS_NULL":
          var n = zn(t.unaryFilter.field);
          return Rt.create(n, "==" /* EQUAL */ , {
              nullValue: "NULL_VALUE"
          });

        case "IS_NOT_NAN":
          var r = zn(t.unaryFilter.field);
          return Rt.create(r, "!=" /* NOT_EQUAL */ , {
              doubleValue: NaN
          });

        case "IS_NOT_NULL":
          var i = zn(t.unaryFilter.field);
          return Rt.create(i, "!=" /* NOT_EQUAL */ , {
              nullValue: "NULL_VALUE"
          });

        case "OPERATOR_UNSPECIFIED":
        default:
          return O$1();
      }
  }

  function Yn(t) {
      var e = [];
      return t.fields.forEach((function(t) {
          return e.push(t.canonicalString());
      })), {
          fieldPaths: e
      };
  }

  function $n(t) {
      // Resource names have at least 4 components (project ID, database ID)
      return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Encodes a resource path into a IndexedDb-compatible string form.
   */ function Xn(t) {
      for (var e = "", n = 0; n < t.length; n++) e.length > 0 && (e = Zn(e)), e = Jn(t.get(n), e);
      return Zn(e);
  }

  /** Encodes a single segment of a resource path into the given result */ function Jn(t, e) {
      for (var n = e, r = t.length, i = 0; i < r; i++) {
          var o = t.charAt(i);
          switch (o) {
            case "\0":
              n += "";
              break;

            case "":
              n += "";
              break;

            default:
              n += o;
          }
      }
      return n;
  }

  /** Encodes a path separator into the given result */ function Zn(t) {
      return t + "";
  }

  /**
   * Decodes the given IndexedDb-compatible string form of a resource path into
   * a ResourcePath instance. Note that this method is not suitable for use with
   * decoding resource names from the server; those are One Platform format
   * strings.
   */ function tr(t) {
      // Event the empty path must encode as a path of at least length 2. A path
      // with exactly 2 must be the empty path.
      var e = t.length;
      if (P$1(e >= 2), 2 === e) return P$1("" === t.charAt(0) && "" === t.charAt(1)), H$1.emptyPath();
      // Escape characters cannot exist past the second-to-last position in the
      // source value.
          for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
          // The last two characters of a valid encoded path must be a separator, so
          // there must be an end to this segment.
          var s = t.indexOf("", o);
          switch ((s < 0 || s > n) && O$1(), t.charAt(s + 1)) {
            case "":
              var u = t.substring(o, s), a = void 0;
              0 === i.length ? 
              // Avoid copying for the common case of a segment that excludes \0
              // and \001
              a = u : (a = i += u, i = ""), r.push(a);
              break;

            case "":
              i += t.substring(o, s), i += "\0";
              break;

            case "":
              // The escape character can be used in the output to encode itself.
              i += t.substring(o, s + 1);
              break;

            default:
              O$1();
          }
          o = s + 2;
      }
      return new H$1(r);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Schema Version for the Web client:
   * 1.  Initial version including Mutation Queue, Query Cache, and Remote
   *     Document Cache
   * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
   *     longer required because migration 3 unconditionally clears it.
   * 3.  Dropped and re-created Query Cache to deal with cache corruption related
   *     to limbo resolution. Addresses
   *     https://github.com/firebase/firebase-ios-sdk/issues/1548
   * 4.  Multi-Tab Support.
   * 5.  Removal of held write acks.
   * 6.  Create document global for tracking document cache size.
   * 7.  Ensure every cached document has a sentinel row with a sequence number.
   * 8.  Add collection-parent index for Collection Group queries.
   * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
   *     an auto-incrementing ID. This is required for Index-Free queries.
   * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
   * 11. Add bundles and named_queries for bundle support.
   */
  /**
   * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
   */ var er = function(t, e) {
      this.seconds = t, this.nanoseconds = e;
  }, nr = function(t, 
  /** Whether to allow shared access from multiple tabs. */
  e, n) {
      this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
  };

  /**
   * A singleton object to be stored in the 'owner' store in IndexedDb.
   *
   * A given database can have a single primary tab assigned at a given time. That
   * tab must validate that it is still holding the primary lease before every
   * operation that requires locked access. The primary tab should regularly
   * write an updated timestamp to this lease to prevent other tabs from
   * "stealing" the primary lease
   */
  /**
   * Name of the IndexedDb object store.
   *
   * Note that the name 'owner' is chosen to ensure backwards compatibility with
   * older clients that only supported single locked access to the persistence
   * layer.
   */
  nr.store = "owner", 
  /**
       * The key string used for the single object that exists in the
       * DbPrimaryClient store.
       */
  nr.key = "owner";

  /**
   * An object to be stored in the 'mutationQueues' store in IndexedDb.
   *
   * Each user gets a single queue of MutationBatches to apply to the server.
   * DbMutationQueue tracks the metadata about the queue.
   */
  var rr = function(
  /**
       * The normalized user ID to which this queue belongs.
       */
  t, 
  /**
       * An identifier for the highest numbered batch that has been acknowledged
       * by the server. All MutationBatches in this queue with batchIds less
       * than or equal to this value are considered to have been acknowledged by
       * the server.
       *
       * NOTE: this is deprecated and no longer used by the code.
       */
  e, 
  /**
       * A stream token that was previously sent by the server.
       *
       * See StreamingWriteRequest in datastore.proto for more details about
       * usage.
       *
       * After sending this token, earlier tokens may not be used anymore so
       * only a single stream token is retained.
       *
       * NOTE: this is deprecated and no longer used by the code.
       */
  n) {
      this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
  };

  /** Name of the IndexedDb object store.  */ rr.store = "mutationQueues", 
  /** Keys are automatically assigned via the userId property. */
  rr.keyPath = "userId";

  /**
   * An object to be stored in the 'mutations' store in IndexedDb.
   *
   * Represents a batch of user-level mutations intended to be sent to the server
   * in a single write. Each user-level batch gets a separate DbMutationBatch
   * with a new batchId.
   */
  var ir = function(
  /**
       * The normalized user ID to which this batch belongs.
       */
  t, 
  /**
       * An identifier for this batch, allocated using an auto-generated key.
       */
  e, 
  /**
       * The local write time of the batch, stored as milliseconds since the
       * epoch.
       */
  n, 
  /**
       * A list of "mutations" that represent a partial base state from when this
       * write batch was initially created. During local application of the write
       * batch, these baseMutations are applied prior to the real writes in order
       * to override certain document fields from the remote document cache. This
       * is necessary in the case of non-idempotent writes (e.g. `increment()`
       * transforms) to make sure that the local view of the modified documents
       * doesn't flicker if the remote document cache receives the result of the
       * non-idempotent write before the write is removed from the queue.
       *
       * These mutations are never sent to the backend.
       */
  r, 
  /**
       * A list of mutations to apply. All mutations will be applied atomically.
       *
       * Mutations are serialized via toMutation().
       */
  i) {
      this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, 
      this.mutations = i;
  };

  /** Name of the IndexedDb object store.  */ ir.store = "mutations", 
  /** Keys are automatically assigned via the userId, batchId properties. */
  ir.keyPath = "batchId", 
  /** The index name for lookup of mutations by user. */
  ir.userMutationsIndex = "userMutationsIndex", 
  /** The user mutations index is keyed by [userId, batchId] pairs. */
  ir.userMutationsKeyPath = [ "userId", "batchId" ];

  /**
   * An object to be stored in the 'documentMutations' store in IndexedDb.
   *
   * A manually maintained index of all the mutation batches that affect a given
   * document key. The rows in this table are references based on the contents of
   * DbMutationBatch.mutations.
   */
  var or = /** @class */ function() {
      function t() {}
      /**
       * Creates a [userId] key for use in the DbDocumentMutations index to iterate
       * over all of a user's document mutations.
       */    return t.prefixForUser = function(t) {
          return [ t ];
      }, 
      /**
       * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
       * index to iterate over all at document mutations for a given path or lower.
       */
      t.prefixForPath = function(t, e) {
          return [ t, Xn(e) ];
      }, 
      /**
       * Creates a full index key of [userId, encodedPath, batchId] for inserting
       * and deleting into the DbDocumentMutations index.
       */
      t.key = function(t, e, n) {
          return [ t, Xn(e), n ];
      }, t;
  }();

  or.store = "documentMutations", 
  /**
       * Because we store all the useful information for this store in the key,
       * there is no useful information to store as the value. The raw (unencoded)
       * path cannot be stored because IndexedDb doesn't store prototype
       * information.
       */
  or.PLACEHOLDER = new or;

  /**
   * Represents the known absence of a document at a particular version.
   * Stored in IndexedDb as part of a DbRemoteDocument object.
   */
  var sr = function(t, e) {
      this.path = t, this.readTime = e;
  }, ur = function(t, e) {
      this.path = t, this.version = e;
  }, ar = 
  // TODO: We are currently storing full document keys almost three times
  // (once as part of the primary key, once - partly - as `parentPath` and once
  // inside the encoded documents). During our next migration, we should
  // rewrite the primary key as parentPath + document ID which would allow us
  // to drop one value.
  function(
  /**
       * Set to an instance of DbUnknownDocument if the data for a document is
       * not known, but it is known that a document exists at the specified
       * version (e.g. it had a successful update applied to it)
       */
  t, 
  /**
       * Set to an instance of a DbNoDocument if it is known that no document
       * exists.
       */
  e, 
  /**
       * Set to an instance of a Document if there's a cached version of the
       * document.
       */
  n, 
  /**
       * Documents that were written to the remote document store based on
       * a write acknowledgment are marked with `hasCommittedMutations`. These
       * documents are potentially inconsistent with the backend's copy and use
       * the write's commit version as their document version.
       */
  r, 
  /**
       * When the document was read from the backend. Undefined for data written
       * prior to schema version 9.
       */
  i, 
  /**
       * The path of the collection this document is part of. Undefined for data
       * written prior to schema version 9.
       */
  o) {
      this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, 
      this.readTime = i, this.parentPath = o;
  };

  /**
   * Represents a document that is known to exist but whose data is unknown.
   * Stored in IndexedDb as part of a DbRemoteDocument object.
   */ ar.store = "remoteDocuments", 
  /**
       * An index that provides access to all entries sorted by read time (which
       * corresponds to the last modification time of each row).
       *
       * This index is used to provide a changelog for Multi-Tab.
       */
  ar.readTimeIndex = "readTimeIndex", ar.readTimeIndexPath = "readTime", 
  /**
       * An index that provides access to documents in a collection sorted by read
       * time.
       *
       * This index is used to allow the RemoteDocumentCache to fetch newly changed
       * documents in a collection.
       */
  ar.collectionReadTimeIndex = "collectionReadTimeIndex", ar.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

  /**
   * Contains a single entry that has metadata about the remote document cache.
   */
  var cr = 
  /**
       * @param byteSize - Approximately the total size in bytes of all the
       * documents in the document cache.
       */
  function(t) {
      this.byteSize = t;
  };

  cr.store = "remoteDocumentGlobal", cr.key = "remoteDocumentGlobalKey";

  /**
   * An object to be stored in the 'targets' store in IndexedDb.
   *
   * This is based on and should be kept in sync with the proto used in the iOS
   * client.
   *
   * Each query the client listens to against the server is tracked on disk so
   * that the query can be efficiently resumed on restart.
   */
  var hr = function(
  /**
       * An auto-generated sequential numeric identifier for the query.
       *
       * Queries are stored using their canonicalId as the key, but these
       * canonicalIds can be quite long so we additionally assign a unique
       * queryId which can be used by referenced data structures (e.g.
       * indexes) to minimize the on-disk cost.
       */
  t, 
  /**
       * The canonical string representing this query. This is not unique.
       */
  e, 
  /**
       * The last readTime received from the Watch Service for this query.
       *
       * This is the same value as TargetChange.read_time in the protos.
       */
  n, 
  /**
       * An opaque, server-assigned token that allows watching a query to be
       * resumed after disconnecting without retransmitting all the data
       * that matches the query. The resume token essentially identifies a
       * point in time from which the server should resume sending results.
       *
       * This is related to the snapshotVersion in that the resumeToken
       * effectively also encodes that value, but the resumeToken is opaque
       * and sometimes encodes additional information.
       *
       * A consequence of this is that the resumeToken should be used when
       * asking the server to reason about where this client is in the watch
       * stream, but the client should use the snapshotVersion for its own
       * purposes.
       *
       * This is the same value as TargetChange.resume_token in the protos.
       */
  r, 
  /**
       * A sequence number representing the last time this query was
       * listened to, used for garbage collection purposes.
       *
       * Conventionally this would be a timestamp value, but device-local
       * clocks are unreliable and they must be able to create new listens
       * even while disconnected. Instead this should be a monotonically
       * increasing number that's incremented on each listen call.
       *
       * This is different from the queryId since the queryId is an
       * immutable identifier assigned to the Query on first use while
       * lastListenSequenceNumber is updated every time the query is
       * listened to.
       */
  i, 
  /**
       * Denotes the maximum snapshot version at which the associated query view
       * contained no limbo documents.  Undefined for data written prior to
       * schema version 9.
       */
  o, 
  /**
       * The query for this target.
       *
       * Because canonical ids are not unique we must store the actual query. We
       * use the proto to have an object we can persist without having to
       * duplicate translation logic to and from a `Query` object.
       */
  s) {
      this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, 
      this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
  };

  hr.store = "targets", 
  /** Keys are automatically assigned via the targetId property. */
  hr.keyPath = "targetId", 
  /** The name of the queryTargets index. */
  hr.queryTargetsIndexName = "queryTargetsIndex", 
  /**
       * The index of all canonicalIds to the targets that they match. This is not
       * a unique mapping because canonicalId does not promise a unique name for all
       * possible queries, so we append the targetId to make the mapping unique.
       */
  hr.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

  /**
   * An object representing an association between a target and a document, or a
   * sentinel row marking the last sequence number at which a document was used.
   * Each document cached must have a corresponding sentinel row before lru
   * garbage collection is enabled.
   *
   * The target associations and sentinel rows are co-located so that orphaned
   * documents and their sequence numbers can be identified efficiently via a scan
   * of this store.
   */
  var fr = function(
  /**
       * The targetId identifying a target or 0 for a sentinel row.
       */
  t, 
  /**
       * The path to the document, as encoded in the key.
       */
  e, 
  /**
       * If this is a sentinel row, this should be the sequence number of the last
       * time the document specified by `path` was used. Otherwise, it should be
       * `undefined`.
       */
  n) {
      this.targetId = t, this.path = e, this.sequenceNumber = n;
  };

  /** Name of the IndexedDb object store.  */ fr.store = "targetDocuments", 
  /** Keys are automatically assigned via the targetId, path properties. */
  fr.keyPath = [ "targetId", "path" ], 
  /** The index name for the reverse index. */
  fr.documentTargetsIndex = "documentTargetsIndex", 
  /** We also need to create the reverse index for these properties. */
  fr.documentTargetsKeyPath = [ "path", "targetId" ];

  /**
   * A record of global state tracked across all Targets, tracked separately
   * to avoid the need for extra indexes.
   *
   * This should be kept in-sync with the proto used in the iOS client.
   */
  var lr = function(
  /**
       * The highest numbered target id across all targets.
       *
       * See DbTarget.targetId.
       */
  t, 
  /**
       * The highest numbered lastListenSequenceNumber across all targets.
       *
       * See DbTarget.lastListenSequenceNumber.
       */
  e, 
  /**
       * A global snapshot version representing the last consistent snapshot we
       * received from the backend. This is monotonically increasing and any
       * snapshots received from the backend prior to this version (e.g. for
       * targets resumed with a resumeToken) should be suppressed (buffered)
       * until the backend has caught up to this snapshot version again. This
       * prevents our cache from ever going backwards in time.
       */
  n, 
  /**
       * The number of targets persisted.
       */
  r) {
      this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
      this.targetCount = r;
  };

  /**
   * The key string used for the single object that exists in the
   * DbTargetGlobal store.
   */ lr.key = "targetGlobalKey", lr.store = "targetGlobal";

  /**
   * An object representing an association between a Collection id (e.g. 'messages')
   * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
   * This is used to efficiently find all collections to query when performing
   * a Collection Group query.
   */
  var dr = function(
  /**
       * The collectionId (e.g. 'messages')
       */
  t, 
  /**
       * The path to the parent (either a document location or an empty path for
       * a root-level collection).
       */
  e) {
      this.collectionId = t, this.parent = e;
  };

  /** Name of the IndexedDb object store. */ dr.store = "collectionParents", 
  /** Keys are automatically assigned via the collectionId, parent properties. */
  dr.keyPath = [ "collectionId", "parent" ];

  /**
   * A record of the metadata state of each client.
   *
   * PORTING NOTE: This is used to synchronize multi-tab state and does not need
   * to be ported to iOS or Android.
   */
  var pr = function(
  // Note: Previous schema versions included a field
  // "lastProcessedDocumentChangeId". Don't use anymore.
  /** The auto-generated client id assigned at client startup. */
  t, 
  /** The last time this state was updated. */
  e, 
  /** Whether the client's network connection is enabled. */
  n, 
  /** Whether this client is running in a foreground tab. */
  r) {
      this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
  };

  /** Name of the IndexedDb object store. */ pr.store = "clientMetadata", 
  /** Keys are automatically assigned via the clientId properties. */
  pr.keyPath = "clientId";

  /**
   * A object representing a bundle loaded by the SDK.
   */
  var yr = function(
  /** The ID of the loaded bundle. */
  t, 
  /** The create time of the loaded bundle. */
  e, 
  /** The schema version of the loaded bundle. */
  n) {
      this.bundleId = t, this.createTime = e, this.version = n;
  };

  /** Name of the IndexedDb object store. */ yr.store = "bundles", yr.keyPath = "bundleId";

  /**
   * A object representing a named query loaded by the SDK via a bundle.
   */
  var vr = function(
  /** The name of the query. */
  t, 
  /** The read time of the results saved in the bundle from the named query. */
  e, 
  /** The query saved in the bundle. */
  n) {
      this.name = t, this.readTime = e, this.bundledQuery = n;
  };

  /** Name of the IndexedDb object store. */ vr.store = "namedQueries", vr.keyPath = "name";

  // Visible for testing
  var mr = __spreadArray$5(__spreadArray$5([], __spreadArray$5(__spreadArray$5([], __spreadArray$5(__spreadArray$5([], __spreadArray$5(__spreadArray$5([], [ rr.store, ir.store, or.store, ar.store, hr.store, nr.store, lr.store, fr.store ]), [ pr.store ])), [ cr.store ])), [ dr.store ])), [ yr.store, vr.store ]), gr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", wr = /** @class */ function() {
      function t() {
          this.onCommittedListeners = [];
      }
      return t.prototype.addOnCommittedListener = function(t) {
          this.onCommittedListeners.push(t);
      }, t.prototype.raiseOnCommittedEvent = function() {
          this.onCommittedListeners.forEach((function(t) {
              return t();
          }));
      }, t;
  }(), br = function() {
      var t = this;
      this.promise = new Promise((function(e, n) {
          t.resolve = e, t.reject = n;
      }));
  }, Ir = /** @class */ function() {
      function t(t) {
          var e = this;
          // NOTE: next/catchCallback will always point to our own wrapper functions,
          // not the user's raw next() or catch() callbacks.
                  this.nextCallback = null, this.catchCallback = null, 
          // When the operation resolves, we'll set result or error and mark isDone.
          this.result = void 0, this.error = void 0, this.isDone = !1, 
          // Set to true when .then() or .catch() are called and prevents additional
          // chaining.
          this.callbackAttached = !1, t((function(t) {
              e.isDone = !0, e.result = t, e.nextCallback && 
              // value should be defined unless T is Void, but we can't express
              // that in the type system.
              e.nextCallback(t);
          }), (function(t) {
              e.isDone = !0, e.error = t, e.catchCallback && e.catchCallback(t);
          }));
      }
      return t.prototype.catch = function(t) {
          return this.next(void 0, t);
      }, t.prototype.next = function(e, n) {
          var r = this;
          return this.callbackAttached && O$1(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(n, this.error) : this.wrapSuccess(e, this.result) : new t((function(t, i) {
              r.nextCallback = function(n) {
                  r.wrapSuccess(e, n).next(t, i);
              }, r.catchCallback = function(e) {
                  r.wrapFailure(n, e).next(t, i);
              };
          }));
      }, t.prototype.toPromise = function() {
          var t = this;
          return new Promise((function(e, n) {
              t.next(e, n);
          }));
      }, t.prototype.wrapUserFunction = function(e) {
          try {
              var n = e();
              return n instanceof t ? n : t.resolve(n);
          } catch (e) {
              return t.reject(e);
          }
      }, t.prototype.wrapSuccess = function(e, n) {
          return e ? this.wrapUserFunction((function() {
              return e(n);
          })) : t.resolve(n);
      }, t.prototype.wrapFailure = function(e, n) {
          return e ? this.wrapUserFunction((function() {
              return e(n);
          })) : t.reject(n);
      }, t.resolve = function(e) {
          return new t((function(t, n) {
              t(e);
          }));
      }, t.reject = function(e) {
          return new t((function(t, n) {
              n(e);
          }));
      }, t.waitFor = function(
      // Accept all Promise types in waitFor().
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      e) {
          return new t((function(t, n) {
              var r = 0, i = 0, o = !1;
              e.forEach((function(e) {
                  ++r, e.next((function() {
                      ++i, o && i === r && t();
                  }), (function(t) {
                      return n(t);
                  }));
              })), o = !0, i === r && t();
          }));
      }, 
      /**
       * Given an array of predicate functions that asynchronously evaluate to a
       * boolean, implements a short-circuiting `or` between the results. Predicates
       * will be evaluated until one of them returns `true`, then stop. The final
       * result will be whether any of them returned `true`.
       */
      t.or = function(e) {
          for (var n = t.resolve(!1), r = function(e) {
              n = n.next((function(n) {
                  return n ? t.resolve(n) : e();
              }));
          }, i = 0, o = e; i < o.length; i++) {
              r(o[i]);
          }
          return n;
      }, t.forEach = function(t, e) {
          var n = this, r = [];
          return t.forEach((function(t, i) {
              r.push(e.call(n, t, i));
          })), this.waitFor(r);
      }, t;
  }(), Tr = /** @class */ function() {
      function t(t, e) {
          var n = this;
          this.action = t, this.transaction = e, this.aborted = !1, 
          /**
               * A promise that resolves with the result of the IndexedDb transaction.
               */
          this.ft = new br, this.transaction.oncomplete = function() {
              n.ft.resolve();
          }, this.transaction.onabort = function() {
              e.error ? n.ft.reject(new Sr(t, e.error)) : n.ft.resolve();
          }, this.transaction.onerror = function(e) {
              var r = Cr(e.target.error);
              n.ft.reject(new Sr(t, r));
          };
      }
      return t.open = function(e, n, r, i) {
          try {
              return new t(n, e.transaction(i, r));
          } catch (e) {
              throw new Sr(n, e);
          }
      }, Object.defineProperty(t.prototype, "dt", {
          get: function() {
              return this.ft.promise;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.abort = function(t) {
          t && this.ft.reject(t), this.aborted || (C$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
          this.aborted = !0, this.transaction.abort());
      }, 
      /**
       * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
       * operations performed on the SimpleDbStore happen within the context of this
       * transaction and it cannot be used anymore once the transaction is
       * completed.
       *
       * Note that we can't actually enforce that the KeyType and ValueType are
       * correct, but they allow type safety through the rest of the consuming code.
       */
      t.prototype.store = function(t) {
          var e = this.transaction.objectStore(t);
          return new Dr(e);
      }, t;
  }(), Er = /** @class */ function() {
      /*
       * Creates a new SimpleDb wrapper for IndexedDb database `name`.
       *
       * Note that `version` must not be a downgrade. IndexedDB does not support
       * downgrading the schema version. We currently do not support any way to do
       * versioning outside of IndexedDB's versioning mechanism, as only
       * version-upgrade transactions are allowed to do things like create
       * objectstores.
       */
      function t(e, n, r) {
          this.name = e, this.version = n, this.wt = r, 
          // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
          // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
          // whatever reason it's much harder to hit after 12.2 so we only proactively
          // log on 12.2.
          12.2 === t._t(getUA()) && x$1("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      }
      /** Deletes the specified database. */    return t.delete = function(t) {
          return C$1("SimpleDb", "Removing database:", t), Ar(window.indexedDB.deleteDatabase(t)).toPromise();
      }, 
      /** Returns true if IndexedDB is available in the current environment. */ t.yt = function() {
          if ("undefined" == typeof indexedDB) return !1;
          if (t.gt()) return !0;
          // We extensively use indexed array values and compound keys,
          // which IE and Edge do not support. However, they still have indexedDB
          // defined on the window, so we need to check for them here and make sure
          // to return that persistence is not enabled for those browsers.
          // For tracking support of this feature, see here:
          // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
          // Check the UA string to find out the browser.
                  var e = getUA(), n = t._t(e), r = 0 < n && n < 10, o = t.Et(e), s = 0 < o && o < 4.5;
          // IE 10
          // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
          // IE 11
          // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
          // Edge
          // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
          // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
          // iOS Safari: Disable for users running iOS version < 10.
                  return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || r || s);
      }, 
      /**
       * Returns true if the backing IndexedDB store is the Node IndexedDBShim
       * (see https://github.com/axemclion/IndexedDBShim).
       */
      t.gt = function() {
          var t;
          return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Tt);
      }, 
      /** Helper to get a typed SimpleDbStore from a transaction. */ t.It = function(t, e) {
          return t.store(e);
      }, 
      // visible for testing
      /** Parse User Agent to determine iOS version. Returns -1 if not found. */
      t._t = function(t) {
          var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
          return Number(n);
      }, 
      // visible for testing
      /** Parse User Agent to determine Android version. Returns -1 if not found. */
      t.Et = function(t) {
          var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
          return Number(n);
      }, 
      /**
       * Opens the specified database, creating or upgrading it if necessary.
       */
      t.prototype.At = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var e, n = this;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return this.db ? [ 3 /*break*/ , 2 ] : (C$1("SimpleDb", "Opening database:", this.name), 
                      e = this, [ 4 /*yield*/ , new Promise((function(e, r) {
                          // TODO(mikelehen): Investigate browser compatibility.
                          // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                          // suggests IE9 and older WebKit browsers handle upgrade
                          // differently. They expect setVersion, as described here:
                          // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                          var i = indexedDB.open(n.name, n.version);
                          i.onsuccess = function(t) {
                              var n = t.target.result;
                              e(n);
                          }, i.onblocked = function() {
                              r(new Sr(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                          }, i.onerror = function(e) {
                              var n = e.target.error;
                              "VersionError" === n.name ? r(new D$1(N$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r(new Sr(t, n));
                          }, i.onupgradeneeded = function(t) {
                              C$1("SimpleDb", 'Database "' + n.name + '" requires upgrade from version:', t.oldVersion);
                              var e = t.target.result;
                              n.wt.Rt(e, i.transaction, t.oldVersion, n.version).next((function() {
                                  C$1("SimpleDb", "Database upgrade to version " + n.version + " complete");
                              }));
                          };
                      })) ]);

                    case 1:
                      e.db = r.sent(), r.label = 2;

                    case 2:
                      return [ 2 /*return*/ , (this.bt && (this.db.onversionchange = function(t) {
                          return n.bt(t);
                      }), this.db) ];
                  }
              }));
          }));
      }, t.prototype.vt = function(t) {
          this.bt = t, this.db && (this.db.onversionchange = function(e) {
              return t(e);
          });
      }, t.prototype.runTransaction = function(t, e, i, o) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var n, s, u, a, c;
              return __generator$6(this, (function(h) {
                  switch (h.label) {
                    case 0:
                      n = "readonly" === e, s = 0, u = function() {
                          var e, u, c, h, f;
                          return __generator$6(this, (function(r) {
                              switch (r.label) {
                                case 0:
                                  ++s, r.label = 1;

                                case 1:
                                  return r.trys.push([ 1, 4, , 5 ]), [ 4 /*yield*/ , a.At(t) ];

                                case 2:
                                  // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                  // fire), but still return the original transactionFnResult back to the
                                  // caller.
                                  return a.db = r.sent(), e = Tr.open(a.db, t, n ? "readonly" : "readwrite", i), u = o(e).catch((function(t) {
                                      // Abort the transaction if there was an error.
                                      return e.abort(t), Ir.reject(t);
                                  })).toPromise(), c = {}, u.catch((function() {})), [ 4 /*yield*/ , e.dt ];

                                case 3:
                                  return [ 2 /*return*/ , (c.value = (
                                  // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                  // fire), but still return the original transactionFnResult back to the
                                  // caller.
                                  r.sent(), u), c) ];

                                case 4:
                                  return h = r.sent(), f = "FirebaseError" !== h.name && s < 3, C$1("SimpleDb", "Transaction failed with error:", h.message, "Retrying:", f), 
                                  a.close(), f ? [ 3 /*break*/ , 5 ] : [ 2 /*return*/ , {
                                      value: Promise.reject(h)
                                  } ];

                                case 5:
                                  return [ 2 /*return*/ ];
                              }
                          }));
                      }, a = this, h.label = 1;

                    case 1:
                      return [ 5 /*yield**/ , u() ];

                    case 2:
                      if ("object" == typeof (c = h.sent())) return [ 2 /*return*/ , c.value ];
                      h.label = 3;

                    case 3:
                      return [ 3 /*break*/ , 1 ];

                    case 4:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.close = function() {
          this.db && this.db.close(), this.db = void 0;
      }, t;
  }(), _r = /** @class */ function() {
      function t(t) {
          this.Pt = t, this.Vt = !1, this.St = null;
      }
      return Object.defineProperty(t.prototype, "isDone", {
          get: function() {
              return this.Vt;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "Dt", {
          get: function() {
              return this.St;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "cursor", {
          set: function(t) {
              this.Pt = t;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * This function can be called to stop iteration at any point.
       */
      t.prototype.done = function() {
          this.Vt = !0;
      }, 
      /**
       * This function can be called to skip to that next key, which could be
       * an index or a primary key.
       */
      t.prototype.Ct = function(t) {
          this.St = t;
      }, 
      /**
       * Delete the current cursor value from the object store.
       *
       * NOTE: You CANNOT do this with a keysOnly query.
       */
      t.prototype.delete = function() {
          return Ar(this.Pt.delete());
      }, t;
  }(), Sr = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, N$1.UNAVAILABLE, "IndexedDB transaction '" + t + "' failed: " + n) || this).name = "IndexedDbTransactionError", 
          r;
      }
      return __extends$6(n, e), n;
  }(D$1);

  // V2 is no longer usable (see comment at top of file)
  // Visible for testing
  /**
   * A base class representing a persistence transaction, encapsulating both the
   * transaction's sequence numbers as well as a list of onCommitted listeners.
   *
   * When you call Persistence.runTransaction(), it will create a transaction and
   * pass it to your callback. You then pass it to any method that operates
   * on persistence.
   */
  /** Verifies whether `e` is an IndexedDbTransactionError. */ function Nr(t) {
      // Use name equality, as instanceof checks on errors don't work with errors
      // that wrap other errors.
      return "IndexedDbTransactionError" === t.name;
  }

  /**
   * A wrapper around an IDBObjectStore providing an API that:
   *
   * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
   * methods for acting against the object store.
   * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
   * method return a PersistencePromise instead.
   * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
   * intermediate IndexedDB types (IDBCursorWithValue, etc.)
   */ var Dr = /** @class */ function() {
      function t(t) {
          this.store = t;
      }
      return t.prototype.put = function(t, e) {
          var n;
          return void 0 !== e ? (C$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (C$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
          n = this.store.put(t)), Ar(n);
      }, 
      /**
       * Adds a new value into an Object Store and returns the new key. Similar to
       * IndexedDb's `add()`, this method will fail on primary key collisions.
       *
       * @param value - The object to write.
       * @returns The key of the value to add.
       */
      t.prototype.add = function(t) {
          return C$1("SimpleDb", "ADD", this.store.name, t, t), Ar(this.store.add(t));
      }, 
      /**
       * Gets the object with the specified key from the specified store, or null
       * if no object exists with the specified key.
       *
       * @key The key of the object to get.
       * @returns The object with the specified key or null if no object exists.
       */
      t.prototype.get = function(t) {
          var e = this;
          // We're doing an unsafe cast to ValueType.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  return Ar(this.store.get(t)).next((function(n) {
              // Normalize nonexistence to null.
              return void 0 === n && (n = null), C$1("SimpleDb", "GET", e.store.name, t, n), n;
          }));
      }, t.prototype.delete = function(t) {
          return C$1("SimpleDb", "DELETE", this.store.name, t), Ar(this.store.delete(t));
      }, 
      /**
       * If we ever need more of the count variants, we can add overloads. For now,
       * all we need is to count everything in a store.
       *
       * Returns the number of rows in the store.
       */
      t.prototype.count = function() {
          return C$1("SimpleDb", "COUNT", this.store.name), Ar(this.store.count());
      }, t.prototype.Nt = function(t, e) {
          var n = this.cursor(this.options(t, e)), r = [];
          return this.xt(n, (function(t, e) {
              r.push(e);
          })).next((function() {
              return r;
          }));
      }, t.prototype.kt = function(t, e) {
          C$1("SimpleDb", "DELETE ALL", this.store.name);
          var n = this.options(t, e);
          n.Ft = !1;
          var r = this.cursor(n);
          return this.xt(r, (function(t, e, n) {
              return n.delete();
          }));
      }, t.prototype.$t = function(t, e) {
          var n;
          e ? n = t : (n = {}, e = t);
          var r = this.cursor(n);
          return this.xt(r, e);
      }, 
      /**
       * Iterates over a store, but waits for the given callback to complete for
       * each entry before iterating the next entry. This allows the callback to do
       * asynchronous work to determine if this iteration should continue.
       *
       * The provided callback should return `true` to continue iteration, and
       * `false` otherwise.
       */
      t.prototype.Ot = function(t) {
          var e = this.cursor({});
          return new Ir((function(n, r) {
              e.onerror = function(t) {
                  var e = Cr(t.target.error);
                  r(e);
              }, e.onsuccess = function(e) {
                  var r = e.target.result;
                  r ? t(r.primaryKey, r.value).next((function(t) {
                      t ? r.continue() : n();
                  })) : n();
              };
          }));
      }, t.prototype.xt = function(t, e) {
          var n = [];
          return new Ir((function(r, i) {
              t.onerror = function(t) {
                  i(t.target.error);
              }, t.onsuccess = function(t) {
                  var i = t.target.result;
                  if (i) {
                      var o = new _r(i), s = e(i.primaryKey, i.value, o);
                      if (s instanceof Ir) {
                          var u = s.catch((function(t) {
                              return o.done(), Ir.reject(t);
                          }));
                          n.push(u);
                      }
                      o.isDone ? r() : null === o.Dt ? i.continue() : i.continue(o.Dt);
                  } else r();
              };
          })).next((function() {
              return Ir.waitFor(n);
          }));
      }, t.prototype.options = function(t, e) {
          var n;
          return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
              index: n,
              range: e
          };
      }, t.prototype.cursor = function(t) {
          var e = "next";
          if (t.reverse && (e = "prev"), t.index) {
              var n = this.store.index(t.index);
              return t.Ft ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
          }
          return this.store.openCursor(t.range, e);
      }, t;
  }();

  /**
   * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
   * handlers to resolve / reject the PersistencePromise as appropriate.
   */ function Ar(t) {
      return new Ir((function(e, n) {
          t.onsuccess = function(t) {
              var n = t.target.result;
              e(n);
          }, t.onerror = function(t) {
              var e = Cr(t.target.error);
              n(e);
          };
      }));
  }

  // Guard so we only report the error once.
  var kr = !1;

  function Cr(t) {
      var e = Er._t(getUA());
      if (e >= 12.2 && e < 13) {
          var n = "An internal error was encountered in the Indexed Database server";
          if (t.message.indexOf(n) >= 0) {
              // Wrap error in a more descriptive one.
              var r = new D$1("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
              return kr || (kr = !0, 
              // Throw a global exception outside of this promise chain, for the user to
              // potentially catch.
              setTimeout((function() {
                  throw r;
              }), 0)), r;
          }
      }
      return t;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var xr = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).Mt = t, r.currentSequenceNumber = n, r;
      }
      return __extends$6(n, e), n;
  }(wr);

  function Rr(t, e) {
      var n = F$1(t);
      return Er.It(n.Mt, e);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A batch of mutations that will be sent as one unit to the backend.
   */ var Lr = /** @class */ function() {
      /**
       * @param batchId - The unique ID of this mutation batch.
       * @param localWriteTime - The original write time of this mutation.
       * @param baseMutations - Mutations that are used to populate the base
       * values when this mutation is applied locally. This can be used to locally
       * overwrite values that are persisted in the remote document cache. Base
       * mutations are never sent to the backend.
       * @param mutations - The user-provided mutations in this mutation batch.
       * User-provided mutations are applied both locally and remotely on the
       * backend.
       */
      function t(t, e, n, r) {
          this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = r
          /**
       * Applies all the mutations in this MutationBatch to the specified document
       * to compute the state of the remote document
       *
       * @param document - The document to apply mutations to.
       * @param batchResult - The result of applying the MutationBatch to the
       * backend.
       */;
      }
      return t.prototype.applyToRemoteDocument = function(t, e) {
          for (var n = e.mutationResults, r = 0; r < this.mutations.length; r++) {
              var i = this.mutations[r];
              i.key.isEqual(t.key) && Ce(i, t, n[r]);
          }
      }, 
      /**
       * Computes the local view of a document given all the mutations in this
       * batch.
       *
       * @param document - The document to apply mutations to.
       */
      t.prototype.applyToLocalView = function(t) {
          // First, apply the base state. This allows us to apply non-idempotent
          // transform against a consistent set of values.
          for (var e = 0, n = this.baseMutations; e < n.length; e++) {
              (o = n[e]).key.isEqual(t.key) && xe(o, t, this.localWriteTime);
          }
          // Second, apply all user-provided mutations.
                  for (var r = 0, i = this.mutations; r < i.length; r++) {
              var o;
              (o = i[r]).key.isEqual(t.key) && xe(o, t, this.localWriteTime);
          }
      }, 
      /**
       * Computes the local view for all provided documents given the mutations in
       * this batch.
       */
      t.prototype.applyToLocalDocumentSet = function(t) {
          var e = this;
          // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
          // directly (as done in `applyToLocalView()`), we can reduce the complexity
          // to O(n).
                  this.mutations.forEach((function(n) {
              var r = t.get(n.key), i = r;
              // TODO(mutabledocuments): This method should take a MutableDocumentMap
              // and we should remove this cast.
                          e.applyToLocalView(i), r.isValidDocument() || i.convertToNoDocument(K$1.min());
          }));
      }, t.prototype.keys = function() {
          return this.mutations.reduce((function(t, e) {
              return t.add(e.key);
          }), sn());
      }, t.prototype.isEqual = function(t) {
          return this.batchId === t.batchId && U$1(this.mutations, t.mutations, (function(t, e) {
              return Le(t, e);
          })) && U$1(this.baseMutations, t.baseMutations, (function(t, e) {
              return Le(t, e);
          }));
      }, t;
  }(), Or = /** @class */ function() {
      function t(t, e, n, 
      /**
       * A pre-computed mapping from each mutated document to the resulting
       * version.
       */
      r) {
          this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = r
          /**
       * Creates a new MutationBatchResult for the given batch and results. There
       * must be one result for each mutation in the batch. This static factory
       * caches a document=&gt;version mapping (docVersions).
       */;
      }
      return t.from = function(e, n, r) {
          P$1(e.mutations.length === r.length);
          for (var i = rn(), o = e.mutations, s = 0; s < o.length; s++) i = i.insert(o[s].key, r[s].version);
          return new t(e, n, r, i);
      }, t;
  }(), Pr = /** @class */ function() {
      function t(
      /** The target being listened to. */
      t, 
      /**
       * The target ID to which the target corresponds; Assigned by the
       * LocalStore for user listens and by the SyncEngine for limbo watches.
       */
      e, 
      /** The purpose of the target. */
      n, 
      /**
       * The sequence number of the last transaction during which this target data
       * was modified.
       */
      r, 
      /** The latest snapshot version seen for this target. */
      i
      /**
       * The maximum snapshot version at which the associated view
       * contained no limbo documents.
       */ , o
      /**
       * An opaque, server-assigned token that allows watching a target to be
       * resumed after disconnecting without retransmitting all the data that
       * matches the target. The resume token essentially identifies a point in
       * time from which the server should resume sending results.
       */ , s) {
          void 0 === i && (i = K$1.min()), void 0 === o && (o = K$1.min()), void 0 === s && (s = J$1.EMPTY_BYTE_STRING), 
          this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, 
          this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
      }
      /** Creates a new target data instance with an updated sequence number. */    return t.prototype.withSequenceNumber = function(e) {
          return new t(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
      }, 
      /**
       * Creates a new target data instance with an updated resume token and
       * snapshot version.
       */
      t.prototype.withResumeToken = function(e, n) {
          return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
      }, 
      /**
       * Creates a new target data instance with an updated last limbo free
       * snapshot version number.
       */
      t.prototype.withLastLimboFreeSnapshotVersion = function(e) {
          return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken);
      }, t;
  }(), Fr = function(t) {
      this.Lt = t;
  };

  /** The result of applying a mutation batch to the backend. */
  /** Decodes a remote document from storage locally to a Document. */ function Mr(t, e) {
      if (e.document) return On(t.Lt, e.document, !!e.hasCommittedMutations);
      if (e.noDocument) {
          var n = ct.fromSegments(e.noDocument.path), r = jr(e.noDocument.readTime), i = Nt.newNoDocument(n, r);
          return e.hasCommittedMutations ? i.setHasCommittedMutations() : i;
      }
      if (e.unknownDocument) {
          var o = ct.fromSegments(e.unknownDocument.path);
          r = jr(e.unknownDocument.version);
          return Nt.newUnknownDocument(o, r);
      }
      return O$1();
  }

  /** Encodes a document for storage locally. */ function Vr(t, e, n) {
      var r = qr(n), i = e.key.path.popLast().toArray();
      if (e.isFoundDocument()) {
          var o = function(t, e) {
              return {
                  name: Dn(t, e.key),
                  fields: e.data.value.mapValue.fields,
                  updateTime: In(t, e.version.toTimestamp())
              };
          }(t.Lt, e), s = e.hasCommittedMutations;
          return new ar(
          /* unknownDocument= */ null, 
          /* noDocument= */ null, o, s, r, i);
      }
      if (e.isNoDocument()) {
          var u = e.key.path.toArray(), a = Br(e.version);
          s = e.hasCommittedMutations;
          return new ar(
          /* unknownDocument= */ null, new sr(u, a), 
          /* document= */ null, s, r, i);
      }
      if (e.isUnknownDocument()) {
          var c = e.key.path.toArray(), h = Br(e.version);
          return new ar(new ur(c, h), 
          /* noDocument= */ null, 
          /* document= */ null, 
          /* hasCommittedMutations= */ !0, r, i);
      }
      return O$1();
  }

  function qr(t) {
      var e = t.toTimestamp();
      return [ e.seconds, e.nanoseconds ];
  }

  function Ur(t) {
      var e = new j(t[0], t[1]);
      return K$1.fromTimestamp(e);
  }

  function Br(t) {
      var e = t.toTimestamp();
      return new er(e.seconds, e.nanoseconds);
  }

  function jr(t) {
      var e = new j(t.seconds, t.nanoseconds);
      return K$1.fromTimestamp(e);
  }

  /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
  /** Decodes a DbMutationBatch into a MutationBatch */ function Kr(t, e) {
      // Squash old transform mutations into existing patch or set mutations.
      // The replacement of representing `transforms` with `update_transforms`
      // on the SDK means that old `transform` mutations stored in IndexedDB need
      // to be updated to `update_transforms`.
      // TODO(b/174608374): Remove this code once we perform a schema migration.
      for (var n = (e.baseMutations || []).map((function(e) {
          return Fn(t.Lt, e);
      })), r = 0; r < e.mutations.length - 1; ++r) {
          var i = e.mutations[r];
          if (r + 1 < e.mutations.length && void 0 !== e.mutations[r + 1].transform) {
              var o = e.mutations[r + 1];
              i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r + 1, 1), 
              ++r;
          }
      }
      var s = e.mutations.map((function(e) {
          return Fn(t.Lt, e);
      })), u = j.fromMillis(e.localWriteTimeMs);
      return new Lr(e.batchId, u, n, s);
  }

  /** Decodes a DbTarget into TargetData */ function Qr(t) {
      var e, n, r = jr(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? jr(t.lastLimboFreeSnapshotVersion) : K$1.min();
      return void 0 !== t.query.documents ? (P$1(1 === (n = t.query).documents.length), 
      e = ne(Yt(Cn(n.documents[0])))) : e = function(t) {
          return ne(qn(t));
      }(t.query), new Pr(e, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, r, i, J$1.fromBase64String(t.resumeToken))
      /** Encodes TargetData into a DbTarget for storage locally. */;
  }

  function Gr(t, e) {
      var n, r = Br(e.snapshotVersion), i = Br(e.lastLimboFreeSnapshotVersion);
      n = xt(e.target) ? Mn(t.Lt, e.target) : Vn(t.Lt, e.target);
      // We can't store the resumeToken as a ByteString in IndexedDb, so we
      // convert it to a base64 string for storage.
      var o = e.resumeToken.toBase64();
      // lastListenSequenceNumber is always 0 until we do real GC.
          return new hr(e.targetId, kt(e.target), r, o, e.sequenceNumber, i, n);
  }

  /**
   * A helper function for figuring out what kind of query has been stored.
   */
  /**
   * Encodes a `BundledQuery` from bundle proto to a Query object.
   *
   * This reconstructs the original query used to build the bundle being loaded,
   * including features exists only in SDKs (for example: limit-to-last).
   */ function zr(t) {
      var e = qn({
          parent: t.parent,
          structuredQuery: t.structuredQuery
      });
      return "LAST" === t.limitType ? re(e, e.limit, "L" /* Last */) : e;
  }

  /** Encodes a NamedQuery proto object to a NamedQuery model object. */
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var Wr = /** @class */ function() {
      function t() {}
      return t.prototype.getBundleMetadata = function(t, e) {
          return Hr(t).get(e).next((function(t) {
              if (t) return {
                  id: (e = t).bundleId,
                  createTime: jr(e.createTime),
                  version: e.version
              };
              /** Encodes a DbBundle to a BundleMetadata object. */            var e;
              /** Encodes a BundleMetadata to a DbBundle. */        }));
      }, t.prototype.saveBundleMetadata = function(t, e) {
          return Hr(t).put({
              bundleId: (n = e).id,
              createTime: Br(_n(n.createTime)),
              version: n.version
          });
          var n;
          /** Encodes a DbNamedQuery to a NamedQuery. */    }, t.prototype.getNamedQuery = function(t, e) {
          return Yr(t).get(e).next((function(t) {
              if (t) return {
                  name: (e = t).name,
                  query: zr(e.bundledQuery),
                  readTime: jr(e.readTime)
              };
              var e;
              /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
      }, t.prototype.saveNamedQuery = function(t, e) {
          return Yr(t).put(function(t) {
              return {
                  name: t.name,
                  readTime: Br(_n(t.readTime)),
                  bundledQuery: t.bundledQuery
              };
          }(e));
      }, t;
  }();

  /**
   * Helper to get a typed SimpleDbStore for the bundles object store.
   */ function Hr(t) {
      return Rr(t, yr.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the namedQueries object store.
   */ function Yr(t) {
      return Rr(t, vr.store);
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An in-memory implementation of IndexManager.
   */ var $r = /** @class */ function() {
      function t() {
          this.Bt = new Xr;
      }
      return t.prototype.addToCollectionParentIndex = function(t, e) {
          return this.Bt.add(e), Ir.resolve();
      }, t.prototype.getCollectionParents = function(t, e) {
          return Ir.resolve(this.Bt.getEntries(e));
      }, t;
  }(), Xr = /** @class */ function() {
      function t() {
          this.index = {};
      }
      // Returns false if the entry already existed.
          return t.prototype.add = function(t) {
          var e = t.lastSegment(), n = t.popLast(), r = this.index[e] || new $e(H$1.comparator), i = !r.has(n);
          return this.index[e] = r.add(n), i;
      }, t.prototype.has = function(t) {
          var e = t.lastSegment(), n = t.popLast(), r = this.index[e];
          return r && r.has(n);
      }, t.prototype.getEntries = function(t) {
          return (this.index[t] || new $e(H$1.comparator)).toArray();
      }, t;
  }(), Jr = /** @class */ function() {
      function t() {
          /**
           * An in-memory copy of the index entries we've already written since the SDK
           * launched. Used to avoid re-writing the same entry repeatedly.
           *
           * This is *NOT* a complete cache of what's in persistence and so can never be used to
           * satisfy reads.
           */
          this.qt = new Xr;
      }
      /**
       * Adds a new entry to the collection parent index.
       *
       * Repeated calls for the same collectionPath should be avoided within a
       * transaction as IndexedDbIndexManager only caches writes once a transaction
       * has been committed.
       */    return t.prototype.addToCollectionParentIndex = function(t, e) {
          var n = this;
          if (!this.qt.has(e)) {
              var r = e.lastSegment(), i = e.popLast();
              t.addOnCommittedListener((function() {
                  // Add the collection to the in memory cache only if the transaction was
                  // successfully committed.
                  n.qt.add(e);
              }));
              var o = {
                  collectionId: r,
                  parent: Xn(i)
              };
              return Zr(t).put(o);
          }
          return Ir.resolve();
      }, t.prototype.getCollectionParents = function(t, e) {
          var n = [], r = IDBKeyRange.bound([ e, "" ], [ B$1(e), "" ], 
          /*lowerOpen=*/ !1, 
          /*upperOpen=*/ !0);
          return Zr(t).Nt(r).next((function(t) {
              for (var r = 0, i = t; r < i.length; r++) {
                  var o = i[r];
                  // This collectionId guard shouldn't be necessary (and isn't as long
                  // as we're running in a real browser), but there's a bug in
                  // indexeddbshim that breaks our range in our tests running in node:
                  // https://github.com/axemclion/IndexedDBShim/issues/334
                                  if (o.collectionId !== e) break;
                  n.push(tr(o.parent));
              }
              return n;
          }));
      }, t;
  }();

  /**
   * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
   * Also used for in-memory caching by IndexedDbIndexManager and initial index population
   * in indexeddb_schema.ts
   */
  /**
   * Helper to get a typed SimpleDbStore for the collectionParents
   * document store.
   */
  function Zr(t) {
      return Rr(t, dr.store);
  }

  /**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var ti = {
      didRun: !1,
      sequenceNumbersCollected: 0,
      targetsRemoved: 0,
      documentsRemoved: 0
  }, ei = /** @class */ function() {
      function t(
      // When we attempt to collect, we will only do so if the cache size is greater than this
      // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
      t, 
      // The percentage of sequence numbers that we will attempt to collect
      e, 
      // A cap on the total number of sequence numbers that will be collected. This prevents
      // us from collecting a huge number of sequence numbers if the cache has grown very large.
      n) {
          this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
      }
      return t.withCacheSize = function(e) {
          return new t(e, t.DEFAULT_COLLECTION_PERCENTILE, t.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Delete a mutation batch and the associated document mutations.
   * @returns A PersistencePromise of the document mutations that were removed.
   */
  function ni(t, e, n) {
      var r = t.store(ir.store), i = t.store(or.store), o = [], s = IDBKeyRange.only(n.batchId), u = 0, a = r.$t({
          range: s
      }, (function(t, e, n) {
          return u++, n.delete();
      }));
      o.push(a.next((function() {
          P$1(1 === u);
      })));
      for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
          var l = f[h], d = or.key(e, l.key.path, n.batchId);
          o.push(i.delete(d)), c.push(l.key);
      }
      return Ir.waitFor(o).next((function() {
          return c;
      }));
  }

  /**
   * Returns an approximate size for the given document.
   */ function ri(t) {
      if (!t) return 0;
      var e;
      if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
          if (!t.noDocument) throw O$1();
          e = t.noDocument;
      }
      return JSON.stringify(e).length;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** A mutation queue for a specific user, backed by IndexedDB. */ ei.DEFAULT_COLLECTION_PERCENTILE = 10, 
  ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, ei.DEFAULT = new ei(41943040, ei.DEFAULT_COLLECTION_PERCENTILE, ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), 
  ei.DISABLED = new ei(-1, 0, 0);

  var ii = /** @class */ function() {
      function t(
      /**
       * The normalized userId (e.g. null UID => "" userId) used to store /
       * retrieve mutations.
       */
      t, e, n, r) {
          this.userId = t, this.R = e, this.Ut = n, this.referenceDelegate = r, 
          /**
               * Caches the document keys for pending mutation batches. If the mutation
               * has been removed from IndexedDb, the cached value may continue to
               * be used to retrieve the batch's document keys. To remove a cached value
               * locally, `removeCachedMutationKeys()` should be invoked either directly
               * or through `removeMutationBatches()`.
               *
               * With multi-tab, when the primary client acknowledges or rejects a mutation,
               * this cache is used by secondary clients to invalidate the local
               * view of the documents that were previously affected by the mutation.
               */
          // PORTING NOTE: Multi-tab only.
          this.Kt = {}
          /**
       * Creates a new mutation queue for the given user.
       * @param user - The user for which to create a mutation queue.
       * @param serializer - The serializer to use when persisting to IndexedDb.
       */;
      }
      return t.Qt = function(e, n, r, i) {
          // TODO(mcg): Figure out what constraints there are on userIDs
          // In particular, are there any reserved characters? are empty ids allowed?
          // For the moment store these together in the same mutations table assuming
          // that empty userIDs aren't allowed.
          return P$1("" !== e.uid), new t(e.isAuthenticated() ? e.uid : "", n, r, i);
      }, t.prototype.checkEmpty = function(t) {
          var e = !0, n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
          return si(t).$t({
              index: ir.userMutationsIndex,
              range: n
          }, (function(t, n, r) {
              e = !1, r.done();
          })).next((function() {
              return e;
          }));
      }, t.prototype.addMutationBatch = function(t, e, n, r) {
          var i = this, o = ui(t), s = si(t);
          // The IndexedDb implementation in Chrome (and Firefox) does not handle
          // compound indices that include auto-generated keys correctly. To ensure
          // that the index entry is added correctly in all browsers, we perform two
          // writes: The first write is used to retrieve the next auto-generated Batch
          // ID, and the second write populates the index and stores the actual
          // mutation batch.
          // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
          // We write an empty object to obtain key
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return s.add({}).next((function(u) {
              P$1("number" == typeof u);
              for (var a = new Lr(u, e, n, r), c = function(t, e, n) {
                  var r = n.baseMutations.map((function(e) {
                      return Pn(t.Lt, e);
                  })), i = n.mutations.map((function(e) {
                      return Pn(t.Lt, e);
                  }));
                  return new ir(e, n.batchId, n.localWriteTime.toMillis(), r, i);
              }(i.R, i.userId, a), h = [], f = new $e((function(t, e) {
                  return q$1(t.canonicalString(), e.canonicalString());
              })), l = 0, d = r; l < d.length; l++) {
                  var p = d[l], y = or.key(i.userId, p.key.path, u);
                  f = f.add(p.key.path.popLast()), h.push(s.put(c)), h.push(o.put(y, or.PLACEHOLDER));
              }
              return f.forEach((function(e) {
                  h.push(i.Ut.addToCollectionParentIndex(t, e));
              })), t.addOnCommittedListener((function() {
                  i.Kt[u] = a.keys();
              })), Ir.waitFor(h).next((function() {
                  return a;
              }));
          }));
      }, t.prototype.lookupMutationBatch = function(t, e) {
          var n = this;
          return si(t).get(e).next((function(t) {
              return t ? (P$1(t.userId === n.userId), Kr(n.R, t)) : null;
          }));
      }, 
      /**
       * Returns the document keys for the mutation batch with the given batchId.
       * For primary clients, this method returns `null` after
       * `removeMutationBatches()` has been called. Secondary clients return a
       * cached result until `removeCachedMutationKeys()` is invoked.
       */
      // PORTING NOTE: Multi-tab only.
      t.prototype.jt = function(t, e) {
          var n = this;
          return this.Kt[e] ? Ir.resolve(this.Kt[e]) : this.lookupMutationBatch(t, e).next((function(t) {
              if (t) {
                  var r = t.keys();
                  return n.Kt[e] = r, r;
              }
              return null;
          }));
      }, t.prototype.getNextMutationBatchAfterBatchId = function(t, e) {
          var n = this, r = e + 1, i = IDBKeyRange.lowerBound([ this.userId, r ]), o = null;
          return si(t).$t({
              index: ir.userMutationsIndex,
              range: i
          }, (function(t, e, i) {
              e.userId === n.userId && (P$1(e.batchId >= r), o = Kr(n.R, e)), i.done();
          })).next((function() {
              return o;
          }));
      }, t.prototype.getHighestUnacknowledgedBatchId = function(t) {
          var e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), n = -1;
          return si(t).$t({
              index: ir.userMutationsIndex,
              range: e,
              reverse: !0
          }, (function(t, e, r) {
              n = e.batchId, r.done();
          })).next((function() {
              return n;
          }));
      }, t.prototype.getAllMutationBatches = function(t) {
          var e = this, n = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
          return si(t).Nt(ir.userMutationsIndex, n).next((function(t) {
              return t.map((function(t) {
                  return Kr(e.R, t);
              }));
          }));
      }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t, e) {
          var n = this, r = or.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
          // Scan the document-mutation index starting with a prefix starting with
          // the given documentKey.
                  return ui(t).$t({
              range: i
          }, (function(r, i, s) {
              var u = r[0], a = r[1], c = r[2], h = tr(a);
              // Only consider rows matching exactly the specific key of
              // interest. Note that because we order by path first, and we
              // order terminators before path separators, we'll encounter all
              // the index rows for documentKey contiguously. In particular, all
              // the rows for documentKey will occur before any rows for
              // documents nested in a subcollection beneath documentKey so we
              // can stop as soon as we hit any such row.
                          if (u === n.userId && e.path.isEqual(h)) 
              // Look up the mutation batch in the store.
              return si(t).get(c).next((function(t) {
                  if (!t) throw O$1();
                  P$1(t.userId === n.userId), o.push(Kr(n.R, t));
              }));
              s.done();
          })).next((function() {
              return o;
          }));
      }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t, e) {
          var n = this, r = new $e(q$1), i = [];
          return e.forEach((function(e) {
              var o = or.prefixForPath(n.userId, e.path), s = IDBKeyRange.lowerBound(o), u = ui(t).$t({
                  range: s
              }, (function(t, i, o) {
                  var s = t[0], u = t[1], a = t[2], c = tr(u);
                  // Only consider rows matching exactly the specific key of
                  // interest. Note that because we order by path first, and we
                  // order terminators before path separators, we'll encounter all
                  // the index rows for documentKey contiguously. In particular, all
                  // the rows for documentKey will occur before any rows for
                  // documents nested in a subcollection beneath documentKey so we
                  // can stop as soon as we hit any such row.
                                  s === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
              }));
              i.push(u);
          })), Ir.waitFor(i).next((function() {
              return n.Wt(t, r);
          }));
      }, t.prototype.getAllMutationBatchesAffectingQuery = function(t, e) {
          var n = this, r = e.path, i = r.length + 1, o = or.prefixForPath(this.userId, r), s = IDBKeyRange.lowerBound(o), u = new $e(q$1);
          return ui(t).$t({
              range: s
          }, (function(t, e, o) {
              var s = t[0], a = t[1], c = t[2], h = tr(a);
              s === n.userId && r.isPrefixOf(h) ? 
              // Rows with document keys more than one segment longer than the
              // query path can't be matches. For example, a query on 'rooms'
              // can't match the document /rooms/abc/messages/xyx.
              // TODO(mcg): we'll need a different scanner when we implement
              // ancestor queries.
              h.length === i && (u = u.add(c)) : o.done();
          })).next((function() {
              return n.Wt(t, u);
          }));
      }, t.prototype.Wt = function(t, e) {
          var n = this, r = [], i = [];
          // TODO(rockwood): Implement this using iterate.
          return e.forEach((function(e) {
              i.push(si(t).get(e).next((function(t) {
                  if (null === t) throw O$1();
                  P$1(t.userId === n.userId), r.push(Kr(n.R, t));
              })));
          })), Ir.waitFor(i).next((function() {
              return r;
          }));
      }, t.prototype.removeMutationBatch = function(t, e) {
          var n = this;
          return ni(t.Mt, this.userId, e).next((function(r) {
              return t.addOnCommittedListener((function() {
                  n.Gt(e.batchId);
              })), Ir.forEach(r, (function(e) {
                  return n.referenceDelegate.markPotentiallyOrphaned(t, e);
              }));
          }));
      }, 
      /**
       * Clears the cached keys for a mutation batch. This method should be
       * called by secondary clients after they process mutation updates.
       *
       * Note that this method does not have to be called from primary clients as
       * the corresponding cache entries are cleared when an acknowledged or
       * rejected batch is removed from the mutation queue.
       */
      // PORTING NOTE: Multi-tab only
      t.prototype.Gt = function(t) {
          delete this.Kt[t];
      }, t.prototype.performConsistencyCheck = function(t) {
          var e = this;
          return this.checkEmpty(t).next((function(n) {
              if (!n) return Ir.resolve();
              // Verify that there are no entries in the documentMutations index if
              // the queue is empty.
                          var r = IDBKeyRange.lowerBound(or.prefixForUser(e.userId)), i = [];
              return ui(t).$t({
                  range: r
              }, (function(t, n, r) {
                  if (t[0] === e.userId) {
                      var o = tr(t[1]);
                      i.push(o);
                  } else r.done();
              })).next((function() {
                  P$1(0 === i.length);
              }));
          }));
      }, t.prototype.containsKey = function(t, e) {
          return oi(t, this.userId, e);
      }, 
      // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
      /** Returns the mutation queue's metadata from IndexedDb. */
      t.prototype.zt = function(t) {
          var e = this;
          return ai(t).get(this.userId).next((function(t) {
              return t || new rr(e.userId, -1, 
              /*lastStreamToken=*/ "");
          }));
      }, t;
  }();

  /**
   * @returns true if the mutation queue for the given user contains a pending
   *         mutation for the given key.
   */ function oi(t, e, n) {
      var r = or.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), s = !1;
      return ui(t).$t({
          range: o,
          Ft: !0
      }, (function(t, n, r) {
          var o = t[0], u = t[1];
   /*batchID*/        t[2], o === e && u === i && (s = !0), 
          r.done();
      })).next((function() {
          return s;
      }));
  }

  /** Returns true if any mutation queue contains the given document. */
  /**
   * Helper to get a typed SimpleDbStore for the mutations object store.
   */ function si(t) {
      return Rr(t, ir.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the mutationQueues object store.
   */ function ui(t) {
      return Rr(t, or.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the mutationQueues object store.
   */ function ai(t) {
      return Rr(t, rr.store);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Offset to ensure non-overlapping target ids. */
  /**
   * Generates monotonically increasing target IDs for sending targets to the
   * watch stream.
   *
   * The client constructs two generators, one for the target cache, and one for
   * for the sync engine (to generate limbo documents targets). These
   * generators produce non-overlapping IDs (by using even and odd IDs
   * respectively).
   *
   * By separating the target ID space, the query cache can generate target IDs
   * that persist across client restarts, while sync engine can independently
   * generate in-memory target IDs that are transient and can be reused after a
   * restart.
   */ var ci = /** @class */ function() {
      function t(t) {
          this.Ht = t;
      }
      return t.prototype.next = function() {
          return this.Ht += 2, this.Ht;
      }, t.Jt = function() {
          // The target cache generator must return '2' in its first call to `next()`
          // as there is no differentiation in the protocol layer between an unset
          // number and the number '0'. If we were to sent a target with target ID
          // '0', the backend would consider it unset and replace it with its own ID.
          return new t(0);
      }, t.Yt = function() {
          // Sync engine assigns target IDs for limbo document detection.
          return new t(-1);
      }, t;
  }(), hi = /** @class */ function() {
      function t(t, e) {
          this.referenceDelegate = t, this.R = e;
      }
      // PORTING NOTE: We don't cache global metadata for the target cache, since
      // some of it (in particular `highestTargetId`) can be modified by secondary
      // tabs. We could perhaps be more granular (and e.g. still cache
      // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
      // to IndexedDb whenever we need to read metadata. We can revisit if it turns
      // out to have a meaningful performance impact.
          return t.prototype.allocateTargetId = function(t) {
          var e = this;
          return this.Xt(t).next((function(n) {
              var r = new ci(n.highestTargetId);
              return n.highestTargetId = r.next(), e.Zt(t, n).next((function() {
                  return n.highestTargetId;
              }));
          }));
      }, t.prototype.getLastRemoteSnapshotVersion = function(t) {
          return this.Xt(t).next((function(t) {
              return K$1.fromTimestamp(new j(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
          }));
      }, t.prototype.getHighestSequenceNumber = function(t) {
          return this.Xt(t).next((function(t) {
              return t.highestListenSequenceNumber;
          }));
      }, t.prototype.setTargetsMetadata = function(t, e, n) {
          var r = this;
          return this.Xt(t).next((function(i) {
              return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.toTimestamp()), 
              e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Zt(t, i);
          }));
      }, t.prototype.addTargetData = function(t, e) {
          var n = this;
          return this.te(t, e).next((function() {
              return n.Xt(t).next((function(r) {
                  return r.targetCount += 1, n.ee(e, r), n.Zt(t, r);
              }));
          }));
      }, t.prototype.updateTargetData = function(t, e) {
          return this.te(t, e);
      }, t.prototype.removeTargetData = function(t, e) {
          var n = this;
          return this.removeMatchingKeysForTargetId(t, e.targetId).next((function() {
              return fi(t).delete(e.targetId);
          })).next((function() {
              return n.Xt(t);
          })).next((function(e) {
              return P$1(e.targetCount > 0), e.targetCount -= 1, n.Zt(t, e);
          }));
      }, 
      /**
       * Drops any targets with sequence number less than or equal to the upper bound, excepting those
       * present in `activeTargetIds`. Document associations for the removed targets are also removed.
       * Returns the number of targets removed.
       */
      t.prototype.removeTargets = function(t, e, n) {
          var r = this, i = 0, o = [];
          return fi(t).$t((function(s, u) {
              var a = Qr(u);
              a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r.removeTargetData(t, a)));
          })).next((function() {
              return Ir.waitFor(o);
          })).next((function() {
              return i;
          }));
      }, 
      /**
       * Call provided function with each `TargetData` that we have cached.
       */
      t.prototype.forEachTarget = function(t, e) {
          return fi(t).$t((function(t, n) {
              var r = Qr(n);
              e(r);
          }));
      }, t.prototype.Xt = function(t) {
          return li(t).get(lr.key).next((function(t) {
              return P$1(null !== t), t;
          }));
      }, t.prototype.Zt = function(t, e) {
          return li(t).put(lr.key, e);
      }, t.prototype.te = function(t, e) {
          return fi(t).put(Gr(this.R, e));
      }, 
      /**
       * In-place updates the provided metadata to account for values in the given
       * TargetData. Saving is done separately. Returns true if there were any
       * changes to the metadata.
       */
      t.prototype.ee = function(t, e) {
          var n = !1;
          return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
          t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
          n = !0), n;
      }, t.prototype.getTargetCount = function(t) {
          return this.Xt(t).next((function(t) {
              return t.targetCount;
          }));
      }, t.prototype.getTargetData = function(t, e) {
          // Iterating by the canonicalId may yield more than one result because
          // canonicalId values are not required to be unique per target. This query
          // depends on the queryTargets index to be efficient.
          var n = kt(e), r = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]), i = null;
          return fi(t).$t({
              range: r,
              index: hr.queryTargetsIndexName
          }, (function(t, n, r) {
              var o = Qr(n);
              // After finding a potential match, check that the target is
              // actually equal to the requested target.
                          Ct(e, o.target) && (i = o, r.done());
          })).next((function() {
              return i;
          }));
      }, t.prototype.addMatchingKeys = function(t, e, n) {
          var r = this, i = [], o = di(t);
          // PORTING NOTE: The reverse index (documentsTargets) is maintained by
          // IndexedDb.
                  return e.forEach((function(e) {
              var s = Xn(e.path);
              i.push(o.put(new fr(n, s))), i.push(r.referenceDelegate.addReference(t, n, e));
          })), Ir.waitFor(i);
      }, t.prototype.removeMatchingKeys = function(t, e, n) {
          var r = this, i = di(t);
          // PORTING NOTE: The reverse index (documentsTargets) is maintained by
          // IndexedDb.
                  return Ir.forEach(e, (function(e) {
              var o = Xn(e.path);
              return Ir.waitFor([ i.delete([ n, o ]), r.referenceDelegate.removeReference(t, n, e) ]);
          }));
      }, t.prototype.removeMatchingKeysForTargetId = function(t, e) {
          var n = di(t), r = IDBKeyRange.bound([ e ], [ e + 1 ], 
          /*lowerOpen=*/ !1, 
          /*upperOpen=*/ !0);
          return n.delete(r);
      }, t.prototype.getMatchingKeysForTargetId = function(t, e) {
          var n = IDBKeyRange.bound([ e ], [ e + 1 ], 
          /*lowerOpen=*/ !1, 
          /*upperOpen=*/ !0), r = di(t), i = sn();
          return r.$t({
              range: n,
              Ft: !0
          }, (function(t, e, n) {
              var r = tr(t[1]), o = new ct(r);
              i = i.add(o);
          })).next((function() {
              return i;
          }));
      }, t.prototype.containsKey = function(t, e) {
          var n = Xn(e.path), r = IDBKeyRange.bound([ n ], [ B$1(n) ], 
          /*lowerOpen=*/ !1, 
          /*upperOpen=*/ !0), i = 0;
          return di(t).$t({
              index: fr.documentTargetsIndex,
              Ft: !0,
              range: r
          }, (function(t, e, n) {
              var r = t[0];
              t[1], 
              // Having a sentinel row for a document does not count as containing that document;
              // For the target cache, containing the document means the document is part of some
              // target.
              0 !== r && (i++, n.done());
          })).next((function() {
              return i > 0;
          }));
      }, 
      /**
       * Looks up a TargetData entry by target ID.
       *
       * @param targetId - The target ID of the TargetData entry to look up.
       * @returns The cached TargetData entry, or null if the cache has no entry for
       * the target.
       */
      // PORTING NOTE: Multi-tab only.
      t.prototype.lt = function(t, e) {
          return fi(t).get(e).next((function(t) {
              return t ? Qr(t) : null;
          }));
      }, t;
  }();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Helper to get a typed SimpleDbStore for the queries object store.
   */
  function fi(t) {
      return Rr(t, hr.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the target globals object store.
   */ function li(t) {
      return Rr(t, lr.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the document target object store.
   */ function di(t) {
      return Rr(t, fr.store);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Verifies the error thrown by a LocalStore operation. If a LocalStore
   * operation fails because the primary lease has been taken by another client,
   * we ignore the error (the persistence layer will immediately call
   * `applyPrimaryLease` to propagate the primary state change). All other errors
   * are re-thrown.
   *
   * @param err - An error returned by a LocalStore operation.
   * @returns A Promise that resolves after we recovered, or the original error.
   */ function pi(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(e) {
              if (t.code !== N$1.FAILED_PRECONDITION || t.message !== gr) throw t;
              return C$1("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
          }));
      }));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ function yi(t, e) {
      var n = t[0], r = t[1], i = e[0], o = e[1], s = q$1(n, i);
      return 0 === s ? q$1(r, o) : s;
  }

  /**
   * Used to calculate the nth sequence number. Keeps a rolling buffer of the
   * lowest n values passed to `addElement`, and finally reports the largest of
   * them in `maxValue`.
   */ var vi = /** @class */ function() {
      function t(t) {
          this.ne = t, this.buffer = new $e(yi), this.se = 0;
      }
      return t.prototype.ie = function() {
          return ++this.se;
      }, t.prototype.re = function(t) {
          var e = [ t, this.ie() ];
          if (this.buffer.size < this.ne) this.buffer = this.buffer.add(e); else {
              var n = this.buffer.last();
              yi(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
          }
      }, Object.defineProperty(t.prototype, "maxValue", {
          get: function() {
              // Guaranteed to be non-empty. If we decide we are not collecting any
              // sequence numbers, nthSequenceNumber below short-circuits. If we have
              // decided that we are collecting n sequence numbers, it's because n is some
              // percentage of the existing sequence numbers. That means we should never
              // be in a situation where we are collecting sequence numbers but don't
              // actually have any.
              return this.buffer.last()[0];
          },
          enumerable: !1,
          configurable: !0
      }), t;
  }(), mi = /** @class */ function() {
      function t(t, e) {
          this.garbageCollector = t, this.asyncQueue = e, this.oe = !1, this.ce = null;
      }
      return t.prototype.start = function(t) {
          -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.ue(t);
      }, t.prototype.stop = function() {
          this.ce && (this.ce.cancel(), this.ce = null);
      }, Object.defineProperty(t.prototype, "started", {
          get: function() {
              return null !== this.ce;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.ue = function(t) {
          var e = this, i = this.oe ? 3e5 : 6e4;
          C$1("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
              return __awaiter$6(e, void 0, void 0, (function() {
                  var e;
                  return __generator$6(this, (function(n) {
                      switch (n.label) {
                        case 0:
                          this.ce = null, this.oe = !0, n.label = 1;

                        case 1:
                          return n.trys.push([ 1, 3, , 7 ]), [ 4 /*yield*/ , t.collectGarbage(this.garbageCollector) ];

                        case 2:
                          return n.sent(), [ 3 /*break*/ , 7 ];

                        case 3:
                          return Nr(e = n.sent()) ? (C$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), 
                          [ 3 /*break*/ , 6 ]) : [ 3 /*break*/ , 4 ];

                        case 4:
                          return [ 4 /*yield*/ , pi(e) ];

                        case 5:
                          n.sent(), n.label = 6;

                        case 6:
                          return [ 3 /*break*/ , 7 ];

                        case 7:
                          return [ 4 /*yield*/ , this.ue(t) ];

                        case 8:
                          return n.sent(), [ 2 /*return*/ ];
                      }
                  }));
              }));
          }));
      }, t;
  }(), gi = /** @class */ function() {
      function t(t, e) {
          this.ae = t, this.params = e;
      }
      return t.prototype.calculateTargetCount = function(t, e) {
          return this.ae.he(t).next((function(t) {
              return Math.floor(e / 100 * t);
          }));
      }, t.prototype.nthSequenceNumber = function(t, e) {
          var n = this;
          if (0 === e) return Ir.resolve(S$1.o);
          var r = new vi(e);
          return this.ae.forEachTarget(t, (function(t) {
              return r.re(t.sequenceNumber);
          })).next((function() {
              return n.ae.le(t, (function(t) {
                  return r.re(t);
              }));
          })).next((function() {
              return r.maxValue;
          }));
      }, t.prototype.removeTargets = function(t, e, n) {
          return this.ae.removeTargets(t, e, n);
      }, t.prototype.removeOrphanedDocuments = function(t, e) {
          return this.ae.removeOrphanedDocuments(t, e);
      }, t.prototype.collect = function(t, e) {
          var n = this;
          return -1 === this.params.cacheSizeCollectionThreshold ? (C$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
          Ir.resolve(ti)) : this.getCacheSize(t).next((function(r) {
              return r < n.params.cacheSizeCollectionThreshold ? (C$1("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.cacheSizeCollectionThreshold), 
              ti) : n.fe(t, e);
          }));
      }, t.prototype.getCacheSize = function(t) {
          return this.ae.getCacheSize(t);
      }, t.prototype.fe = function(t, e) {
          var n, r, i, o, s, u, a, c = this, h = Date.now();
          return this.calculateTargetCount(t, this.params.percentileToCollect).next((function(e) {
              // Cap at the configured max
              return e > c.params.maximumSequenceNumbersToCollect ? (C$1("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + c.params.maximumSequenceNumbersToCollect + " from " + e), 
              r = c.params.maximumSequenceNumbersToCollect) : r = e, o = Date.now(), c.nthSequenceNumber(t, r);
          })).next((function(r) {
              return n = r, s = Date.now(), c.removeTargets(t, n, e);
          })).next((function(e) {
              return i = e, u = Date.now(), c.removeOrphanedDocuments(t, n);
          })).next((function(t) {
              return a = Date.now(), k$1() <= LogLevel.DEBUG && C$1("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (o - h) + "ms\n\tDetermined least recently used " + r + " in " + (s - o) + "ms\n\tRemoved " + i + " targets in " + (u - s) + "ms\n\tRemoved " + t + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - h) + "ms"), 
              Ir.resolve({
                  didRun: !0,
                  sequenceNumbersCollected: r,
                  targetsRemoved: i,
                  documentsRemoved: t
              });
          }));
      }, t;
  }(), wi = /** @class */ function() {
      function t(t, e) {
          this.db = t, this.garbageCollector = function(t, e) {
              return new gi(t, e);
          }(this, e);
      }
      return t.prototype.he = function(t) {
          var e = this.de(t);
          return this.db.getTargetCache().getTargetCount(t).next((function(t) {
              return e.next((function(e) {
                  return t + e;
              }));
          }));
      }, t.prototype.de = function(t) {
          var e = 0;
          return this.le(t, (function(t) {
              e++;
          })).next((function() {
              return e;
          }));
      }, t.prototype.forEachTarget = function(t, e) {
          return this.db.getTargetCache().forEachTarget(t, e);
      }, t.prototype.le = function(t, e) {
          return this.we(t, (function(t, n) {
              return e(n);
          }));
      }, t.prototype.addReference = function(t, e, n) {
          return bi(t, n);
      }, t.prototype.removeReference = function(t, e, n) {
          return bi(t, n);
      }, t.prototype.removeTargets = function(t, e, n) {
          return this.db.getTargetCache().removeTargets(t, e, n);
      }, t.prototype.markPotentiallyOrphaned = function(t, e) {
          return bi(t, e);
      }, 
      /**
       * Returns true if anything would prevent this document from being garbage
       * collected, given that the document in question is not present in any
       * targets and has a sequence number less than or equal to the upper bound for
       * the collection run.
       */
      t.prototype._e = function(t, e) {
          return function(t, e) {
              var n = !1;
              return ai(t).Ot((function(r) {
                  return oi(t, r, e).next((function(t) {
                      return t && (n = !0), Ir.resolve(!t);
                  }));
              })).next((function() {
                  return n;
              }));
          }(t, e);
      }, t.prototype.removeOrphanedDocuments = function(t, e) {
          var n = this, r = this.db.getRemoteDocumentCache().newChangeBuffer(), i = [], o = 0;
          return this.we(t, (function(s, u) {
              if (u <= e) {
                  var a = n._e(t, s).next((function(e) {
                      if (!e) 
                      // Our size accounting requires us to read all documents before
                      // removing them.
                      return o++, r.getEntry(t, s).next((function() {
                          return r.removeEntry(s), di(t).delete([ 0, Xn(s.path) ]);
                      }));
                  }));
                  i.push(a);
              }
          })).next((function() {
              return Ir.waitFor(i);
          })).next((function() {
              return r.apply(t);
          })).next((function() {
              return o;
          }));
      }, t.prototype.removeTarget = function(t, e) {
          var n = e.withSequenceNumber(t.currentSequenceNumber);
          return this.db.getTargetCache().updateTargetData(t, n);
      }, t.prototype.updateLimboDocument = function(t, e) {
          return bi(t, e);
      }, 
      /**
       * Call provided function for each document in the cache that is 'orphaned'. Orphaned
       * means not a part of any target, so the only entry in the target-document index for
       * that document will be the sentinel row (targetId 0), which will also have the sequence
       * number for the last time the document was accessed.
       */
      t.prototype.we = function(t, e) {
          var n, r = di(t), i = S$1.o;
          return r.$t({
              index: fr.documentTargetsIndex
          }, (function(t, r) {
              var o = t[0];
              t[1];
              var s = r.path, u = r.sequenceNumber;
              0 === o ? (
              // if nextToReport is valid, report it, this is a new key so the
              // last one must not be a member of any targets.
              i !== S$1.o && e(new ct(tr(n)), i), 
              // set nextToReport to be this sequence number. It's the next one we
              // might report, if we don't find any targets for this document.
              // Note that the sequence number must be defined when the targetId
              // is 0.
              i = u, n = s) : 
              // set nextToReport to be invalid, we know we don't need to report
              // this one since we found a target for it.
              i = S$1.o;
          })).next((function() {
              // Since we report sequence numbers after getting to the next key, we
              // need to check if the last key we iterated over was an orphaned
              // document and report it.
              i !== S$1.o && e(new ct(tr(n)), i);
          }));
      }, t.prototype.getCacheSize = function(t) {
          return this.db.getRemoteDocumentCache().getSize(t);
      }, t;
  }();

  /**
   * This class is responsible for the scheduling of LRU garbage collection. It handles checking
   * whether or not GC is enabled, as well as which delay to use before the next run.
   */ function bi(t, e) {
      return di(t).put(
      /**
   * @returns A value suitable for writing a sentinel row in the target-document
   * store.
   */
      function(t, e) {
          return new fr(0, Xn(t.path), e);
      }(e, t.currentSequenceNumber));
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A map implementation that uses objects as keys. Objects must have an
   * associated equals function and must be immutable. Entries in the map are
   * stored together with the key being produced from the mapKeyFn. This map
   * automatically handles collisions of keys.
   */ var Ii = /** @class */ function() {
      function t(t, e) {
          this.mapKeyFn = t, this.equalsFn = e, 
          /**
               * The inner map for a key/value pair. Due to the possibility of collisions we
               * keep a list of entries that we do a linear search through to find an actual
               * match. Note that collisions should be rare, so we still expect near
               * constant time lookups in practice.
               */
          this.inner = {}
          /** Get a value for this key, or undefined if it does not exist. */;
      }
      return t.prototype.get = function(t) {
          var e = this.mapKeyFn(t), n = this.inner[e];
          if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
              var o = i[r], s = o[0], u = o[1];
              if (this.equalsFn(s, t)) return u;
          }
      }, t.prototype.has = function(t) {
          return void 0 !== this.get(t);
      }, 
      /** Put this key and value in the map. */ t.prototype.set = function(t, e) {
          var n = this.mapKeyFn(t), r = this.inner[n];
          if (void 0 !== r) {
              for (var i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], t)) return void (r[i] = [ t, e ]);
              r.push([ t, e ]);
          } else this.inner[n] = [ [ t, e ] ];
      }, 
      /**
       * Remove this key from the map. Returns a boolean if anything was deleted.
       */
      t.prototype.delete = function(t) {
          var e = this.mapKeyFn(t), n = this.inner[e];
          if (void 0 === n) return !1;
          for (var r = 0; r < n.length; r++) if (this.equalsFn(n[r][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(r, 1), 
          !0;
          return !1;
      }, t.prototype.forEach = function(t) {
          G(this.inner, (function(e, n) {
              for (var r = 0, i = n; r < i.length; r++) {
                  var o = i[r], s = o[0], u = o[1];
                  t(s, u);
              }
          }));
      }, t.prototype.isEmpty = function() {
          return z$1(this.inner);
      }, t;
  }(), Ti = /** @class */ function() {
      function t() {
          // A mapping of document key to the new cache entry that should be written (or null if any
          // existing cache entry should be removed).
          this.changes = new Ii((function(t) {
              return t.toString();
          }), (function(t, e) {
              return t.isEqual(e);
          })), this.changesApplied = !1;
      }
      return t.prototype.getReadTime = function(t) {
          var e = this.changes.get(t);
          return e ? e.readTime : K$1.min();
      }, 
      /**
       * Buffers a `RemoteDocumentCache.addEntry()` call.
       *
       * You can only modify documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      t.prototype.addEntry = function(t, e) {
          this.assertNotApplied(), this.changes.set(t.key, {
              document: t,
              readTime: e
          });
      }, 
      /**
       * Buffers a `RemoteDocumentCache.removeEntry()` call.
       *
       * You can only remove documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      t.prototype.removeEntry = function(t, e) {
          void 0 === e && (e = null), this.assertNotApplied(), this.changes.set(t, {
              document: Nt.newInvalidDocument(t),
              readTime: e
          });
      }, 
      /**
       * Looks up an entry in the cache. The buffered changes will first be checked,
       * and if no buffered change applies, this will forward to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document or an invalid document if we have nothing
       * cached.
       */
      t.prototype.getEntry = function(t, e) {
          this.assertNotApplied();
          var n = this.changes.get(e);
          return void 0 !== n ? Ir.resolve(n.document) : this.getFromCache(t, e);
      }, 
      /**
       * Looks up several entries in the cache, forwarding to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKeys - The keys of the entries to look up.
       * @returns A map of cached documents, indexed by key. If an entry cannot be
       *     found, the corresponding key will be mapped to an invalid document.
       */
      t.prototype.getEntries = function(t, e) {
          return this.getAllFromCache(t, e);
      }, 
      /**
       * Applies buffered changes to the underlying RemoteDocumentCache, using
       * the provided transaction.
       */
      t.prototype.apply = function(t) {
          return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
      }, 
      /** Helper to assert this.changes is not null  */ t.prototype.assertNotApplied = function() {}, 
      t;
  }(), Ei = /** @class */ function() {
      /**
       * @param serializer - The document serializer.
       * @param indexManager - The query indexes that need to be maintained.
       */
      function t(t, e) {
          this.R = t, this.Ut = e
          /**
       * Adds the supplied entries to the cache.
       *
       * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */;
      }
      return t.prototype.addEntry = function(t, e, n) {
          return Ni(t).put(Di(e), n);
      }, 
      /**
       * Removes a document from the cache.
       *
       * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */
      t.prototype.removeEntry = function(t, e) {
          var n = Ni(t), r = Di(e);
          return n.delete(r);
      }, 
      /**
       * Updates the current cache size.
       *
       * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
       * cache's metadata.
       */
      t.prototype.updateMetadata = function(t, e) {
          var n = this;
          return this.getMetadata(t).next((function(r) {
              return r.byteSize += e, n.me(t, r);
          }));
      }, t.prototype.getEntry = function(t, e) {
          var n = this;
          return Ni(t).get(Di(e)).next((function(t) {
              return n.ye(e, t);
          }));
      }, 
      /**
       * Looks up an entry in the cache.
       *
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document entry and its size.
       */
      t.prototype.ge = function(t, e) {
          var n = this;
          return Ni(t).get(Di(e)).next((function(t) {
              return {
                  document: n.ye(e, t),
                  size: ri(t)
              };
          }));
      }, t.prototype.getEntries = function(t, e) {
          var n = this, r = Ze();
          return this.pe(t, e, (function(t, e) {
              var i = n.ye(t, e);
              r = r.insert(t, i);
          })).next((function() {
              return r;
          }));
      }, 
      /**
       * Looks up several entries in the cache.
       *
       * @param documentKeys - The set of keys entries to look up.
       * @returns A map of documents indexed by key and a map of sizes indexed by
       *     key (zero if the document does not exist).
       */
      t.prototype.Ee = function(t, e) {
          var n = this, r = Ze(), i = new We(ct.comparator);
          return this.pe(t, e, (function(t, e) {
              var o = n.ye(t, e);
              r = r.insert(t, o), i = i.insert(t, ri(e));
          })).next((function() {
              return {
                  documents: r,
                  Te: i
              };
          }));
      }, t.prototype.pe = function(t, e, n) {
          if (e.isEmpty()) return Ir.resolve();
          var r = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()), i = e.getIterator(), o = i.getNext();
          return Ni(t).$t({
              range: r
          }, (function(t, e, r) {
              // Go through keys not found in cache.
              for (var s = ct.fromSegments(t); o && ct.comparator(o, s) < 0; ) n(o, null), o = i.getNext();
              o && o.isEqual(s) && (
              // Key found in cache.
              n(o, e), o = i.hasNext() ? i.getNext() : null), 
              // Skip to the next key (if there is one).
              o ? r.Ct(o.path.toArray()) : r.done();
          })).next((function() {
              // The rest of the keys are not in the cache. One case where `iterate`
              // above won't go through them is when the cache is empty.
              for (;o; ) n(o, null), o = i.hasNext() ? i.getNext() : null;
          }));
      }, t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
          var r = this, i = Ze(), o = e.path.length + 1, s = {};
          if (n.isEqual(K$1.min())) {
              // Documents are ordered by key, so we can use a prefix scan to narrow
              // down the documents we need to match the query against.
              var u = e.path.toArray();
              s.range = IDBKeyRange.lowerBound(u);
          } else {
              // Execute an index-free query and filter by read time. This is safe
              // since all document changes to queries that have a
              // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
              var a = e.path.toArray(), c = qr(n);
              s.range = IDBKeyRange.lowerBound([ a, c ], 
              /* open= */ !0), s.index = ar.collectionReadTimeIndex;
          }
          return Ni(t).$t(s, (function(t, n, s) {
              // The query is actually returning any path that starts with the query
              // path prefix which may include documents in subcollections. For
              // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
              // shouldn't match it. Fix this by discarding rows with document keys
              // more than one segment longer than the query path.
              if (t.length === o) {
                  var u = Mr(r.R, n);
                  e.path.isPrefixOf(u.key.path) ? ue(e, u) && (i = i.insert(u.key, u)) : s.done();
              }
          })).next((function() {
              return i;
          }));
      }, t.prototype.newChangeBuffer = function(t) {
          return new _i(this, !!t && t.trackRemovals);
      }, t.prototype.getSize = function(t) {
          return this.getMetadata(t).next((function(t) {
              return t.byteSize;
          }));
      }, t.prototype.getMetadata = function(t) {
          return Si(t).get(cr.key).next((function(t) {
              return P$1(!!t), t;
          }));
      }, t.prototype.me = function(t, e) {
          return Si(t).put(cr.key, e);
      }, 
      /**
       * Decodes `remoteDoc` and returns the document (or null, if the document
       * corresponds to the format used for sentinel deletes).
       */
      t.prototype.ye = function(t, e) {
          if (e) {
              var n = Mr(this.R, e);
              // Whether the document is a sentinel removal and should only be used in the
              // `getNewDocumentChanges()`
                          if (!n.isNoDocument() || !n.version.isEqual(K$1.min())) return n;
          }
          return Nt.newInvalidDocument(t);
      }, t;
  }(), _i = /** @class */ function(e) {
      /**
       * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
       * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
       * `getNewDocumentChanges()`.
       */
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).Ie = t, r.trackRemovals = n, 
          // A map of document sizes prior to applying the changes in this buffer.
          r.Ae = new Ii((function(t) {
              return t.toString();
          }), (function(t, e) {
              return t.isEqual(e);
          })), r;
      }
      return __extends$6(n, e), n.prototype.applyChanges = function(t) {
          var e = this, n = [], r = 0, i = new $e((function(t, e) {
              return q$1(t.canonicalString(), e.canonicalString());
          }));
          return this.changes.forEach((function(o, s) {
              var u = e.Ae.get(o);
              if (s.document.isValidDocument()) {
                  var a = Vr(e.Ie.R, s.document, e.getReadTime(o));
                  i = i.add(o.path.popLast());
                  var c = ri(a);
                  r += c - u, n.push(e.Ie.addEntry(t, o, a));
              } else if (r -= u, e.trackRemovals) {
                  // In order to track removals, we store a "sentinel delete" in the
                  // RemoteDocumentCache. This entry is represented by a NoDocument
                  // with a version of 0 and ignored by `maybeDecodeDocument()` but
                  // preserved in `getNewDocumentChanges()`.
                  var h = Vr(e.Ie.R, Nt.newNoDocument(o, K$1.min()), e.getReadTime(o));
                  n.push(e.Ie.addEntry(t, o, h));
              } else n.push(e.Ie.removeEntry(t, o));
          })), i.forEach((function(r) {
              n.push(e.Ie.Ut.addToCollectionParentIndex(t, r));
          })), n.push(this.Ie.updateMetadata(t, r)), Ir.waitFor(n);
      }, n.prototype.getFromCache = function(t, e) {
          var n = this;
          // Record the size of everything we load from the cache so we can compute a delta later.
                  return this.Ie.ge(t, e).next((function(t) {
              return n.Ae.set(e, t.size), t.document;
          }));
      }, n.prototype.getAllFromCache = function(t, e) {
          var n = this;
          // Record the size of everything we load from the cache so we can compute
          // a delta later.
                  return this.Ie.Ee(t, e).next((function(t) {
              var e = t.documents;
              // Note: `getAllFromCache` returns two maps instead of a single map from
              // keys to `DocumentSizeEntry`s. This is to allow returning the
              // `MutableDocumentMap` directly, without a conversion.
              return t.Te.forEach((function(t, e) {
                  n.Ae.set(t, e);
              })), e;
          }));
      }, n;
  }(Ti);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An in-memory buffer of entries to be written to a RemoteDocumentCache.
   * It can be used to batch up a set of changes to be written to the cache, but
   * additionally supports reading entries back with the `getEntry()` method,
   * falling back to the underlying RemoteDocumentCache if no entry is
   * buffered.
   *
   * Entries added to the cache *must* be read first. This is to facilitate
   * calculating the size delta of the pending changes.
   *
   * PORTING NOTE: This class was implemented then removed from other platforms.
   * If byte-counting ends up being needed on the other platforms, consider
   * porting this class as part of that implementation work.
   */ function Si(t) {
      return Rr(t, cr.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
   */ function Ni(t) {
      return Rr(t, ar.store);
  }

  function Di(t) {
      return t.path.toArray();
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Performs database creation and schema upgrades. */ var Ai = /** @class */ function() {
      function t(t) {
          this.R = t;
      }
      /**
       * Performs database creation and schema upgrades.
       *
       * Note that in production, this method is only ever used to upgrade the schema
       * to SCHEMA_VERSION. Different values of toVersion are only used for testing
       * and local feature development.
       */    return t.prototype.Rt = function(t, e, n, r) {
          var i = this;
          P$1(n < r && n >= 0 && r <= 11);
          var o = new Tr("createOrUpgrade", e);
          n < 1 && r >= 1 && (function(t) {
              t.createObjectStore(nr.store);
          }(t), function(t) {
              t.createObjectStore(rr.store, {
                  keyPath: rr.keyPath
              }), t.createObjectStore(ir.store, {
                  keyPath: ir.keyPath,
                  autoIncrement: !0
              }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
                  unique: !0
              }), t.createObjectStore(or.store);
          }(t), ki(t), function(t) {
              t.createObjectStore(ar.store);
          }(t));
          // Migration 2 to populate the targetGlobal object no longer needed since
          // migration 3 unconditionally clears it.
          var s = Ir.resolve();
          return n < 3 && r >= 3 && (
          // Brand new clients don't need to drop and recreate--only clients that
          // potentially have corrupt data.
          0 !== n && (function(t) {
              t.deleteObjectStore(fr.store), t.deleteObjectStore(hr.store), t.deleteObjectStore(lr.store);
          }(t), ki(t)), s = s.next((function() {
              /**
       * Creates the target global singleton row.
       *
       * @param txn - The version upgrade transaction for indexeddb
       */
              return function(t) {
                  var e = t.store(lr.store), n = new lr(
                  /*highestTargetId=*/ 0, 
                  /*lastListenSequenceNumber=*/ 0, K$1.min().toTimestamp(), 
                  /*targetCount=*/ 0);
                  return e.put(lr.key, n);
              }(o);
          }))), n < 4 && r >= 4 && (0 !== n && (
          // Schema version 3 uses auto-generated keys to generate globally unique
          // mutation batch IDs (this was previously ensured internally by the
          // client). To migrate to the new schema, we have to read all mutations
          // and write them back out. We preserve the existing batch IDs to guarantee
          // consistency with other object stores. Any further mutation batch IDs will
          // be auto-generated.
          s = s.next((function() {
              return function(t, e) {
                  return e.store(ir.store).Nt().next((function(n) {
                      t.deleteObjectStore(ir.store), t.createObjectStore(ir.store, {
                          keyPath: ir.keyPath,
                          autoIncrement: !0
                      }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
                          unique: !0
                      });
                      var r = e.store(ir.store), i = n.map((function(t) {
                          return r.put(t);
                      }));
                      return Ir.waitFor(i);
                  }));
              }(t, o);
          }))), s = s.next((function() {
              !function(t) {
                  t.createObjectStore(pr.store, {
                      keyPath: pr.keyPath
                  });
              }(t);
          }))), n < 5 && r >= 5 && (s = s.next((function() {
              return i.Re(o);
          }))), n < 6 && r >= 6 && (s = s.next((function() {
              return function(t) {
                  t.createObjectStore(cr.store);
              }(t), i.be(o);
          }))), n < 7 && r >= 7 && (s = s.next((function() {
              return i.ve(o);
          }))), n < 8 && r >= 8 && (s = s.next((function() {
              return i.Pe(t, o);
          }))), n < 9 && r >= 9 && (s = s.next((function() {
              // Multi-Tab used to manage its own changelog, but this has been moved
              // to the DbRemoteDocument object store itself. Since the previous change
              // log only contained transient data, we can drop its object store.
              !function(t) {
                  t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
              }(t), function(t) {
                  var e = t.objectStore(ar.store);
                  e.createIndex(ar.readTimeIndex, ar.readTimeIndexPath, {
                      unique: !1
                  }), e.createIndex(ar.collectionReadTimeIndex, ar.collectionReadTimeIndexPath, {
                      unique: !1
                  });
              }(e);
          }))), n < 10 && r >= 10 && (s = s.next((function() {
              return i.Ve(o);
          }))), n < 11 && r >= 11 && (s = s.next((function() {
              !function(t) {
                  t.createObjectStore(yr.store, {
                      keyPath: yr.keyPath
                  });
              }(t), function(t) {
                  t.createObjectStore(vr.store, {
                      keyPath: vr.keyPath
                  });
              }(t);
          }))), s;
      }, t.prototype.be = function(t) {
          var e = 0;
          return t.store(ar.store).$t((function(t, n) {
              e += ri(n);
          })).next((function() {
              var n = new cr(e);
              return t.store(cr.store).put(cr.key, n);
          }));
      }, t.prototype.Re = function(t) {
          var e = this, n = t.store(rr.store), r = t.store(ir.store);
          return n.Nt().next((function(n) {
              return Ir.forEach(n, (function(n) {
                  var i = IDBKeyRange.bound([ n.userId, -1 ], [ n.userId, n.lastAcknowledgedBatchId ]);
                  return r.Nt(ir.userMutationsIndex, i).next((function(r) {
                      return Ir.forEach(r, (function(r) {
                          P$1(r.userId === n.userId);
                          var i = Kr(e.R, r);
                          return ni(t, n.userId, i).next((function() {}));
                      }));
                  }));
              }));
          }));
      }, 
      /**
       * Ensures that every document in the remote document cache has a corresponding sentinel row
       * with a sequence number. Missing rows are given the most recently used sequence number.
       */
      t.prototype.ve = function(t) {
          var e = t.store(fr.store), n = t.store(ar.store);
          return t.store(lr.store).get(lr.key).next((function(t) {
              var r = [];
              return n.$t((function(n, i) {
                  var o = new H$1(n), s = function(t) {
                      return [ 0, Xn(t) ];
                  }(o);
                  r.push(e.get(s).next((function(n) {
                      return n ? Ir.resolve() : function(n) {
                          return e.put(new fr(0, Xn(n), t.highestListenSequenceNumber));
                      }(o);
                  })));
              })).next((function() {
                  return Ir.waitFor(r);
              }));
          }));
      }, t.prototype.Pe = function(t, e) {
          // Create the index.
          t.createObjectStore(dr.store, {
              keyPath: dr.keyPath
          });
          var n = e.store(dr.store), r = new Xr, i = function(t) {
              if (r.add(t)) {
                  var e = t.lastSegment(), i = t.popLast();
                  return n.put({
                      collectionId: e,
                      parent: Xn(i)
                  });
              }
          };
          // Helper to add an index entry iff we haven't already written it.
          // Index existing remote documents.
                  return e.store(ar.store).$t({
              Ft: !0
          }, (function(t, e) {
              var n = new H$1(t);
              return i(n.popLast());
          })).next((function() {
              return e.store(or.store).$t({
                  Ft: !0
              }, (function(t, e) {
                  t[0];
                  var n = t[1];
                  t[2];
                  var r = tr(n);
                  return i(r.popLast());
              }));
          }));
      }, t.prototype.Ve = function(t) {
          var e = this, n = t.store(hr.store);
          return n.$t((function(t, r) {
              var i = Qr(r), o = Gr(e.R, i);
              return n.put(o);
          }));
      }, t;
  }();

  function ki(t) {
      t.createObjectStore(fr.store, {
          keyPath: fr.keyPath
      }).createIndex(fr.documentTargetsIndex, fr.documentTargetsKeyPath, {
          unique: !0
      }), 
      // NOTE: This is unique only because the TargetId is the suffix.
      t.createObjectStore(hr.store, {
          keyPath: hr.keyPath
      }).createIndex(hr.queryTargetsIndexName, hr.queryTargetsKeyPath, {
          unique: !0
      }), t.createObjectStore(lr.store);
  }

  var Ci = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", xi = /** @class */ function() {
      function t(
      /**
       * Whether to synchronize the in-memory state of multiple tabs and share
       * access to local persistence.
       */
      e, n, r, i, o, s, u, a, c, 
      /**
       * If set to true, forcefully obtains database access. Existing tabs will
       * no longer be able to access IndexedDB.
       */
      h) {
          if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, 
          this.Se = o, this.window = s, this.document = u, this.De = c, this.Ce = h, this.Ne = null, 
          this.xe = !1, this.isPrimary = !1, this.networkEnabled = !0, 
          /** Our window.unload handler, if registered. */
          this.ke = null, this.inForeground = !1, 
          /** Our 'visibilitychange' listener if registered. */
          this.Fe = null, 
          /** The client metadata refresh task. */
          this.$e = null, 
          /** The last time we garbage collected the client metadata object store. */
          this.Oe = Number.NEGATIVE_INFINITY, 
          /** A listener to notify on primary state changes. */
          this.Me = function(t) {
              return Promise.resolve();
          }, !t.yt()) throw new D$1(N$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
          this.referenceDelegate = new wi(this, i), this.Le = n + "main", this.R = new Fr(a), 
          this.Be = new Er(this.Le, 11, new Ai(this.R)), this.qe = new hi(this.referenceDelegate, this.R), 
          this.Ut = new Jr, this.Ue = function(t, e) {
              return new Ei(t, e);
          }(this.R, this.Ut), this.Ke = new Wr, this.window && this.window.localStorage ? this.Qe = this.window.localStorage : (this.Qe = null, 
          !1 === h && x$1("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
      }
      /**
       * Attempt to start IndexedDb persistence.
       *
       * @returns Whether persistence was enabled.
       */    return t.prototype.start = function() {
          var t = this;
          // NOTE: This is expected to fail sometimes (in the case of another tab
          // already having the persistence lock), so it's the first thing we should
          // do.
                  return this.je().then((function() {
              if (!t.isPrimary && !t.allowTabSynchronization) 
              // Fail `start()` if `synchronizeTabs` is disabled and we cannot
              // obtain the primary lease.
              throw new D$1(N$1.FAILED_PRECONDITION, Ci);
              return t.We(), t.Ge(), t.ze(), t.runTransaction("getHighestListenSequenceNumber", "readonly", (function(e) {
                  return t.qe.getHighestSequenceNumber(e);
              }));
          })).then((function(e) {
              t.Ne = new S$1(e, t.De);
          })).then((function() {
              t.xe = !0;
          })).catch((function(e) {
              return t.Be && t.Be.close(), Promise.reject(e);
          }));
      }, 
      /**
       * Registers a listener that gets called when the primary state of the
       * instance changes. Upon registering, this listener is invoked immediately
       * with the current primary state.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      t.prototype.He = function(t) {
          var e = this;
          return this.Me = function(i) {
              return __awaiter$6(e, void 0, void 0, (function() {
                  return __generator$6(this, (function(e) {
                      return this.started ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                  }));
              }));
          }, t(this.isPrimary);
      }, 
      /**
       * Registers a listener that gets called when the database receives a
       * version change event indicating that it has deleted.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      t.prototype.setDatabaseDeletedListener = function(t) {
          var e = this;
          this.Be.vt((function(i) {
              return __awaiter$6(e, void 0, void 0, (function() {
                  return __generator$6(this, (function(e) {
                      switch (e.label) {
                        case 0:
                          return null === i.newVersion ? [ 4 /*yield*/ , t() ] : [ 3 /*break*/ , 2 ];

                        case 1:
                          e.sent(), e.label = 2;

                        case 2:
                          return [ 2 /*return*/ ];
                      }
                  }));
              }));
          }));
      }, 
      /**
       * Adjusts the current network state in the client's metadata, potentially
       * affecting the primary lease.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      t.prototype.setNetworkEnabled = function(t) {
          var e = this;
          this.networkEnabled !== t && (this.networkEnabled = t, 
          // Schedule a primary lease refresh for immediate execution. The eventual
          // lease update will be propagated via `primaryStateListener`.
          this.Se.enqueueAndForget((function() {
              return __awaiter$6(e, void 0, void 0, (function() {
                  return __generator$6(this, (function(t) {
                      switch (t.label) {
                        case 0:
                          return this.started ? [ 4 /*yield*/ , this.je() ] : [ 3 /*break*/ , 2 ];

                        case 1:
                          t.sent(), t.label = 2;

                        case 2:
                          return [ 2 /*return*/ ];
                      }
                  }));
              }));
          })));
      }, 
      /**
       * Updates the client metadata in IndexedDb and attempts to either obtain or
       * extend the primary lease for the local client. Asynchronously notifies the
       * primary state listener if the client either newly obtained or released its
       * primary lease.
       */
      t.prototype.je = function() {
          var t = this;
          return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (function(e) {
              return Li(e).put(new pr(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                  if (t.isPrimary) return t.Je(e).next((function(e) {
                      e || (t.isPrimary = !1, t.Se.enqueueRetryable((function() {
                          return t.Me(!1);
                      })));
                  }));
              })).next((function() {
                  return t.Ye(e);
              })).next((function(n) {
                  return t.isPrimary && !n ? t.Xe(e).next((function() {
                      return !1;
                  })) : !!n && t.Ze(e).next((function() {
                      return !0;
                  }));
              }));
          })).catch((function(e) {
              if (Nr(e)) 
              // Proceed with the existing state. Any subsequent access to
              // IndexedDB will verify the lease.
              return C$1("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary;
              if (!t.allowTabSynchronization) throw e;
              return C$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), 
              /* isPrimary= */ !1;
          })).then((function(e) {
              t.isPrimary !== e && t.Se.enqueueRetryable((function() {
                  return t.Me(e);
              })), t.isPrimary = e;
          }));
      }, t.prototype.Je = function(t) {
          var e = this;
          return Ri(t).get(nr.key).next((function(t) {
              return Ir.resolve(e.tn(t));
          }));
      }, t.prototype.en = function(t) {
          return Li(t).delete(this.clientId);
      }, 
      /**
       * If the garbage collection threshold has passed, prunes the
       * RemoteDocumentChanges and the ClientMetadata store based on the last update
       * time of all clients.
       */
      t.prototype.nn = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t, e, n, i, o = this;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return !this.isPrimary || this.sn(this.Oe, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Oe = Date.now(), 
                      [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(t) {
                          var e = Rr(t, pr.store);
                          return e.Nt().next((function(t) {
                              var n = o.rn(t, 18e5), r = t.filter((function(t) {
                                  return -1 === n.indexOf(t);
                              }));
                              // Delete metadata for clients that are no longer considered active.
                                                          return Ir.forEach(r, (function(t) {
                                  return e.delete(t.clientId);
                              })).next((function() {
                                  return r;
                              }));
                          }));
                      })).catch((function() {
                          return [];
                      })) ]);

                    case 1:
                      // Delete potential leftover entries that may continue to mark the
                      // inactive clients as zombied in LocalStorage.
                      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                      // the client atomically, but we can't. So we opt to delete the IndexedDb
                      // entries first to avoid potentially reviving a zombied client.
                      if (t = r.sent(), this.Qe) for (e = 0, n = t; e < n.length; e++) i = n[e], this.Qe.removeItem(this.on(i.clientId));
                      r.label = 2;

                    case 2:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, 
      /**
       * Schedules a recurring timer to update the client metadata and to either
       * extend or acquire the primary lease if the client is eligible.
       */
      t.prototype.ze = function() {
          var t = this;
          this.$e = this.Se.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
              return t.je().then((function() {
                  return t.nn();
              })).then((function() {
                  return t.ze();
              }));
          }));
      }, 
      /** Checks whether `client` is the local client. */ t.prototype.tn = function(t) {
          return !!t && t.ownerId === this.clientId;
      }, 
      /**
       * Evaluate the state of all active clients and determine whether the local
       * client is or can act as the holder of the primary lease. Returns whether
       * the client is eligible for the lease, but does not actually acquire it.
       * May return 'false' even if there is no active leaseholder and another
       * (foreground) client should become leaseholder instead.
       */
      t.prototype.Ye = function(t) {
          var e = this;
          return this.Ce ? Ir.resolve(!0) : Ri(t).get(nr.key).next((function(n) {
              // A client is eligible for the primary lease if:
              // - its network is enabled and the client's tab is in the foreground.
              // - its network is enabled and no other client's tab is in the
              //   foreground.
              // - every clients network is disabled and the client's tab is in the
              //   foreground.
              // - every clients network is disabled and no other client's tab is in
              //   the foreground.
              // - the `forceOwningTab` setting was passed in.
              if (null !== n && e.sn(n.leaseTimestampMs, 5e3) && !e.cn(n.ownerId)) {
                  if (e.tn(n) && e.networkEnabled) return !0;
                  if (!e.tn(n)) {
                      if (!n.allowTabSynchronization) 
                      // Fail the `canActAsPrimary` check if the current leaseholder has
                      // not opted into multi-tab synchronization. If this happens at
                      // client startup, we reject the Promise returned by
                      // `enablePersistence()` and the user can continue to use Firestore
                      // with in-memory persistence.
                      // If this fails during a lease refresh, we will instead block the
                      // AsyncQueue from executing further operations. Note that this is
                      // acceptable since mixing & matching different `synchronizeTabs`
                      // settings is not supported.
                      // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                      // no longer be turned off.
                      throw new D$1(N$1.FAILED_PRECONDITION, Ci);
                      return !1;
                  }
              }
              return !(!e.networkEnabled || !e.inForeground) || Li(t).Nt().next((function(t) {
                  return void 0 === e.rn(t, 5e3).find((function(t) {
                      if (e.clientId !== t.clientId) {
                          var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
                          if (n || r && i) return !0;
                      }
                      return !1;
                  }));
              }));
          })).next((function(t) {
              return e.isPrimary !== t && C$1("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
              t;
          }));
      }, t.prototype.shutdown = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t = this;
              return __generator$6(this, (function(e) {
                  switch (e.label) {
                    case 0:
                      // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                      // has obtained the primary lease.
                      // The shutdown() operations are idempotent and can be called even when
                      // start() aborted (e.g. because it couldn't acquire the persistence lease).
                      return this.xe = !1, this.un(), this.$e && (this.$e.cancel(), this.$e = null), this.an(), 
                      this.hn(), [ 4 /*yield*/ , this.Be.runTransaction("shutdown", "readwrite", [ nr.store, pr.store ], (function(e) {
                          var n = new xr(e, S$1.o);
                          return t.Xe(n).next((function() {
                              return t.en(n);
                          }));
                      })) ];

                    case 1:
                      // The shutdown() operations are idempotent and can be called even when
                      // start() aborted (e.g. because it couldn't acquire the persistence lease).
                      // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                      // has obtained the primary lease.
                      return e.sent(), this.Be.close(), 
                      // Remove the entry marking the client as zombied from LocalStorage since
                      // we successfully deleted its metadata from IndexedDb.
                      this.ln(), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, 
      /**
       * Returns clients that are not zombied and have an updateTime within the
       * provided threshold.
       */
      t.prototype.rn = function(t, e) {
          var n = this;
          return t.filter((function(t) {
              return n.sn(t.updateTimeMs, e) && !n.cn(t.clientId);
          }));
      }, 
      /**
       * Returns the IDs of the clients that are currently active. If multi-tab
       * is not supported, returns an array that only contains the local client's
       * ID.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      t.prototype.fn = function() {
          var t = this;
          return this.runTransaction("getActiveClients", "readonly", (function(e) {
              return Li(e).Nt().next((function(e) {
                  return t.rn(e, 18e5).map((function(t) {
                      return t.clientId;
                  }));
              }));
          }));
      }, Object.defineProperty(t.prototype, "started", {
          get: function() {
              return this.xe;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.getMutationQueue = function(t) {
          return ii.Qt(t, this.R, this.Ut, this.referenceDelegate);
      }, t.prototype.getTargetCache = function() {
          return this.qe;
      }, t.prototype.getRemoteDocumentCache = function() {
          return this.Ue;
      }, t.prototype.getIndexManager = function() {
          return this.Ut;
      }, t.prototype.getBundleCache = function() {
          return this.Ke;
      }, t.prototype.runTransaction = function(t, e, n) {
          var r = this;
          C$1("IndexedDbPersistence", "Starting transaction:", t);
          var i, o = "readonly" === e ? "readonly" : "readwrite";
          // Do all transactions as readwrite against all object stores, since we
          // are the only reader/writer.
          return this.Be.runTransaction(t, o, mr, (function(o) {
              return i = new xr(o, r.Ne ? r.Ne.next() : S$1.o), "readwrite-primary" === e ? r.Je(i).next((function(t) {
                  return !!t || r.Ye(i);
              })).next((function(e) {
                  if (!e) throw x$1("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, 
                  r.Se.enqueueRetryable((function() {
                      return r.Me(!1);
                  })), new D$1(N$1.FAILED_PRECONDITION, gr);
                  return n(i);
              })).next((function(t) {
                  return r.Ze(i).next((function() {
                      return t;
                  }));
              })) : r.dn(i).next((function() {
                  return n(i);
              }));
          })).then((function(t) {
              return i.raiseOnCommittedEvent(), t;
          }));
      }, 
      /**
       * Verifies that the current tab is the primary leaseholder or alternatively
       * that the leaseholder has opted into multi-tab synchronization.
       */
      // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
      // be turned off.
      t.prototype.dn = function(t) {
          var e = this;
          return Ri(t).get(nr.key).next((function(t) {
              if (null !== t && e.sn(t.leaseTimestampMs, 5e3) && !e.cn(t.ownerId) && !e.tn(t) && !(e.Ce || e.allowTabSynchronization && t.allowTabSynchronization)) throw new D$1(N$1.FAILED_PRECONDITION, Ci);
          }));
      }, 
      /**
       * Obtains or extends the new primary lease for the local client. This
       * method does not verify that the client is eligible for this lease.
       */
      t.prototype.Ze = function(t) {
          var e = new nr(this.clientId, this.allowTabSynchronization, Date.now());
          return Ri(t).put(nr.key, e);
      }, t.yt = function() {
          return Er.yt();
      }, 
      /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.Xe = function(t) {
          var e = this, n = Ri(t);
          return n.get(nr.key).next((function(t) {
              return e.tn(t) ? (C$1("IndexedDbPersistence", "Releasing primary lease."), n.delete(nr.key)) : Ir.resolve();
          }));
      }, 
      /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.sn = function(t, e) {
          var n = Date.now();
          return !(t < n - e || t > n && (x$1("Detected an update time that is in the future: " + t + " > " + n), 
          1));
      }, t.prototype.We = function() {
          var t = this;
          null !== this.document && "function" == typeof this.document.addEventListener && (this.Fe = function() {
              t.Se.enqueueAndForget((function() {
                  return t.inForeground = "visible" === t.document.visibilityState, t.je();
              }));
          }, this.document.addEventListener("visibilitychange", this.Fe), this.inForeground = "visible" === this.document.visibilityState);
      }, t.prototype.an = function() {
          this.Fe && (this.document.removeEventListener("visibilitychange", this.Fe), this.Fe = null);
      }, 
      /**
       * Attaches a window.unload handler that will synchronously write our
       * clientId to a "zombie client id" location in LocalStorage. This can be used
       * by tabs trying to acquire the primary lease to determine that the lease
       * is no longer valid even if the timestamp is recent. This is particularly
       * important for the refresh case (so the tab correctly re-acquires the
       * primary lease). LocalStorage is used for this rather than IndexedDb because
       * it is a synchronous API and so can be used reliably from  an unload
       * handler.
       */
      t.prototype.Ge = function() {
          var t, e = this;
          "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ke = function() {
              // Note: In theory, this should be scheduled on the AsyncQueue since it
              // accesses internal state. We execute this code directly during shutdown
              // to make sure it gets a chance to run.
              e.un(), isSafari() && navigator.appVersion.match("Version/14") && 
              // On Safari 14, we do not run any cleanup actions as it might trigger
              // a bug that prevents Safari from re-opening IndexedDB during the
              // next page load.
              // See https://bugs.webkit.org/show_bug.cgi?id=226547
              e.Se.enterRestrictedMode(/* purgeExistingTasks= */ !0), e.Se.enqueueAndForget((function() {
                  return e.shutdown();
              }));
          }, this.window.addEventListener("pagehide", this.ke));
      }, t.prototype.hn = function() {
          this.ke && (this.window.removeEventListener("pagehide", this.ke), this.ke = null);
      }, 
      /**
       * Returns whether a client is "zombied" based on its LocalStorage entry.
       * Clients become zombied when their tab closes without running all of the
       * cleanup logic in `shutdown()`.
       */
      t.prototype.cn = function(t) {
          var e;
          try {
              var n = null !== (null === (e = this.Qe) || void 0 === e ? void 0 : e.getItem(this.on(t)));
              return C$1("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
              n;
          } catch (t) {
              // Gracefully handle if LocalStorage isn't working.
              return x$1("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
          }
      }, 
      /**
       * Record client as zombied (a client that had its tab closed). Zombied
       * clients are ignored during primary tab selection.
       */
      t.prototype.un = function() {
          if (this.Qe) try {
              this.Qe.setItem(this.on(this.clientId), String(Date.now()));
          } catch (t) {
              // Gracefully handle if LocalStorage isn't available / working.
              x$1("Failed to set zombie client id.", t);
          }
      }, 
      /** Removes the zombied client entry if it exists. */ t.prototype.ln = function() {
          if (this.Qe) try {
              this.Qe.removeItem(this.on(this.clientId));
          } catch (t) {
              // Ignore
          }
      }, t.prototype.on = function(t) {
          return "firestore_zombie_" + this.persistenceKey + "_" + t;
      }, t;
  }();

  /**
   * Oldest acceptable age in milliseconds for client metadata before the client
   * is considered inactive and its associated data is garbage collected.
   */
  /**
   * An IndexedDB-backed instance of Persistence. Data is stored persistently
   * across sessions.
   *
   * On Web only, the Firestore SDKs support shared access to its persistence
   * layer. This allows multiple browser tabs to read and write to IndexedDb and
   * to synchronize state even without network connectivity. Shared access is
   * currently optional and not enabled unless all clients invoke
   * `enablePersistence()` with `{synchronizeTabs:true}`.
   *
   * In multi-tab mode, if multiple clients are active at the same time, the SDK
   * will designate one client as the “primary client”. An effort is made to pick
   * a visible, network-connected and active client, and this client is
   * responsible for letting other clients know about its presence. The primary
   * client writes a unique client-generated identifier (the client ID) to
   * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
   * update this entry, another client can acquire the lease and take over as
   * primary.
   *
   * Some persistence operations in the SDK are designated as primary-client only
   * operations. This includes the acknowledgment of mutations and all updates of
   * remote documents. The effects of these operations are written to persistence
   * and then broadcast to other tabs via LocalStorage (see
   * `WebStorageSharedClientState`), which then refresh their state from
   * persistence.
   *
   * Similarly, the primary client listens to notifications sent by secondary
   * clients to discover persistence changes written by secondary clients, such as
   * the addition of new mutations and query targets.
   *
   * If multi-tab is not enabled and another tab already obtained the primary
   * lease, IndexedDbPersistence enters a failed state and all subsequent
   * operations will automatically fail.
   *
   * Additionally, there is an optimization so that when a tab is closed, the
   * primary lease is released immediately (this is especially important to make
   * sure that a refreshed tab is able to immediately re-acquire the primary
   * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
   * since it is an asynchronous API. So in addition to attempting to give up the
   * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
   * LocalStorage which acts as an indicator that another tab should go ahead and
   * take the primary lease immediately regardless of the current lease timestamp.
   *
   * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
   * longer optional.
   */
  /**
   * Helper to get a typed SimpleDbStore for the primary client object store.
   */
  function Ri(t) {
      return Rr(t, nr.store);
  }

  /**
   * Helper to get a typed SimpleDbStore for the client metadata object store.
   */ function Li(t) {
      return Rr(t, pr.store);
  }

  /**
   * Generates a string used as a prefix when storing data in IndexedDB and
   * LocalStorage.
   */ function Oi(t, e) {
      // Use two different prefix formats:
      //   * firestore / persistenceKey / projectID . databaseID / ...
      //   * firestore / persistenceKey / projectID / ...
      // projectIDs are DNS-compatible names and cannot contain dots
      // so there's no danger of collisions.
      var n = t.projectId;
      return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/"
      /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */;
  }

  var Fi = /** @class */ function() {
      function t(t, e, n) {
          this.Ue = t, this._n = e, this.Ut = n
          /**
       * Get the local view of the document identified by `key`.
       *
       * @returns Local view of the document or null if we don't have any cached
       * state for it.
       */;
      }
      return t.prototype.mn = function(t, e) {
          var n = this;
          return this._n.getAllMutationBatchesAffectingDocumentKey(t, e).next((function(r) {
              return n.yn(t, e, r);
          }));
      }, 
      /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.yn = function(t, e, n) {
          return this.Ue.getEntry(t, e).next((function(t) {
              for (var e = 0, r = n; e < r.length; e++) {
                  r[e].applyToLocalView(t);
              }
              return t;
          }));
      }, 
      // Returns the view of the given `docs` as they would appear after applying
      // all mutations in the given `batches`.
      t.prototype.gn = function(t, e) {
          t.forEach((function(t, n) {
              for (var r = 0, i = e; r < i.length; r++) {
                  i[r].applyToLocalView(n);
              }
          }));
      }, 
      /**
       * Gets the local view of the documents identified by `keys`.
       *
       * If we don't have cached state for a document in `keys`, a NoDocument will
       * be stored for that key in the resulting set.
       */
      t.prototype.pn = function(t, e) {
          var n = this;
          return this.Ue.getEntries(t, e).next((function(e) {
              return n.En(t, e).next((function() {
                  return e;
              }));
          }));
      }, 
      /**
       * Applies the local view the given `baseDocs` without retrieving documents
       * from the local store.
       */
      t.prototype.En = function(t, e) {
          var n = this;
          return this._n.getAllMutationBatchesAffectingDocumentKeys(t, e).next((function(t) {
              return n.gn(e, t);
          }));
      }, 
      /**
       * Performs a query against the local view of all documents.
       *
       * @param transaction - The persistence transaction.
       * @param query - The query to match documents against.
       * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
       *     documents that have been read since this snapshot version (exclusive).
       */
      t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
          /**
   * Returns whether the query matches a single document by path (rather than a
   * collection).
   */
          return function(t) {
              return ct.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
          }(e) ? this.Tn(t, e.path) : te(e) ? this.In(t, e, n) : this.An(t, e, n);
      }, t.prototype.Tn = function(t, e) {
          // Just do a simple document lookup.
          return this.mn(t, new ct(e)).next((function(t) {
              var e = en();
              return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
          }));
      }, t.prototype.In = function(t, e, n) {
          var r = this, i = e.collectionGroup, o = en();
          return this.Ut.getCollectionParents(t, i).next((function(s) {
              return Ir.forEach(s, (function(s) {
                  var u = function(t, e) {
                      return new Wt(e, 
                      /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                  }(e, s.child(i));
                  return r.An(t, u, n).next((function(t) {
                      t.forEach((function(t, e) {
                          o = o.insert(t, e);
                      }));
                  }));
              })).next((function() {
                  return o;
              }));
          }));
      }, t.prototype.An = function(t, e, n) {
          var r, i, o = this;
          // Query the remote documents and overlay mutations.
                  return this.Ue.getDocumentsMatchingQuery(t, e, n).next((function(n) {
              return r = n, o._n.getAllMutationBatchesAffectingQuery(t, e);
          })).next((function(e) {
              return i = e, o.Rn(t, i, r).next((function(t) {
                  r = t;
                  for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], s = 0, u = o.mutations; s < u.length; s++) {
                      var a = u[s], c = a.key, h = r.get(c);
                      null == h && (
                      // Create invalid document to apply mutations on top of
                      h = Nt.newInvalidDocument(c), r = r.insert(c, h)), xe(a, h, o.localWriteTime), h.isFoundDocument() || (r = r.remove(c));
                  }
              }));
          })).next((function() {
              // Finally, filter out any documents that don't actually match
              // the query.
              return r.forEach((function(t, n) {
                  ue(e, n) || (r = r.remove(t));
              })), r;
          }));
      }, t.prototype.Rn = function(t, e, n) {
          for (var r = sn(), i = 0, o = e; i < o.length; i++) for (var s = 0, u = o[i].mutations; s < u.length; s++) {
              var a = u[s];
              a instanceof Fe && null === n.get(a.key) && (r = r.add(a.key));
          }
          var c = n;
          return this.Ue.getEntries(t, r).next((function(t) {
              return t.forEach((function(t, e) {
                  e.isFoundDocument() && (c = c.insert(t, e));
              })), c;
          }));
      }, t;
  }(), Mi = /** @class */ function() {
      function t(t, e, n, r) {
          this.targetId = t, this.fromCache = e, this.bn = n, this.vn = r;
      }
      return t.Pn = function(e, n) {
          for (var r = sn(), i = sn(), o = 0, s = n.docChanges; o < s.length; o++) {
              var u = s[o];
              switch (u.type) {
                case 0 /* Added */ :
                  r = r.add(u.doc.key);
                  break;

                case 1 /* Removed */ :
                  i = i.add(u.doc.key);
                  // do nothing
                          }
          }
          return new t(e, n.fromCache, r, i);
      }, t;
  }(), Vi = /** @class */ function() {
      function t() {}
      /** Sets the document view to query against. */    return t.prototype.Vn = function(t) {
          this.Sn = t;
      }, 
      /** Returns all local documents matching the specified query. */ t.prototype.getDocumentsMatchingQuery = function(t, e, n, r) {
          var i = this;
          // Queries that match all documents don't benefit from using
          // key-based lookups. It is more efficient to scan all documents in a
          // collection, rather than to perform individual lookups.
                  return function(t) {
              return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
          }(e) || n.isEqual(K$1.min()) ? this.Dn(t, e) : this.Sn.pn(t, r).next((function(o) {
              var s = i.Cn(e, o);
              return ($t(e) || Xt(e)) && i.Nn(e.limitType, s, r, n) ? i.Dn(t, e) : (k$1() <= LogLevel.DEBUG && C$1("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), se(e)), 
              i.Sn.getDocumentsMatchingQuery(t, e, n).next((function(t) {
                  // We merge `previousResults` into `updateResults`, since
                  // `updateResults` is already a DocumentMap. If a document is
                  // contained in both lists, then its contents are the same.
                  return s.forEach((function(e) {
                      t = t.insert(e.key, e);
                  })), t;
              })));
          }));
          // Queries that have never seen a snapshot without limbo free documents
          // should also be run as a full collection scan.
          }, 
      /** Applies the query filter and sorting to the provided documents.  */ t.prototype.Cn = function(t, e) {
          // Sort the documents and re-apply the query filter since previously
          // matching documents do not necessarily still match the query.
          var n = new $e(ae(t));
          return e.forEach((function(e, r) {
              ue(t, r) && (n = n.add(r));
          })), n;
      }, 
      /**
       * Determines if a limit query needs to be refilled from cache, making it
       * ineligible for index-free execution.
       *
       * @param sortedPreviousResults - The documents that matched the query when it
       * was last synchronized, sorted by the query's comparator.
       * @param remoteKeys - The document keys that matched the query at the last
       * snapshot.
       * @param limboFreeSnapshotVersion - The version of the snapshot when the
       * query was last synchronized.
       */
      t.prototype.Nn = function(t, e, n, r) {
          // The query needs to be refilled if a previously matching document no
          // longer matches.
          if (n.size !== e.size) return !0;
          // Limit queries are not eligible for index-free query execution if there is
          // a potential that an older document from cache now sorts before a document
          // that was previously part of the limit. This, however, can only happen if
          // the document at the edge of the limit goes out of limit.
          // If a document that is not the limit boundary sorts differently,
          // the boundary of the limit itself did not change and documents from cache
          // will continue to be "rejected" by this boundary. Therefore, we can ignore
          // any modifications that don't affect the last document.
                  var i = "F" /* First */ === t ? e.last() : e.first();
          return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);
      }, t.prototype.Dn = function(t, e) {
          return k$1() <= LogLevel.DEBUG && C$1("QueryEngine", "Using full collection scan to execute query:", se(e)), 
          this.Sn.getDocumentsMatchingQuery(t, e, K$1.min());
      }, t;
  }(), qi = /** @class */ function() {
      function t(
      /** Manages our in-memory or durable persistence. */
      t, e, n, r) {
          this.persistence = t, this.xn = e, this.R = r, 
          /**
               * Maps a targetID to data about its target.
               *
               * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
               * of `applyRemoteEvent()` idempotent.
               */
          this.kn = new We(q$1), 
          /** Maps a target to its targetID. */
          // TODO(wuandy): Evaluate if TargetId can be part of Target.
          this.Fn = new Ii((function(t) {
              return kt(t);
          }), Ct), 
          /**
               * The read time of the last entry processed by `getNewDocumentChanges()`.
               *
               * PORTING NOTE: This is only used for multi-tab synchronization.
               */
          this.$n = K$1.min(), this._n = t.getMutationQueue(n), this.On = t.getRemoteDocumentCache(), 
          this.qe = t.getTargetCache(), this.Mn = new Fi(this.On, this._n, this.persistence.getIndexManager()), 
          this.Ke = t.getBundleCache(), this.xn.Vn(this.Mn);
      }
      return t.prototype.collectGarbage = function(t) {
          var e = this;
          return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(n) {
              return t.collect(n, e.kn);
          }));
      }, t;
  }();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A readonly view of the local state of all documents we're tracking (i.e. we
   * have a cached version in remoteDocumentCache or local mutations for the
   * document). The view is computed by applying the mutations in the
   * MutationQueue to the RemoteDocumentCache.
   */ function Ui(
  /** Manages our in-memory or durable persistence. */
  t, e, n, r) {
      return new qi(t, e, n, r);
  }

  /**
   * Tells the LocalStore that the currently authenticated user has changed.
   *
   * In response the local store switches the mutation queue to the new user and
   * returns any resulting document changes.
   */
  // PORTING NOTE: Android and iOS only return the documents affected by the
  // change.
  function Bi(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return n = F$1(t), i = n._n, o = n.Mn, [ 4 /*yield*/ , n.persistence.runTransaction("Handle user change", "readonly", (function(t) {
                      // Swap out the mutation queue, grabbing the pending mutation batches
                      // before and after.
                      var r;
                      return n._n.getAllMutationBatches(t).next((function(s) {
                          return r = s, i = n.persistence.getMutationQueue(e), 
                          // Recreate our LocalDocumentsView using the new
                          // MutationQueue.
                          o = new Fi(n.On, i, n.persistence.getIndexManager()), i.getAllMutationBatches(t);
                      })).next((function(e) {
                          for (var n = [], i = [], s = sn(), u = 0, a = r
                          // Union the old/new changed keys.
                          ; u < a.length; u++) {
                              var c = a[u];
                              n.push(c.batchId);
                              for (var h = 0, f = c.mutations; h < f.length; h++) {
                                  var l = f[h];
                                  s = s.add(l.key);
                              }
                          }
                          for (var d = 0, p = e; d < p.length; d++) {
                              var y = p[d];
                              i.push(y.batchId);
                              for (var v = 0, m = y.mutations; v < m.length; v++) {
                                  var g = m[v];
                                  s = s.add(g.key);
                              }
                          }
                          // Return the set of all (potentially) changed documents and the list
                          // of mutation batch IDs that were affected by change.
                                                  return o.pn(t, s).next((function(t) {
                              return {
                                  Ln: t,
                                  removedBatchIds: n,
                                  addedBatchIds: i
                              };
                          }));
                      }));
                  })) ];

                case 1:
                  return s = r.sent(), [ 2 /*return*/ , (n._n = i, n.Mn = o, n.xn.Vn(n.Mn), s) ];
              }
          }));
      }));
  }

  /* Accepts locally generated Mutations and commit them to storage. */
  /**
   * Acknowledges the given batch.
   *
   * On the happy path when a batch is acknowledged, the local store will
   *
   *  + remove the batch from the mutation queue;
   *  + apply the changes to the remote document cache;
   *  + recalculate the latency compensated view implied by those changes (there
   *    may be mutations in the queue that affect the documents but haven't been
   *    acknowledged yet); and
   *  + give the changed documents back the sync engine
   *
   * @returns The resulting (modified) documents.
   */ function ji(t, e) {
      var n = F$1(t);
      return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(t) {
          var r = e.batch.keys(), i = n.On.newChangeBuffer({
              trackRemovals: !0
          });
          return function(t, e, n, r) {
              var i = n.batch, o = i.keys(), s = Ir.resolve();
              return o.forEach((function(t) {
                  s = s.next((function() {
                      return r.getEntry(e, t);
                  })).next((function(e) {
                      var o = n.docVersions.get(t);
                      P$1(null !== o), e.version.compareTo(o) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && 
                      // We use the commitVersion as the readTime rather than the
                      // document's updateTime since the updateTime is not advanced
                      // for updates that do not modify the underlying document.
                      r.addEntry(e, n.commitVersion));
                  }));
              })), s.next((function() {
                  return t._n.removeMutationBatch(e, i);
              }));
          }(n, t, e, i).next((function() {
              return i.apply(t);
          })).next((function() {
              return n._n.performConsistencyCheck(t);
          })).next((function() {
              return n.Mn.pn(t, r);
          }));
      }));
  }

  /**
   * Removes mutations from the MutationQueue for the specified batch;
   * LocalDocuments will be recalculated.
   *
   * @returns The resulting modified documents.
   */
  /**
   * Returns the last consistent snapshot processed (used by the RemoteStore to
   * determine whether to buffer incoming snapshots from the backend).
   */ function Ki(t) {
      var e = F$1(t);
      return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(t) {
          return e.qe.getLastRemoteSnapshotVersion(t);
      }));
  }

  /**
   * Updates the "ground-state" (remote) documents. We assume that the remote
   * event reflects any write batches that have been acknowledged or rejected
   * (i.e. we do not re-apply local mutations to updates from this event).
   *
   * LocalDocuments are re-calculated if there are remaining mutations in the
   * queue.
   */ function Qi(t, e) {
      var n = F$1(t), r = e.snapshotVersion, i = n.kn;
      return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(t) {
          var o = n.On.newChangeBuffer({
              trackRemovals: !0
          });
          // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                  i = n.kn;
          var s = [];
          e.targetChanges.forEach((function(e, o) {
              var u = i.get(o);
              if (u) {
                  // Only update the remote keys if the target is still active. This
                  // ensures that we can persist the updated target data along with
                  // the updated assignment.
                  s.push(n.qe.removeMatchingKeys(t, e.removedDocuments, o).next((function() {
                      return n.qe.addMatchingKeys(t, e.addedDocuments, o);
                  })));
                  var a = e.resumeToken;
                  // Update the resume token if the change includes one.
                                  if (a.approximateByteSize() > 0) {
                      var c = u.withResumeToken(a, r).withSequenceNumber(t.currentSequenceNumber);
                      i = i.insert(o, c), 
                      // Update the target data if there are target changes (or if
                      // sufficient time has passed since the last update).
                      /**
       * Returns true if the newTargetData should be persisted during an update of
       * an active target. TargetData should always be persisted when a target is
       * being released and should not call this function.
       *
       * While the target is active, TargetData updates can be omitted when nothing
       * about the target has changed except metadata like the resume token or
       * snapshot version. Occasionally it's worth the extra write to prevent these
       * values from getting too stale after a crash, but this doesn't have to be
       * too frequent.
       */
                      function(t, e, n) {
                          // Always persist target data if we don't already have a resume token.
                          return P$1(e.resumeToken.approximateByteSize() > 0), 0 === t.resumeToken.approximateByteSize() || (
                          // Don't allow resume token changes to be buffered indefinitely. This
                          // allows us to be reasonably up-to-date after a crash and avoids needing
                          // to loop over all active queries on shutdown. Especially in the browser
                          // we may not get time to do anything interesting while the current tab is
                          // closing.
                          e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8 || n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0);
                      }(u, c, e) && s.push(n.qe.updateTargetData(t, c));
                  }
              }
          }));
          var u = Ze();
          // HACK: The only reason we allow a null snapshot version is so that we
          // can synthesize remote events when we get permission denied errors while
          // trying to resolve the state of a locally cached document that is in
          // limbo.
                  if (e.documentUpdates.forEach((function(r, i) {
              e.resolvedLimboDocuments.has(r) && s.push(n.persistence.referenceDelegate.updateLimboDocument(t, r));
          })), 
          // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
          // documents in advance in a single call.
          s.push(Gi(t, o, e.documentUpdates, r, void 0).next((function(t) {
              u = t;
          }))), !r.isEqual(K$1.min())) {
              var a = n.qe.getLastRemoteSnapshotVersion(t).next((function(e) {
                  return n.qe.setTargetsMetadata(t, t.currentSequenceNumber, r);
              }));
              s.push(a);
          }
          return Ir.waitFor(s).next((function() {
              return o.apply(t);
          })).next((function() {
              return n.Mn.En(t, u);
          })).next((function() {
              return u;
          }));
      })).then((function(t) {
          return n.kn = i, t;
      }));
  }

  /**
   * Populates document change buffer with documents from backend or a bundle.
   * Returns the document changes resulting from applying those documents.
   *
   * @param txn - Transaction to use to read existing documents from storage.
   * @param documentBuffer - Document buffer to collect the resulted changes to be
   *        applied to storage.
   * @param documents - Documents to be applied.
   * @param globalVersion - A `SnapshotVersion` representing the read time if all
   *        documents have the same read time.
   * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
   *        have their own read time.
   *
   * Note: this function will use `documentVersions` if it is defined;
   * when it is not defined, resorts to `globalVersion`.
   */ function Gi(t, e, n, r, 
  // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
  // this parameter.
  i) {
      var o = sn();
      return n.forEach((function(t) {
          return o = o.add(t);
      })), e.getEntries(t, o).next((function(t) {
          var o = Ze();
          return n.forEach((function(n, s) {
              var u = t.get(n), a = (null == i ? void 0 : i.get(n)) || r;
              // Note: The order of the steps below is important, since we want
              // to ensure that rejected limbo resolutions (which fabricate
              // NoDocuments with SnapshotVersion.min()) never add documents to
              // cache.
                          s.isNoDocument() && s.version.isEqual(K$1.min()) ? (
              // NoDocuments with SnapshotVersion.min() are used in manufactured
              // events. We remove these documents from cache since we lost
              // access.
              e.removeEntry(n, a), o = o.insert(n, s)) : !u.isValidDocument() || s.version.compareTo(u.version) > 0 || 0 === s.version.compareTo(u.version) && u.hasPendingWrites ? (e.addEntry(s, a), 
              o = o.insert(n, s)) : C$1("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", u.version, " Watch version:", s.version);
          })), o;
      }))
      /**
   * Gets the mutation batch after the passed in batchId in the mutation queue
   * or null if empty.
   * @param afterBatchId - If provided, the batch to search after.
   * @returns The next mutation or null if there wasn't one.
   */;
  }

  function zi(t, e) {
      var n = F$1(t);
      return n.persistence.runTransaction("Get next mutation batch", "readonly", (function(t) {
          return void 0 === e && (e = -1), n._n.getNextMutationBatchAfterBatchId(t, e);
      }));
  }

  /**
   * Reads the current value of a Document with a given key or null if not
   * found - used for testing.
   */
  /**
   * Assigns the given target an internal ID so that its results can be pinned so
   * they don't get GC'd. A target must be allocated in the local store before
   * the store can be used to manage its view.
   *
   * Allocating an already allocated `Target` will return the existing `TargetData`
   * for that `Target`.
   */ function Wi(t, e) {
      var n = F$1(t);
      return n.persistence.runTransaction("Allocate target", "readwrite", (function(t) {
          var r;
          return n.qe.getTargetData(t, e).next((function(i) {
              return i ? (
              // This target has been listened to previously, so reuse the
              // previous targetID.
              // TODO(mcg): freshen last accessed date?
              r = i, Ir.resolve(r)) : n.qe.allocateTargetId(t).next((function(i) {
                  return r = new Pr(e, i, 0 /* Listen */ , t.currentSequenceNumber), n.qe.addTargetData(t, r).next((function() {
                      return r;
                  }));
              }));
          }));
      })).then((function(t) {
          // If Multi-Tab is enabled, the existing target data may be newer than
          // the in-memory data
          var r = n.kn.get(t.targetId);
          return (null === r || t.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.kn = n.kn.insert(t.targetId, t), 
          n.Fn.set(e, t.targetId)), t;
      }));
  }

  /**
   * Returns the TargetData as seen by the LocalStore, including updates that may
   * have not yet been persisted to the TargetCache.
   */
  // Visible for testing.
  /**
   * Unpins all the documents associated with the given target. If
   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
   * directly removes the associated target data from the target cache.
   *
   * Releasing a non-existing `Target` is a no-op.
   */
  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
  function Hi(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o, s, u;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = F$1(t), o = n.kn.get(e), s = i ? "readwrite" : "readwrite-primary", r.label = 1;

                case 1:
                  return r.trys.push([ 1, 4, , 5 ]), i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , n.persistence.runTransaction("Release target", s, (function(t) {
                      return n.persistence.referenceDelegate.removeTarget(t, o);
                  })) ];

                case 2:
                  r.sent(), r.label = 3;

                case 3:
                  return [ 3 /*break*/ , 5 ];

                case 4:
                  if (!Nr(u = r.sent())) throw u;
                  // All `releaseTarget` does is record the final metadata state for the
                  // target, but we've been recording this periodically during target
                  // activity. If we lose this write this could cause a very slight
                  // difference in the order of target deletion during GC, but we
                  // don't define exact LRU semantics so this is acceptable.
                                  return C$1("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), 
                  [ 3 /*break*/ , 5 ];

                case 5:
                  return n.kn = n.kn.remove(e), n.Fn.delete(o.target), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Runs the specified query against the local store and returns the results,
   * potentially taking advantage of query data from previous executions (such
   * as the set of remote keys).
   *
   * @param usePreviousResults - Whether results from previous executions can
   * be used to optimize this query execution.
   */ function Yi(t, e, n) {
      var r = F$1(t), i = K$1.min(), o = sn();
      return r.persistence.runTransaction("Execute query", "readonly", (function(t) {
          return function(t, e, n) {
              var r = F$1(t), i = r.Fn.get(n);
              return void 0 !== i ? Ir.resolve(r.kn.get(i)) : r.qe.getTargetData(e, n);
          }(r, t, ne(e)).next((function(e) {
              if (e) return i = e.lastLimboFreeSnapshotVersion, r.qe.getMatchingKeysForTargetId(t, e.targetId).next((function(t) {
                  o = t;
              }));
          })).next((function() {
              return r.xn.getDocumentsMatchingQuery(t, e, n ? i : K$1.min(), n ? o : sn());
          })).next((function(t) {
              return {
                  documents: t,
                  Bn: o
              };
          }));
      }));
  }

  // PORTING NOTE: Multi-Tab only.
  function $i(t, e) {
      var n = F$1(t), r = F$1(n.qe), i = n.kn.get(e);
      return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (function(t) {
          return r.lt(t, e).next((function(t) {
              return t ? t.target : null;
          }));
      }));
  }

  /**
   * Returns the set of documents that have been updated since the last call.
   * If this is the first call, returns the set of changes since client
   * initialization. Further invocations will return document that have changed
   * since the prior call.
   */
  // PORTING NOTE: Multi-Tab only.
  function Xi(t) {
      var e = F$1(t);
      return e.persistence.runTransaction("Get new document changes", "readonly", (function(t) {
          return function(t, e, n) {
              var r = F$1(t), i = Ze(), o = qr(n), s = Ni(e), u = IDBKeyRange.lowerBound(o, !0);
              return s.$t({
                  index: ar.readTimeIndex,
                  range: u
              }, (function(t, e) {
                  // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                  // the documents directly since we want to keep sentinel deletes.
                  var n = Mr(r.R, e);
                  i = i.insert(n.key, n), o = e.readTime;
              })).next((function() {
                  return {
                      wn: i,
                      readTime: Ur(o)
                  };
              }));
          }(e.On, t, e.$n);
      })).then((function(t) {
          var n = t.wn, r = t.readTime;
          return e.$n = r, n;
      }));
  }

  /**
   * Reads the newest document change from persistence and moves the internal
   * synchronization marker forward so that calls to `getNewDocumentChanges()`
   * only return changes that happened after client initialization.
   */
  // PORTING NOTE: Multi-Tab only.
  function Ji(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e;
          return __generator$6(this, (function(n) {
              return [ 2 /*return*/ , (e = F$1(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                  return function(t) {
                      var e = Ni(t), n = K$1.min();
                      // If there are no existing entries, we return SnapshotVersion.min().
                                          return e.$t({
                          index: ar.readTimeIndex,
                          reverse: !0
                      }, (function(t, e, r) {
                          e.readTime && (n = Ur(e.readTime)), r.done();
                      })).next((function() {
                          return n;
                      }));
                  }(t);
              })).then((function(t) {
                  e.$n = t;
              })) ];
          }));
      }));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var eo = /** @class */ function() {
      function t(t) {
          this.R = t, this.Qn = new Map, this.jn = new Map;
      }
      return t.prototype.getBundleMetadata = function(t, e) {
          return Ir.resolve(this.Qn.get(e));
      }, t.prototype.saveBundleMetadata = function(t, e) {
          /** Decodes a BundleMetadata proto into a BundleMetadata object. */
          var n;
          return this.Qn.set(e.id, {
              id: (n = e).id,
              version: n.version,
              createTime: _n(n.createTime)
          }), Ir.resolve();
      }, t.prototype.getNamedQuery = function(t, e) {
          return Ir.resolve(this.jn.get(e));
      }, t.prototype.saveNamedQuery = function(t, e) {
          return this.jn.set(e.name, function(t) {
              return {
                  name: t.name,
                  query: zr(t.bundledQuery),
                  readTime: _n(t.readTime)
              };
          }(e)), Ir.resolve();
      }, t;
  }(), no = /** @class */ function() {
      function t() {
          // A set of outstanding references to a document sorted by key.
          this.Wn = new $e(ro.Gn), 
          // A set of outstanding references to a document sorted by target id.
          this.zn = new $e(ro.Hn)
          /** Returns true if the reference set contains no references. */;
      }
      return t.prototype.isEmpty = function() {
          return this.Wn.isEmpty();
      }, 
      /** Adds a reference to the given document key for the given ID. */ t.prototype.addReference = function(t, e) {
          var n = new ro(t, e);
          this.Wn = this.Wn.add(n), this.zn = this.zn.add(n);
      }, 
      /** Add references to the given document keys for the given ID. */ t.prototype.Jn = function(t, e) {
          var n = this;
          t.forEach((function(t) {
              return n.addReference(t, e);
          }));
      }, 
      /**
       * Removes a reference to the given document key for the given
       * ID.
       */
      t.prototype.removeReference = function(t, e) {
          this.Yn(new ro(t, e));
      }, t.prototype.Xn = function(t, e) {
          var n = this;
          t.forEach((function(t) {
              return n.removeReference(t, e);
          }));
      }, 
      /**
       * Clears all references with a given ID. Calls removeRef() for each key
       * removed.
       */
      t.prototype.Zn = function(t) {
          var e = this, n = new ct(new H$1([])), r = new ro(n, t), i = new ro(n, t + 1), o = [];
          return this.zn.forEachInRange([ r, i ], (function(t) {
              e.Yn(t), o.push(t.key);
          })), o;
      }, t.prototype.ts = function() {
          var t = this;
          this.Wn.forEach((function(e) {
              return t.Yn(e);
          }));
      }, t.prototype.Yn = function(t) {
          this.Wn = this.Wn.delete(t), this.zn = this.zn.delete(t);
      }, t.prototype.es = function(t) {
          var e = new ct(new H$1([])), n = new ro(e, t), r = new ro(e, t + 1), i = sn();
          return this.zn.forEachInRange([ n, r ], (function(t) {
              i = i.add(t.key);
          })), i;
      }, t.prototype.containsKey = function(t) {
          var e = new ro(t, 0), n = this.Wn.firstAfterOrEqual(e);
          return null !== n && t.isEqual(n.key);
      }, t;
  }(), ro = /** @class */ function() {
      function t(t, e) {
          this.key = t, this.ns = e
          /** Compare by key then by ID */;
      }
      return t.Gn = function(t, e) {
          return ct.comparator(t.key, e.key) || q$1(t.ns, e.ns);
      }, 
      /** Compare by ID then by key */ t.Hn = function(t, e) {
          return q$1(t.ns, e.ns) || ct.comparator(t.key, e.key);
      }, t;
  }(), io = /** @class */ function() {
      function t(t, e) {
          this.Ut = t, this.referenceDelegate = e, 
          /**
               * The set of all mutations that have been sent but not yet been applied to
               * the backend.
               */
          this._n = [], 
          /** Next value to use when assigning sequential IDs to each mutation batch. */
          this.ss = 1, 
          /** An ordered mapping between documents and the mutations batch IDs. */
          this.rs = new $e(ro.Gn);
      }
      return t.prototype.checkEmpty = function(t) {
          return Ir.resolve(0 === this._n.length);
      }, t.prototype.addMutationBatch = function(t, e, n, r) {
          var i = this.ss;
          this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
          var o = new Lr(i, e, n, r);
          this._n.push(o);
          // Track references by document key and index collection parents.
          for (var s = 0, u = r; s < u.length; s++) {
              var a = u[s];
              this.rs = this.rs.add(new ro(a.key, i)), this.Ut.addToCollectionParentIndex(t, a.key.path.popLast());
          }
          return Ir.resolve(o);
      }, t.prototype.lookupMutationBatch = function(t, e) {
          return Ir.resolve(this.os(e));
      }, t.prototype.getNextMutationBatchAfterBatchId = function(t, e) {
          var n = e + 1, r = this.cs(n), i = r < 0 ? 0 : r;
          // The requested batchId may still be out of range so normalize it to the
          // start of the queue.
                  return Ir.resolve(this._n.length > i ? this._n[i] : null);
      }, t.prototype.getHighestUnacknowledgedBatchId = function() {
          return Ir.resolve(0 === this._n.length ? -1 : this.ss - 1);
      }, t.prototype.getAllMutationBatches = function(t) {
          return Ir.resolve(this._n.slice());
      }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t, e) {
          var n = this, r = new ro(e, 0), i = new ro(e, Number.POSITIVE_INFINITY), o = [];
          return this.rs.forEachInRange([ r, i ], (function(t) {
              var e = n.os(t.ns);
              o.push(e);
          })), Ir.resolve(o);
      }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t, e) {
          var n = this, r = new $e(q$1);
          return e.forEach((function(t) {
              var e = new ro(t, 0), i = new ro(t, Number.POSITIVE_INFINITY);
              n.rs.forEachInRange([ e, i ], (function(t) {
                  r = r.add(t.ns);
              }));
          })), Ir.resolve(this.us(r));
      }, t.prototype.getAllMutationBatchesAffectingQuery = function(t, e) {
          // Use the query path as a prefix for testing if a document matches the
          // query.
          var n = e.path, r = n.length + 1, i = n;
          // Construct a document reference for actually scanning the index. Unlike
          // the prefix the document key in this reference must have an even number of
          // segments. The empty segment can be used a suffix of the query path
          // because it precedes all other segments in an ordered traversal.
                  ct.isDocumentKey(i) || (i = i.child(""));
          var o = new ro(new ct(i), 0), s = new $e(q$1);
          // Find unique batchIDs referenced by all documents potentially matching the
          // query.
                  return this.rs.forEachWhile((function(t) {
              var e = t.key.path;
              return !!n.isPrefixOf(e) && (
              // Rows with document keys more than one segment longer than the query
              // path can't be matches. For example, a query on 'rooms' can't match
              // the document /rooms/abc/messages/xyx.
              // TODO(mcg): we'll need a different scanner when we implement
              // ancestor queries.
              e.length === r && (s = s.add(t.ns)), !0);
          }), o), Ir.resolve(this.us(s));
      }, t.prototype.us = function(t) {
          var e = this, n = [];
          // Construct an array of matching batches, sorted by batchID to ensure that
          // multiple mutations affecting the same document key are applied in order.
                  return t.forEach((function(t) {
              var r = e.os(t);
              null !== r && n.push(r);
          })), n;
      }, t.prototype.removeMutationBatch = function(t, e) {
          var n = this;
          P$1(0 === this.hs(e.batchId, "removed")), this._n.shift();
          var r = this.rs;
          return Ir.forEach(e.mutations, (function(i) {
              var o = new ro(i.key, e.batchId);
              return r = r.delete(o), n.referenceDelegate.markPotentiallyOrphaned(t, i.key);
          })).next((function() {
              n.rs = r;
          }));
      }, t.prototype.Gt = function(t) {
          // No-op since the memory mutation queue does not maintain a separate cache.
      }, t.prototype.containsKey = function(t, e) {
          var n = new ro(e, 0), r = this.rs.firstAfterOrEqual(n);
          return Ir.resolve(e.isEqual(r && r.key));
      }, t.prototype.performConsistencyCheck = function(t) {
          return this._n.length, Ir.resolve();
      }, 
      /**
       * Finds the index of the given batchId in the mutation queue and asserts that
       * the resulting index is within the bounds of the queue.
       *
       * @param batchId - The batchId to search for
       * @param action - A description of what the caller is doing, phrased in passive
       * form (e.g. "acknowledged" in a routine that acknowledges batches).
       */
      t.prototype.hs = function(t, e) {
          return this.cs(t);
      }, 
      /**
       * Finds the index of the given batchId in the mutation queue. This operation
       * is O(1).
       *
       * @returns The computed index of the batch with the given batchId, based on
       * the state of the queue. Note this index can be negative if the requested
       * batchId has already been remvoed from the queue or past the end of the
       * queue if the batchId is larger than the last added batch.
       */
      t.prototype.cs = function(t) {
          return 0 === this._n.length ? 0 : t - this._n[0].batchId;
          // Examine the front of the queue to figure out the difference between the
          // batchId and indexes in the array. Note that since the queue is ordered
          // by batchId, if the first batch has a larger batchId then the requested
          // batchId doesn't exist in the queue.
          }, 
      /**
       * A version of lookupMutationBatch that doesn't return a promise, this makes
       * other functions that uses this code easier to read and more efficent.
       */
      t.prototype.os = function(t) {
          var e = this.cs(t);
          return e < 0 || e >= this._n.length ? null : this._n[e];
      }, t;
  }(), oo = /** @class */ function() {
      /**
       * @param sizer - Used to assess the size of a document. For eager GC, this is
       * expected to just return 0 to avoid unnecessarily doing the work of
       * calculating the size.
       */
      function t(t, e) {
          this.Ut = t, this.ls = e, 
          /** Underlying cache of documents and their read times. */
          this.docs = new We(ct.comparator), 
          /** Size of all cached documents. */
          this.size = 0
          /**
       * Adds the supplied entry to the cache and updates the cache size as appropriate.
       *
       * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */;
      }
      return t.prototype.addEntry = function(t, e, n) {
          var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, s = this.ls(e);
          return this.docs = this.docs.insert(r, {
              document: e.clone(),
              size: s,
              readTime: n
          }), this.size += s - o, this.Ut.addToCollectionParentIndex(t, r.path.popLast());
      }, 
      /**
       * Removes the specified entry from the cache and updates the cache size as appropriate.
       *
       * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      t.prototype.removeEntry = function(t) {
          var e = this.docs.get(t);
          e && (this.docs = this.docs.remove(t), this.size -= e.size);
      }, t.prototype.getEntry = function(t, e) {
          var n = this.docs.get(e);
          return Ir.resolve(n ? n.document.clone() : Nt.newInvalidDocument(e));
      }, t.prototype.getEntries = function(t, e) {
          var n = this, r = Ze();
          return e.forEach((function(t) {
              var e = n.docs.get(t);
              r = r.insert(t, e ? e.document.clone() : Nt.newInvalidDocument(t));
          })), Ir.resolve(r);
      }, t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
          for (var r = Ze(), i = new ct(e.path.child("")), o = this.docs.getIteratorFrom(i)
          // Documents are ordered by key, so we can use a prefix scan to narrow down
          // the documents we need to match the query against.
          ; o.hasNext(); ) {
              var s = o.getNext(), u = s.key, a = s.value, c = a.document, h = a.readTime;
              if (!e.path.isPrefixOf(u.path)) break;
              h.compareTo(n) <= 0 || ue(e, c) && (r = r.insert(c.key, c.clone()));
          }
          return Ir.resolve(r);
      }, t.prototype.fs = function(t, e) {
          return Ir.forEach(this.docs, (function(t) {
              return e(t);
          }));
      }, t.prototype.newChangeBuffer = function(t) {
          // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
          // a separate changelog and does not need special handling for removals.
          return new so(this);
      }, t.prototype.getSize = function(t) {
          return Ir.resolve(this.size);
      }, t;
  }(), so = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).Ie = t, n;
      }
      return __extends$6(n, e), n.prototype.applyChanges = function(t) {
          var e = this, n = [];
          return this.changes.forEach((function(r, i) {
              i.document.isValidDocument() ? n.push(e.Ie.addEntry(t, i.document, e.getReadTime(r))) : e.Ie.removeEntry(r);
          })), Ir.waitFor(n);
      }, n.prototype.getFromCache = function(t, e) {
          return this.Ie.getEntry(t, e);
      }, n.prototype.getAllFromCache = function(t, e) {
          return this.Ie.getEntries(t, e);
      }, n;
  }(Ti), uo = /** @class */ function() {
      function t(t) {
          this.persistence = t, 
          /**
               * Maps a target to the data about that target
               */
          this.ds = new Ii((function(t) {
              return kt(t);
          }), Ct), 
          /** The last received snapshot version. */
          this.lastRemoteSnapshotVersion = K$1.min(), 
          /** The highest numbered target ID encountered. */
          this.highestTargetId = 0, 
          /** The highest sequence number encountered. */
          this.ws = 0, 
          /**
               * A ordered bidirectional mapping between documents and the remote target
               * IDs.
               */
          this._s = new no, this.targetCount = 0, this.ys = ci.Jt();
      }
      return t.prototype.forEachTarget = function(t, e) {
          return this.ds.forEach((function(t, n) {
              return e(n);
          })), Ir.resolve();
      }, t.prototype.getLastRemoteSnapshotVersion = function(t) {
          return Ir.resolve(this.lastRemoteSnapshotVersion);
      }, t.prototype.getHighestSequenceNumber = function(t) {
          return Ir.resolve(this.ws);
      }, t.prototype.allocateTargetId = function(t) {
          return this.highestTargetId = this.ys.next(), Ir.resolve(this.highestTargetId);
      }, t.prototype.setTargetsMetadata = function(t, e, n) {
          return n && (this.lastRemoteSnapshotVersion = n), e > this.ws && (this.ws = e), 
          Ir.resolve();
      }, t.prototype.te = function(t) {
          this.ds.set(t.target, t);
          var e = t.targetId;
          e > this.highestTargetId && (this.ys = new ci(e), this.highestTargetId = e), t.sequenceNumber > this.ws && (this.ws = t.sequenceNumber);
      }, t.prototype.addTargetData = function(t, e) {
          return this.te(e), this.targetCount += 1, Ir.resolve();
      }, t.prototype.updateTargetData = function(t, e) {
          return this.te(e), Ir.resolve();
      }, t.prototype.removeTargetData = function(t, e) {
          return this.ds.delete(e.target), this._s.Zn(e.targetId), this.targetCount -= 1, 
          Ir.resolve();
      }, t.prototype.removeTargets = function(t, e, n) {
          var r = this, i = 0, o = [];
          return this.ds.forEach((function(s, u) {
              u.sequenceNumber <= e && null === n.get(u.targetId) && (r.ds.delete(s), o.push(r.removeMatchingKeysForTargetId(t, u.targetId)), 
              i++);
          })), Ir.waitFor(o).next((function() {
              return i;
          }));
      }, t.prototype.getTargetCount = function(t) {
          return Ir.resolve(this.targetCount);
      }, t.prototype.getTargetData = function(t, e) {
          var n = this.ds.get(e) || null;
          return Ir.resolve(n);
      }, t.prototype.addMatchingKeys = function(t, e, n) {
          return this._s.Jn(e, n), Ir.resolve();
      }, t.prototype.removeMatchingKeys = function(t, e, n) {
          this._s.Xn(e, n);
          var r = this.persistence.referenceDelegate, i = [];
          return r && e.forEach((function(e) {
              i.push(r.markPotentiallyOrphaned(t, e));
          })), Ir.waitFor(i);
      }, t.prototype.removeMatchingKeysForTargetId = function(t, e) {
          return this._s.Zn(e), Ir.resolve();
      }, t.prototype.getMatchingKeysForTargetId = function(t, e) {
          var n = this._s.es(e);
          return Ir.resolve(n);
      }, t.prototype.containsKey = function(t, e) {
          return Ir.resolve(this._s.containsKey(e));
      }, t;
  }(), ao = /** @class */ function() {
      /**
       * The constructor accepts a factory for creating a reference delegate. This
       * allows both the delegate and this instance to have strong references to
       * each other without having nullable fields that would then need to be
       * checked or asserted on every access.
       */
      function t(t, e) {
          var n = this;
          this.gs = {}, this.Ne = new S$1(0), this.xe = !1, this.xe = !0, this.referenceDelegate = t(this), 
          this.qe = new uo(this), this.Ut = new $r, this.Ue = function(t, e) {
              return new oo(t, (function(t) {
                  return n.referenceDelegate.ps(t);
              }));
          }(this.Ut), this.R = new Fr(e), this.Ke = new eo(this.R);
      }
      return t.prototype.start = function() {
          return Promise.resolve();
      }, t.prototype.shutdown = function() {
          // No durable state to ensure is closed on shutdown.
          return this.xe = !1, Promise.resolve();
      }, Object.defineProperty(t.prototype, "started", {
          get: function() {
              return this.xe;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.setDatabaseDeletedListener = function() {
          // No op.
      }, t.prototype.setNetworkEnabled = function() {
          // No op.
      }, t.prototype.getIndexManager = function() {
          return this.Ut;
      }, t.prototype.getMutationQueue = function(t) {
          var e = this.gs[t.toKey()];
          return e || (e = new io(this.Ut, this.referenceDelegate), this.gs[t.toKey()] = e), 
          e;
      }, t.prototype.getTargetCache = function() {
          return this.qe;
      }, t.prototype.getRemoteDocumentCache = function() {
          return this.Ue;
      }, t.prototype.getBundleCache = function() {
          return this.Ke;
      }, t.prototype.runTransaction = function(t, e, n) {
          var r = this;
          C$1("MemoryPersistence", "Starting transaction:", t);
          var i = new co(this.Ne.next());
          return this.referenceDelegate.Es(), n(i).next((function(t) {
              return r.referenceDelegate.Ts(i).next((function() {
                  return t;
              }));
          })).toPromise().then((function(t) {
              return i.raiseOnCommittedEvent(), t;
          }));
      }, t.prototype.Is = function(t, e) {
          return Ir.or(Object.values(this.gs).map((function(n) {
              return function() {
                  return n.containsKey(t, e);
              };
          })));
      }, t;
  }(), co = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).currentSequenceNumber = t, n;
      }
      return __extends$6(n, e), n;
  }(wr), ho = /** @class */ function() {
      function t(t) {
          this.persistence = t, 
          /** Tracks all documents that are active in Query views. */
          this.As = new no, 
          /** The list of documents that are potentially GCed after each transaction. */
          this.Rs = null;
      }
      return t.bs = function(e) {
          return new t(e);
      }, Object.defineProperty(t.prototype, "vs", {
          get: function() {
              if (this.Rs) return this.Rs;
              throw O$1();
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.addReference = function(t, e, n) {
          return this.As.addReference(n, e), this.vs.delete(n.toString()), Ir.resolve();
      }, t.prototype.removeReference = function(t, e, n) {
          return this.As.removeReference(n, e), this.vs.add(n.toString()), Ir.resolve();
      }, t.prototype.markPotentiallyOrphaned = function(t, e) {
          return this.vs.add(e.toString()), Ir.resolve();
      }, t.prototype.removeTarget = function(t, e) {
          var n = this;
          this.As.Zn(e.targetId).forEach((function(t) {
              return n.vs.add(t.toString());
          }));
          var r = this.persistence.getTargetCache();
          return r.getMatchingKeysForTargetId(t, e.targetId).next((function(t) {
              t.forEach((function(t) {
                  return n.vs.add(t.toString());
              }));
          })).next((function() {
              return r.removeTargetData(t, e);
          }));
      }, t.prototype.Es = function() {
          this.Rs = new Set;
      }, t.prototype.Ts = function(t) {
          var e = this, n = this.persistence.getRemoteDocumentCache().newChangeBuffer();
          // Remove newly orphaned documents.
                  return Ir.forEach(this.vs, (function(r) {
              var i = ct.fromPath(r);
              return e.Ps(t, i).next((function(t) {
                  t || n.removeEntry(i);
              }));
          })).next((function() {
              return e.Rs = null, n.apply(t);
          }));
      }, t.prototype.updateLimboDocument = function(t, e) {
          var n = this;
          return this.Ps(t, e).next((function(t) {
              t ? n.vs.delete(e.toString()) : n.vs.add(e.toString());
          }));
      }, t.prototype.ps = function(t) {
          // For eager GC, we don't care about the document size, there are no size thresholds.
          return 0;
      }, t.prototype.Ps = function(t, e) {
          var n = this;
          return Ir.or([ function() {
              return Ir.resolve(n.As.containsKey(e));
          }, function() {
              return n.persistence.getTargetCache().containsKey(t, e);
          }, function() {
              return n.persistence.Is(t, e);
          } ]);
      }, t;
  }(), fo = /** @class */ function() {
      function t(t) {
          this.uid = t;
      }
      return t.prototype.isAuthenticated = function() {
          return null != this.uid;
      }, 
      /**
       * Returns a key representing this user, suitable for inclusion in a
       * dictionary.
       */
      t.prototype.toKey = function() {
          return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
      }, t.prototype.isEqual = function(t) {
          return t.uid === this.uid;
      }, t;
  }();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A collection of references to a document from some kind of numbered entity
   * (either a target ID or batch ID). As references are added to or removed from
   * the set corresponding events are emitted to a registered garbage collector.
   *
   * Each reference is represented by a DocumentReference object. Each of them
   * contains enough information to uniquely identify the reference. They are all
   * stored primarily in a set sorted by key. A document is considered garbage if
   * there's no references in that set (this can be efficiently checked thanks to
   * sorting by key).
   *
   * ReferenceSet also keeps a secondary set that contains references sorted by
   * IDs. This one is used to efficiently implement removal of all references by
   * some target ID.
   */
  /** Assembles the key for a client state in WebStorage */
  function lo(t, e) {
      return "firestore_clients_" + t + "_" + e;
  }

  // The format of the WebStorage key that stores the mutation state is:
  //     firestore_mutations_<persistence_prefix>_<batch_id>
  //     (for unauthenticated users)
  // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
  // 'user_uid' is last to avoid needing to escape '_' characters that it might
  // contain.
  /** Assembles the key for a mutation batch in WebStorage */ function po(t, e, n) {
      var r = "firestore_mutations_" + t + "_" + n;
      return e.isAuthenticated() && (r += "_" + e.uid), r;
  }

  // The format of the WebStorage key that stores a query target's metadata is:
  //     firestore_targets_<persistence_prefix>_<target_id>
  /** Assembles the key for a query state in WebStorage */ function yo(t, e) {
      return "firestore_targets_" + t + "_" + e;
  }

  // The WebStorage prefix that stores the primary tab's online state. The
  // format of the key is:
  //     firestore_online_state_<persistence_prefix>
  /**
   * Holds the state of a mutation batch, including its user ID, batch ID and
   * whether the batch is 'pending', 'acknowledged' or 'rejected'.
   */
  // Visible for testing
  /** A user with a null UID. */ fo.UNAUTHENTICATED = new fo(null), 
  // TODO(mikelehen): Look into getting a proper uid-equivalent for
  // non-FirebaseAuth providers.
  fo.GOOGLE_CREDENTIALS = new fo("google-credentials-uid"), fo.FIRST_PARTY = new fo("first-party-uid"), 
  fo.MOCK_USER = new fo("mock-user");

  var vo = /** @class */ function() {
      function t(t, e, n, r) {
          this.user = t, this.batchId = e, this.state = n, this.error = r
          /**
       * Parses a MutationMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */;
      }
      return t.Vs = function(e, n, r) {
          var i, o = JSON.parse(r), s = "object" == typeof o && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(o.state) && (void 0 === o.error || "object" == typeof o.error);
          return s && o.error && ((s = "string" == typeof o.error.message && "string" == typeof o.error.code) && (i = new D$1(o.error.code, o.error.message))), 
          s ? new t(e, n, o.state, i) : (x$1("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), 
          null);
      }, t.prototype.Ss = function() {
          var t = {
              state: this.state,
              updateTimeMs: Date.now()
          };
          return this.error && (t.error = {
              code: this.error.code,
              message: this.error.message
          }), JSON.stringify(t);
      }, t;
  }(), mo = /** @class */ function() {
      function t(t, e, n) {
          this.targetId = t, this.state = e, this.error = n
          /**
       * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */;
      }
      return t.Vs = function(e, n) {
          var r, i = JSON.parse(n), o = "object" == typeof i && -1 !== [ "not-current", "current", "rejected" ].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error);
          return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (r = new D$1(i.error.code, i.error.message))), 
          o ? new t(e, i.state, r) : (x$1("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), 
          null);
      }, t.prototype.Ss = function() {
          var t = {
              state: this.state,
              updateTimeMs: Date.now()
          };
          return this.error && (t.error = {
              code: this.error.code,
              message: this.error.message
          }), JSON.stringify(t);
      }, t;
  }(), go = /** @class */ function() {
      function t(t, e) {
          this.clientId = t, this.activeTargetIds = e
          /**
       * Parses a RemoteClientState from the JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */;
      }
      return t.Vs = function(e, n) {
          for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = an(), s = 0; i && s < r.activeTargetIds.length; ++s) i = at(r.activeTargetIds[s]), 
          o = o.add(r.activeTargetIds[s]);
          return i ? new t(e, o) : (x$1("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), 
          null);
      }, t;
  }(), wo = /** @class */ function() {
      function t(t, e) {
          this.clientId = t, this.onlineState = e
          /**
       * Parses a SharedOnlineState from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */;
      }
      return t.Vs = function(e) {
          var n = JSON.parse(e);
          return "object" == typeof n && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (x$1("SharedClientState", "Failed to parse online state: " + e), 
          null);
      }, t;
  }(), bo = /** @class */ function() {
      function t() {
          this.activeTargetIds = an();
      }
      return t.prototype.Ds = function(t) {
          this.activeTargetIds = this.activeTargetIds.add(t);
      }, t.prototype.Cs = function(t) {
          this.activeTargetIds = this.activeTargetIds.delete(t);
      }, 
      /**
       * Converts this entry into a JSON-encoded format we can use for WebStorage.
       * Does not encode `clientId` as it is part of the key in WebStorage.
       */
      t.prototype.Ss = function() {
          var t = {
              activeTargetIds: this.activeTargetIds.toArray(),
              updateTimeMs: Date.now()
          };
          return JSON.stringify(t);
      }, t;
  }(), Io = /** @class */ function() {
      function t(t, e, n, r, i) {
          this.window = t, this.Se = e, this.persistenceKey = n, this.Ns = r, this.syncEngine = null, 
          this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.xs = this.ks.bind(this), 
          this.Fs = new We(q$1), this.started = !1, 
          /**
               * Captures WebStorage events that occur before `start()` is called. These
               * events are replayed once `WebStorageSharedClientState` is started.
               */
          this.$s = [];
          // Escape the special characters mentioned here:
          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
          var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          this.storage = this.window.localStorage, this.currentUser = i, this.Os = lo(this.persistenceKey, this.Ns), 
          this.Ms = 
          /** Assembles the key for the current sequence number. */
          function(t) {
              return "firestore_sequence_number_" + t;
          }(this.persistenceKey), this.Fs = this.Fs.insert(this.Ns, new bo), this.Ls = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), 
          this.Bs = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.qs = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), 
          this.Us = 
          /** Assembles the key for the online state of the primary tab. */
          function(t) {
              return "firestore_online_state_" + t;
          }(this.persistenceKey), this.Ks = function(t) {
              return "firestore_bundle_loaded_" + t;
          }(this.persistenceKey), 
          // Rather than adding the storage observer during start(), we add the
          // storage observer during initialization. This ensures that we collect
          // events before other components populate their initial state (during their
          // respective start() calls). Otherwise, we might for example miss a
          // mutation that is added after LocalStore's start() processed the existing
          // mutations but before we observe WebStorage events.
          this.window.addEventListener("storage", this.xs);
      }
      /** Returns 'true' if WebStorage is available in the current environment. */    return t.yt = function(t) {
          return !(!t || !t.localStorage);
      }, t.prototype.start = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t, e, n, i, o, s, u, a, c, h, f, l = this;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return [ 4 /*yield*/ , this.syncEngine.fn() ];

                    case 1:
                      for (t = r.sent(), e = 0, n = t; e < n.length; e++) (i = n[e]) !== this.Ns && (o = this.getItem(lo(this.persistenceKey, i))) && (s = go.Vs(i, o)) && (this.Fs = this.Fs.insert(s.clientId, s));
                      for (this.Qs(), (u = this.storage.getItem(this.Us)) && (a = this.js(u)) && this.Ws(a), 
                      c = 0, h = this.$s; c < h.length; c++) f = h[c], this.ks(f);
                      return this.$s = [], 
                      // Register a window unload hook to remove the client metadata entry from
                      // WebStorage even if `shutdown()` was not called.
                      this.window.addEventListener("pagehide", (function() {
                          return l.shutdown();
                      })), this.started = !0, [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.writeSequenceNumber = function(t) {
          this.setItem(this.Ms, JSON.stringify(t));
      }, t.prototype.getAllActiveQueryTargets = function() {
          return this.Gs(this.Fs);
      }, t.prototype.isActiveQueryTarget = function(t) {
          var e = !1;
          return this.Fs.forEach((function(n, r) {
              r.activeTargetIds.has(t) && (e = !0);
          })), e;
      }, t.prototype.addPendingMutation = function(t) {
          this.zs(t, "pending");
      }, t.prototype.updateMutationState = function(t, e, n) {
          this.zs(t, e, n), 
          // Once a final mutation result is observed by other clients, they no longer
          // access the mutation's metadata entry. Since WebStorage replays events
          // in order, it is safe to delete the entry right after updating it.
          this.Hs(t);
      }, t.prototype.addLocalQueryTarget = function(t) {
          var e = "not-current";
          // Lookup an existing query state if the target ID was already registered
          // by another tab
                  if (this.isActiveQueryTarget(t)) {
              var n = this.storage.getItem(yo(this.persistenceKey, t));
              if (n) {
                  var r = mo.Vs(t, n);
                  r && (e = r.state);
              }
          }
          return this.Js.Ds(t), this.Qs(), e;
      }, t.prototype.removeLocalQueryTarget = function(t) {
          this.Js.Cs(t), this.Qs();
      }, t.prototype.isLocalQueryTarget = function(t) {
          return this.Js.activeTargetIds.has(t);
      }, t.prototype.clearQueryState = function(t) {
          this.removeItem(yo(this.persistenceKey, t));
      }, t.prototype.updateQueryState = function(t, e, n) {
          this.Ys(t, e, n);
      }, t.prototype.handleUserChange = function(t, e, n) {
          var r = this;
          e.forEach((function(t) {
              r.Hs(t);
          })), this.currentUser = t, n.forEach((function(t) {
              r.addPendingMutation(t);
          }));
      }, t.prototype.setOnlineState = function(t) {
          this.Xs(t);
      }, t.prototype.notifyBundleLoaded = function() {
          this.Zs();
      }, t.prototype.shutdown = function() {
          this.started && (this.window.removeEventListener("storage", this.xs), this.removeItem(this.Os), 
          this.started = !1);
      }, t.prototype.getItem = function(t) {
          var e = this.storage.getItem(t);
          return C$1("SharedClientState", "READ", t, e), e;
      }, t.prototype.setItem = function(t, e) {
          C$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
      }, t.prototype.removeItem = function(t) {
          C$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
      }, t.prototype.ks = function(t) {
          var e = this, i = t;
          // Note: The function is typed to take Event to be interface-compatible with
          // `Window.addEventListener`.
                  if (i.storageArea === this.storage) {
              if (C$1("SharedClientState", "EVENT", i.key, i.newValue), i.key === this.Os) return void x$1("Received WebStorage notification for local change. Another client might have garbage-collected our state");
              this.Se.enqueueRetryable((function() {
                  return __awaiter$6(e, void 0, void 0, (function() {
                      var t, e, n, o, s, u;
                      return __generator$6(this, (function(r) {
                          if (this.started) {
                              if (null !== i.key) if (this.Ls.test(i.key)) {
                                  if (null == i.newValue) return t = this.ti(i.key), [ 2 /*return*/ , this.ei(t, null) ];
                                  if (e = this.ni(i.key, i.newValue)) return [ 2 /*return*/ , this.ei(e.clientId, e) ];
                              } else if (this.Bs.test(i.key)) {
                                  if (null !== i.newValue && (n = this.si(i.key, i.newValue))) return [ 2 /*return*/ , this.ii(n) ];
                              } else if (this.qs.test(i.key)) {
                                  if (null !== i.newValue && (o = this.ri(i.key, i.newValue))) return [ 2 /*return*/ , this.oi(o) ];
                              } else if (i.key === this.Us) {
                                  if (null !== i.newValue && (s = this.js(i.newValue))) return [ 2 /*return*/ , this.Ws(s) ];
                              } else if (i.key === this.Ms) (u = function(t) {
                                  var e = S$1.o;
                                  if (null != t) try {
                                      var n = JSON.parse(t);
                                      P$1("number" == typeof n), e = n;
                                  } catch (t) {
                                      x$1("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                  }
                                  return e;
                              }(i.newValue)) !== S$1.o && this.sequenceNumberHandler(u); else if (i.key === this.Ks) return [ 2 /*return*/ , this.syncEngine.ci() ];
                          } else this.$s.push(i);
                          return [ 2 /*return*/ ];
                      }));
                  }));
              }));
          }
      }, Object.defineProperty(t.prototype, "Js", {
          get: function() {
              return this.Fs.get(this.Ns);
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.Qs = function() {
          this.setItem(this.Os, this.Js.Ss());
      }, t.prototype.zs = function(t, e, n) {
          var r = new vo(this.currentUser, t, e, n), i = po(this.persistenceKey, this.currentUser, t);
          this.setItem(i, r.Ss());
      }, t.prototype.Hs = function(t) {
          var e = po(this.persistenceKey, this.currentUser, t);
          this.removeItem(e);
      }, t.prototype.Xs = function(t) {
          var e = {
              clientId: this.Ns,
              onlineState: t
          };
          this.storage.setItem(this.Us, JSON.stringify(e));
      }, t.prototype.Ys = function(t, e, n) {
          var r = yo(this.persistenceKey, t), i = new mo(t, e, n);
          this.setItem(r, i.Ss());
      }, t.prototype.Zs = function() {
          this.setItem(this.Ks, "value-not-used");
      }, 
      /**
       * Parses a client state key in WebStorage. Returns null if the key does not
       * match the expected key format.
       */
      t.prototype.ti = function(t) {
          var e = this.Ls.exec(t);
          return e ? e[1] : null;
      }, 
      /**
       * Parses a client state in WebStorage. Returns 'null' if the value could not
       * be parsed.
       */
      t.prototype.ni = function(t, e) {
          var n = this.ti(t);
          return go.Vs(n, e);
      }, 
      /**
       * Parses a mutation batch state in WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      t.prototype.si = function(t, e) {
          var n = this.Bs.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
          return vo.Vs(new fo(i), r, e);
      }, 
      /**
       * Parses a query target state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      t.prototype.ri = function(t, e) {
          var n = this.qs.exec(t), r = Number(n[1]);
          return mo.Vs(r, e);
      }, 
      /**
       * Parses an online state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      t.prototype.js = function(t) {
          return wo.Vs(t);
      }, t.prototype.ii = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(e) {
                  return t.user.uid === this.currentUser.uid ? [ 2 /*return*/ , this.syncEngine.ui(t.batchId, t.state, t.error) ] : (C$1("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                  [ 2 /*return*/ ]);
              }));
          }));
      }, t.prototype.oi = function(t) {
          return this.syncEngine.ai(t.targetId, t.state, t.error);
      }, t.prototype.ei = function(t, e) {
          var n = this, r = e ? this.Fs.insert(t, e) : this.Fs.remove(t), i = this.Gs(this.Fs), o = this.Gs(r), s = [], u = [];
          return o.forEach((function(t) {
              i.has(t) || s.push(t);
          })), i.forEach((function(t) {
              o.has(t) || u.push(t);
          })), this.syncEngine.hi(s, u).then((function() {
              n.Fs = r;
          }));
      }, t.prototype.Ws = function(t) {
          // We check whether the client that wrote this online state is still active
          // by comparing its client ID to the list of clients kept active in
          // IndexedDb. If a client does not update their IndexedDb client state
          // within 5 seconds, it is considered inactive and we don't emit an online
          // state event.
          this.Fs.get(t.clientId) && this.onlineStateHandler(t.onlineState);
      }, t.prototype.Gs = function(t) {
          var e = an();
          return t.forEach((function(t, n) {
              e = e.unionWith(n.activeTargetIds);
          })), e;
      }, t;
  }(), To = /** @class */ function() {
      function t() {
          this.li = new bo, this.fi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
      }
      return t.prototype.addPendingMutation = function(t) {
          // No op.
      }, t.prototype.updateMutationState = function(t, e, n) {
          // No op.
      }, t.prototype.addLocalQueryTarget = function(t) {
          return this.li.Ds(t), this.fi[t] || "not-current";
      }, t.prototype.updateQueryState = function(t, e, n) {
          this.fi[t] = e;
      }, t.prototype.removeLocalQueryTarget = function(t) {
          this.li.Cs(t);
      }, t.prototype.isLocalQueryTarget = function(t) {
          return this.li.activeTargetIds.has(t);
      }, t.prototype.clearQueryState = function(t) {
          delete this.fi[t];
      }, t.prototype.getAllActiveQueryTargets = function() {
          return this.li.activeTargetIds;
      }, t.prototype.isActiveQueryTarget = function(t) {
          return this.li.activeTargetIds.has(t);
      }, t.prototype.start = function() {
          return this.li = new bo, Promise.resolve();
      }, t.prototype.handleUserChange = function(t, e, n) {
          // No op.
      }, t.prototype.setOnlineState = function(t) {
          // No op.
      }, t.prototype.shutdown = function() {}, t.prototype.writeSequenceNumber = function(t) {}, 
      t.prototype.notifyBundleLoaded = function() {
          // No op.
      }, t;
  }(), Eo = /** @class */ function() {
      function t() {}
      return t.prototype.di = function(t) {
          // No-op.
      }, t.prototype.shutdown = function() {
          // No-op.
      }, t;
  }(), _o = /** @class */ function() {
      function t() {
          var t = this;
          this.wi = function() {
              return t._i();
          }, this.mi = function() {
              return t.yi();
          }, this.gi = [], this.pi();
      }
      return t.prototype.di = function(t) {
          this.gi.push(t);
      }, t.prototype.shutdown = function() {
          window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
      }, t.prototype.pi = function() {
          window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
      }, t.prototype._i = function() {
          C$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
          for (var t = 0, e = this.gi; t < e.length; t++) {
              (0, e[t])(0 /* AVAILABLE */);
          }
      }, t.prototype.yi = function() {
          C$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
          for (var t = 0, e = this.gi; t < e.length; t++) {
              (0, e[t])(1 /* UNAVAILABLE */);
          }
      }, 
      // TODO(chenbrian): Consider passing in window either into this component or
      // here for testing via FakeWindow.
      /** Checks that all used attributes of window are available. */
      t.yt = function() {
          return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
      }, t;
  }(), So = {
      BatchGetDocuments: "batchGet",
      Commit: "commit",
      RunQuery: "runQuery"
  }, No = /** @class */ function() {
      function t(t) {
          this.Ei = t.Ei, this.Ti = t.Ti;
      }
      return t.prototype.Ii = function(t) {
          this.Ai = t;
      }, t.prototype.Ri = function(t) {
          this.bi = t;
      }, t.prototype.onMessage = function(t) {
          this.vi = t;
      }, t.prototype.close = function() {
          this.Ti();
      }, t.prototype.send = function(t) {
          this.Ei(t);
      }, t.prototype.Pi = function() {
          this.Ai();
      }, t.prototype.Vi = function(t) {
          this.bi(t);
      }, t.prototype.Si = function(t) {
          this.vi(t);
      }, t;
  }(), Do = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this, t) || this).forceLongPolling = t.forceLongPolling, n.autoDetectLongPolling = t.autoDetectLongPolling, 
          n.useFetchStreams = t.useFetchStreams, n;
      }
      /**
       * Base class for all Rest-based connections to the backend (WebChannel and
       * HTTP).
       */
      return __extends$6(n, e), n.prototype.Fi = function(t, e, n, r) {
          return new Promise((function(i, o) {
              var s = new XhrIo;
              s.listenOnce(EventType.COMPLETE, (function() {
                  try {
                      switch (s.getLastErrorCode()) {
                        case ErrorCode.NO_ERROR:
                          var e = s.getResponseJson();
                          C$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                          break;

                        case ErrorCode.TIMEOUT:
                          C$1("Connection", 'RPC "' + t + '" timed out'), o(new D$1(N$1.DEADLINE_EXCEEDED, "Request time out"));
                          break;

                        case ErrorCode.HTTP_ERROR:
                          var n = s.getStatus();
                          if (C$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", s.getResponseText()), 
                          n > 0) {
                              var r = s.getResponseJson().error;
                              if (r && r.status && r.message) {
                                  var u = function(t) {
                                      var e = t.toLowerCase().replace(/_/g, "-");
                                      return Object.values(N$1).indexOf(e) >= 0 ? e : N$1.UNKNOWN;
                                  }(r.status);
                                  o(new D$1(u, r.message));
                              } else o(new D$1(N$1.UNKNOWN, "Server responded with status " + s.getStatus()));
                          } else 
                          // If we received an HTTP_ERROR but there's no status code,
                          // it's most probably a connection issue
                          o(new D$1(N$1.UNAVAILABLE, "Connection failed."));
                          break;

                        default:
                          O$1();
                      }
                  } finally {
                      C$1("Connection", 'RPC "' + t + '" completed.');
                  }
              }));
              var u = JSON.stringify(r);
              s.send(e, "POST", u, n, 15);
          }));
      }, n.prototype.Oi = function(t, e) {
          var n = [ this.Di, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], r = createWebChannelTransport(), i = getStatEventTarget(), o = {
              // Required for backend stickiness, routing behavior is based on this
              // parameter.
              httpSessionIdParam: "gsessionid",
              initMessageHeaders: {},
              messageUrlParams: {
                  // This param is used to improve routing and project isolation by the
                  // backend and must be included in every request.
                  database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
              },
              sendRawJson: !0,
              supportsCrossDomainXhr: !0,
              internalChannelParams: {
                  // Override the default timeout (randomized between 10-20 seconds) since
                  // a large write batch on a slow internet connection may take a long
                  // time to send to the backend. Rather than have WebChannel impose a
                  // tight timeout which could lead to infinite timeouts and retries, we
                  // set it very large (5-10 minutes) and rely on the browser's builtin
                  // timeouts to kick in if the request isn't working.
                  forwardChannelRequestTimeoutMs: 6e5
              },
              forceLongPolling: this.forceLongPolling,
              detectBufferingProxy: this.autoDetectLongPolling
          };
          this.useFetchStreams && (o.xmlHttpFactory = new FetchXmlHttpFactory({})), this.ki(o.initMessageHeaders, e), 
          // Sending the custom headers we just added to request.initMessageHeaders
          // (Authorization, etc.) will trigger the browser to make a CORS preflight
          // request because the XHR will no longer meet the criteria for a "simple"
          // CORS request:
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
          // Therefore to avoid the CORS preflight request (an extra network
          // roundtrip), we use the httpHeadersOverwriteParam option to specify that
          // the headers should instead be encoded into a special "$httpHeaders" query
          // parameter, which is recognized by the webchannel backend. This is
          // formally defined here:
          // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
          // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
          // doesn't have an Origin header. So we have to exclude a few browser environments that are
          // known to (sometimes) not include an Origin. See
          // https://github.com/firebase/firebase-js-sdk/issues/1491.
          isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
          var l = n.join("");
          C$1("Connection", "Creating WebChannel: " + l, o);
          var d = r.createWebChannel(l, o), p = !1, y = !1, v = new No({
              Ei: function(t) {
                  y ? C$1("Connection", "Not sending because WebChannel is closed:", t) : (p || (C$1("Connection", "Opening WebChannel transport."), 
                  d.open(), p = !0), C$1("Connection", "WebChannel sending:", t), d.send(t));
              },
              Ti: function() {
                  return d.close();
              }
          }), m = function(t, e, n) {
              // TODO(dimond): closure typing seems broken because WebChannel does
              // not implement goog.events.Listenable
              t.listen(e, (function(t) {
                  try {
                      n(t);
                  } catch (t) {
                      setTimeout((function() {
                          throw t;
                      }), 0);
                  }
              }));
          };
          // WebChannel supports sending the first message with the handshake - saving
          // a network round trip. However, it will have to call send in the same
          // JS event loop as open. In order to enforce this, we delay actually
          // opening the WebChannel until send is called. Whether we have called
          // open is tracked with this variable.
                  // Closure events are guarded and exceptions are swallowed, so catch any
          // exception and rethrow using a setTimeout so they become visible again.
          // Note that eventually this function could go away if we are confident
          // enough the code is exception free.
          return m(d, WebChannel.EventType.OPEN, (function() {
              y || C$1("Connection", "WebChannel transport opened.");
          })), m(d, WebChannel.EventType.CLOSE, (function() {
              y || (y = !0, C$1("Connection", "WebChannel transport closed"), v.Vi());
          })), m(d, WebChannel.EventType.ERROR, (function(t) {
              y || (y = !0, R$1("Connection", "WebChannel transport errored:", t), v.Vi(new D$1(N$1.UNAVAILABLE, "The operation could not be completed")));
          })), m(d, WebChannel.EventType.MESSAGE, (function(t) {
              var e;
              if (!y) {
                  var n = t.data[0];
                  P$1(!!n);
                  // TODO(b/35143891): There is a bug in One Platform that caused errors
                  // (and only errors) to be wrapped in an extra array. To be forward
                  // compatible with the bug we need to check either condition. The latter
                  // can be removed once the fix has been rolled out.
                  // Use any because msgData.error is not typed.
                  var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
                  if (i) {
                      C$1("Connection", "WebChannel received error:", i);
                      // error.status will be a string like 'OK' or 'NOT_FOUND'.
                      var o = i.status, s = 
                      /**
   * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
   *
   * @returns The Code equivalent to the given status string or undefined if
   *     there is no match.
   */
                      function(t) {
                          // lookup by string
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          var e = Ue[t];
                          if (void 0 !== e) return ze(e);
                      }(o), u = i.message;
                      void 0 === s && (s = N$1.INTERNAL, u = "Unknown error status: " + o + " with message " + i.message), 
                      // Mark closed so no further events are propagated
                      y = !0, v.Vi(new D$1(s, u)), d.close();
                  } else C$1("Connection", "WebChannel received:", n), v.Si(n);
              }
          })), m(i, Event.STAT_EVENT, (function(t) {
              t.stat === Stat.PROXY ? C$1("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && C$1("Connection", "Detected no buffering proxy");
          })), setTimeout((function() {
              // Technically we could/should wait for the WebChannel opened event,
              // but because we want to send the first message with the WebChannel
              // handshake we pretend the channel opened here (asynchronously), and
              // then delay the actual open until the first message is sent.
              v.Pi();
          }), 0), v;
      }, n;
  }(/** @class */ function() {
      function t(t) {
          this.databaseInfo = t, this.databaseId = t.databaseId;
          var e = t.ssl ? "https" : "http";
          this.Di = e + "://" + t.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
      }
      return t.prototype.Ni = function(t, e, n, r) {
          var i = this.xi(t, e);
          C$1("RestConnection", "Sending: ", i, n);
          var o = {};
          return this.ki(o, r), this.Fi(t, i, o, n).then((function(t) {
              return C$1("RestConnection", "Received: ", t), t;
          }), (function(e) {
              throw R$1("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
              e;
          }));
      }, t.prototype.$i = function(t, e, n, r) {
          // The REST API automatically aggregates all of the streamed results, so we
          // can just use the normal invoke() method.
          return this.Ni(t, e, n, r);
      }, 
      /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      t.prototype.ki = function(t, e) {
          if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.10.0", 
          // Content-Type: text/plain will avoid preflight requests which might
          // mess with CORS and redirects by proxies. If we add custom headers
          // we will need to change this code to potentially use the $httpOverwrite
          // parameter supported by ESF to avoid triggering preflight requests.
          t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
          e) for (var n in e.authHeaders) e.authHeaders.hasOwnProperty(n) && (t[n] = e.authHeaders[n]);
      }, t.prototype.xi = function(t, e) {
          var n = So[t];
          return this.Di + "/v1/" + e + ":" + n;
      }, t;
  }());

  /**
   * Holds the state of a query target, including its target ID and whether the
   * target is 'not-current', 'current' or 'rejected'.
   */
  // Visible for testing
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Initializes the WebChannelConnection for the browser. */
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** The Platform's 'window' implementation or null if not available. */
  function Ao() {
      // `window` is not always available, e.g. in ReactNative and WebWorkers.
      // eslint-disable-next-line no-restricted-globals
      return "undefined" != typeof window ? window : null;
  }

  /** The Platform's 'document' implementation or null if not available. */ function ko() {
      // `document` is not always available, e.g. in ReactNative and WebWorkers.
      // eslint-disable-next-line no-restricted-globals
      return "undefined" != typeof document ? document : null;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ function Co(t) {
      return new bn(t, /* useProto3Json= */ !0);
  }

  /**
   * An instance of the Platform's 'TextEncoder' implementation.
   */
  /**
   * A helper for running delayed tasks following an exponential backoff curve
   * between attempts.
   *
   * Each delay is made up of a "base" delay which follows the exponential
   * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
   * base delay. This prevents clients from accidentally synchronizing their
   * delays causing spikes of load to the backend.
   */ var xo = /** @class */ function() {
      function t(
      /**
       * The AsyncQueue to run backoff operations on.
       */
      t, 
      /**
       * The ID to use when scheduling backoff operations on the AsyncQueue.
       */
      e, 
      /**
       * The initial delay (used as the base delay on the first retry attempt).
       * Note that jitter will still be applied, so the actual delay could be as
       * little as 0.5*initialDelayMs.
       */
      n
      /**
       * The multiplier to use to determine the extended base delay after each
       * attempt.
       */ , r
      /**
       * The maximum base delay after which no further backoff is performed.
       * Note that jitter will still be applied, so the actual delay could be as
       * much as 1.5*maxDelayMs.
       */ , i) {
          void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), 
          this.Se = t, this.timerId = e, this.Mi = n, this.Li = r, this.Bi = i, this.qi = 0, 
          this.Ui = null, 
          /** The last backoff attempt, as epoch milliseconds. */
          this.Ki = Date.now(), this.reset();
      }
      /**
       * Resets the backoff delay.
       *
       * The very next backoffAndWait() will have no delay. If it is called again
       * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
       * subsequent ones will increase according to the backoffFactor.
       */    return t.prototype.reset = function() {
          this.qi = 0;
      }, 
      /**
       * Resets the backoff delay to the maximum delay (e.g. for use after a
       * RESOURCE_EXHAUSTED error).
       */
      t.prototype.Qi = function() {
          this.qi = this.Bi;
      }, 
      /**
       * Returns a promise that resolves after currentDelayMs, and increases the
       * delay for any subsequent attempts. If there was a pending backoff operation
       * already, it will be canceled.
       */
      t.prototype.ji = function(t) {
          var e = this;
          // Cancel any pending backoff operation.
                  this.cancel();
          // First schedule using the current base (which may be 0 and should be
          // honored as such).
          var n = Math.floor(this.qi + this.Wi()), r = Math.max(0, Date.now() - this.Ki), i = Math.max(0, n - r);
          // Guard against lastAttemptTime being in the future due to a clock change.
                  i > 0 && C$1("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.qi + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), 
          this.Ui = this.Se.enqueueAfterDelay(this.timerId, i, (function() {
              return e.Ki = Date.now(), t();
          })), 
          // Apply backoff factor to determine next delay and ensure it is within
          // bounds.
          this.qi *= this.Li, this.qi < this.Mi && (this.qi = this.Mi), this.qi > this.Bi && (this.qi = this.Bi);
      }, t.prototype.Gi = function() {
          null !== this.Ui && (this.Ui.skipDelay(), this.Ui = null);
      }, t.prototype.cancel = function() {
          null !== this.Ui && (this.Ui.cancel(), this.Ui = null);
      }, 
      /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.Wi = function() {
          return (Math.random() - .5) * this.qi;
      }, t;
  }(), Ro = /** @class */ function() {
      function t(t, e, n, r, i, o) {
          this.Se = t, this.zi = n, this.Hi = r, this.Ji = i, this.listener = o, this.state = 0 /* Initial */ , 
          /**
               * A close count that's incremented every time the stream is closed; used by
               * getCloseGuardedDispatcher() to invalidate callbacks that happen after
               * close.
               */
          this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new xo(t, e)
          /**
       * Returns true if start() has been called and no error has occurred. True
       * indicates the stream is open or in the process of opening (which
       * encompasses respecting backoff, getting auth tokens, and starting the
       * actual RPC). Use isOpen() to determine if the stream is open and ready for
       * outbound requests.
       */;
      }
      return t.prototype.tr = function() {
          return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
      }, 
      /**
       * Returns true if the underlying RPC is open (the onOpen() listener has been
       * called) and the stream is ready for outbound requests.
       */
      t.prototype.er = function() {
          return 2 /* Open */ === this.state;
      }, 
      /**
       * Starts the RPC. Only allowed if isStarted() returns false. The stream is
       * not immediately ready for use: onOpen() will be invoked when the RPC is
       * ready for outbound requests, at which point isOpen() will return true.
       *
       * When start returns, isStarted() will return true.
       */
      t.prototype.start = function() {
          3 /* Error */ !== this.state ? this.auth() : this.nr();
      }, 
      /**
       * Stops the RPC. This call is idempotent and allowed regardless of the
       * current isStarted() state.
       *
       * When stop returns, isStarted() and isOpen() will both return false.
       */
      t.prototype.stop = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(t) {
                  switch (t.label) {
                    case 0:
                      return this.tr() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                    case 1:
                      t.sent(), t.label = 2;

                    case 2:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, 
      /**
       * After an error the stream will usually back off on the next attempt to
       * start it. If the error warrants an immediate restart of the stream, the
       * sender can use this to indicate that the receiver should not back off.
       *
       * Each error will call the onClose() listener. That function can decide to
       * inhibit backoff if required.
       */
      t.prototype.sr = function() {
          this.state = 0 /* Initial */ , this.Zi.reset();
      }, 
      /**
       * Marks this stream as idle. If no further actions are performed on the
       * stream for one minute, the stream will automatically close itself and
       * notify the stream's onClose() handler with Status.OK. The stream will then
       * be in a !isStarted() state, requiring the caller to start the stream again
       * before further use.
       *
       * Only streams that are in state 'Open' can be marked idle, as all other
       * states imply pending network operations.
       */
      t.prototype.ir = function() {
          var t = this;
          // Starts the idle time if we are in state 'Open' and are not yet already
          // running a timer (in which case the previous idle timeout still applies).
                  this.er() && null === this.Xi && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 6e4, (function() {
              return t.rr();
          })));
      }, 
      /** Sends a message to the underlying stream. */ t.prototype.cr = function(t) {
          this.ur(), this.stream.send(t);
      }, 
      /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.rr = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(t) {
                  return this.er() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
              }));
          }));
      }, 
      /** Marks the stream as active again. */ t.prototype.ur = function() {
          this.Xi && (this.Xi.cancel(), this.Xi = null);
      }, 
      /**
       * Closes the stream and cleans up as necessary:
       *
       * * closes the underlying GRPC stream;
       * * calls the onClose handler with the given 'error';
       * * sets internal stream state to 'finalState';
       * * adjusts the backoff timer based on the error
       *
       * A new stream can be opened by calling start().
       *
       * @param finalState - the intended state of the stream after closing.
       * @param error - the error the connection was closed with.
       */
      t.prototype.close = function(t, e) {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(n) {
                  switch (n.label) {
                    case 0:
                      // Notify the listener that the stream closed.
                      // Cancel any outstanding timers (they're guaranteed not to execute).
                      return this.ur(), this.Zi.cancel(), 
                      // Invalidates any stream-related callbacks (e.g. from auth or the
                      // underlying stream), guaranteeing they won't execute.
                      this.Yi++, 3 /* Error */ !== t ? 
                      // If this is an intentional close ensure we don't delay our next connection attempt.
                      this.Zi.reset() : e && e.code === N$1.RESOURCE_EXHAUSTED ? (
                      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                      x$1(e.toString()), x$1("Using maximum backoff delay to prevent overloading the backend."), 
                      this.Zi.Qi()) : e && e.code === N$1.UNAUTHENTICATED && 
                      // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                      // just expired.
                      this.Ji.invalidateToken(), 
                      // Clean up the underlying stream because we are no longer interested in events.
                      null !== this.stream && (this.ar(), this.stream.close(), this.stream = null), 
                      // This state must be assigned before calling onClose() to allow the callback to
                      // inhibit backoff or otherwise manipulate the state in its non-started state.
                      this.state = t, [ 4 /*yield*/ , this.listener.Ri(e) ];

                    case 1:
                      // Cancel any outstanding timers (they're guaranteed not to execute).
                      // Notify the listener that the stream closed.
                      return n.sent(), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, 
      /**
       * Can be overridden to perform additional cleanup before the stream is closed.
       * Calling super.tearDown() is not required.
       */
      t.prototype.ar = function() {}, t.prototype.auth = function() {
          var t = this;
          this.state = 1 /* Starting */;
          var e = this.hr(this.Yi), n = this.Yi;
          // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                  this.Ji.getToken().then((function(e) {
              // Stream can be stopped while waiting for authentication.
              // TODO(mikelehen): We really should just use dispatchIfNotClosed
              // and let this dispatch onto the queue, but that opened a spec test can
              // of worms that I don't want to deal with in this PR.
              t.Yi === n && 
              // Normally we'd have to schedule the callback on the AsyncQueue.
              // However, the following calls are safe to be called outside the
              // AsyncQueue since they don't chain asynchronous calls
              t.lr(e);
          }), (function(n) {
              e((function() {
                  var e = new D$1(N$1.UNKNOWN, "Fetching auth token failed: " + n.message);
                  return t.dr(e);
              }));
          }));
      }, t.prototype.lr = function(t) {
          var e = this, n = this.hr(this.Yi);
          this.stream = this.wr(t), this.stream.Ii((function() {
              n((function() {
                  return e.state = 2 /* Open */ , e.listener.Ii();
              }));
          })), this.stream.Ri((function(t) {
              n((function() {
                  return e.dr(t);
              }));
          })), this.stream.onMessage((function(t) {
              n((function() {
                  return e.onMessage(t);
              }));
          }));
      }, t.prototype.nr = function() {
          var t = this;
          this.state = 4 /* Backoff */ , this.Zi.ji((function() {
              return __awaiter$6(t, void 0, void 0, (function() {
                  return __generator$6(this, (function(t) {
                      return this.state = 0 /* Initial */ , this.start(), [ 2 /*return*/ ];
                  }));
              }));
          }));
      }, 
      // Visible for tests
      t.prototype.dr = function(t) {
          // In theory the stream could close cleanly, however, in our current model
          // we never expect this to happen because if we stop a stream ourselves,
          // this callback will never be called. To prevent cases where we retry
          // without a backoff accidentally, we set the stream to error in all cases.
          return C$1("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
      }, 
      /**
       * Returns a "dispatcher" function that dispatches operations onto the
       * AsyncQueue but only runs them if closeCount remains unchanged. This allows
       * us to turn auth / stream callbacks into no-ops if the stream is closed /
       * re-opened, etc.
       */
      t.prototype.hr = function(t) {
          var e = this;
          return function(n) {
              e.Se.enqueueAndForget((function() {
                  return e.Yi === t ? n() : (C$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                  Promise.resolve());
              }));
          };
      }, t;
  }(), Lo = /** @class */ function(e) {
      function n(t, n, r, i, o) {
          var s = this;
          return (s = e.call(this, t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , n, r, o) || this).R = i, 
          s;
      }
      return __extends$6(n, e), n.prototype.wr = function(t) {
          return this.Hi.Oi("Listen", t);
      }, n.prototype.onMessage = function(t) {
          // A successful response means the stream is healthy
          this.Zi.reset();
          var e = function(t, e) {
              var n;
              if ("targetChange" in e) {
                  e.targetChange;
                  // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                  // if unset
                  var r = function(t) {
                      return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : O$1();
                  }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = function(t, e) {
                      return t.I ? (P$1(void 0 === e || "string" == typeof e), J$1.fromBase64String(e || "")) : (P$1(void 0 === e || e instanceof Uint8Array), 
                      J$1.fromUint8Array(e || new Uint8Array));
                  }(t, e.targetChange.resumeToken), s = (u = e.targetChange.cause) && function(t) {
                      var e = void 0 === t.code ? N$1.UNKNOWN : ze(t.code);
                      return new D$1(e, t.message || "");
                  }(u);
                  n = new dn(r, i, o, s || null);
              } else if ("documentChange" in e) {
                  e.documentChange, (r = e.documentChange).document, r.document.name, r.document.updateTime, 
                  i = An(t, r.document.name), o = _n(r.document.updateTime);
                  var u = new _t({
                      mapValue: {
                          fields: r.document.fields
                      }
                  }), a = (s = Nt.newFoundDocument(i, o, u), r.targetIds || []), c = r.removedTargetIds || [];
                  n = new fn(a, c, s.key, s);
              } else if ("documentDelete" in e) e.documentDelete, (r = e.documentDelete).document, 
              i = An(t, r.document), o = r.readTime ? _n(r.readTime) : K$1.min(), u = Nt.newNoDocument(i, o), 
              s = r.removedTargetIds || [], n = new fn([], s, u.key, u); else if ("documentRemove" in e) e.documentRemove, 
              (r = e.documentRemove).document, i = An(t, r.document), o = r.removedTargetIds || [], 
              n = new fn([], o, i, null); else {
                  if (!("filter" in e)) return O$1();
                  e.filter;
                  var h = e.filter;
                  h.targetId, r = h.count || 0, i = new Qe(r), o = h.targetId, n = new ln(o, i);
              }
              return n;
          }(this.R, t), n = function(t) {
              // We have only reached a consistent snapshot for the entire stream if there
              // is a read_time set and it applies to all targets (i.e. the list of
              // targets is empty). The backend is guaranteed to send such responses.
              if (!("targetChange" in t)) return K$1.min();
              var e = t.targetChange;
              return e.targetIds && e.targetIds.length ? K$1.min() : e.readTime ? _n(e.readTime) : K$1.min();
          }(t);
          return this.listener._r(e, n);
      }, 
      /**
       * Registers interest in the results of the given target. If the target
       * includes a resumeToken it will be included in the request. Results that
       * affect the target will be streamed back as WatchChange messages that
       * reference the targetId.
       */
      n.prototype.mr = function(t) {
          var e = {};
          e.database = xn(this.R), e.addTarget = function(t, e) {
              var n, r = e.target;
              return (n = xt(r) ? {
                  documents: Mn(t, r)
              } : {
                  query: Vn(t, r)
              }).targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Tn(t, e.resumeToken) : e.snapshotVersion.compareTo(K$1.min()) > 0 && (
              // TODO(wuandy): Consider removing above check because it is most likely true.
              // Right now, many tests depend on this behaviour though (leaving min() out
              // of serialization).
              n.readTime = In(t, e.snapshotVersion.toTimestamp())), n;
          }(this.R, t);
          var n = function(t, e) {
              var n = function(t, e) {
                  switch (e) {
                    case 0 /* Listen */ :
                      return null;

                    case 1 /* ExistenceFilterMismatch */ :
                      return "existence-filter-mismatch";

                    case 2 /* LimboResolution */ :
                      return "limbo-document";

                    default:
                      return O$1();
                  }
              }(0, e.purpose);
              return null == n ? null : {
                  "goog-listen-tags": n
              };
          }(this.R, t);
          n && (e.labels = n), this.cr(e);
      }, 
      /**
       * Unregisters interest in the results of the target associated with the
       * given targetId.
       */
      n.prototype.yr = function(t) {
          var e = {};
          e.database = xn(this.R), e.removeTarget = t, this.cr(e);
      }, n;
  }(Ro), Oo = /** @class */ function(e) {
      function n(t, n, r, i, o) {
          var s = this;
          return (s = e.call(this, t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , n, r, o) || this).R = i, 
          s.gr = !1, s;
      }
      return __extends$6(n, e), Object.defineProperty(n.prototype, "pr", {
          /**
           * Tracks whether or not a handshake has been successfully exchanged and
           * the stream is ready to accept mutations.
           */
          get: function() {
              return this.gr;
          },
          enumerable: !1,
          configurable: !0
      }), 
      // Override of PersistentStream.start
      n.prototype.start = function() {
          this.gr = !1, this.lastStreamToken = void 0, e.prototype.start.call(this);
      }, n.prototype.ar = function() {
          this.gr && this.Er([]);
      }, n.prototype.wr = function(t) {
          return this.Hi.Oi("Write", t);
      }, n.prototype.onMessage = function(t) {
          if (
          // Always capture the last stream token.
          P$1(!!t.streamToken), this.lastStreamToken = t.streamToken, this.gr) {
              // A successful first write response means the stream is healthy,
              // Note, that we could consider a successful handshake healthy, however,
              // the write itself might be causing an error we want to back off from.
              this.Zi.reset();
              var e = function(t, e) {
                  return t && t.length > 0 ? (P$1(void 0 !== e), t.map((function(t) {
                      return function(t, e) {
                          // NOTE: Deletes don't have an updateTime.
                          var n = t.updateTime ? _n(t.updateTime) : _n(e);
                          return n.isEqual(K$1.min()) && (
                          // The Firestore Emulator currently returns an update time of 0 for
                          // deletes of non-existing documents (rather than null). This breaks the
                          // test "get deleted doc while offline with source=cache" as NoDocuments
                          // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                          // TODO(#2149): Remove this when Emulator is fixed
                          n = _n(e)), new Ne(n, t.transformResults || []);
                      }(t, e);
                  }))) : [];
              }(t.writeResults, t.commitTime), n = _n(t.commitTime);
              return this.listener.Tr(n, e);
          }
          // The first response is always the handshake response
                  return P$1(!t.writeResults || 0 === t.writeResults.length), this.gr = !0, 
          this.listener.Ir();
      }, 
      /**
       * Sends an initial streamToken to the server, performing the handshake
       * required to make the StreamingWrite RPC work. Subsequent
       * calls should wait until onHandshakeComplete was called.
       */
      n.prototype.Ar = function() {
          // TODO(dimond): Support stream resumption. We intentionally do not set the
          // stream token on the handshake, ignoring any stream token we might have.
          var t = {};
          t.database = xn(this.R), this.cr(t);
      }, 
      /** Sends a group of mutations to the Firestore backend to apply. */ n.prototype.Er = function(t) {
          var e = this, n = {
              streamToken: this.lastStreamToken,
              writes: t.map((function(t) {
                  return Pn(e.R, t);
              }))
          };
          this.cr(n);
      }, n;
  }(Ro), Po = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).credentials = t, i.Hi = n, i.R = r, i.Rr = !1, 
          i;
      }
      return __extends$6(n, e), n.prototype.br = function() {
          if (this.Rr) throw new D$1(N$1.FAILED_PRECONDITION, "The client has already been terminated.");
      }, 
      /** Gets an auth token and invokes the provided RPC. */ n.prototype.Ni = function(t, e, n) {
          var r = this;
          return this.br(), this.credentials.getToken().then((function(i) {
              return r.Hi.Ni(t, e, n, i);
          })).catch((function(t) {
              throw "FirebaseError" === t.name ? (t.code === N$1.UNAUTHENTICATED && r.credentials.invalidateToken(), 
              t) : new D$1(N$1.UNKNOWN, t.toString());
          }));
      }, 
      /** Gets an auth token and invokes the provided RPC with streamed results. */ n.prototype.$i = function(t, e, n) {
          var r = this;
          return this.br(), this.credentials.getToken().then((function(i) {
              return r.Hi.$i(t, e, n, i);
          })).catch((function(t) {
              throw "FirebaseError" === t.name ? (t.code === N$1.UNAUTHENTICATED && r.credentials.invalidateToken(), 
              t) : new D$1(N$1.UNKNOWN, t.toString());
          }));
      }, n.prototype.terminate = function() {
          this.Rr = !0;
      }, n;
  }((function() {})), Fo = /** @class */ function() {
      function t(t, e) {
          this.asyncQueue = t, this.onlineStateHandler = e, 
          /** The current OnlineState. */
          this.state = "Unknown" /* Unknown */ , 
          /**
               * A count of consecutive failures to open the stream. If it reaches the
               * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
               * Offline.
               */
          this.vr = 0, 
          /**
               * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
               * transition from OnlineState.Unknown to OnlineState.Offline without waiting
               * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
               */
          this.Pr = null, 
          /**
               * Whether the client should log a warning message if it fails to connect to
               * the backend (initially true, cleared after a successful stream, or if we've
               * logged the message already).
               */
          this.Vr = !0
          /**
       * Called by RemoteStore when a watch stream is started (including on each
       * backoff attempt).
       *
       * If this is the first attempt, it sets the OnlineState to Unknown and starts
       * the onlineStateTimer.
       */;
      }
      return t.prototype.Sr = function() {
          var t = this;
          0 === this.vr && (this.Dr("Unknown" /* Unknown */), this.Pr = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
              return t.Pr = null, t.Cr("Backend didn't respond within 10 seconds."), t.Dr("Offline" /* Offline */), 
              Promise.resolve();
          })));
      }, 
      /**
       * Updates our OnlineState as appropriate after the watch stream reports a
       * failure. The first failure moves us to the 'Unknown' state. We then may
       * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
       * actually transition to the 'Offline' state.
       */
      t.prototype.Nr = function(t) {
          "Online" /* Online */ === this.state ? this.Dr("Unknown" /* Unknown */) : (this.vr++, 
          this.vr >= 1 && (this.kr(), this.Cr("Connection failed 1 times. Most recent error: " + t.toString()), 
          this.Dr("Offline" /* Offline */)));
      }, 
      /**
       * Explicitly sets the OnlineState to the specified state.
       *
       * Note that this resets our timers / failure counters, etc. used by our
       * Offline heuristics, so must not be used in place of
       * handleWatchStreamStart() and handleWatchStreamFailure().
       */
      t.prototype.set = function(t) {
          this.kr(), this.vr = 0, "Online" /* Online */ === t && (
          // We've connected to watch at least once. Don't warn the developer
          // about being offline going forward.
          this.Vr = !1), this.Dr(t);
      }, t.prototype.Dr = function(t) {
          t !== this.state && (this.state = t, this.onlineStateHandler(t));
      }, t.prototype.Cr = function(t) {
          var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
          this.Vr ? (x$1(e), this.Vr = !1) : C$1("OnlineStateTracker", e);
      }, t.prototype.kr = function() {
          null !== this.Pr && (this.Pr.cancel(), this.Pr = null);
      }, t;
  }(), Mo = function(
  /**
       * The local store, used to fill the write pipeline with outbound mutations.
       */
  t, 
  /** The client-side proxy for interacting with the backend. */
  e, i, o, s) {
      var u = this;
      this.localStore = t, this.datastore = e, this.asyncQueue = i, this.remoteSyncer = {}, 
      /**
               * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
               * LocalStore via fillWritePipeline() and have or will send to the write
               * stream.
               *
               * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
               * restart the write stream. When the stream is established the writes in the
               * pipeline will be sent in order.
               *
               * Writes remain in writePipeline until they are acknowledged by the backend
               * and thus will automatically be re-sent if the stream is interrupted /
               * restarted before they're acknowledged.
               *
               * Write responses from the backend are linked to their originating request
               * purely based on order, and so we can just shift() writes from the front of
               * the writePipeline as we receive responses.
               */
      this.Fr = [], 
      /**
               * A mapping of watched targets that the client cares about tracking and the
               * user has explicitly called a 'listen' for this target.
               *
               * These targets may or may not have been sent to or acknowledged by the
               * server. On re-establishing the listen stream, these targets should be sent
               * to the server. The targets removed with unlistens are removed eagerly
               * without waiting for confirmation from the listen stream.
               */
      this.$r = new Map, 
      /**
               * A set of reasons for why the RemoteStore may be offline. If empty, the
               * RemoteStore may start its network connections.
               */
      this.Or = new Set, 
      /**
               * Event handlers that get called when the network is disabled or enabled.
               *
               * PORTING NOTE: These functions are used on the Web client to create the
               * underlying streams (to support tree-shakeable streams). On Android and iOS,
               * the streams are created during construction of RemoteStore.
               */
      this.Mr = [], this.Lr = s, this.Lr.di((function(t) {
          i.enqueueAndForget((function() {
              return __awaiter$6(u, void 0, void 0, (function() {
                  return __generator$6(this, (function(t) {
                      switch (t.label) {
                        case 0:
                          return zo(this) ? (C$1("RemoteStore", "Restarting streams for network reachability change."), 
                          [ 4 /*yield*/ , function(t) {
                              return __awaiter$6(this, void 0, void 0, (function() {
                                  var e;
                                  return __generator$6(this, (function(n) {
                                      switch (n.label) {
                                        case 0:
                                          return (e = F$1(t)).Or.add(4 /* ConnectivityChange */), [ 4 /*yield*/ , qo(e) ];

                                        case 1:
                                          return n.sent(), e.Br.set("Unknown" /* Unknown */), e.Or.delete(4 /* ConnectivityChange */), 
                                          [ 4 /*yield*/ , Vo(e) ];

                                        case 2:
                                          return n.sent(), [ 2 /*return*/ ];
                                      }
                                  }));
                              }));
                          }(this) ]) : [ 3 /*break*/ , 2 ];

                        case 1:
                          t.sent(), t.label = 2;

                        case 2:
                          return [ 2 /*return*/ ];
                      }
                  }));
              }));
          }));
      })), this.Br = new Fo(i, o);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A PersistentStream is an abstract base class that represents a streaming RPC
   * to the Firestore backend. It's built on top of the connections own support
   * for streaming RPCs, and adds several critical features for our clients:
   *
   *   - Exponential backoff on failure
   *   - Authentication via CredentialsProvider
   *   - Dispatching all callbacks into the shared worker queue
   *   - Closing idle streams after 60 seconds of inactivity
   *
   * Subclasses of PersistentStream implement serialization of models to and
   * from the JSON representation of the protocol buffers for a specific
   * streaming RPC.
   *
   * ## Starting and Stopping
   *
   * Streaming RPCs are stateful and need to be start()ed before messages can
   * be sent and received. The PersistentStream will call the onOpen() function
   * of the listener once the stream is ready to accept requests.
   *
   * Should a start() fail, PersistentStream will call the registered onClose()
   * listener with a FirestoreError indicating what went wrong.
   *
   * A PersistentStream can be started and stopped repeatedly.
   *
   * Generic types:
   *  SendType: The type of the outgoing message of the underlying
   *    connection stream
   *  ReceiveType: The type of the incoming message of the underlying
   *    connection stream
   *  ListenerType: The type of the listener that will be used for callbacks
   */ function Vo(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e, n;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  if (!zo(t)) return [ 3 /*break*/ , 4 ];
                  e = 0, n = t.Mr, r.label = 1;

                case 1:
                  return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !0) ] : [ 3 /*break*/ , 4 ];

                case 2:
                  r.sent(), r.label = 3;

                case 3:
                  return e++, [ 3 /*break*/ , 1 ];

                case 4:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Temporarily disables the network. The network can be re-enabled using
   * enableNetwork().
   */ function qo(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e, n;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  e = 0, n = t.Mr, r.label = 1;

                case 1:
                  return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !1) ] : [ 3 /*break*/ , 4 ];

                case 2:
                  r.sent(), r.label = 3;

                case 3:
                  return e++, [ 3 /*break*/ , 1 ];

                case 4:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Starts new listen for the given target. Uses resume token if provided. It
   * is a no-op if the target of given `TargetData` is already being listened to.
   */ function Uo(t, e) {
      var n = F$1(t);
      n.$r.has(e.targetId) || (
      // Mark this as something the client is currently listening for.
      n.$r.set(e.targetId, e), Go(n) ? 
      // The listen will be sent in onWatchStreamOpen
      Qo(n) : us(n).er() && jo(n, e));
  }

  /**
   * Removes the listen from server. It is a no-op if the given target id is
   * not being listened to.
   */ function Bo(t, e) {
      var n = F$1(t), r = us(n);
      n.$r.delete(e), r.er() && Ko(n, e), 0 === n.$r.size && (r.er() ? r.ir() : zo(n) && 
      // Revert to OnlineState.Unknown if the watch stream is not open and we
      // have no listeners, since without any listens to send we cannot
      // confirm if the stream is healthy and upgrade to OnlineState.Online.
      n.Br.set("Unknown" /* Unknown */));
  }

  /**
   * We need to increment the the expected number of pending responses we're due
   * from watch so we wait for the ack to process any messages from this target.
   */ function jo(t, e) {
      t.qr.U(e.targetId), us(t).mr(e)
      /**
   * We need to increment the expected number of pending responses we're due
   * from watch so we wait for the removal on the server before we process any
   * messages from this target.
   */;
  }

  function Ko(t, e) {
      t.qr.U(e), us(t).yr(e);
  }

  function Qo(t) {
      t.qr = new yn({
          getRemoteKeysForTarget: function(e) {
              return t.remoteSyncer.getRemoteKeysForTarget(e);
          },
          lt: function(e) {
              return t.$r.get(e) || null;
          }
      }), us(t).start(), t.Br.Sr()
      /**
   * Returns whether the watch stream should be started because it's necessary
   * and has not yet been started.
   */;
  }

  function Go(t) {
      return zo(t) && !us(t).tr() && t.$r.size > 0;
  }

  function zo(t) {
      return 0 === F$1(t).Or.size;
  }

  function Wo(t) {
      t.qr = void 0;
  }

  function Ho(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(e) {
              return t.$r.forEach((function(e, n) {
                  jo(t, e);
              })), [ 2 /*return*/ ];
          }));
      }));
  }

  function Yo(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(n) {
              return Wo(t), 
              // If we still need the watch stream, retry the connection.
              Go(t) ? (t.Br.Nr(e), Qo(t)) : 
              // No need to restart watch stream because there are no active targets.
              // The online state is set to unknown because there is no active attempt
              // at establishing a connection
              t.Br.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
          }));
      }));
  }

  function $o(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var o, s, u;
          return __generator$6(this, (function(a) {
              switch (a.label) {
                case 0:
                  if (t.Br.set("Online" /* Online */), !(e instanceof dn && 2 /* Removed */ === e.state && e.cause)) 
                  // Mark the client as online since we got a message from the server
                  return [ 3 /*break*/ , 6 ];
                  a.label = 1;

                case 1:
                  return a.trys.push([ 1, 3, , 5 ]), [ 4 /*yield*/ , 
                  /** Handles an error on a target */
                  function(t, e) {
                      return __awaiter$6(this, void 0, void 0, (function() {
                          var n, i, o, s;
                          return __generator$6(this, (function(r) {
                              switch (r.label) {
                                case 0:
                                  n = e.cause, i = 0, o = e.targetIds, r.label = 1;

                                case 1:
                                  return i < o.length ? (s = o[i], t.$r.has(s) ? [ 4 /*yield*/ , t.remoteSyncer.rejectListen(s, n) ] : [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 5 ];

                                case 2:
                                  r.sent(), t.$r.delete(s), t.qr.removeTarget(s), r.label = 3;

                                case 3:
                                  r.label = 4;

                                case 4:
                                  return i++, [ 3 /*break*/ , 1 ];

                                case 5:
                                  return [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  }(t, e) ];

                case 2:
                  return a.sent(), [ 3 /*break*/ , 5 ];

                case 3:
                  return o = a.sent(), C$1("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), o), 
                  [ 4 /*yield*/ , Xo(t, o) ];

                case 4:
                  return a.sent(), [ 3 /*break*/ , 5 ];

                case 5:
                  return [ 3 /*break*/ , 13 ];

                case 6:
                  if (e instanceof fn ? t.qr.X(e) : e instanceof ln ? t.qr.rt(e) : t.qr.et(e), i.isEqual(K$1.min())) return [ 3 /*break*/ , 13 ];
                  a.label = 7;

                case 7:
                  return a.trys.push([ 7, 11, , 13 ]), [ 4 /*yield*/ , Ki(t.localStore) ];

                case 8:
                  return s = a.sent(), i.compareTo(s) >= 0 ? [ 4 /*yield*/ , 
                  /**
                   * Takes a batch of changes from the Datastore, repackages them as a
                   * RemoteEvent, and passes that on to the listener, which is typically the
                   * SyncEngine.
                   */
                  function(t, e) {
                      var n = t.qr.ut(e);
                      // Update in-memory resume tokens. LocalStore will update the
                      // persistent view of these when applying the completed RemoteEvent.
                                          return n.targetChanges.forEach((function(n, r) {
                          if (n.resumeToken.approximateByteSize() > 0) {
                              var i = t.$r.get(r);
                              // A watched target might have been removed already.
                                                          i && t.$r.set(r, i.withResumeToken(n.resumeToken, e));
                          }
                      })), 
                      // Re-establish listens for the targets that have been invalidated by
                      // existence filter mismatches.
                      n.targetMismatches.forEach((function(e) {
                          var n = t.$r.get(e);
                          if (n) {
                              // Clear the resume token for the target, since we're in a known mismatch
                              // state.
                              t.$r.set(e, n.withResumeToken(J$1.EMPTY_BYTE_STRING, n.snapshotVersion)), 
                              // Cause a hard reset by unwatching and rewatching immediately, but
                              // deliberately don't send a resume token so that we get a full update.
                              Ko(t, e);
                              // Mark the target we send as being on behalf of an existence filter
                              // mismatch, but don't actually retain that in listenTargets. This ensures
                              // that we flag the first re-listen this way without impacting future
                              // listens of this target (that might happen e.g. on reconnect).
                              var r = new Pr(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                              jo(t, r);
                          }
                      })), t.remoteSyncer.applyRemoteEvent(n);
                  }(t, i) ] : [ 3 /*break*/ , 10 ];

                  // We have received a target change with a global snapshot if the snapshot
                  // version is not equal to SnapshotVersion.min().
                                case 9:
                  // We have received a target change with a global snapshot if the snapshot
                  // version is not equal to SnapshotVersion.min().
                  a.sent(), a.label = 10;

                case 10:
                  return [ 3 /*break*/ , 13 ];

                case 11:
                  return C$1("RemoteStore", "Failed to raise snapshot:", u = a.sent()), [ 4 /*yield*/ , Xo(t, u) ];

                case 12:
                  return a.sent(), [ 3 /*break*/ , 13 ];

                case 13:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Recovery logic for IndexedDB errors that takes the network offline until
   * `op` succeeds. Retries are scheduled with backoff using
   * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
   * validated via a generic operation.
   *
   * The returned Promise is resolved once the network is disabled and before
   * any retry attempt.
   */ function Xo(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var o = this;
          return __generator$6(this, (function(s) {
              switch (s.label) {
                case 0:
                  if (!Nr(e)) throw e;
                  // Disable network and raise offline snapshots
                  return t.Or.add(1 /* IndexedDbFailed */), [ 4 /*yield*/ , qo(t) ];

                case 1:
                  // Disable network and raise offline snapshots
                  return s.sent(), t.Br.set("Offline" /* Offline */), i || (
                  // Use a simple read operation to determine if IndexedDB recovered.
                  // Ideally, we would expose a health check directly on SimpleDb, but
                  // RemoteStore only has access to persistence through LocalStore.
                  i = function() {
                      return Ki(t.localStore);
                  }), 
                  // Probe IndexedDB periodically and re-enable network
                  t.asyncQueue.enqueueRetryable((function() {
                      return __awaiter$6(o, void 0, void 0, (function() {
                          return __generator$6(this, (function(e) {
                              switch (e.label) {
                                case 0:
                                  return C$1("RemoteStore", "Retrying IndexedDB access"), [ 4 /*yield*/ , i() ];

                                case 1:
                                  return e.sent(), t.Or.delete(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Vo(t) ];

                                case 2:
                                  return e.sent(), [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  })), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Executes `op`. If `op` fails, takes the network offline until `op`
   * succeeds. Returns after the first attempt.
   */ function Jo(t, e) {
      return e().catch((function(n) {
          return Xo(t, n, e);
      }));
  }

  function Zo(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e, n, i, o, s;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  e = F$1(t), n = as(e), i = e.Fr.length > 0 ? e.Fr[e.Fr.length - 1].batchId : -1, r.label = 1;

                case 1:
                  if (!
                  /**
   * Returns true if we can add to the write pipeline (i.e. the network is
   * enabled and the write pipeline is not full).
   */
                  function(t) {
                      return zo(t) && t.Fr.length < 10;
                  }
                  /**
   * Queues additional writes to be sent to the write stream, sending them
   * immediately if the write stream is established.
   */ (e)) return [ 3 /*break*/ , 7 ];
                  r.label = 2;

                case 2:
                  return r.trys.push([ 2, 4, , 6 ]), [ 4 /*yield*/ , zi(e.localStore, i) ];

                case 3:
                  return null === (o = r.sent()) ? (0 === e.Fr.length && n.ir(), [ 3 /*break*/ , 7 ]) : (i = o.batchId, 
                  function(t, e) {
                      t.Fr.push(e);
                      var n = as(t);
                      n.er() && n.pr && n.Er(e.mutations);
                  }(e, o), [ 3 /*break*/ , 6 ]);

                case 4:
                  return s = r.sent(), [ 4 /*yield*/ , Xo(e, s) ];

                case 5:
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 6:
                  return [ 3 /*break*/ , 1 ];

                case 7:
                  return ts(e) && es(e), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function ts(t) {
      return zo(t) && !as(t).tr() && t.Fr.length > 0;
  }

  function es(t) {
      as(t).start();
  }

  function ns(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(e) {
              return as(t).Ar(), [ 2 /*return*/ ];
          }));
      }));
  }

  function rs(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e, n, i, o;
          return __generator$6(this, (function(r) {
              // Send the write pipeline now that the stream is established.
              for (e = as(t), n = 0, i = t.Fr; n < i.length; n++) o = i[n], e.Er(o.mutations);
              return [ 2 /*return*/ ];
          }));
      }));
  }

  function is(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return n = t.Fr.shift(), o = Or.from(n, e, i), [ 4 /*yield*/ , Jo(t, (function() {
                      return t.remoteSyncer.applySuccessfulWrite(o);
                  })) ];

                case 1:
                  // It's possible that with the completion of this mutation another
                  // slot has freed up.
                  return r.sent(), [ 4 /*yield*/ , Zo(t) ];

                case 2:
                  // It's possible that with the completion of this mutation another
                  // slot has freed up.
                  return r.sent(), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function os(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(i) {
              switch (i.label) {
                case 0:
                  return e && as(t).pr ? [ 4 /*yield*/ , function(t, e) {
                      return __awaiter$6(this, void 0, void 0, (function() {
                          var n, i;
                          return __generator$6(this, (function(r) {
                              switch (r.label) {
                                case 0:
                                  return Ge(i = e.code) && i !== N$1.ABORTED ? (n = t.Fr.shift(), 
                                  // In this case it's also unlikely that the server itself is melting
                                  // down -- this was just a bad request so inhibit backoff on the next
                                  // restart.
                                  as(t).sr(), [ 4 /*yield*/ , Jo(t, (function() {
                                      return t.remoteSyncer.rejectFailedWrite(n.batchId, e);
                                  })) ]) : [ 3 /*break*/ , 3 ];

                                case 1:
                                  // It's possible that with the completion of this mutation
                                  // another slot has freed up.
                                  return r.sent(), [ 4 /*yield*/ , Zo(t) ];

                                case 2:
                                  // In this case it's also unlikely that the server itself is melting
                                  // down -- this was just a bad request so inhibit backoff on the next
                                  // restart.
                                  // It's possible that with the completion of this mutation
                                  // another slot has freed up.
                                  r.sent(), r.label = 3;

                                case 3:
                                  return [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  }(t, e) ] : [ 3 /*break*/ , 2 ];

                  // This error affects the actual write.
                                case 1:
                  // This error affects the actual write.
                  i.sent(), i.label = 2;

                case 2:
                  // If the write stream closed after the write handshake completes, a write
                  // operation failed and we fail the pending operation.
                  // The write stream might have been started by refilling the write
                  // pipeline for failed writes
                  return ts(t) && es(t), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Toggles the network state when the client gains or loses its primary lease.
   */ function ss(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return n = F$1(t), e ? (n.Or.delete(2 /* IsSecondary */), [ 4 /*yield*/ , Vo(n) ]) : [ 3 /*break*/ , 2 ];

                case 1:
                  return r.sent(), [ 3 /*break*/ , 5 ];

                case 2:
                  return e ? [ 3 /*break*/ , 4 ] : (n.Or.add(2 /* IsSecondary */), [ 4 /*yield*/ , qo(n) ]);

                case 3:
                  r.sent(), n.Br.set("Unknown" /* Unknown */), r.label = 4;

                case 4:
                  r.label = 5;

                case 5:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * If not yet initialized, registers the WatchStream and its network state
   * callback with `remoteStoreImpl`. Returns the existing stream if one is
   * already available.
   *
   * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
   * This is not done on Web to allow it to be tree-shaken.
   */ function us(t) {
      var e = this;
      return t.Ur || (
      // Create stream (but note that it is not started yet).
      t.Ur = function(t, e, n) {
          var r = F$1(t);
          return r.br(), new Lo(e, r.Hi, r.credentials, r.R, n);
      }(t.datastore, t.asyncQueue, {
          Ii: Ho.bind(null, t),
          Ri: Yo.bind(null, t),
          _r: $o.bind(null, t)
      }), t.Mr.push((function(i) {
          return __awaiter$6(e, void 0, void 0, (function() {
              return __generator$6(this, (function(e) {
                  switch (e.label) {
                    case 0:
                      return i ? (t.Ur.sr(), Go(t) ? Qo(t) : t.Br.set("Unknown" /* Unknown */), [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 1 ];

                    case 1:
                      return [ 4 /*yield*/ , t.Ur.stop() ];

                    case 2:
                      e.sent(), Wo(t), e.label = 3;

                    case 3:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }))), t.Ur
      /**
   * If not yet initialized, registers the WriteStream and its network state
   * callback with `remoteStoreImpl`. Returns the existing stream if one is
   * already available.
   *
   * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
   * This is not done on Web to allow it to be tree-shaken.
   */;
  }

  function as(t) {
      var e = this;
      return t.Kr || (
      // Create stream (but note that it is not started yet).
      t.Kr = function(t, e, n) {
          var r = F$1(t);
          return r.br(), new Oo(e, r.Hi, r.credentials, r.R, n);
      }(t.datastore, t.asyncQueue, {
          Ii: ns.bind(null, t),
          Ri: os.bind(null, t),
          Ir: rs.bind(null, t),
          Tr: is.bind(null, t)
      }), t.Mr.push((function(i) {
          return __awaiter$6(e, void 0, void 0, (function() {
              return __generator$6(this, (function(e) {
                  switch (e.label) {
                    case 0:
                      return i ? (t.Kr.sr(), [ 4 /*yield*/ , Zo(t) ]) : [ 3 /*break*/ , 2 ];

                    case 1:
                      // This will start the write stream if necessary.
                      return e.sent(), [ 3 /*break*/ , 4 ];

                    case 2:
                      return [ 4 /*yield*/ , t.Kr.stop() ];

                    case 3:
                      e.sent(), t.Fr.length > 0 && (C$1("RemoteStore", "Stopping write stream with " + t.Fr.length + " pending writes"), 
                      t.Fr = []), e.label = 4;

                    case 4:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }))), t.Kr
      /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
      /**
   * Represents an operation scheduled to be run in the future on an AsyncQueue.
   *
   * It is created via DelayedOperation.createAndSchedule().
   *
   * Supports cancellation (via cancel()) and early execution (via skipDelay()).
   *
   * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
   * in newer versions of TypeScript defines `finally`, which is not available in
   * IE.
   */;
  }

  var cs = /** @class */ function() {
      function t(t, e, n, r, i) {
          this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = i, 
          this.deferred = new br, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
          // It's normal for the deferred promise to be canceled (due to cancellation)
          // and so we attach a dummy catch callback to avoid
          // 'UnhandledPromiseRejectionWarning' log spam.
          this.deferred.promise.catch((function(t) {}))
          /**
       * Creates and returns a DelayedOperation that has been scheduled to be
       * executed on the provided asyncQueue after the provided delayMs.
       *
       * @param asyncQueue - The queue to schedule the operation on.
       * @param id - A Timer ID identifying the type of operation this is.
       * @param delayMs - The delay (ms) before the operation should be scheduled.
       * @param op - The operation to run.
       * @param removalCallback - A callback to be called synchronously once the
       *   operation is executed or canceled, notifying the AsyncQueue to remove it
       *   from its delayedOperations list.
       *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
       *   the DelayedOperation class public.
       */;
      }
      return t.createAndSchedule = function(e, n, r, i, o) {
          var s = new t(e, n, Date.now() + r, i, o);
          return s.start(r), s;
      }, 
      /**
       * Starts the timer. This is called immediately after construction by
       * createAndSchedule().
       */
      t.prototype.start = function(t) {
          var e = this;
          this.timerHandle = setTimeout((function() {
              return e.handleDelayElapsed();
          }), t);
      }, 
      /**
       * Queues the operation to run immediately (if it hasn't already been run or
       * canceled).
       */
      t.prototype.skipDelay = function() {
          return this.handleDelayElapsed();
      }, 
      /**
       * Cancels the operation if it hasn't already been executed or canceled. The
       * promise will be rejected.
       *
       * As long as the operation has not yet been run, calling cancel() provides a
       * guarantee that the operation will not be run.
       */
      t.prototype.cancel = function(t) {
          null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new D$1(N$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
      }, t.prototype.handleDelayElapsed = function() {
          var t = this;
          this.asyncQueue.enqueueAndForget((function() {
              return null !== t.timerHandle ? (t.clearTimeout(), t.op().then((function(e) {
                  return t.deferred.resolve(e);
              }))) : Promise.resolve();
          }));
      }, t.prototype.clearTimeout = function() {
          null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
          this.timerHandle = null);
      }, t;
  }();

  /**
   * Returns a FirestoreError that can be surfaced to the user if the provided
   * error is an IndexedDbTransactionError. Re-throws the error otherwise.
   */ function hs(t, e) {
      if (x$1("AsyncQueue", e + ": " + t), Nr(t)) return new D$1(N$1.UNAVAILABLE, e + ": " + t);
      throw t;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * DocumentSet is an immutable (copy-on-write) collection that holds documents
   * in order specified by the provided comparator. We always add a document key
   * comparator on top of what is provided to guarantee document equality based on
   * the key.
   */ var fs = /** @class */ function() {
      /** The default ordering is by key if the comparator is omitted */
      function t(t) {
          // We are adding document key comparator to the end as it's the only
          // guaranteed unique property of a document.
          this.comparator = t ? function(e, n) {
              return t(e, n) || ct.comparator(e.key, n.key);
          } : function(t, e) {
              return ct.comparator(t.key, e.key);
          }, this.keyedMap = en(), this.sortedSet = new We(this.comparator)
          /**
       * Returns an empty copy of the existing DocumentSet, using the same
       * comparator.
       */;
      }
      return t.emptySet = function(e) {
          return new t(e.comparator);
      }, t.prototype.has = function(t) {
          return null != this.keyedMap.get(t);
      }, t.prototype.get = function(t) {
          return this.keyedMap.get(t);
      }, t.prototype.first = function() {
          return this.sortedSet.minKey();
      }, t.prototype.last = function() {
          return this.sortedSet.maxKey();
      }, t.prototype.isEmpty = function() {
          return this.sortedSet.isEmpty();
      }, 
      /**
       * Returns the index of the provided key in the document set, or -1 if the
       * document key is not present in the set;
       */
      t.prototype.indexOf = function(t) {
          var e = this.keyedMap.get(t);
          return e ? this.sortedSet.indexOf(e) : -1;
      }, Object.defineProperty(t.prototype, "size", {
          get: function() {
              return this.sortedSet.size;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t) {
          this.sortedSet.inorderTraversal((function(e, n) {
              return t(e), !1;
          }));
      }, 
      /** Inserts or updates a document with the same key */ t.prototype.add = function(t) {
          // First remove the element if we have it.
          var e = this.delete(t.key);
          return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
      }, 
      /** Deletes a document with a given key */ t.prototype.delete = function(t) {
          var e = this.get(t);
          return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
      }, t.prototype.isEqual = function(e) {
          if (!(e instanceof t)) return !1;
          if (this.size !== e.size) return !1;
          for (var n = this.sortedSet.getIterator(), r = e.sortedSet.getIterator(); n.hasNext(); ) {
              var i = n.getNext().key, o = r.getNext().key;
              if (!i.isEqual(o)) return !1;
          }
          return !0;
      }, t.prototype.toString = function() {
          var t = [];
          return this.forEach((function(e) {
              t.push(e.toString());
          })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
      }, t.prototype.copy = function(e, n) {
          var r = new t;
          return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = n, r;
      }, t;
  }(), ls = /** @class */ function() {
      function t() {
          this.Qr = new We(ct.comparator);
      }
      return t.prototype.track = function(t) {
          var e = t.doc.key, n = this.Qr.get(e);
          n ? 
          // Merge the new change with the existing change.
          0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.Qr = this.Qr.insert(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.Qr = this.Qr.insert(e, {
              type: n.type,
              doc: t.doc
          }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.Qr = this.Qr.insert(e, {
              type: 2 /* Modified */ ,
              doc: t.doc
          }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.Qr = this.Qr.insert(e, {
              type: 0 /* Added */ ,
              doc: t.doc
          }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.Qr = this.Qr.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.Qr = this.Qr.insert(e, {
              type: 1 /* Removed */ ,
              doc: n.doc
          }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.Qr = this.Qr.insert(e, {
              type: 2 /* Modified */ ,
              doc: t.doc
          }) : 
          // This includes these cases, which don't make sense:
          // Added->Added
          // Removed->Removed
          // Modified->Added
          // Removed->Modified
          // Metadata->Added
          // Removed->Metadata
          O$1() : this.Qr = this.Qr.insert(e, t);
      }, t.prototype.jr = function() {
          var t = [];
          return this.Qr.inorderTraversal((function(e, n) {
              t.push(n);
          })), t;
      }, t;
  }(), ds = /** @class */ function() {
      function t(t, e, n, r, i, o, s, u) {
          this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, 
          this.fromCache = o, this.syncStateChanged = s, this.excludesMetadataChanges = u
          /** Returns a view snapshot as if all documents in the snapshot were added. */;
      }
      return t.fromInitialDocuments = function(e, n, r, i) {
          var o = [];
          return n.forEach((function(t) {
              o.push({
                  type: 0 /* Added */ ,
                  doc: t
              });
          })), new t(e, n, fs.emptySet(n), o, r, i, 
          /* syncStateChanged= */ !0, 
          /* excludesMetadataChanges= */ !1);
      }, Object.defineProperty(t.prototype, "hasPendingWrites", {
          get: function() {
              return !this.mutatedKeys.isEmpty();
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.isEqual = function(t) {
          if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && ie(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
          var e = this.docChanges, n = t.docChanges;
          if (e.length !== n.length) return !1;
          for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
          return !0;
      }, t;
  }(), ps = function() {
      this.Wr = void 0, this.listeners = [];
  }, ys = function() {
      this.queries = new Ii((function(t) {
          return oe(t);
      }), ie), this.onlineState = "Unknown" /* Unknown */ , this.Gr = new Set;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
   * duplicate events for the same doc.
   */ function vs(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u, a, c;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  if (n = F$1(t), i = e.query, o = !1, (s = n.queries.get(i)) || (o = !0, s = new ps), 
                  !o) return [ 3 /*break*/ , 4 ];
                  r.label = 1;

                case 1:
                  return r.trys.push([ 1, 3, , 4 ]), u = s, [ 4 /*yield*/ , n.onListen(i) ];

                case 2:
                  return u.Wr = r.sent(), [ 3 /*break*/ , 4 ];

                case 3:
                  return a = r.sent(), c = hs(a, "Initialization of query '" + se(e.query) + "' failed"), 
                  [ 2 /*return*/ , void e.onError(c) ];

                case 4:
                  return n.queries.set(i, s), s.listeners.push(e), 
                  // Run global snapshot listeners if a consistent snapshot has been emitted.
                  e.zr(n.onlineState), s.Wr && e.Hr(s.Wr) && bs(n), [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function ms(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u;
          return __generator$6(this, (function(r) {
              return n = F$1(t), i = e.query, o = !1, (s = n.queries.get(i)) && (u = s.listeners.indexOf(e)) >= 0 && (s.listeners.splice(u, 1), 
              o = 0 === s.listeners.length), o ? [ 2 /*return*/ , (n.queries.delete(i), n.onUnlisten(i)) ] : [ 2 /*return*/ ];
          }));
      }));
  }

  function gs(t, e) {
      for (var n = F$1(t), r = !1, i = 0, o = e; i < o.length; i++) {
          var s = o[i], u = s.query, a = n.queries.get(u);
          if (a) {
              for (var c = 0, h = a.listeners; c < h.length; c++) {
                  h[c].Hr(s) && (r = !0);
              }
              a.Wr = s;
          }
      }
      r && bs(n);
  }

  function ws(t, e, n) {
      var r = F$1(t), i = r.queries.get(e);
      if (i) for (var o = 0, s = i.listeners; o < s.length; o++) {
          s[o].onError(n);
      }
      // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
      // after an error.
          r.queries.delete(e);
  }

  // Call all global snapshot listeners that have been set.
  function bs(t) {
      t.Gr.forEach((function(t) {
          t.next();
      }));
  }

  /**
   * QueryListener takes a series of internal view snapshots and determines
   * when to raise the event.
   *
   * It uses an Observer to dispatch events.
   */ var Is = /** @class */ function() {
      function t(t, e, n) {
          this.query = t, this.Jr = e, 
          /**
               * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
               * observer. This flag is set to true once we've actually raised an event.
               */
          this.Yr = !1, this.Xr = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {}
          /**
       * Applies the new ViewSnapshot to this listener, raising a user-facing event
       * if applicable (depending on what changed, whether the user has opted into
       * metadata-only changes, etc.). Returns true if a user-facing event was
       * indeed raised.
       */;
      }
      return t.prototype.Hr = function(t) {
          if (!this.options.includeMetadataChanges) {
              for (
              // Remove the metadata only changes.
              var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
                  var i = r[n];
                  3 /* Metadata */ !== i.type && e.push(i);
              }
              t = new ds(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, 
              /* excludesMetadataChanges= */ !0);
          }
          var o = !1;
          return this.Yr ? this.Zr(t) && (this.Jr.next(t), o = !0) : this.eo(t, this.onlineState) && (this.no(t), 
          o = !0), this.Xr = t, o;
      }, t.prototype.onError = function(t) {
          this.Jr.error(t);
      }, 
      /** Returns whether a snapshot was raised. */ t.prototype.zr = function(t) {
          this.onlineState = t;
          var e = !1;
          return this.Xr && !this.Yr && this.eo(this.Xr, t) && (this.no(this.Xr), e = !0), 
          e;
      }, t.prototype.eo = function(t, e) {
          // Always raise the first event when we're synced
          if (!t.fromCache) return !0;
          // NOTE: We consider OnlineState.Unknown as online (it should become Offline
          // or Online if we wait long enough).
                  var n = "Offline" /* Offline */ !== e;
          // Don't raise the event if we're online, aren't synced yet (checked
          // above) and are waiting for a sync.
                  return !(this.options.so && n || t.docs.isEmpty() && "Offline" /* Offline */ !== e);
          // Raise data from cache if we have any documents or we are offline
          }, t.prototype.Zr = function(t) {
          // We don't need to handle includeDocumentMetadataChanges here because
          // the Metadata only changes have already been stripped out if needed.
          // At this point the only changes we will see are the ones we should
          // propagate.
          if (t.docChanges.length > 0) return !0;
          var e = this.Xr && this.Xr.hasPendingWrites !== t.hasPendingWrites;
          return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
          // Generally we should have hit one of the cases above, but it's possible
          // to get here if there were only metadata docChanges and they got
          // stripped out.
          }, t.prototype.no = function(t) {
          t = ds.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.Yr = !0, 
          this.Jr.next(t);
      }, t;
  }();

  /**
   * Returns a `LoadBundleTaskProgress` representing the progress that the loading
   * has succeeded.
   */
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ var Ns = function(t) {
      this.key = t;
  }, Ds = function(t) {
      this.key = t;
  }, As = /** @class */ function() {
      function t(t, 
      /** Documents included in the remote target */
      e) {
          this.query = t, this.uo = e, this.ao = null, 
          /**
               * A flag whether the view is current with the backend. A view is considered
               * current after it has seen the current flag from the backend and did not
               * lose consistency within the watch stream (e.g. because of an existence
               * filter mismatch).
               */
          this.current = !1, 
          /** Documents in the view but not in the remote target */
          this.ho = sn(), 
          /** Document Keys that have local changes */
          this.mutatedKeys = sn(), this.lo = ae(t), this.fo = new fs(this.lo);
      }
      return Object.defineProperty(t.prototype, "wo", {
          /**
           * The set of remote documents that the server has told us belongs to the target associated with
           * this view.
           */
          get: function() {
              return this.uo;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges - The doc changes to apply to this view.
       * @param previousChanges - If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @returns a new set of docs, changes, and refill flag.
       */
      t.prototype._o = function(t, e) {
          var n = this, r = e ? e.mo : new ls, i = e ? e.fo : this.fo, o = e ? e.mutatedKeys : this.mutatedKeys, s = i, u = !1, a = $t(this.query) && i.size === this.query.limit ? i.last() : null, c = Xt(this.query) && i.size === this.query.limit ? i.first() : null;
          // Drop documents out to meet limit/limitToLast requirement.
          if (t.inorderTraversal((function(t, e) {
              var h = i.get(t), f = ue(n.query, e) ? e : null, l = !!h && n.mutatedKeys.has(h.key), d = !!f && (f.hasLocalMutations || 
              // We only consider committed mutations for documents that were
              // mutated during the lifetime of the view.
              n.mutatedKeys.has(f.key) && f.hasCommittedMutations), p = !1;
              // Calculate change
              h && f ? h.data.isEqual(f.data) ? l !== d && (r.track({
                  type: 3 /* Metadata */ ,
                  doc: f
              }), p = !0) : n.yo(h, f) || (r.track({
                  type: 2 /* Modified */ ,
                  doc: f
              }), p = !0, (a && n.lo(f, a) > 0 || c && n.lo(f, c) < 0) && (
              // This doc moved from inside the limit to outside the limit.
              // That means there may be some other doc in the local cache
              // that should be included instead.
              u = !0)) : !h && f ? (r.track({
                  type: 0 /* Added */ ,
                  doc: f
              }), p = !0) : h && !f && (r.track({
                  type: 1 /* Removed */ ,
                  doc: h
              }), p = !0, (a || c) && (
              // A doc was removed from a full limit query. We'll need to
              // requery from the local cache to see if we know about some other
              // doc that should be in the results.
              u = !0)), p && (f ? (s = s.add(f), o = d ? o.add(t) : o.delete(t)) : (s = s.delete(t), 
              o = o.delete(t)));
          })), $t(this.query) || Xt(this.query)) for (;s.size > this.query.limit; ) {
              var h = $t(this.query) ? s.last() : s.first();
              s = s.delete(h.key), o = o.delete(h.key), r.track({
                  type: 1 /* Removed */ ,
                  doc: h
              });
          }
          return {
              fo: s,
              mo: r,
              Nn: u,
              mutatedKeys: o
          };
      }, t.prototype.yo = function(t, e) {
          // We suppress the initial change event for documents that were modified as
          // part of a write acknowledgment (e.g. when the value of a server transform
          // is applied) as Watch will send us the same document again.
          // By suppressing the event, we only raise two user visible events (one with
          // `hasPendingWrites` and the final state of the document) instead of three
          // (one with `hasPendingWrites`, the modified document with
          // `hasPendingWrites` and the final state of the document).
          return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
      }, 
      /**
       * Updates the view with the given ViewDocumentChanges and optionally updates
       * limbo docs and sync state from the provided target change.
       * @param docChanges - The set of changes to make to the view's docs.
       * @param updateLimboDocuments - Whether to update limbo documents based on
       *        this change.
       * @param targetChange - A target change to apply for computing limbo docs and
       *        sync state.
       * @returns A new ViewChange with the given docs, changes, and sync state.
       */
      // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
      t.prototype.applyChanges = function(t, e, n) {
          var r = this, i = this.fo;
          this.fo = t.fo, this.mutatedKeys = t.mutatedKeys;
          // Sort changes based on type and query comparator
          var o = t.mo.jr();
          o.sort((function(t, e) {
              return function(t, e) {
                  var n = function(t) {
                      switch (t) {
                        case 0 /* Added */ :
                          return 1;

                        case 2 /* Modified */ :
                        case 3 /* Metadata */ :
                          // A metadata change is converted to a modified change at the public
                          // api layer.  Since we sort by document key and then change type,
                          // metadata and modified changes must be sorted equivalently.
                          return 2;

                        case 1 /* Removed */ :
                          return 0;

                        default:
                          return O$1();
                      }
                  };
                  return n(t) - n(e);
              }(t.type, e.type) || r.lo(t.doc, e.doc);
          })), this.po(n);
          var s = e ? this.Eo() : [], u = 0 === this.ho.size && this.current ? 1 /* Synced */ : 0 /* Local */ , a = u !== this.ao;
          return this.ao = u, 0 !== o.length || a ? {
              snapshot: new ds(this.query, t.fo, i, o, t.mutatedKeys, 0 /* Local */ === u, a, 
              /* excludesMetadataChanges= */ !1),
              To: s
          } : {
              To: s
          };
          // no changes
          }, 
      /**
       * Applies an OnlineState change to the view, potentially generating a
       * ViewChange if the view's syncState changes as a result.
       */
      t.prototype.zr = function(t) {
          return this.current && "Offline" /* Offline */ === t ? (
          // If we're offline, set `current` to false and then call applyChanges()
          // to refresh our syncState and generate a ViewChange as appropriate. We
          // are guaranteed to get a new TargetChange that sets `current` back to
          // true once the client is back online.
          this.current = !1, this.applyChanges({
              fo: this.fo,
              mo: new ls,
              mutatedKeys: this.mutatedKeys,
              Nn: !1
          }, 
          /* updateLimboDocuments= */ !1)) : {
              To: []
          };
      }, 
      /**
       * Returns whether the doc for the given key should be in limbo.
       */
      t.prototype.Io = function(t) {
          // If the remote end says it's part of this query, it's not in limbo.
          return !this.uo.has(t) && 
          // The local store doesn't think it's a result, so it shouldn't be in limbo.
          !!this.fo.has(t) && !this.fo.get(t).hasLocalMutations;
      }, 
      /**
       * Updates syncedDocuments, current, and limbo docs based on the given change.
       * Returns the list of changes to which docs are in limbo.
       */
      t.prototype.po = function(t) {
          var e = this;
          t && (t.addedDocuments.forEach((function(t) {
              return e.uo = e.uo.add(t);
          })), t.modifiedDocuments.forEach((function(t) {})), t.removedDocuments.forEach((function(t) {
              return e.uo = e.uo.delete(t);
          })), this.current = t.current);
      }, t.prototype.Eo = function() {
          var t = this;
          // We can only determine limbo documents when we're in-sync with the server.
                  if (!this.current) return [];
          // TODO(klimt): Do this incrementally so that it's not quadratic when
          // updating many documents.
                  var e = this.ho;
          this.ho = sn(), this.fo.forEach((function(e) {
              t.Io(e.key) && (t.ho = t.ho.add(e.key));
          }));
          // Diff the new limbo docs with the old limbo docs.
          var n = [];
          return e.forEach((function(e) {
              t.ho.has(e) || n.push(new Ds(e));
          })), this.ho.forEach((function(t) {
              e.has(t) || n.push(new Ns(t));
          })), n;
      }, 
      /**
       * Update the in-memory state of the current view with the state read from
       * persistence.
       *
       * We update the query view whenever a client's primary status changes:
       * - When a client transitions from primary to secondary, it can miss
       *   LocalStorage updates and its query views may temporarily not be
       *   synchronized with the state on disk.
       * - For secondary to primary transitions, the client needs to update the list
       *   of `syncedDocuments` since secondary clients update their query views
       *   based purely on synthesized RemoteEvents.
       *
       * @param queryResult.documents - The documents that match the query according
       * to the LocalStore.
       * @param queryResult.remoteKeys - The keys of the documents that match the
       * query according to the backend.
       *
       * @returns The ViewChange that resulted from this synchronization.
       */
      // PORTING NOTE: Multi-tab only.
      t.prototype.Ao = function(t) {
          this.uo = t.Bn, this.ho = sn();
          var e = this._o(t.documents);
          return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
      }, 
      /**
       * Returns a view snapshot as if this query was just listened to. Contains
       * a document add for every existing document and the `fromCache` and
       * `hasPendingWrites` status of the already established view.
       */
      // PORTING NOTE: Multi-tab only.
      t.prototype.Ro = function() {
          return ds.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, 0 /* Local */ === this.ao);
      }, t;
  }(), ks = function(
  /**
       * The query itself.
       */
  t, 
  /**
       * The target number created by the client that is used in the watch
       * stream to identify this query.
       */
  e, 
  /**
       * The view is responsible for computing the final merged truth of what
       * docs are in the query. It gets notified of local and remote changes,
       * and applies the query filters and limits to determine the most correct
       * possible results.
       */
  n) {
      this.query = t, this.targetId = e, this.view = n;
  }, Cs = function(t) {
      this.key = t, 
      /**
               * Set to true once we've received a document. This is used in
               * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
               * decide whether it needs to manufacture a delete event for the target once
               * the target is CURRENT.
               */
      this.bo = !1;
  }, xs = /** @class */ function() {
      function t(t, e, n, 
      // PORTING NOTE: Manages state synchronization in multi-tab environments.
      r, i, o) {
          this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = r, 
          this.currentUser = i, this.maxConcurrentLimboResolutions = o, this.vo = {}, this.Po = new Ii((function(t) {
              return oe(t);
          }), ie), this.Vo = new Map, 
          /**
               * The keys of documents that are in limbo for which we haven't yet started a
               * limbo resolution query. The strings in this set are the result of calling
               * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
               *
               * The `Set` type was chosen because it provides efficient lookup and removal
               * of arbitrary elements and it also maintains insertion order, providing the
               * desired queue-like FIFO semantics.
               */
          this.So = new Set, 
          /**
               * Keeps track of the target ID for each document that is in limbo with an
               * active target.
               */
          this.Do = new We(ct.comparator), 
          /**
               * Keeps track of the information about an active limbo resolution for each
               * active target ID that was started for the purpose of limbo resolution.
               */
          this.Co = new Map, this.No = new no, 
          /** Stores user completion handlers, indexed by User and BatchId. */
          this.xo = {}, 
          /** Stores user callbacks waiting for all pending writes to be acknowledged. */
          this.ko = new Map, this.Fo = ci.Yt(), this.onlineState = "Unknown" /* Unknown */ , 
          // The primary state is set to `true` or `false` immediately after Firestore
          // startup. In the interim, a client should only be considered primary if
          // `isPrimary` is true.
          this.$o = void 0;
      }
      return Object.defineProperty(t.prototype, "isPrimaryClient", {
          get: function() {
              return !0 === this.$o;
          },
          enumerable: !1,
          configurable: !0
      }), t;
  }();

  /**
   * Initiates the new listen, resolves promise when listen enqueued to the
   * server. All the subsequent view snapshots or errors are sent to the
   * subscribed handlers. Returns the initial snapshot.
   */
  function Rs(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u, a;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return n = uu(t), (s = n.Po.get(e)) ? (
                  // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                  // already exists when EventManager calls us for the first time. This
                  // happens when the primary tab is already listening to this query on
                  // behalf of another tab and the user of the primary also starts listening
                  // to the query. EventManager will not have an assigned target ID in this
                  // case and calls `listen` to obtain this ID.
                  i = s.targetId, n.sharedClientState.addLocalQueryTarget(i), o = s.view.Ro(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                case 1:
                  return [ 4 /*yield*/ , Wi(n.localStore, ne(e)) ];

                case 2:
                  return u = r.sent(), a = n.sharedClientState.addLocalQueryTarget(u.targetId), i = u.targetId, 
                  [ 4 /*yield*/ , Ls(n, e, i, "current" === a) ];

                case 3:
                  o = r.sent(), n.isPrimaryClient && Uo(n.remoteStore, u), r.label = 4;

                case 4:
                  return [ 2 /*return*/ , o ];
              }
          }));
      }));
  }

  /**
   * Registers a view for a previously unknown query and computes its initial
   * snapshot.
   */ function Ls(t, e, i, o) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var s, u, a, c, h, f;
          return __generator$6(this, (function(l) {
              switch (l.label) {
                case 0:
                  // PORTING NOTE: On Web only, we inject the code that registers new Limbo
                  // targets based on view changes. This allows us to only depend on Limbo
                  // changes when user code includes queries.
                  return t.Oo = function(e, i, o) {
                      return function(t, e, i, o) {
                          return __awaiter$6(this, void 0, void 0, (function() {
                              var n, s, u;
                              return __generator$6(this, (function(r) {
                                  switch (r.label) {
                                    case 0:
                                      return n = e.view._o(i), n.Nn ? [ 4 /*yield*/ , Yi(t.localStore, e.query, 
                                      /* usePreviousResults= */ !1).then((function(t) {
                                          var r = t.documents;
                                          return e.view._o(r, n);
                                      })) ] : [ 3 /*break*/ , 2 ];

                                    case 1:
                                      // The query has a limit and some docs were removed, so we need
                                      // to re-run the query against the local store to make sure we
                                      // didn't lose any good docs that had been past the limit.
                                      n = r.sent(), r.label = 2;

                                    case 2:
                                      return s = o && o.targetChanges.get(e.targetId), u = e.view.applyChanges(n, 
                                      /* updateLimboDocuments= */ t.isPrimaryClient, s), [ 2 /*return*/ , (zs(t, e.targetId, u.To), 
                                      u.snapshot) ];
                                  }
                              }));
                          }));
                      }(t, e, i, o);
                  }, [ 4 /*yield*/ , Yi(t.localStore, e, 
                  /* usePreviousResults= */ !0) ];

                case 1:
                  return s = l.sent(), u = new As(e, s.Bn), a = u._o(s.documents), c = hn.createSynthesizedTargetChangeForCurrentChange(i, o && "Offline" /* Offline */ !== t.onlineState), 
                  h = u.applyChanges(a, 
                  /* updateLimboDocuments= */ t.isPrimaryClient, c), zs(t, i, h.To), f = new ks(e, i, u), 
                  [ 2 /*return*/ , (t.Po.set(e, f), t.Vo.has(i) ? t.Vo.get(i).push(e) : t.Vo.set(i, [ e ]), 
                  h.snapshot) ];
              }
          }));
      }));
  }

  /** Stops listening to the query. */ function Os(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return n = F$1(t), i = n.Po.get(e), (o = n.Vo.get(i.targetId)).length > 1 ? [ 2 /*return*/ , (n.Vo.set(i.targetId, o.filter((function(t) {
                      return !ie(t, e);
                  }))), void n.Po.delete(e)) ] : n.isPrimaryClient ? (
                  // We need to remove the local query target first to allow us to verify
                  // whether any other client is still interested in this target.
                  n.sharedClientState.removeLocalQueryTarget(i.targetId), n.sharedClientState.isActiveQueryTarget(i.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , Hi(n.localStore, i.targetId, 
                  /*keepPersistedTargetData=*/ !1).then((function() {
                      n.sharedClientState.clearQueryState(i.targetId), Bo(n.remoteStore, i.targetId), 
                      Qs(n, i.targetId);
                  })).catch(pi) ]) : [ 3 /*break*/ , 3 ];

                case 1:
                  r.sent(), r.label = 2;

                case 2:
                  return [ 3 /*break*/ , 5 ];

                case 3:
                  return Qs(n, i.targetId), [ 4 /*yield*/ , Hi(n.localStore, i.targetId, 
                  /*keepPersistedTargetData=*/ !0) ];

                case 4:
                  r.sent(), r.label = 5;

                case 5:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Initiates the write of local mutation batch which involves adding the
   * writes to the mutation queue, notifying the remote store about new
   * mutations and raising events for any changes this write caused.
   *
   * The promise returned by this call is resolved when the above steps
   * have completed, *not* when the write was acked by the backend. The
   * userCallback is resolved once the write was acked/rejected by the
   * backend (or failed locally for any other reason).
   */ function Ps(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o, s, u;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = au(t), r.label = 1;

                case 1:
                  return r.trys.push([ 1, 5, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                      var n, r = F$1(t), i = j.now(), o = e.reduce((function(t, e) {
                          return t.add(e.key);
                      }), sn());
                      return r.persistence.runTransaction("Locally write mutations", "readwrite", (function(t) {
                          return r.Mn.pn(t, o).next((function(o) {
                              n = o;
                              for (
                              // For non-idempotent mutations (such as `FieldValue.increment()`),
                              // we record the base state in a separate patch mutation. This is
                              // later used to guarantee consistent values and prevents flicker
                              // even if the backend sends us an update that already includes our
                              // transform.
                              var s = [], u = 0, a = e; u < a.length; u++) {
                                  var c = a[u], h = Re(c, n.get(c.key));
                                  null != h && 
                                  // NOTE: The base state should only be applied if there's some
                                  // existing document to override, so use a Precondition of
                                  // exists=true
                                  s.push(new Fe(c.key, h, St(h.value.mapValue), De.exists(!0)));
                              }
                              return r._n.addMutationBatch(t, i, s, e);
                          }));
                      })).then((function(t) {
                          return t.applyToLocalDocumentSet(n), {
                              batchId: t.batchId,
                              changes: n
                          };
                      }));
                  }(n.localStore, e) ];

                case 2:
                  return o = r.sent(), n.sharedClientState.addPendingMutation(o.batchId), function(t, e, n) {
                      var r = t.xo[t.currentUser.toKey()];
                      r || (r = new We(q$1)), r = r.insert(e, n), t.xo[t.currentUser.toKey()] = r;
                  }(n, o.batchId, i), [ 4 /*yield*/ , Ys(n, o.changes) ];

                case 3:
                  return r.sent(), [ 4 /*yield*/ , Zo(n.remoteStore) ];

                case 4:
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 5:
                  return s = r.sent(), u = hs(s, "Failed to persist write"), i.reject(u), [ 3 /*break*/ , 6 ];

                case 6:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Applies one remote event to the sync engine, notifying any views of the
   * changes, and releasing any pending mutation batches that would become
   * visible because of the snapshot version the remote event contains.
   */ function Fs(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = F$1(t), r.label = 1;

                case 1:
                  return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , Qi(n.localStore, e) ];

                case 2:
                  return i = r.sent(), 
                  // Update `receivedDocument` as appropriate for any limbo targets.
                  e.targetChanges.forEach((function(t, e) {
                      var r = n.Co.get(e);
                      r && (
                      // Since this is a limbo resolution lookup, it's for a single document
                      // and it could be added, modified, or removed, but not a combination.
                      P$1(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), 
                      t.addedDocuments.size > 0 ? r.bo = !0 : t.modifiedDocuments.size > 0 ? P$1(r.bo) : t.removedDocuments.size > 0 && (P$1(r.bo), 
                      r.bo = !1));
                  })), [ 4 /*yield*/ , Ys(n, i, e) ];

                case 3:
                  // Update `receivedDocument` as appropriate for any limbo targets.
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 4:
                  return [ 4 /*yield*/ , pi(r.sent()) ];

                case 5:
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 6:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Applies an OnlineState change to the sync engine and notifies any views of
   * the change.
   */ function Ms(t, e, n) {
      var r = F$1(t);
      // If we are the secondary client, we explicitly ignore the remote store's
      // online state (the local client may go offline, even though the primary
      // tab remains online) and only apply the primary tab's online state from
      // SharedClientState.
          if (r.isPrimaryClient && 0 /* RemoteStore */ === n || !r.isPrimaryClient && 1 /* SharedClientState */ === n) {
          var i = [];
          r.Po.forEach((function(t, n) {
              var r = n.view.zr(e);
              r.snapshot && i.push(r.snapshot);
          })), function(t, e) {
              var n = F$1(t);
              n.onlineState = e;
              var r = !1;
              n.queries.forEach((function(t, n) {
                  for (var i = 0, o = n.listeners; i < o.length; i++) {
                      // Run global snapshot listeners if a consistent snapshot has been emitted.
                      o[i].zr(e) && (r = !0);
                  }
              })), r && bs(n);
          }(r.eventManager, e), i.length && r.vo._r(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
      }
  }

  /**
   * Rejects the listen for the given targetID. This can be triggered by the
   * backend for any active target.
   *
   * @param syncEngine - The sync engine implementation.
   * @param targetId - The targetID corresponds to one previously initiated by the
   * user as part of TargetData passed to listen() on RemoteStore.
   * @param err - A description of the condition that has forced the rejection.
   * Nearly always this will be an indication that the user is no longer
   * authorized to see the data matching the target.
   */ function Vs(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o, s, u, a, c;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  // PORTING NOTE: Multi-tab only.
                  return (n = F$1(t)).sharedClientState.updateQueryState(e, "rejected", i), o = n.Co.get(e), 
                  (s = o && o.key) ? (u = (u = new We(ct.comparator)).insert(s, Nt.newNoDocument(s, K$1.min())), 
                  a = sn().add(s), c = new cn(K$1.min(), 
                  /* targetChanges= */ new Map, 
                  /* targetMismatches= */ new $e(q$1), u, a), [ 4 /*yield*/ , Fs(n, c) ]) : [ 3 /*break*/ , 2 ];

                case 1:
                  return r.sent(), 
                  // Since this query failed, we won't want to manually unlisten to it.
                  // We only remove it from bookkeeping after we successfully applied the
                  // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                  // this query when the RemoteStore restarts the Watch stream, which should
                  // re-trigger the target failure.
                  n.Do = n.Do.remove(s), n.Co.delete(e), Hs(n), [ 3 /*break*/ , 4 ];

                case 2:
                  return [ 4 /*yield*/ , Hi(n.localStore, e, 
                  /* keepPersistedTargetData */ !1).then((function() {
                      return Qs(n, e, i);
                  })).catch(pi) ];

                case 3:
                  r.sent(), r.label = 4;

                case 4:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function qs(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = F$1(t), i = e.batch.batchId, r.label = 1;

                case 1:
                  return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , ji(n.localStore, e) ];

                case 2:
                  return o = r.sent(), 
                  // The local store may or may not be able to apply the write result and
                  // raise events immediately (depending on whether the watcher is caught
                  // up), so we raise user callbacks first so that they consistently happen
                  // before listen events.
                  Ks(n, i, /*error=*/ null), js(n, i), n.sharedClientState.updateMutationState(i, "acknowledged"), 
                  [ 4 /*yield*/ , Ys(n, o) ];

                case 3:
                  // The local store may or may not be able to apply the write result and
                  // raise events immediately (depending on whether the watcher is caught
                  // up), so we raise user callbacks first so that they consistently happen
                  // before listen events.
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 4:
                  return [ 4 /*yield*/ , pi(r.sent()) ];

                case 5:
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 6:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function Us(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = F$1(t), r.label = 1;

                case 1:
                  return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                      var n = F$1(t);
                      return n.persistence.runTransaction("Reject batch", "readwrite-primary", (function(t) {
                          var r;
                          return n._n.lookupMutationBatch(t, e).next((function(e) {
                              return P$1(null !== e), r = e.keys(), n._n.removeMutationBatch(t, e);
                          })).next((function() {
                              return n._n.performConsistencyCheck(t);
                          })).next((function() {
                              return n.Mn.pn(t, r);
                          }));
                      }));
                  }(n.localStore, e) ];

                case 2:
                  return o = r.sent(), 
                  // The local store may or may not be able to apply the write result and
                  // raise events immediately (depending on whether the watcher is caught up),
                  // so we raise user callbacks first so that they consistently happen before
                  // listen events.
                  Ks(n, e, i), js(n, e), n.sharedClientState.updateMutationState(e, "rejected", i), 
                  [ 4 /*yield*/ , Ys(n, o) ];

                case 3:
                  // The local store may or may not be able to apply the write result and
                  // raise events immediately (depending on whether the watcher is caught up),
                  // so we raise user callbacks first so that they consistently happen before
                  // listen events.
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 4:
                  return [ 4 /*yield*/ , pi(r.sent()) ];

                case 5:
                  return r.sent(), [ 3 /*break*/ , 6 ];

                case 6:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Registers a user callback that resolves when all pending mutations at the moment of calling
   * are acknowledged .
   */ function Bs(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  zo((n = F$1(t)).remoteStore) || C$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                  r.label = 1;

                case 1:
                  return r.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , function(t) {
                      var e = F$1(t);
                      return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(t) {
                          return e._n.getHighestUnacknowledgedBatchId(t);
                      }));
                  }(n.localStore) ];

                case 2:
                  return -1 === (i = r.sent()) ? [ 2 /*return*/ , void e.resolve() ] : ((o = n.ko.get(i) || []).push(e), 
                  n.ko.set(i, o), [ 3 /*break*/ , 4 ]);

                case 3:
                  return s = r.sent(), u = hs(s, "Initialization of waitForPendingWrites() operation failed"), 
                  e.reject(u), [ 3 /*break*/ , 4 ];

                case 4:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /**
   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
   * if there are any.
   */ function js(t, e) {
      (t.ko.get(e) || []).forEach((function(t) {
          t.resolve();
      })), t.ko.delete(e)
      /** Reject all outstanding callbacks waiting for pending writes to complete. */;
  }

  function Ks(t, e, n) {
      var r = F$1(t), i = r.xo[r.currentUser.toKey()];
      // NOTE: Mutations restored from persistence won't have callbacks, so it's
      // okay for there to be no callback for this ID.
      if (i) {
          var o = i.get(e);
          o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.xo[r.currentUser.toKey()] = i;
      }
  }

  function Qs(t, e, n) {
      void 0 === n && (n = null), t.sharedClientState.removeLocalQueryTarget(e);
      for (var r = 0, i = t.Vo.get(e); r < i.length; r++) {
          var o = i[r];
          t.Po.delete(o), n && t.vo.Mo(o, n);
      }
      t.Vo.delete(e), t.isPrimaryClient && t.No.Zn(e).forEach((function(e) {
          t.No.containsKey(e) || 
          // We removed the last reference for this key
          Gs(t, e);
      }));
  }

  function Gs(t, e) {
      t.So.delete(e.path.canonicalString());
      // It's possible that the target already got removed because the query failed. In that case,
      // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
      var n = t.Do.get(e);
      null !== n && (Bo(t.remoteStore, n), t.Do = t.Do.remove(e), t.Co.delete(n), Hs(t));
  }

  function zs(t, e, n) {
      for (var r = 0, i = n; r < i.length; r++) {
          var o = i[r];
          o instanceof Ns ? (t.No.addReference(o.key, e), Ws(t, o)) : o instanceof Ds ? (C$1("SyncEngine", "Document no longer in limbo: " + o.key), 
          t.No.removeReference(o.key, e), t.No.containsKey(o.key) || 
          // We removed the last reference for this key
          Gs(t, o.key)) : O$1();
      }
  }

  function Ws(t, e) {
      var n = e.key, r = n.path.canonicalString();
      t.Do.get(n) || t.So.has(r) || (C$1("SyncEngine", "New document in limbo: " + n), t.So.add(r), 
      Hs(t));
  }

  /**
   * Starts listens for documents in limbo that are enqueued for resolution,
   * subject to a maximum number of concurrent resolutions.
   *
   * Without bounding the number of concurrent resolutions, the server can fail
   * with "resource exhausted" errors which can lead to pathological client
   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
   */ function Hs(t) {
      for (;t.So.size > 0 && t.Do.size < t.maxConcurrentLimboResolutions; ) {
          var e = t.So.values().next().value;
          t.So.delete(e);
          var n = new ct(H$1.fromString(e)), r = t.Fo.next();
          t.Co.set(r, new Cs(n)), t.Do = t.Do.insert(n, r), Uo(t.remoteStore, new Pr(ne(Yt(n.path)), r, 2 /* LimboResolution */ , S$1.o));
      }
  }

  function Ys(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var o, s, u, a;
          return __generator$6(this, (function(c) {
              switch (c.label) {
                case 0:
                  return o = F$1(t), s = [], u = [], a = [], o.Po.isEmpty() ? [ 3 /*break*/ , 3 ] : (o.Po.forEach((function(t, n) {
                      a.push(o.Oo(n, e, i).then((function(t) {
                          if (t) {
                              o.isPrimaryClient && o.sharedClientState.updateQueryState(n.targetId, t.fromCache ? "not-current" : "current"), 
                              s.push(t);
                              var e = Mi.Pn(n.targetId, t);
                              u.push(e);
                          }
                      })));
                  })), [ 4 /*yield*/ , Promise.all(a) ]);

                case 1:
                  return c.sent(), o.vo._r(s), [ 4 /*yield*/ , function(t, e) {
                      return __awaiter$6(this, void 0, void 0, (function() {
                          var n, i, o, s, u, a, c, h, f;
                          return __generator$6(this, (function(r) {
                              switch (r.label) {
                                case 0:
                                  n = F$1(t), r.label = 1;

                                case 1:
                                  return r.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(t) {
                                      return Ir.forEach(e, (function(e) {
                                          return Ir.forEach(e.bn, (function(r) {
                                              return n.persistence.referenceDelegate.addReference(t, e.targetId, r);
                                          })).next((function() {
                                              return Ir.forEach(e.vn, (function(r) {
                                                  return n.persistence.referenceDelegate.removeReference(t, e.targetId, r);
                                              }));
                                          }));
                                      }));
                                  })) ];

                                case 2:
                                  return r.sent(), [ 3 /*break*/ , 4 ];

                                case 3:
                                  if (!Nr(i = r.sent())) throw i;
                                  // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                  // number for the documents that were included in this transaction.
                                  // This might trigger them to be deleted earlier than they otherwise
                                  // would have, but it should not invalidate the integrity of the data.
                                                                  return C$1("LocalStore", "Failed to update sequence numbers: " + i), 
                                  [ 3 /*break*/ , 4 ];

                                case 4:
                                  for (o = 0, s = e; o < s.length; o++) u = s[o], a = u.targetId, u.fromCache || (c = n.kn.get(a), 
                                  h = c.snapshotVersion, f = c.withLastLimboFreeSnapshotVersion(h), 
                                  // Advance the last limbo free snapshot version
                                  n.kn = n.kn.insert(a, f));
                                  return [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  }(o.localStore, u) ];

                case 2:
                  c.sent(), c.label = 3;

                case 3:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function $s(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return (n = F$1(t)).currentUser.isEqual(e) ? [ 3 /*break*/ , 3 ] : (C$1("SyncEngine", "User change. New user:", e.toKey()), 
                  [ 4 /*yield*/ , Bi(n.localStore, e) ]);

                case 1:
                  return i = r.sent(), n.currentUser = e, 
                  // Fails tasks waiting for pending writes requested by previous user.
                  function(t, e) {
                      t.ko.forEach((function(t) {
                          t.forEach((function(t) {
                              t.reject(new D$1(N$1.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                          }));
                      })), t.ko.clear();
                  }(n), 
                  // TODO(b/114226417): Consider calling this only in the primary tab.
                  n.sharedClientState.handleUserChange(e, i.removedBatchIds, i.addedBatchIds), [ 4 /*yield*/ , Ys(n, i.Ln) ];

                case 2:
                  r.sent(), r.label = 3;

                case 3:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function Xs(t, e) {
      var n = F$1(t), r = n.Co.get(e);
      if (r && r.bo) return sn().add(r.key);
      var i = sn(), o = n.Vo.get(e);
      if (!o) return i;
      for (var s = 0, u = o; s < u.length; s++) {
          var a = u[s], c = n.Po.get(a);
          i = i.unionWith(c.view.wo);
      }
      return i;
  }

  /**
   * Reconcile the list of synced documents in an existing view with those
   * from persistence.
   */ function Js(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return [ 4 /*yield*/ , Yi((n = F$1(t)).localStore, e.query, 
                  /* usePreviousResults= */ !0) ];

                case 1:
                  return i = r.sent(), o = e.view.Ao(i), [ 2 /*return*/ , (n.isPrimaryClient && zs(n, e.targetId, o.To), 
                  o) ];
              }
          }));
      }));
  }

  /**
   * Retrieves newly changed documents from remote document cache and raises
   * snapshots if needed.
   */
  // PORTING NOTE: Multi-Tab only.
  function Zs(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e;
          return __generator$6(this, (function(n) {
              return [ 2 /*return*/ , Xi((e = F$1(t)).localStore).then((function(t) {
                  return Ys(e, t);
              })) ];
          }));
      }));
  }

  /** Applies a mutation state to an existing batch.  */
  // PORTING NOTE: Multi-Tab only.
  function tu(t, e, i, o) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, s;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return [ 4 /*yield*/ , function(t, e) {
                      var n = F$1(t), r = F$1(n._n);
                      return n.persistence.runTransaction("Lookup mutation documents", "readonly", (function(t) {
                          return r.jt(t, e).next((function(e) {
                              return e ? n.Mn.pn(t, e) : Ir.resolve(null);
                          }));
                      }));
                  }((n = F$1(t)).localStore, e) ];

                case 1:
                  return null === (s = r.sent()) ? [ 3 /*break*/ , 6 ] : "pending" !== i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , Zo(n.remoteStore) ];

                case 2:
                  // If we are the primary client, we need to send this write to the
                  // backend. Secondary clients will ignore these writes since their remote
                  // connection is disabled.
                  return r.sent(), [ 3 /*break*/ , 4 ];

                case 3:
                  "acknowledged" === i || "rejected" === i ? (
                  // NOTE: Both these methods are no-ops for batches that originated from
                  // other clients.
                  Ks(n, e, o || null), js(n, e), function(t, e) {
                      F$1(F$1(t)._n).Gt(e);
                  }(n.localStore, e)) : O$1(), r.label = 4;

                case 4:
                  return [ 4 /*yield*/ , Ys(n, s) ];

                case 5:
                  return r.sent(), [ 3 /*break*/ , 7 ];

                case 6:
                  // A throttled tab may not have seen the mutation before it was completed
                  // and removed from the mutation queue, in which case we won't have cached
                  // the affected documents. In this case we can safely ignore the update
                  // since that means we didn't apply the mutation locally at all (if we
                  // had, we would have cached the affected documents), and so we will just
                  // see any resulting document changes via normal remote document updates
                  // as applicable.
                  C$1("SyncEngine", "Cannot apply mutation batch with id: " + e), r.label = 7;

                case 7:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /** Applies a query target change from a different tab. */
  // PORTING NOTE: Multi-Tab only.
  function eu(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u, a, c, h;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return uu(n = F$1(t)), au(n), !0 !== e || !0 === n.$o ? [ 3 /*break*/ , 3 ] : (i = n.sharedClientState.getAllActiveQueryTargets(), 
                  [ 4 /*yield*/ , nu(n, i.toArray()) ]);

                case 1:
                  return o = r.sent(), n.$o = !0, [ 4 /*yield*/ , ss(n.remoteStore, !0) ];

                case 2:
                  for (r.sent(), s = 0, u = o; s < u.length; s++) a = u[s], Uo(n.remoteStore, a);
                  return [ 3 /*break*/ , 7 ];

                case 3:
                  return !1 !== e || !1 === n.$o ? [ 3 /*break*/ , 7 ] : (c = [], h = Promise.resolve(), 
                  n.Vo.forEach((function(t, e) {
                      n.sharedClientState.isLocalQueryTarget(e) ? c.push(e) : h = h.then((function() {
                          return Qs(n, e), Hi(n.localStore, e, 
                          /*keepPersistedTargetData=*/ !0);
                      })), Bo(n.remoteStore, e);
                  })), [ 4 /*yield*/ , h ]);

                case 4:
                  return r.sent(), [ 4 /*yield*/ , nu(n, c) ];

                case 5:
                  return r.sent(), 
                  // PORTING NOTE: Multi-Tab only.
                  function(t) {
                      var e = F$1(t);
                      e.Co.forEach((function(t, n) {
                          Bo(e.remoteStore, n);
                      })), e.No.ts(), e.Co = new Map, e.Do = new We(ct.comparator);
                  }(n), n.$o = !1, [ 4 /*yield*/ , ss(n.remoteStore, !1) ];

                case 6:
                  r.sent(), r.label = 7;

                case 7:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function nu(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, i, o, s, u, a, c, h, f, l, d, p, y, v;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  n = F$1(t), i = [], o = [], s = 0, u = e, r.label = 1;

                case 1:
                  return s < u.length ? (a = u[s], c = void 0, (h = n.Vo.get(a)) && 0 !== h.length ? [ 4 /*yield*/ , Wi(n.localStore, ne(h[0])) ] : [ 3 /*break*/ , 7 ]) : [ 3 /*break*/ , 13 ];

                case 2:
                  // For queries that have a local View, we fetch their current state
                  // from LocalStore (as the resume token and the snapshot version
                  // might have changed) and reconcile their views with the persisted
                  // state (the list of syncedDocuments may have gotten out of sync).
                  c = r.sent(), f = 0, l = h, r.label = 3;

                case 3:
                  return f < l.length ? (d = l[f], p = n.Po.get(d), [ 4 /*yield*/ , Js(n, p) ]) : [ 3 /*break*/ , 6 ];

                case 4:
                  (y = r.sent()).snapshot && o.push(y.snapshot), r.label = 5;

                case 5:
                  return f++, [ 3 /*break*/ , 3 ];

                case 6:
                  return [ 3 /*break*/ , 11 ];

                case 7:
                  return [ 4 /*yield*/ , $i(n.localStore, a) ];

                case 8:
                  return v = r.sent(), [ 4 /*yield*/ , Wi(n.localStore, v) ];

                case 9:
                  return c = r.sent(), [ 4 /*yield*/ , Ls(n, ru(v), a, 
                  /*current=*/ !1) ];

                case 10:
                  r.sent(), r.label = 11;

                case 11:
                  i.push(c), r.label = 12;

                case 12:
                  return s++, [ 3 /*break*/ , 1 ];

                case 13:
                  return [ 2 /*return*/ , (n.vo._r(o), i) ];
              }
          }));
      }));
  }

  /**
   * Creates a `Query` object from the specified `Target`. There is no way to
   * obtain the original `Query`, so we synthesize a `Query` from the `Target`
   * object.
   *
   * The synthesized result might be different from the original `Query`, but
   * since the synthesized `Query` should return the same results as the
   * original one (only the presentation of results might differ), the potential
   * difference will not cause issues.
   */
  // PORTING NOTE: Multi-Tab only.
  function ru(t) {
      return Ht(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
  }

  /** Returns the IDs of the clients that are currently active. */
  // PORTING NOTE: Multi-Tab only.
  function iu(t) {
      var e = F$1(t);
      return F$1(F$1(e.localStore).persistence).fn();
  }

  /** Applies a query target change from a different tab. */
  // PORTING NOTE: Multi-Tab only.
  function ou(t, e, i, o) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, s, u;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return (n = F$1(t)).$o ? (
                  // If we receive a target state notification via WebStorage, we are
                  // either already secondary or another tab has taken the primary lease.
                  C$1("SyncEngine", "Ignoring unexpected query state notification."), [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 1 ];

                case 1:
                  if (!n.Vo.has(e)) return [ 3 /*break*/ , 8 ];
                  switch (i) {
                    case "current":
                    case "not-current":
                      return [ 3 /*break*/ , 2 ];

                    case "rejected":
                      return [ 3 /*break*/ , 5 ];
                  }
                  return [ 3 /*break*/ , 7 ];

                case 2:
                  return [ 4 /*yield*/ , Xi(n.localStore) ];

                case 3:
                  return s = r.sent(), u = cn.createSynthesizedRemoteEventForCurrentChange(e, "current" === i), 
                  [ 4 /*yield*/ , Ys(n, s, u) ];

                case 4:
                  return r.sent(), [ 3 /*break*/ , 8 ];

                case 5:
                  return [ 4 /*yield*/ , Hi(n.localStore, e, 
                  /* keepPersistedTargetData */ !0) ];

                case 6:
                  return r.sent(), Qs(n, e, o), [ 3 /*break*/ , 8 ];

                case 7:
                  O$1(), r.label = 8;

                case 8:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  /** Adds or removes Watch targets for queries from different tabs. */ function su(t, e, i) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var n, o, s, u, a, c, h, f, l, d;
          return __generator$6(this, (function(p) {
              switch (p.label) {
                case 0:
                  if (!(n = uu(t)).$o) return [ 3 /*break*/ , 10 ];
                  o = 0, s = e, p.label = 1;

                case 1:
                  return o < s.length ? (u = s[o], n.Vo.has(u) ? (
                  // A target might have been added in a previous attempt
                  C$1("SyncEngine", "Adding an already active target " + u), [ 3 /*break*/ , 5 ]) : [ 4 /*yield*/ , $i(n.localStore, u) ]) : [ 3 /*break*/ , 6 ];

                case 2:
                  return a = p.sent(), [ 4 /*yield*/ , Wi(n.localStore, a) ];

                case 3:
                  return c = p.sent(), [ 4 /*yield*/ , Ls(n, ru(a), c.targetId, 
                  /*current=*/ !1) ];

                case 4:
                  p.sent(), Uo(n.remoteStore, c), p.label = 5;

                case 5:
                  return o++, [ 3 /*break*/ , 1 ];

                case 6:
                  h = function(t) {
                      return __generator$6(this, (function(e) {
                          switch (e.label) {
                            case 0:
                              return n.Vo.has(t) ? [ 4 /*yield*/ , Hi(n.localStore, t, 
                              /* keepPersistedTargetData */ !1).then((function() {
                                  Bo(n.remoteStore, t), Qs(n, t);
                              })).catch(pi) ] : [ 3 /*break*/ , 2 ];

                              // Release queries that are still active.
                                                        case 1:
                              // Release queries that are still active.
                              e.sent(), e.label = 2;

                            case 2:
                              return [ 2 /*return*/ ];
                          }
                      }));
                  }, f = 0, l = i, p.label = 7;

                case 7:
                  return f < l.length ? (d = l[f], [ 5 /*yield**/ , h(d) ]) : [ 3 /*break*/ , 10 ];

                case 8:
                  p.sent(), p.label = 9;

                case 9:
                  return f++, [ 3 /*break*/ , 7 ];

                case 10:
                  return [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function uu(t) {
      var e = F$1(t);
      return e.remoteStore.remoteSyncer.applyRemoteEvent = Fs.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Xs.bind(null, e), 
      e.remoteStore.remoteSyncer.rejectListen = Vs.bind(null, e), e.vo._r = gs.bind(null, e.eventManager), 
      e.vo.Mo = ws.bind(null, e.eventManager), e;
  }

  function au(t) {
      var e = F$1(t);
      return e.remoteStore.remoteSyncer.applySuccessfulWrite = qs.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = Us.bind(null, e), 
      e
      /**
   * Loads a Firestore bundle into the SDK. The returned promise resolves when
   * the bundle finished loading.
   *
   * @param syncEngine - SyncEngine to use.
   * @param bundleReader - Bundle to load into the SDK.
   * @param task - LoadBundleTask used to update the loading progress to public API.
   */;
  }

  var hu = /** @class */ function() {
      function t() {
          this.synchronizeTabs = !1;
      }
      return t.prototype.initialize = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(e) {
                  switch (e.label) {
                    case 0:
                      return this.R = Co(t.databaseInfo.databaseId), this.sharedClientState = this.Bo(t), 
                      this.persistence = this.qo(t), [ 4 /*yield*/ , this.persistence.start() ];

                    case 1:
                      return e.sent(), this.gcScheduler = this.Uo(t), this.localStore = this.Ko(t), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.Uo = function(t) {
          return null;
      }, t.prototype.Ko = function(t) {
          return Ui(this.persistence, new Vi, t.initialUser, this.R);
      }, t.prototype.qo = function(t) {
          return new ao(ho.bs, this.R);
      }, t.prototype.Bo = function(t) {
          return new To;
      }, t.prototype.terminate = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(t) {
                  switch (t.label) {
                    case 0:
                      return this.gcScheduler && this.gcScheduler.stop(), [ 4 /*yield*/ , this.sharedClientState.shutdown() ];

                    case 1:
                      return t.sent(), [ 4 /*yield*/ , this.persistence.shutdown() ];

                    case 2:
                      return t.sent(), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t;
  }(), fu = /** @class */ function(e) {
      function i(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).Qo = t, i.cacheSizeBytes = n, i.forceOwnership = r, 
          i.synchronizeTabs = !1, i;
      }
      return __extends$6(i, e), i.prototype.initialize = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var n = this;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return [ 4 /*yield*/ , e.prototype.initialize.call(this, t) ];

                    case 1:
                      return r.sent(), [ 4 /*yield*/ , Ji(this.localStore) ];

                    case 2:
                      return r.sent(), [ 4 /*yield*/ , this.Qo.initialize(this, t) ];

                    case 3:
                      // Enqueue writes from a previous session
                      return r.sent(), [ 4 /*yield*/ , au(this.Qo.syncEngine) ];

                    case 4:
                      // Enqueue writes from a previous session
                      return r.sent(), [ 4 /*yield*/ , Zo(this.Qo.remoteStore) ];

                    case 5:
                      // NOTE: This will immediately call the listener, so we make sure to
                      // set it after localStore / remoteStore are started.
                      return r.sent(), [ 4 /*yield*/ , this.persistence.He((function() {
                          return n.gcScheduler && !n.gcScheduler.started && n.gcScheduler.start(n.localStore), 
                          Promise.resolve();
                      })) ];

                    case 6:
                      // NOTE: This will immediately call the listener, so we make sure to
                      // set it after localStore / remoteStore are started.
                      return r.sent(), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, i.prototype.Ko = function(t) {
          return Ui(this.persistence, new Vi, t.initialUser, this.R);
      }, i.prototype.Uo = function(t) {
          var e = this.persistence.referenceDelegate.garbageCollector;
          return new mi(e, t.asyncQueue);
      }, i.prototype.qo = function(t) {
          var e = Oi(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? ei.withCacheSize(this.cacheSizeBytes) : ei.DEFAULT;
          return new xi(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Ao(), ko(), this.R, this.sharedClientState, !!this.forceOwnership);
      }, i.prototype.Bo = function(t) {
          return new To;
      }, i;
  }(hu), lu = /** @class */ function(e) {
      function i(t, n) {
          var r = this;
          return (r = e.call(this, t, n, /* forceOwnership= */ !1) || this).Qo = t, r.cacheSizeBytes = n, 
          r.synchronizeTabs = !0, r;
      }
      return __extends$6(i, e), i.prototype.initialize = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var i, o = this;
              return __generator$6(this, (function(s) {
                  switch (s.label) {
                    case 0:
                      return [ 4 /*yield*/ , e.prototype.initialize.call(this, t) ];

                    case 1:
                      return s.sent(), i = this.Qo.syncEngine, this.sharedClientState instanceof Io ? (this.sharedClientState.syncEngine = {
                          ui: tu.bind(null, i),
                          ai: ou.bind(null, i),
                          hi: su.bind(null, i),
                          fn: iu.bind(null, i),
                          ci: Zs.bind(null, i)
                      }, [ 4 /*yield*/ , this.sharedClientState.start() ]) : [ 3 /*break*/ , 3 ];

                    case 2:
                      s.sent(), s.label = 3;

                    case 3:
                      // NOTE: This will immediately call the listener, so we make sure to
                      // set it after localStore / remoteStore are started.
                      return [ 4 /*yield*/ , this.persistence.He((function(t) {
                          return __awaiter$6(o, void 0, void 0, (function() {
                              return __generator$6(this, (function(e) {
                                  switch (e.label) {
                                    case 0:
                                      return [ 4 /*yield*/ , eu(this.Qo.syncEngine, t) ];

                                    case 1:
                                      return e.sent(), this.gcScheduler && (t && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t || this.gcScheduler.stop()), 
                                      [ 2 /*return*/ ];
                                  }
                              }));
                          }));
                      })) ];

                    case 4:
                      // NOTE: This will immediately call the listener, so we make sure to
                      // set it after localStore / remoteStore are started.
                      return s.sent(), [ 2 /*return*/ ];
                  }
              }));
          }));
      }, i.prototype.Bo = function(t) {
          var e = Ao();
          if (!Io.yt(e)) throw new D$1(N$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
          var n = Oi(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
          return new Io(e, t.asyncQueue, n, t.clientId, t.initialUser);
      }, i;
  }(fu), du = /** @class */ function() {
      function t() {}
      return t.prototype.initialize = function(t, e) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var n = this;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return this.localStore ? [ 3 /*break*/ , 2 ] : (this.localStore = t.localStore, 
                      this.sharedClientState = t.sharedClientState, this.datastore = this.createDatastore(e), 
                      this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), 
                      this.syncEngine = this.createSyncEngine(e, 
                      /* startAsPrimary=*/ !t.synchronizeTabs), this.sharedClientState.onlineStateHandler = function(t) {
                          return Ms(n.syncEngine, t, 1 /* SharedClientState */);
                      }, this.remoteStore.remoteSyncer.handleCredentialChange = $s.bind(null, this.syncEngine), 
                      [ 4 /*yield*/ , ss(this.remoteStore, this.syncEngine.isPrimaryClient) ]);

                    case 1:
                      r.sent(), r.label = 2;

                    case 2:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.createEventManager = function(t) {
          return new ys;
      }, t.prototype.createDatastore = function(t) {
          var e, n = Co(t.databaseInfo.databaseId), r = (e = t.databaseInfo, new Do(e));
          /** Return the Platform-specific connectivity monitor. */ return function(t, e, n) {
              return new Po(t, e, n);
          }(t.credentials, r, n);
      }, t.prototype.createRemoteStore = function(t) {
          var e, n, r, i, o, s = this;
          return e = this.localStore, n = this.datastore, r = t.asyncQueue, i = function(t) {
              return Ms(s.syncEngine, t, 0 /* RemoteStore */);
          }, o = _o.yt() ? new _o : new Eo, new Mo(e, n, r, i, o);
      }, t.prototype.createSyncEngine = function(t, e) {
          return function(t, e, n, 
          // PORTING NOTE: Manages state synchronization in multi-tab environments.
          r, i, o, s) {
              var u = new xs(t, e, n, r, i, o);
              return s && (u.$o = !0), u;
          }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
      }, t.prototype.terminate = function() {
          return function(t) {
              return __awaiter$6(this, void 0, void 0, (function() {
                  var e;
                  return __generator$6(this, (function(n) {
                      switch (n.label) {
                        case 0:
                          return e = F$1(t), C$1("RemoteStore", "RemoteStore shutting down."), e.Or.add(5 /* Shutdown */), 
                          [ 4 /*yield*/ , qo(e) ];

                        case 1:
                          return n.sent(), e.Lr.shutdown(), 
                          // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                          // triggering spurious listener events with cached data, etc.
                          e.Br.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                      }
                  }));
              }));
          }(this.remoteStore);
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
   */
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /*
   * A wrapper implementation of Observer<T> that will dispatch events
   * asynchronously. To allow immediate silencing, a mute call is added which
   * causes events scheduled to no longer be raised.
   */ var yu = /** @class */ function() {
      function t(t) {
          this.observer = t, 
          /**
               * When set to true, will not raise future events. Necessary to deal with
               * async detachment of listener.
               */
          this.muted = !1;
      }
      return t.prototype.next = function(t) {
          this.observer.next && this.jo(this.observer.next, t);
      }, t.prototype.error = function(t) {
          this.observer.error ? this.jo(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
      }, t.prototype.Wo = function() {
          this.muted = !0;
      }, t.prototype.jo = function(t, e) {
          var n = this;
          this.muted || setTimeout((function() {
              n.muted || t(e);
          }), 0);
      }, t;
  }(), mu = /** @class */ function() {
      function t(t) {
          this.datastore = t, 
          // The version of each document that was read during this transaction.
          this.readVersions = new Map, this.mutations = [], this.committed = !1, 
          /**
               * A deferred usage error that occurred previously in this transaction that
               * will cause the transaction to fail once it actually commits.
               */
          this.lastWriteError = null, 
          /**
               * Set of documents that have been written in the transaction.
               *
               * When there's more than one write to the same key in a transaction, any
               * writes after the first are handled differently.
               */
          this.writtenDocs = new Set;
      }
      return t.prototype.lookup = function(t) {
          return __awaiter$6(this, void 0, void 0, (function() {
              var e, i = this;
              return __generator$6(this, (function(o) {
                  switch (o.label) {
                    case 0:
                      if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new D$1(N$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                      return [ 4 /*yield*/ , function(t, e) {
                          return __awaiter$6(this, void 0, void 0, (function() {
                              var n, i, o, s, u, a;
                              return __generator$6(this, (function(r) {
                                  switch (r.label) {
                                    case 0:
                                      return n = F$1(t), i = xn(n.R) + "/documents", o = {
                                          documents: e.map((function(t) {
                                              return Dn(n.R, t);
                                          }))
                                      }, [ 4 /*yield*/ , n.$i("BatchGetDocuments", i, o) ];

                                    case 1:
                                      return s = r.sent(), u = new Map, s.forEach((function(t) {
                                          var e = function(t, e) {
                                              return "found" in e ? function(t, e) {
                                                  P$1(!!e.found), e.found.name, e.found.updateTime;
                                                  var n = An(t, e.found.name), r = _n(e.found.updateTime), i = new _t({
                                                      mapValue: {
                                                          fields: e.found.fields
                                                      }
                                                  });
                                                  return Nt.newFoundDocument(n, r, i);
                                              }(t, e) : "missing" in e ? function(t, e) {
                                                  P$1(!!e.missing), P$1(!!e.readTime);
                                                  var n = An(t, e.missing), r = _n(e.readTime);
                                                  return Nt.newNoDocument(n, r);
                                              }(t, e) : O$1();
                                          }(n.R, t);
                                          u.set(e.key.toString(), e);
                                      })), a = [], [ 2 /*return*/ , (e.forEach((function(t) {
                                          var e = u.get(t.toString());
                                          P$1(!!e), a.push(e);
                                      })), a) ];
                                  }
                              }));
                          }));
                      }(this.datastore, t) ];

                    case 1:
                      return [ 2 /*return*/ , ((e = o.sent()).forEach((function(t) {
                          return i.recordVersion(t);
                      })), e) ];
                  }
              }));
          }));
      }, t.prototype.set = function(t, e) {
          this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
      }, t.prototype.update = function(t, e) {
          try {
              this.write(e.toMutation(t, this.preconditionForUpdate(t)));
          } catch (t) {
              this.lastWriteError = t;
          }
          this.writtenDocs.add(t.toString());
      }, t.prototype.delete = function(t) {
          this.write(new je(t, this.precondition(t))), this.writtenDocs.add(t.toString());
      }, t.prototype.commit = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t, e = this;
              return __generator$6(this, (function(i) {
                  switch (i.label) {
                    case 0:
                      if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
                      return t = this.readVersions, 
                      // For each mutation, note that the doc was written.
                      this.mutations.forEach((function(e) {
                          t.delete(e.key.toString());
                      })), 
                      // For each document that was read but not written to, we want to perform
                      // a `verify` operation.
                      t.forEach((function(t, n) {
                          var r = ct.fromPath(n);
                          e.mutations.push(new Ke(r, e.precondition(r)));
                      })), [ 4 /*yield*/ , function(t, e) {
                          return __awaiter$6(this, void 0, void 0, (function() {
                              var n, i, o;
                              return __generator$6(this, (function(r) {
                                  switch (r.label) {
                                    case 0:
                                      return n = F$1(t), i = xn(n.R) + "/documents", o = {
                                          writes: e.map((function(t) {
                                              return Pn(n.R, t);
                                          }))
                                      }, [ 4 /*yield*/ , n.Ni("Commit", i, o) ];

                                    case 1:
                                      return r.sent(), [ 2 /*return*/ ];
                                  }
                              }));
                          }));
                      }(this.datastore, this.mutations) ];

                    case 1:
                      // For each mutation, note that the doc was written.
                      return i.sent(), this.committed = !0, [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.recordVersion = function(t) {
          var e;
          if (t.isFoundDocument()) e = t.version; else {
              if (!t.isNoDocument()) throw O$1();
              // For deleted docs, we must use baseVersion 0 when we overwrite them.
                          e = K$1.min();
          }
          var n = this.readVersions.get(t.key.toString());
          if (n) {
              if (!e.isEqual(n)) 
              // This transaction will fail no matter what.
              throw new D$1(N$1.ABORTED, "Document version changed between two reads.");
          } else this.readVersions.set(t.key.toString(), e);
      }, 
      /**
       * Returns the version of this document when it was read in this transaction,
       * as a precondition, or no precondition if it was not read.
       */
      t.prototype.precondition = function(t) {
          var e = this.readVersions.get(t.toString());
          return !this.writtenDocs.has(t.toString()) && e ? De.updateTime(e) : De.none();
      }, 
      /**
       * Returns the precondition for a document if the operation is an update.
       */
      t.prototype.preconditionForUpdate = function(t) {
          var e = this.readVersions.get(t.toString());
          // The first time a document is written, we want to take into account the
          // read time and existence
                  if (!this.writtenDocs.has(t.toString()) && e) {
              if (e.isEqual(K$1.min())) 
              // The document doesn't exist, so fail the transaction.
              // This has to be validated locally because you can't send a
              // precondition that a document does not exist without changing the
              // semantics of the backend write to be an insert. This is the reverse
              // of what we want, since we want to assert that the document doesn't
              // exist but then send the update and have it fail. Since we can't
              // express that to the backend, we have to validate locally.
              // Note: this can change once we can send separate verify writes in the
              // transaction.
              throw new D$1(N$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
              // Document exists, base precondition on document update time.
                          return De.updateTime(e);
          }
          // Document was not read, so we just use the preconditions for a blind
          // update.
                  return De.exists(!0);
      }, t.prototype.write = function(t) {
          this.ensureCommitNotCalled(), this.mutations.push(t);
      }, t.prototype.ensureCommitNotCalled = function() {}, t;
  }(), gu = /** @class */ function() {
      function t(t, e, n, r) {
          this.asyncQueue = t, this.datastore = e, this.updateFunction = n, this.deferred = r, 
          this.ec = 5, this.Zi = new xo(this.asyncQueue, "transaction_retry" /* TransactionRetry */)
          /** Runs the transaction and sets the result on deferred. */;
      }
      return t.prototype.run = function() {
          this.ec -= 1, this.nc();
      }, t.prototype.nc = function() {
          var t = this;
          this.Zi.ji((function() {
              return __awaiter$6(t, void 0, void 0, (function() {
                  var t, e, n = this;
                  return __generator$6(this, (function(r) {
                      return t = new mu(this.datastore), (e = this.sc(t)) && e.then((function(e) {
                          n.asyncQueue.enqueueAndForget((function() {
                              return t.commit().then((function() {
                                  n.deferred.resolve(e);
                              })).catch((function(t) {
                                  n.ic(t);
                              }));
                          }));
                      })).catch((function(t) {
                          n.ic(t);
                      })), [ 2 /*return*/ ];
                  }));
              }));
          }));
      }, t.prototype.sc = function(t) {
          try {
              var e = this.updateFunction(t);
              return !st(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), 
              null);
          } catch (t) {
              // Do not retry errors thrown by user provided updateFunction.
              return this.deferred.reject(t), null;
          }
      }, t.prototype.ic = function(t) {
          var e = this;
          this.ec > 0 && this.rc(t) ? (this.ec -= 1, this.asyncQueue.enqueueAndForget((function() {
              return e.nc(), Promise.resolve();
          }))) : this.deferred.reject(t);
      }, t.prototype.rc = function(t) {
          if ("FirebaseError" === t.name) {
              // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
              // non-matching document versions with ABORTED. These errors should be retried.
              var e = t.code;
              return "aborted" === e || "failed-precondition" === e || !Ge(e);
          }
          return !1;
      }, t;
  }(), wu = /** @class */ function() {
      function t(t, 
      /**
       * Asynchronous queue responsible for all of our internal processing. When
       * we get incoming work from the user (via public API) or the network
       * (incoming GRPC messages), we should always schedule onto this queue.
       * This ensures all of our work is properly serialized (e.g. we don't
       * start processing a new operation while the previous one is waiting for
       * an async I/O to complete).
       */
      e, i) {
          var o = this;
          this.credentials = t, this.asyncQueue = e, this.databaseInfo = i, this.user = fo.UNAUTHENTICATED, 
          this.clientId = V$1.u(), this.credentialListener = function() {
              return Promise.resolve();
          }, this.credentials.setChangeListener(e, (function(t) {
              return __awaiter$6(o, void 0, void 0, (function() {
                  return __generator$6(this, (function(e) {
                      switch (e.label) {
                        case 0:
                          return C$1("FirestoreClient", "Received user=", t.uid), [ 4 /*yield*/ , this.credentialListener(t) ];

                        case 1:
                          return e.sent(), this.user = t, [ 2 /*return*/ ];
                      }
                  }));
              }));
          }));
      }
      return t.prototype.getConfiguration = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              return __generator$6(this, (function(t) {
                  return [ 2 /*return*/ , {
                      asyncQueue: this.asyncQueue,
                      databaseInfo: this.databaseInfo,
                      clientId: this.clientId,
                      credentials: this.credentials,
                      initialUser: this.user,
                      maxConcurrentLimboResolutions: 100
                  } ];
              }));
          }));
      }, t.prototype.setCredentialChangeListener = function(t) {
          this.credentialListener = t;
      }, 
      /**
       * Checks that the client has not been terminated. Ensures that other methods on
       * this class cannot be called after the client is terminated.
       */
      t.prototype.verifyNotTerminated = function() {
          if (this.asyncQueue.isShuttingDown) throw new D$1(N$1.FAILED_PRECONDITION, "The client has already been terminated.");
      }, t.prototype.terminate = function() {
          var t = this;
          this.asyncQueue.enterRestrictedMode();
          var e = new br;
          return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((function() {
              return __awaiter$6(t, void 0, void 0, (function() {
                  var t, n;
                  return __generator$6(this, (function(r) {
                      switch (r.label) {
                        case 0:
                          return r.trys.push([ 0, 5, , 6 ]), this.onlineComponents ? [ 4 /*yield*/ , this.onlineComponents.terminate() ] : [ 3 /*break*/ , 2 ];

                        case 1:
                          r.sent(), r.label = 2;

                        case 2:
                          return this.offlineComponents ? [ 4 /*yield*/ , this.offlineComponents.terminate() ] : [ 3 /*break*/ , 4 ];

                        case 3:
                          r.sent(), r.label = 4;

                        case 4:
                          // `removeChangeListener` must be called after shutting down the
                          // RemoteStore as it will prevent the RemoteStore from retrieving
                          // auth tokens.
                          return this.credentials.removeChangeListener(), e.resolve(), [ 3 /*break*/ , 6 ];

                        case 5:
                          return t = r.sent(), n = hs(t, "Failed to shutdown persistence"), e.reject(n), [ 3 /*break*/ , 6 ];

                        case 6:
                          return [ 2 /*return*/ ];
                      }
                  }));
              }));
          })), e.promise;
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A class representing a bundle.
   *
   * Takes a bundle stream or buffer, and presents abstractions to read bundled
   * elements out of the underlying content.
   */ function bu(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var i, o, s = this;
          return __generator$6(this, (function(u) {
              switch (u.label) {
                case 0:
                  return t.asyncQueue.verifyOperationInProgress(), C$1("FirestoreClient", "Initializing OfflineComponentProvider"), 
                  [ 4 /*yield*/ , t.getConfiguration() ];

                case 1:
                  return i = u.sent(), [ 4 /*yield*/ , e.initialize(i) ];

                case 2:
                  return u.sent(), o = i.initialUser, t.setCredentialChangeListener((function(t) {
                      return __awaiter$6(s, void 0, void 0, (function() {
                          return __generator$6(this, (function(n) {
                              switch (n.label) {
                                case 0:
                                  return o.isEqual(t) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , Bi(e.localStore, t) ];

                                case 1:
                                  n.sent(), o = t, n.label = 2;

                                case 2:
                                  return [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  })), 
                  // When a user calls clearPersistence() in one client, all other clients
                  // need to be terminated to allow the delete to succeed.
                  e.persistence.setDatabaseDeletedListener((function() {
                      return t.terminate();
                  })), t.offlineComponents = e, [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function Iu(t, e) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var i, o;
          return __generator$6(this, (function(s) {
              switch (s.label) {
                case 0:
                  return t.asyncQueue.verifyOperationInProgress(), [ 4 /*yield*/ , Tu(t) ];

                case 1:
                  return i = s.sent(), C$1("FirestoreClient", "Initializing OnlineComponentProvider"), 
                  [ 4 /*yield*/ , t.getConfiguration() ];

                case 2:
                  return o = s.sent(), [ 4 /*yield*/ , e.initialize(i, o) ];

                case 3:
                  return s.sent(), 
                  // The CredentialChangeListener of the online component provider takes
                  // precedence over the offline component provider.
                  t.setCredentialChangeListener((function(t) {
                      return function(t, e) {
                          return __awaiter$6(this, void 0, void 0, (function() {
                              var n, i;
                              return __generator$6(this, (function(r) {
                                  switch (r.label) {
                                    case 0:
                                      return (n = F$1(t)).asyncQueue.verifyOperationInProgress(), C$1("RemoteStore", "RemoteStore received new credentials"), 
                                      i = zo(n), 
                                      // Tear down and re-create our network streams. This will ensure we get a
                                      // fresh auth token for the new user and re-fill the write pipeline with
                                      // new mutations from the LocalStore (since mutations are per-user).
                                      n.Or.add(3 /* CredentialChange */), [ 4 /*yield*/ , qo(n) ];

                                    case 1:
                                      return r.sent(), i && 
                                      // Don't set the network status to Unknown if we are offline.
                                      n.Br.set("Unknown" /* Unknown */), [ 4 /*yield*/ , n.remoteSyncer.handleCredentialChange(e) ];

                                    case 2:
                                      return r.sent(), n.Or.delete(3 /* CredentialChange */), [ 4 /*yield*/ , Vo(n) ];

                                    case 3:
                                      // Tear down and re-create our network streams. This will ensure we get a
                                      // fresh auth token for the new user and re-fill the write pipeline with
                                      // new mutations from the LocalStore (since mutations are per-user).
                                      return r.sent(), [ 2 /*return*/ ];
                                  }
                              }));
                          }));
                      }(e.remoteStore, t);
                  })), t.onlineComponents = e, [ 2 /*return*/ ];
              }
          }));
      }));
  }

  function Tu(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(e) {
              switch (e.label) {
                case 0:
                  return t.offlineComponents ? [ 3 /*break*/ , 2 ] : (C$1("FirestoreClient", "Using default OfflineComponentProvider"), 
                  [ 4 /*yield*/ , bu(t, new hu) ]);

                case 1:
                  e.sent(), e.label = 2;

                case 2:
                  return [ 2 /*return*/ , t.offlineComponents ];
              }
          }));
      }));
  }

  function Eu(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          return __generator$6(this, (function(e) {
              switch (e.label) {
                case 0:
                  return t.onlineComponents ? [ 3 /*break*/ , 2 ] : (C$1("FirestoreClient", "Using default OnlineComponentProvider"), 
                  [ 4 /*yield*/ , Iu(t, new du) ]);

                case 1:
                  e.sent(), e.label = 2;

                case 2:
                  return [ 2 /*return*/ , t.onlineComponents ];
              }
          }));
      }));
  }

  function _u(t) {
      return Tu(t).then((function(t) {
          return t.persistence;
      }));
  }

  function Su(t) {
      return Tu(t).then((function(t) {
          return t.localStore;
      }));
  }

  function Nu(t) {
      return Eu(t).then((function(t) {
          return t.remoteStore;
      }));
  }

  function Du(t) {
      return Eu(t).then((function(t) {
          return t.syncEngine;
      }));
  }

  function Au(t) {
      return __awaiter$6(this, void 0, void 0, (function() {
          var e, n;
          return __generator$6(this, (function(r) {
              switch (r.label) {
                case 0:
                  return [ 4 /*yield*/ , Eu(t) ];

                case 1:
                  return e = r.sent(), [ 2 /*return*/ , ((n = e.eventManager).onListen = Rs.bind(null, e.syncEngine), 
                  n.onUnlisten = Os.bind(null, e.syncEngine), n) ];
              }
          }));
      }));
  }

  /** Enables the network connection and re-enqueues all pending operations. */ function ku(t, e, i) {
      var o = this;
      void 0 === i && (i = {});
      var s = new br;
      return t.asyncQueue.enqueueAndForget((function() {
          return __awaiter$6(o, void 0, void 0, (function() {
              var n;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return n = function(t, e, n, r, i) {
                          var o = new yu({
                              next: function(o) {
                                  // Remove query first before passing event to user to avoid
                                  // user actions affecting the now stale query.
                                  e.enqueueAndForget((function() {
                                      return ms(t, s);
                                  }));
                                  var u = o.docs.has(n);
                                  !u && o.fromCache ? 
                                  // TODO(dimond): If we're online and the document doesn't
                                  // exist then we resolve with a doc.exists set to false. If
                                  // we're offline however, we reject the Promise in this
                                  // case. Two options: 1) Cache the negative response from
                                  // the server so we can deliver that even when you're
                                  // offline 2) Actually reject the Promise in the online case
                                  // if the document doesn't exist.
                                  i.reject(new D$1(N$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && o.fromCache && r && "server" === r.source ? i.reject(new D$1(N$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(o);
                              },
                              error: function(t) {
                                  return i.reject(t);
                              }
                          }), s = new Is(Yt(n.path), o, {
                              includeMetadataChanges: !0,
                              so: !0
                          });
                          return vs(t, s);
                      }, [ 4 /*yield*/ , Au(t) ];

                    case 1:
                      return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), t.asyncQueue, e, i, s ]) ];
                  }
              }));
          }));
      })), s.promise;
  }

  function Cu(t, e, i) {
      var o = this;
      void 0 === i && (i = {});
      var s = new br;
      return t.asyncQueue.enqueueAndForget((function() {
          return __awaiter$6(o, void 0, void 0, (function() {
              var n;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return n = function(t, e, n, r, i) {
                          var o = new yu({
                              next: function(n) {
                                  // Remove query first before passing event to user to avoid
                                  // user actions affecting the now stale query.
                                  e.enqueueAndForget((function() {
                                      return ms(t, s);
                                  })), n.fromCache && "server" === r.source ? i.reject(new D$1(N$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                              },
                              error: function(t) {
                                  return i.reject(t);
                              }
                          }), s = new Is(n, o, {
                              includeMetadataChanges: !0,
                              so: !0
                          });
                          return vs(t, s);
                      }, [ 4 /*yield*/ , Au(t) ];

                    case 1:
                      return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), t.asyncQueue, e, i, s ]) ];
                  }
              }));
          }));
      })), s.promise;
  }

  var xu = 
  /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       * @param useFetchStreams Whether to use the Fetch API instead of
       * XMLHTTPRequest
       */
  function(t, e, n, r, i, o, s, u) {
      this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = i, 
      this.forceLongPolling = o, this.autoDetectLongPolling = s, this.useFetchStreams = u;
  }, Ru = /** @class */ function() {
      function t(t, e) {
          this.projectId = t, this.database = e || "(default)";
      }
      return Object.defineProperty(t.prototype, "isDefaultDatabase", {
          get: function() {
              return "(default)" === this.database;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.isEqual = function(e) {
          return e instanceof t && e.projectId === this.projectId && e.database === this.database;
      }, t;
  }(), Lu = new Map, Ou = function(t, e) {
      this.user = e, this.type = "OAuth", this.authHeaders = {}, 
      // Set the headers using Object Literal notation to avoid minification
      this.authHeaders.Authorization = "Bearer " + t;
  }, Pu = /** @class */ function() {
      function t() {
          /**
           * Stores the listener registered with setChangeListener()
           * This isn't actually necessary since the UID never changes, but we use this
           * to verify the listen contract is adhered to in tests.
           */
          this.changeListener = null;
      }
      return t.prototype.getToken = function() {
          return Promise.resolve(null);
      }, t.prototype.invalidateToken = function() {}, t.prototype.setChangeListener = function(t, e) {
          this.changeListener = e, 
          // Fire with initial user.
          t.enqueueRetryable((function() {
              return e(fo.UNAUTHENTICATED);
          }));
      }, t.prototype.removeChangeListener = function() {
          this.changeListener = null;
      }, t;
  }(), Fu = /** @class */ function() {
      function t(t) {
          this.token = t, 
          /**
               * Stores the listener registered with setChangeListener()
               * This isn't actually necessary since the UID never changes, but we use this
               * to verify the listen contract is adhered to in tests.
               */
          this.changeListener = null;
      }
      return t.prototype.getToken = function() {
          return Promise.resolve(this.token);
      }, t.prototype.invalidateToken = function() {}, t.prototype.setChangeListener = function(t, e) {
          var n = this;
          this.changeListener = e, 
          // Fire with initial user.
          t.enqueueRetryable((function() {
              return e(n.token.user);
          }));
      }, t.prototype.removeChangeListener = function() {
          this.changeListener = null;
      }, t;
  }(), Mu = /** @class */ function() {
      function t(t) {
          var e = this;
          /** Tracks the current User. */        this.currentUser = fo.UNAUTHENTICATED, 
          /** Promise that allows blocking on the initialization of Firebase Auth. */
          this.oc = new br, 
          /**
               * Counter used to detect if the token changed while a getToken request was
               * outstanding.
               */
          this.cc = 0, this.forceRefresh = !1, this.auth = null, this.asyncQueue = null, this.uc = function() {
              e.cc++, e.currentUser = e.ac(), e.oc.resolve(), e.changeListener && e.asyncQueue.enqueueRetryable((function() {
                  return e.changeListener(e.currentUser);
              }));
          };
          var n = function(t) {
              C$1("FirebaseCredentialsProvider", "Auth detected"), e.auth = t, e.auth.addAuthTokenListener(e.uc);
          };
          t.onInit((function(t) {
              return n(t);
          })), 
          // Our users can initialize Auth right after Firestore, so we give it
          // a chance to register itself with the component framework before we
          // determine whether to start up in unauthenticated mode.
          setTimeout((function() {
              if (!e.auth) {
                  var r = t.getImmediate({
                      optional: !0
                  });
                  r ? n(r) : (
                  // If auth is still not available, proceed with `null` user
                  C$1("FirebaseCredentialsProvider", "Auth not yet detected"), e.oc.resolve());
              }
          }), 0);
      }
      return t.prototype.getToken = function() {
          var t = this, e = this.cc, n = this.forceRefresh;
          // Take note of the current value of the tokenCounter so that this method
          // can fail (with an ABORTED error) if there is a token change while the
          // request is outstanding.
                  return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((function(n) {
              // Cancel the request since the token changed while the request was
              // outstanding so the response is potentially for a previous user (which
              // user, we can't be sure).
              return t.cc !== e ? (C$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
              t.getToken()) : n ? (P$1("string" == typeof n.accessToken), new Ou(n.accessToken, t.currentUser)) : null;
          })) : Promise.resolve(null);
      }, t.prototype.invalidateToken = function() {
          this.forceRefresh = !0;
      }, t.prototype.setChangeListener = function(t, e) {
          var i = this;
          this.asyncQueue = t, 
          // Blocks the AsyncQueue until the next user is available.
          this.asyncQueue.enqueueRetryable((function() {
              return __awaiter$6(i, void 0, void 0, (function() {
                  return __generator$6(this, (function(t) {
                      switch (t.label) {
                        case 0:
                          return [ 4 /*yield*/ , this.oc.promise ];

                        case 1:
                          return t.sent(), [ 4 /*yield*/ , e(this.currentUser) ];

                        case 2:
                          return t.sent(), this.changeListener = e, [ 2 /*return*/ ];
                      }
                  }));
              }));
          }));
      }, t.prototype.removeChangeListener = function() {
          this.auth && this.auth.removeAuthTokenListener(this.uc), this.changeListener = function() {
              return Promise.resolve();
          };
      }, 
      // Auth.getUid() can return null even with a user logged in. It is because
      // getUid() is synchronous, but the auth code populating Uid is asynchronous.
      // This method should only be called in the AuthTokenListener callback
      // to guarantee to get the actual user.
      t.prototype.ac = function() {
          var t = this.auth && this.auth.getUid();
          return P$1(null === t || "string" == typeof t), new fo(t);
      }, t;
  }(), Vu = /** @class */ function() {
      function t(t, e, n) {
          this.hc = t, this.lc = e, this.fc = n, this.type = "FirstParty", this.user = fo.FIRST_PARTY;
      }
      return Object.defineProperty(t.prototype, "authHeaders", {
          get: function() {
              var t = {
                  "X-Goog-AuthUser": this.lc
              }, e = this.hc.auth.getAuthHeaderValueForFirstParty([]);
              // Use array notation to prevent minification
                          return e && (t.Authorization = e), this.fc && (t["X-Goog-Iam-Authorization-Token"] = this.fc), 
              t;
          },
          enumerable: !1,
          configurable: !0
      }), t;
  }(), qu = /** @class */ function() {
      function t(t, e, n) {
          this.hc = t, this.lc = e, this.fc = n;
      }
      return t.prototype.getToken = function() {
          return Promise.resolve(new Vu(this.hc, this.lc, this.fc));
      }, t.prototype.setChangeListener = function(t, e) {
          // Fire with initial uid.
          t.enqueueRetryable((function() {
              return e(fo.FIRST_PARTY);
          }));
      }, t.prototype.removeChangeListener = function() {}, t.prototype.invalidateToken = function() {}, 
      t;
  }();

  /** The default database name for a project. */
  /** Represents the database ID a Firestore client is associated with. */
  /**
   * Builds a CredentialsProvider depending on the type of
   * the credentials passed in.
   */
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function Uu(t, e, n) {
      if (!n) throw new D$1(N$1.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e + ".");
  }

  function Bu(t, e) {
      if (void 0 === e) return {
          merge: !1
      };
      if (void 0 !== e.mergeFields && void 0 !== e.merge) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
      return e;
  }

  /**
   * Validates that two boolean options are not set at the same time.
   */ function ju(t, e, n, r) {
      if (!0 === e && !0 === r) throw new D$1(N$1.INVALID_ARGUMENT, t + " and " + n + " cannot be used together.");
  }

  /**
   * Validates that `path` refers to a document (indicated by the fact it contains
   * an even numbers of segments).
   */ function Ku(t) {
      if (!ct.isDocumentKey(t)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
  }

  /**
   * Validates that `path` refers to a collection (indicated by the fact it
   * contains an odd numbers of segments).
   */ function Qu(t) {
      if (ct.isDocumentKey(t)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
  }

  /**
   * Returns true if it's a non-null object without a custom prototype
   * (i.e. excludes Array, Date, etc.).
   */
  /** Returns a string describing the type / value of the provided input. */ function Gu(t) {
      if (void 0 === t) return "undefined";
      if (null === t) return "null";
      if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
      JSON.stringify(t);
      if ("number" == typeof t || "boolean" == typeof t) return "" + t;
      if ("object" == typeof t) {
          if (t instanceof Array) return "an array";
          var e = 
          /** Hacky method to try to get the constructor name for an object. */
          function(t) {
              if (t.constructor) {
                  var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                  if (e && e.length > 1) return e[1];
              }
              return null;
          }(t);
          return e ? "a custom " + e + " object" : "an object";
      }
      return "function" == typeof t ? "a function" : O$1();
  }

  function zu(t, 
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  e) {
      if ("_delegate" in t && (
      // Unwrap Compat types
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      t = t._delegate), !(t instanceof e)) {
          if (e.name === t.constructor.name) throw new D$1(N$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
          var n = Gu(t);
          throw new D$1(N$1.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
      }
      return t;
  }

  function Wu(t, e) {
      if (e <= 0) throw new D$1(N$1.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e + ".");
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // settings() defaults:
  /**
   * A concrete type describing all the values that can be applied via a
   * user-supplied firestore.Settings object. This is a separate type so that
   * defaults can be supplied and the value can be checked for equality.
   */ var Hu = /** @class */ function() {
      function t(t) {
          var e;
          if (void 0 === t.host) {
              if (void 0 !== t.ssl) throw new D$1(N$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
              this.host = "firestore.googleapis.com", this.ssl = !0;
          } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
          if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
          void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
              if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new D$1(N$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
              this.cacheSizeBytes = t.cacheSizeBytes;
          }
          this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
          this.useFetchStreams = !!t.useFetchStreams, ju("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
      }
      return t.prototype.isEqual = function(t) {
          return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
      }, t;
  }(), Yu = /** @class */ function() {
      /** @hideconstructor */
      function t(t, e) {
          /**
           * Whether it's a Firestore or Firestore Lite instance.
           */
          this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Hu({}), 
          this._settingsFrozen = !1, t instanceof Ru ? (this._databaseId = t, this._credentials = new Pu) : (this._app = t, 
          this._databaseId = function(t) {
              if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new D$1(N$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
              return new Ru(t.options.projectId);
          }(t), this._credentials = new Mu(e));
      }
      return Object.defineProperty(t.prototype, "app", {
          /**
           * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
           * instance.
           */
          get: function() {
              if (!this._app) throw new D$1(N$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
              return this._app;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "_initialized", {
          get: function() {
              return this._settingsFrozen;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "_terminated", {
          get: function() {
              return void 0 !== this._terminateTask;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype._setSettings = function(t) {
          if (this._settingsFrozen) throw new D$1(N$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
          this._settings = new Hu(t), void 0 !== t.credentials && (this._credentials = function(t) {
              if (!t) return new Pu;
              switch (t.type) {
                case "gapi":
                  var e = t.client;
                  // Make sure this really is a Gapi client.
                                  return P$1(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                  new qu(e, t.sessionIndex || "0", t.iamToken || null);

                case "provider":
                  return t.client;

                default:
                  throw new D$1(N$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
              }
          }(t.credentials));
      }, t.prototype._getSettings = function() {
          return this._settings;
      }, t.prototype._freezeSettings = function() {
          return this._settingsFrozen = !0, this._settings;
      }, t.prototype._delete = function() {
          return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
      }, 
      /** Returns a JSON-serializable representation of this Firestore instance. */ t.prototype.toJSON = function() {
          return {
              app: this._app,
              databaseId: this._databaseId,
              settings: this._settings
          };
      }, 
      /**
       * Terminates all components used by this client. Subclasses can override
       * this method to clean up their own dependencies, but must also call this
       * method.
       *
       * Only ever called once.
       */
      t.prototype._terminate = function() {
          /**
   * Removes all components associated with the provided instance. Must be called
   * when the `Firestore` instance is terminated.
   */
          return t = this, (e = Lu.get(t)) && (C$1("ComponentProvider", "Removing Datastore"), 
          Lu.delete(t), e.terminate()), Promise.resolve();
          var t, e;
      }, t;
  }(), $u = /** @class */ function() {
      /** @hideconstructor */
      function t(t, 
      /**
       * If provided, the `FirestoreDataConverter` associated with this instance.
       */
      e, n) {
          this.converter = e, this._key = n, 
          /** The type of this Firestore reference. */
          this.type = "document", this.firestore = t;
      }
      return Object.defineProperty(t.prototype, "_path", {
          get: function() {
              return this._key.path;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "id", {
          /**
           * The document's identifier within its collection.
           */
          get: function() {
              return this._key.path.lastSegment();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "path", {
          /**
           * A string representing the path of the referenced document (relative
           * to the root of the database).
           */
          get: function() {
              return this._key.path.canonicalString();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "parent", {
          /**
           * The collection this `DocumentReference` belongs to.
           */
          get: function() {
              return new Ju(this.firestore, this.converter, this._key.path.popLast());
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.withConverter = function(e) {
          return new t(this.firestore, e, this._key);
      }, t;
  }(), Xu = /** @class */ function() {
      // This is the lite version of the Query class in the main SDK.
      /** @hideconstructor protected */
      function t(t, 
      /**
       * If provided, the `FirestoreDataConverter` associated with this instance.
       */
      e, n) {
          this.converter = e, this._query = n, 
          /** The type of this Firestore reference. */
          this.type = "query", this.firestore = t;
      }
      return t.prototype.withConverter = function(e) {
          return new t(this.firestore, e, this._query);
      }, t;
  }(), Ju = /** @class */ function(e) {
      /** @hideconstructor */
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this, t, n, Yt(r)) || this)._path = r, 
          /** The type of this Firestore reference. */
          i.type = "collection", i;
      }
      return __extends$6(n, e), Object.defineProperty(n.prototype, "id", {
          /** The collection's identifier. */ get: function() {
              return this._query.path.lastSegment();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(n.prototype, "path", {
          /**
           * A string representing the path of the referenced collection (relative
           * to the root of the database).
           */
          get: function() {
              return this._query.path.canonicalString();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(n.prototype, "parent", {
          /**
           * A reference to the containing `DocumentReference` if this is a
           * subcollection. If this isn't a subcollection, the reference is null.
           */
          get: function() {
              var t = this._path.popLast();
              return t.isEmpty() ? null : new $u(this.firestore, 
              /* converter= */ null, new ct(t));
          },
          enumerable: !1,
          configurable: !0
      }), n.prototype.withConverter = function(t) {
          return new n(this.firestore, t, this._path);
      }, n;
  }(Xu);

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The Cloud Firestore service interface.
   *
   * Do not call this constructor directly. Instead, use {@link getFirestore}.
   */ function Zu(t, n) {
      for (var r, i = [], o = 2; o < arguments.length; o++) i[o - 2] = arguments[o];
      if (t = getModularInstance(t), Uu("collection", "path", n), t instanceof Yu) return Qu(r = H$1.fromString.apply(H$1, __spreadArray$5([ n ], i))), 
      new Ju(t, /* converter= */ null, r);
      if (!(t instanceof $u || t instanceof Ju)) throw new D$1(N$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
      return Qu(r = H$1.fromString.apply(H$1, __spreadArray$5([ t.path ], i)).child(H$1.fromString(n))), new Ju(t.firestore, 
      /* converter= */ null, r);
  }

  // TODO(firestorelite): Consider using ErrorFactory -
  // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
  /**
   * Creates and returns a new `Query` instance that includes all documents in the
   * database that are contained in a collection or subcollection with the
   * given `collectionId`.
   *
   * @param firestore - A reference to the root Firestore instance.
   * @param collectionId - Identifies the collections to query over. Every
   * collection or subcollection with this ID as the last segment of its path
   * will be included. Cannot contain a slash.
   * @returns The created `Query`.
   */ function ta$1(t, n) {
      for (var r, i = [], o = 2; o < arguments.length; o++) i[o - 2] = arguments[o];
      if (t = getModularInstance(t), 
      // We allow omission of 'pathString' but explicitly prohibit passing in both
      // 'undefined' and 'null'.
      1 === arguments.length && (n = V$1.u()), Uu("doc", "path", n), t instanceof Yu) return Ku(r = H$1.fromString.apply(H$1, __spreadArray$5([ n ], i))), 
      new $u(t, 
      /* converter= */ null, new ct(r));
      if (!(t instanceof $u || t instanceof Ju)) throw new D$1(N$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
      return Ku(r = t._path.child(H$1.fromString.apply(H$1, __spreadArray$5([ n ], i)))), new $u(t.firestore, t instanceof Ju ? t.converter : null, new ct(r));
  }

  /**
   * Returns true if the provided references are equal.
   *
   * @param left - A reference to compare.
   * @param right - A reference to compare.
   * @returns true if the references point to the same location in the same
   * Firestore database.
   */ function ea$1(t, e) {
      return t = getModularInstance(t), e = getModularInstance(e), (t instanceof $u || t instanceof Ju) && (e instanceof $u || e instanceof Ju) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter
      /**
   * Returns true if the provided queries point to the same collection and apply
   * the same constraints.
   *
   * @param left - A `Query` to compare.
   * @param right - A `Query` to compare.
   * @returns true if the references point to the same location in the same
   * Firestore database.
   */;
  }

  function na$1(t, e) {
      return t = getModularInstance(t), e = getModularInstance(e), t instanceof Xu && e instanceof Xu && t.firestore === e.firestore && ie(t._query, e._query) && t.converter === e.converter
      /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */;
  }

  var ra$1 = /** @class */ function() {
      function t() {
          var t = this;
          // The last promise in the queue.
                  this.dc = Promise.resolve(), 
          // A list of retryable operations. Retryable operations are run in order and
          // retried with backoff.
          this.wc = [], 
          // Is this AsyncQueue being shut down? Once it is set to true, it will not
          // be changed again.
          this._c = !1, 
          // Operations scheduled to be queued in the future. Operations are
          // automatically removed after they are run or canceled.
          this.mc = [], 
          // visible for testing
          this.yc = null, 
          // Flag set while there's an outstanding AsyncQueue operation, used for
          // assertion sanity-checks.
          this.gc = !1, 
          // Enabled during shutdown on Safari to prevent future access to IndexedDB.
          this.Ec = !1, 
          // List of TimerIds to fast-forward delays for.
          this.Tc = [], 
          // Backoff timer used to schedule retries for retryable operations
          this.Zi = new xo(this, "async_queue_retry" /* AsyncQueueRetry */), 
          // Visibility handler that triggers an immediate retry of all retryable
          // operations. Meant to speed up recovery when we regain file system access
          // after page comes into foreground.
          this.Ic = function() {
              var e = ko();
              e && C$1("AsyncQueue", "Visibility state changed to " + e.visibilityState), t.Zi.Gi();
          };
          var e = ko();
          e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.Ic);
      }
      return Object.defineProperty(t.prototype, "isShuttingDown", {
          get: function() {
              return this._c;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Adds a new operation to the queue without waiting for it to complete (i.e.
       * we ignore the Promise result).
       */
      t.prototype.enqueueAndForget = function(t) {
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.enqueue(t);
      }, t.prototype.enqueueAndForgetEvenWhileRestricted = function(t) {
          this.Ac(), 
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.Rc(t);
      }, t.prototype.enterRestrictedMode = function(t) {
          if (!this._c) {
              this._c = !0, this.Ec = t || !1;
              var e = ko();
              e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Ic);
          }
      }, t.prototype.enqueue = function(t) {
          var e = this;
          if (this.Ac(), this._c) 
          // Return a Promise which never resolves.
          return new Promise((function() {}));
          // Create a deferred Promise that we can return to the callee. This
          // allows us to return a "hanging Promise" only to the callee and still
          // advance the queue even when the operation is not run.
                  var n = new br;
          return this.Rc((function() {
              return e._c && e.Ec ? Promise.resolve() : (t().then(n.resolve, n.reject), n.promise);
          })).then((function() {
              return n.promise;
          }));
      }, t.prototype.enqueueRetryable = function(t) {
          var e = this;
          this.enqueueAndForget((function() {
              return e.wc.push(t), e.bc();
          }));
      }, 
      /**
       * Runs the next operation from the retryable queue. If the operation fails,
       * reschedules with backoff.
       */
      t.prototype.bc = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t, e = this;
              return __generator$6(this, (function(n) {
                  switch (n.label) {
                    case 0:
                      if (0 === this.wc.length) return [ 3 /*break*/ , 5 ];
                      n.label = 1;

                    case 1:
                      return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , this.wc[0]() ];

                    case 2:
                      return n.sent(), this.wc.shift(), this.Zi.reset(), [ 3 /*break*/ , 4 ];

                    case 3:
                      if (!Nr(t = n.sent())) throw t;
                      // Failure will be handled by AsyncQueue
                                          return C$1("AsyncQueue", "Operation failed with retryable error: " + t), 
                      [ 3 /*break*/ , 4 ];

                    case 4:
                      this.wc.length > 0 && 
                      // If there are additional operations, we re-schedule `retryNextOp()`.
                      // This is necessary to run retryable operations that failed during
                      // their initial attempt since we don't know whether they are already
                      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                      // call scheduled here.
                      // Since `backoffAndRun()` cancels an existing backoff and schedules a
                      // new backoff on every call, there is only ever a single additional
                      // operation in the queue.
                      this.Zi.ji((function() {
                          return e.bc();
                      })), n.label = 5;

                    case 5:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, t.prototype.Rc = function(t) {
          var e = this, n = this.dc.then((function() {
              return e.gc = !0, t().catch((function(t) {
                  // Re-throw the error so that this.tail becomes a rejected Promise and
                  // all further attempts to chain (via .then) will just short-circuit
                  // and return the rejected Promise.
                  throw e.yc = t, e.gc = !1, x$1("INTERNAL UNHANDLED ERROR: ", 
                  /**
   * Chrome includes Error.message in Error.stack. Other browsers do not.
   * This returns expected output of message + stack when available.
   * @param error - Error or FirestoreError
   */
                  function(t) {
                      var e = t.message || "";
                      return t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), 
                      e;
                  }(t)), t;
              })).then((function(t) {
                  return e.gc = !1, t;
              }));
          }));
          return this.dc = n, n;
      }, t.prototype.enqueueAfterDelay = function(t, e, n) {
          var r = this;
          this.Ac(), 
          // Fast-forward delays for timerIds that have been overriden.
          this.Tc.indexOf(t) > -1 && (e = 0);
          var i = cs.createAndSchedule(this, t, e, n, (function(t) {
              return r.vc(t);
          }));
          return this.mc.push(i), i;
      }, t.prototype.Ac = function() {
          this.yc && O$1();
      }, t.prototype.verifyOperationInProgress = function() {}, 
      /**
       * Waits until all currently queued tasks are finished executing. Delayed
       * operations are not run.
       */
      t.prototype.Pc = function() {
          return __awaiter$6(this, void 0, void 0, (function() {
              var t;
              return __generator$6(this, (function(e) {
                  switch (e.label) {
                    case 0:
                      return [ 4 /*yield*/ , t = this.dc ];

                    case 1:
                      e.sent(), e.label = 2;

                    case 2:
                      if (t !== this.dc) return [ 3 /*break*/ , 0 ];
                      e.label = 3;

                    case 3:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      }, 
      /**
       * For Tests: Determine if a delayed operation with a particular TimerId
       * exists.
       */
      t.prototype.Vc = function(t) {
          for (var e = 0, n = this.mc; e < n.length; e++) {
              if (n[e].timerId === t) return !0;
          }
          return !1;
      }, 
      /**
       * For Tests: Runs some or all delayed operations early.
       *
       * @param lastTimerId - Delayed operations up to and including this TimerId
       * will be drained. Pass TimerId.All to run all delayed operations.
       * @returns a Promise that resolves once all operations have been run.
       */
      t.prototype.Sc = function(t) {
          var e = this;
          // Note that draining may generate more delayed ops, so we do that first.
                  return this.Pc().then((function() {
              // Run ops in the same order they'd run if they ran naturally.
              e.mc.sort((function(t, e) {
                  return t.targetTimeMs - e.targetTimeMs;
              }));
              for (var n = 0, r = e.mc; n < r.length; n++) {
                  var i = r[n];
                  if (i.skipDelay(), "all" /* All */ !== t && i.timerId === t) break;
              }
              return e.Pc();
          }));
      }, 
      /**
       * For Tests: Skip all subsequent delays for a timer id.
       */
      t.prototype.Dc = function(t) {
          this.Tc.push(t);
      }, 
      /** Called once a DelayedOperation is run or canceled. */ t.prototype.vc = function(t) {
          // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
          var e = this.mc.indexOf(t);
          this.mc.splice(e, 1);
      }, t;
  }();

  function ia$1(t) {
      /**
   * Returns true if obj is an object and contains at least one of the specified
   * methods.
   */
      return function(t, e) {
          if ("object" != typeof t || null === t) return !1;
          for (var n = t, r = 0, i = [ "next", "error", "complete" ]; r < i.length; r++) {
              var o = i[r];
              if (o in n && "function" == typeof n[o]) return !0;
          }
          return !1;
      }(t);
  }

  var sa$1 = -1, ua$1 = /** @class */ function(e) {
      /** @hideconstructor */
      function n(t, n) {
          var r = this;
          /**
               * Whether it's a Firestore or Firestore Lite instance.
               */
          return (r = e.call(this, t, n) || this).type = "firestore", r._queue = new ra$1, r._persistenceKey = "name" in t ? t.name : "[DEFAULT]", 
          r;
      }
      return __extends$6(n, e), n.prototype._terminate = function() {
          return this._firestoreClient || 
          // The client must be initialized to ensure that all subsequent API
          // usage throws an exception.
          ca(this), this._firestoreClient.terminate();
      }, n;
  }(Yu);

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** DOMException error code constants. */
  /**
   * @internal
   */
  function aa$1(t) {
      return t._firestoreClient || ca(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
  }

  function ca(t) {
      var e, n = t._freezeSettings(), r = function(t, e, n, r) {
          return new xu(t, e, n, r.host, r.ssl, r.experimentalForceLongPolling, r.experimentalAutoDetectLongPolling, r.useFetchStreams);
      }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);
      t._firestoreClient = new wu(t._credentials, t._queue, r);
  }

  /**
   * Attempts to enable persistent storage, if possible.
   *
   * Must be called before any other functions (other than
   * {@link initializeFirestore}, {@link getFirestore} or
   * {@link clearIndexedDbPersistence}.
   *
   * If this fails, `enableIndexedDbPersistence()` will reject the promise it
   * returns. Note that even after this failure, the `Firestore` instance will
   * remain usable, however offline persistence will be disabled.
   *
   * There are several reasons why this can fail, which can be identified by
   * the `code` on the error.
   *
   *   * failed-precondition: The app is already open in another browser tab.
   *   * unimplemented: The browser is incompatible with the offline
   *     persistence implementation.
   *
   * @param firestore - The `Firestore` instance to enable persistence for.
   * @param persistenceSettings - Optional settings object to configure
   * persistence.
   * @returns A promise that represents successfully enabling persistent storage.
   */
  /**
   * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
   * If the operation fails with a recoverable error (see
   * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
   * but the client remains usable.
   */ function ha$1(t, e, i) {
      var o = this, s = new br;
      return t.asyncQueue.enqueue((function() {
          return __awaiter$6(o, void 0, void 0, (function() {
              var n;
              return __generator$6(this, (function(r) {
                  switch (r.label) {
                    case 0:
                      return r.trys.push([ 0, 3, , 4 ]), [ 4 /*yield*/ , bu(t, i) ];

                    case 1:
                      return r.sent(), [ 4 /*yield*/ , Iu(t, e) ];

                    case 2:
                      return r.sent(), s.resolve(), [ 3 /*break*/ , 4 ];

                    case 3:
                      if (!
                      /**
           * Decides whether the provided error allows us to gracefully disable
           * persistence (as opposed to crashing the client).
           */
                      function(t) {
                          return "FirebaseError" === t.name ? t.code === N$1.FAILED_PRECONDITION || t.code === N$1.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (22 === t.code || 20 === t.code || 
                          // Firefox Private Browsing mode disables IndexedDb and returns
                          // INVALID_STATE for any usage.
                          11 === t.code);
                      }(n = r.sent())) throw n;
                      return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + n), 
                      s.reject(n), [ 3 /*break*/ , 4 ];

                    case 4:
                      return [ 2 /*return*/ ];
                  }
              }));
          }));
      })).then((function() {
          return s.promise;
      }));
  }

  /**
   * Re-enables use of the network for this Firestore instance after a prior
   * call to {@link disableNetwork}.
   *
   * @returns A promise that is resolved once the network has been enabled.
   */
  function fa$1(t) {
      if (t._initialized || t._terminated) throw new D$1(N$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A `FieldPath` refers to a field in a document. The path may consist of a
   * single field name (referring to a top-level field in the document), or a
   * list of field names (referring to a nested field in the document).
   *
   * Create a `FieldPath` by providing field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   */ var la$1 = /** @class */ function() {
      /**
       * Creates a FieldPath from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      function t() {
          for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
          for (var n = 0; n < t.length; ++n) if (0 === t[n].length) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
          this._internalPath = new $(t);
      }
      /**
       * Returns true if this `FieldPath` is equal to the provided one.
       *
       * @param other - The `FieldPath` to compare against.
       * @returns true if this `FieldPath` is equal to the provided one.
       */    return t.prototype.isEqual = function(t) {
          return this._internalPath.isEqual(t._internalPath);
      }, t;
  }(), da$1 = /** @class */ function() {
      /** @hideconstructor */
      function t(t) {
          this._byteString = t;
      }
      /**
       * Creates a new `Bytes` object from the given Base64 string, converting it to
       * bytes.
       *
       * @param base64 - The Base64 string used to create the `Bytes` object.
       */    return t.fromBase64String = function(e) {
          try {
              return new t(J$1.fromBase64String(e));
          } catch (e) {
              throw new D$1(N$1.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
          }
      }, 
      /**
       * Creates a new `Bytes` object from the given Uint8Array.
       *
       * @param array - The Uint8Array used to create the `Bytes` object.
       */
      t.fromUint8Array = function(e) {
          return new t(J$1.fromUint8Array(e));
      }, 
      /**
       * Returns the underlying bytes as a Base64-encoded string.
       *
       * @returns The Base64-encoded string created from the `Bytes` object.
       */
      t.prototype.toBase64 = function() {
          return this._byteString.toBase64();
      }, 
      /**
       * Returns the underlying bytes in a new `Uint8Array`.
       *
       * @returns The Uint8Array created from the `Bytes` object.
       */
      t.prototype.toUint8Array = function() {
          return this._byteString.toUint8Array();
      }, 
      /**
       * Returns a string representation of the `Bytes` object.
       *
       * @returns A string representation of the `Bytes` object.
       */
      t.prototype.toString = function() {
          return "Bytes(base64: " + this.toBase64() + ")";
      }, 
      /**
       * Returns true if this `Bytes` object is equal to the provided one.
       *
       * @param other - The `Bytes` object to compare against.
       * @returns true if this `Bytes` object is equal to the provided one.
       */
      t.prototype.isEqual = function(t) {
          return this._byteString.isEqual(t._byteString);
      }, t;
  }(), pa$1 = 
  /**
       * @param _methodName - The public API endpoint that returns this class.
       * @hideconstructor
       */
  function(t) {
      this._methodName = t;
  }, ya$1 = /** @class */ function() {
      /**
       * Creates a new immutable `GeoPoint` object with the provided latitude and
       * longitude values.
       * @param latitude - The latitude as number between -90 and 90.
       * @param longitude - The longitude as number between -180 and 180.
       */
      function t(t, e) {
          if (!isFinite(t) || t < -90 || t > 90) throw new D$1(N$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
          if (!isFinite(e) || e < -180 || e > 180) throw new D$1(N$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
          this._lat = t, this._long = e;
      }
      return Object.defineProperty(t.prototype, "latitude", {
          /**
           * The latitude of this `GeoPoint` instance.
           */
          get: function() {
              return this._lat;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "longitude", {
          /**
           * The longitude of this `GeoPoint` instance.
           */
          get: function() {
              return this._long;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Returns true if this `GeoPoint` is equal to the provided one.
       *
       * @param other - The `GeoPoint` to compare against.
       * @returns true if this `GeoPoint` is equal to the provided one.
       */
      t.prototype.isEqual = function(t) {
          return this._lat === t._lat && this._long === t._long;
      }, 
      /** Returns a JSON-serializable representation of this GeoPoint. */ t.prototype.toJSON = function() {
          return {
              latitude: this._lat,
              longitude: this._long
          };
      }, 
      /**
       * Actually private to JS consumers of our API, so this function is prefixed
       * with an underscore.
       */
      t.prototype._compareTo = function(t) {
          return q$1(this._lat, t._lat) || q$1(this._long, t._long);
      }, t;
  }(), va$1 = /^__.*__$/, ma$1 = /** @class */ function() {
      function t(t, e, n) {
          this.data = t, this.fieldMask = e, this.fieldTransforms = n;
      }
      return t.prototype.toMutation = function(t, e) {
          return null !== this.fieldMask ? new Fe(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Pe(t, this.data, e, this.fieldTransforms);
      }, t;
  }(), ga = /** @class */ function() {
      function t(t, 
      // The fieldMask does not include document transforms.
      e, n) {
          this.data = t, this.fieldMask = e, this.fieldTransforms = n;
      }
      return t.prototype.toMutation = function(t, e) {
          return new Fe(t, this.data, this.fieldMask, e, this.fieldTransforms);
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An immutable object representing an array of bytes.
   */ function wa$1(t) {
      switch (t) {
        case 0 /* Set */ :
   // fall through
                case 2 /* MergeSet */ :
   // fall through
                case 1 /* Update */ :
          return !0;

        case 3 /* Argument */ :
        case 4 /* ArrayArgument */ :
          return !1;

        default:
          throw O$1();
      }
  }

  /** A "context" object passed around while parsing user data. */ var ba$1 = /** @class */ function() {
      /**
       * Initializes a ParseContext with the given source and path.
       *
       * @param settings - The settings for the parser.
       * @param databaseId - The database ID of the Firestore instance.
       * @param serializer - The serializer to use to generate the Value proto.
       * @param ignoreUndefinedProperties - Whether to ignore undefined properties
       * rather than throw.
       * @param fieldTransforms - A mutable list of field transforms encountered
       * while parsing the data.
       * @param fieldMask - A mutable list of field paths encountered while parsing
       * the data.
       *
       * TODO(b/34871131): We don't support array paths right now, so path can be
       * null to indicate the context represents any location within an array (in
       * which case certain features will not work and errors will be somewhat
       * compromised).
       */
      function t(t, e, n, r, i, o) {
          this.settings = t, this.databaseId = e, this.R = n, this.ignoreUndefinedProperties = r, 
          // Minor hack: If fieldTransforms is undefined, we assume this is an
          // external call and we need to validate the entire path.
          void 0 === i && this.Cc(), this.fieldTransforms = i || [], this.fieldMask = o || [];
      }
      return Object.defineProperty(t.prototype, "path", {
          get: function() {
              return this.settings.path;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "Nc", {
          get: function() {
              return this.settings.Nc;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /** Returns a new context with the specified settings overwritten. */ t.prototype.xc = function(e) {
          return new t(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      }, t.prototype.kc = function(t) {
          var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.xc({
              path: n,
              Fc: !1
          });
          return r.$c(t), r;
      }, t.prototype.Oc = function(t) {
          var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.xc({
              path: n,
              Fc: !1
          });
          return r.Cc(), r;
      }, t.prototype.Mc = function(t) {
          // TODO(b/34871131): We don't support array paths right now; so make path
          // undefined.
          return this.xc({
              path: void 0,
              Fc: !0
          });
      }, t.prototype.Lc = function(t) {
          return Ua$1(t, this.settings.methodName, this.settings.Bc || !1, this.path, this.settings.qc);
      }, 
      /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t) {
          return void 0 !== this.fieldMask.find((function(e) {
              return t.isPrefixOf(e);
          })) || void 0 !== this.fieldTransforms.find((function(e) {
              return t.isPrefixOf(e.field);
          }));
      }, t.prototype.Cc = function() {
          // TODO(b/34871131): Remove null check once we have proper paths for fields
          // within arrays.
          if (this.path) for (var t = 0; t < this.path.length; t++) this.$c(this.path.get(t));
      }, t.prototype.$c = function(t) {
          if (0 === t.length) throw this.Lc("Document fields must not be empty");
          if (wa$1(this.Nc) && va$1.test(t)) throw this.Lc('Document fields cannot begin and end with "__"');
      }, t;
  }(), Ia$1 = /** @class */ function() {
      function t(t, e, n) {
          this.databaseId = t, this.ignoreUndefinedProperties = e, this.R = n || Co(t)
          /** Creates a new top-level parse context. */;
      }
      return t.prototype.Uc = function(t, e, n, r) {
          return void 0 === r && (r = !1), new ba$1({
              Nc: t,
              methodName: e,
              qc: n,
              path: $.emptyPath(),
              Fc: !1,
              Bc: r
          }, this.databaseId, this.R, this.ignoreUndefinedProperties);
      }, t;
  }();

  /**
   * Helper for parsing raw user input (provided via the API) into internal model
   * classes.
   */ function Ta$1(t) {
      var e = t._freezeSettings(), n = Co(t._databaseId);
      return new Ia$1(t._databaseId, !!e.ignoreUndefinedProperties, n);
  }

  /** Parse document data from a set() call. */ function Ea(t, e, n, r, i, o) {
      void 0 === o && (o = {});
      var s = t.Uc(o.merge || o.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
      Fa$1("Data must be an object, but it was:", s, r);
      var u, a, c = Oa$1(r, s);
      if (o.merge) u = new X$1(s.fieldMask), a = s.fieldTransforms; else if (o.mergeFields) {
          for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
              var d = Ma$1(e, l[f], n);
              if (!s.contains(d)) throw new D$1(N$1.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
              Ba(h, d) || h.push(d);
          }
          u = new X$1(h), a = s.fieldTransforms.filter((function(t) {
              return u.covers(t.field);
          }));
      } else u = null, a = s.fieldTransforms;
      return new ma$1(new _t(c), u, a);
  }

  var _a$3 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n.prototype._toFieldTransform = function(t) {
          if (2 /* MergeSet */ !== t.Nc) throw 1 /* Update */ === t.Nc ? t.Lc(this._methodName + "() can only appear at the top level of your update data") : t.Lc(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
          // No transform to add for a delete, but we need to add it to our
          // fieldMask so it gets deleted.
                  return t.fieldMask.push(t.path), null;
      }, n.prototype.isEqual = function(t) {
          return t instanceof n;
      }, n;
  }(pa$1);

  /**
   * Creates a child context for parsing SerializableFieldValues.
   *
   * This is different than calling `ParseContext.contextWith` because it keeps
   * the fieldTransforms and fieldMask separate.
   *
   * The created context has its `dataSource` set to `UserDataSource.Argument`.
   * Although these values are used with writes, any elements in these FieldValues
   * are not considered writes since they cannot contain any FieldValue sentinels,
   * etc.
   *
   * @param fieldValue - The sentinel FieldValue for which to create a child
   *     context.
   * @param context - The parent context.
   * @param arrayElement - Whether or not the FieldValue has an array.
   */ function Sa$1(t, e, n) {
      return new ba$1({
          Nc: 3 /* Argument */ ,
          qc: e.settings.qc,
          methodName: t._methodName,
          Fc: n
      }, e.databaseId, e.R, e.ignoreUndefinedProperties);
  }

  var Na$1 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n.prototype._toFieldTransform = function(t) {
          return new Se(t.path, new me);
      }, n.prototype.isEqual = function(t) {
          return t instanceof n;
      }, n;
  }(pa$1), Da = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t) || this).Kc = n, r;
      }
      return __extends$6(n, e), n.prototype._toFieldTransform = function(t) {
          var e = Sa$1(this, t, 
          /*array=*/ !0), n = this.Kc.map((function(t) {
              return La$1(t, e);
          })), r = new ge(n);
          return new Se(t.path, r);
      }, n.prototype.isEqual = function(t) {
          // TODO(mrschmidt): Implement isEquals
          return this === t;
      }, n;
  }(pa$1), Aa$1 = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t) || this).Kc = n, r;
      }
      return __extends$6(n, e), n.prototype._toFieldTransform = function(t) {
          var e = Sa$1(this, t, 
          /*array=*/ !0), n = this.Kc.map((function(t) {
              return La$1(t, e);
          })), r = new be(n);
          return new Se(t.path, r);
      }, n.prototype.isEqual = function(t) {
          // TODO(mrschmidt): Implement isEquals
          return this === t;
      }, n;
  }(pa$1), ka$1 = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t) || this).Qc = n, r;
      }
      return __extends$6(n, e), n.prototype._toFieldTransform = function(t) {
          var e = new Te(t.R, le(t.R, this.Qc));
          return new Se(t.path, e);
      }, n.prototype.isEqual = function(t) {
          // TODO(mrschmidt): Implement isEquals
          return this === t;
      }, n;
  }(pa$1);

  /** Parse update data from an update() call. */ function Ca$1(t, e, n, r) {
      var i = t.Uc(1 /* Update */ , e, n);
      Fa$1("Data must be an object, but it was:", i, r);
      var o = [], s = _t.empty();
      G(r, (function(t, r) {
          var u = qa$1(e, t, n);
          // For Compat types, we have to "extract" the underlying types before
          // performing validation.
                  r = getModularInstance(r);
          var a = i.Oc(u);
          if (r instanceof _a$3) 
          // Add it to the field mask, but don't add anything to updateData.
          o.push(u); else {
              var c = La$1(r, a);
              null != c && (o.push(u), s.set(u, c));
          }
      }));
      var u = new X$1(o);
      return new ga(s, u, i.fieldTransforms);
  }

  /** Parse update data from a list of field/value arguments. */ function xa$1(t, e, n, r, i, o) {
      var s = t.Uc(1 /* Update */ , e, n), u = [ Ma$1(e, r, n) ], a = [ i ];
      if (o.length % 2 != 0) throw new D$1(N$1.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
      for (var c = 0; c < o.length; c += 2) u.push(Ma$1(e, o[c])), a.push(o[c + 1]);
      // We iterate in reverse order to pick the last value for a field if the
      // user specified the field multiple times.
      for (var h = [], f = _t.empty(), d = u.length - 1; d >= 0; --d) if (!Ba(h, u[d])) {
          var p = u[d], y = a[d];
          // For Compat types, we have to "extract" the underlying types before
          // performing validation.
          y = getModularInstance(y);
          var v = s.Oc(p);
          if (y instanceof _a$3) 
          // Add it to the field mask, but don't add anything to updateData.
          h.push(p); else {
              var m = La$1(y, v);
              null != m && (h.push(p), f.set(p, m));
          }
      }
      var g = new X$1(h);
      return new ga(f, g, s.fieldTransforms);
  }

  /**
   * Parse a "query value" (e.g. value in a where filter or a value in a cursor
   * bound).
   *
   * @param allowArrays - Whether the query value is an array that may directly
   * contain additional arrays (e.g. the operand of an `in` query).
   */ function Ra$1(t, e, n, r) {
      return void 0 === r && (r = !1), La$1(n, t.Uc(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
  }

  /**
   * Parses user data to Protobuf Values.
   *
   * @param input - Data to be parsed.
   * @param context - A context object representing the current path being parsed,
   * the source of the data being parsed, etc.
   * @returns The parsed value, or null if the value was a FieldValue sentinel
   * that should not be included in the resulting parsed data.
   */ function La$1(t, e) {
      if (Pa$1(
      // Unwrap the API type from the Compat SDK. This will return the API type
      // from firestore-exp.
      t = getModularInstance(t))) return Fa$1("Unsupported field value:", e, t), Oa$1(t, e);
      if (t instanceof pa$1) 
      // FieldValues usually parse into transforms (except FieldValue.delete())
      // in which case we do not want to include this field in our parsed data
      // (as doing so will overwrite the field directly prior to the transform
      // trying to transform it). So we don't add this location to
      // context.fieldMask and we return null as our parsing result.
      /**
       * "Parses" the provided FieldValueImpl, adding any necessary transforms to
       * context.fieldTransforms.
       */
      return function(t, e) {
          // Sentinels are only supported with writes, and not within arrays.
          if (!wa$1(e.Nc)) throw e.Lc(t._methodName + "() can only be used with update() and set()");
          if (!e.path) throw e.Lc(t._methodName + "() is not currently supported inside arrays");
          var n = t._toFieldTransform(e);
          n && e.fieldTransforms.push(n);
      }(t, e), null;
      if (void 0 === t && e.ignoreUndefinedProperties) 
      // If the input is undefined it can never participate in the fieldMask, so
      // don't handle this below. If `ignoreUndefinedProperties` is false,
      // `parseScalarValue` will reject an undefined value.
      return null;
      if (
      // If context.path is null we are inside an array and we don't support
      // field mask paths more granular than the top-level array.
      e.path && e.fieldMask.push(e.path), t instanceof Array) {
          // TODO(b/34871131): Include the path containing the array in the error
          // message.
          // In the case of IN queries, the parsed data is an array (representing
          // the set of values to be included for the IN query) that may directly
          // contain additional arrays (each representing an individual field
          // value), so we disable this validation.
          if (e.settings.Fc && 4 /* ArrayArgument */ !== e.Nc) throw e.Lc("Nested arrays are not supported");
          return function(t, e) {
              for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
                  var s = La$1(o[i], e.Mc(r));
                  null == s && (
                  // Just include nulls in the array for fields being replaced with a
                  // sentinel.
                  s = {
                      nullValue: "NULL_VALUE"
                  }), n.push(s), r++;
              }
              return {
                  arrayValue: {
                      values: n
                  }
              };
          }(t, e);
      }
      return function(t, e) {
          if (null === (t = getModularInstance(t))) return {
              nullValue: "NULL_VALUE"
          };
          if ("number" == typeof t) return le(e.R, t);
          if ("boolean" == typeof t) return {
              booleanValue: t
          };
          if ("string" == typeof t) return {
              stringValue: t
          };
          if (t instanceof Date) {
              var n = j.fromDate(t);
              return {
                  timestampValue: In(e.R, n)
              };
          }
          if (t instanceof j) {
              // Firestore backend truncates precision down to microseconds. To ensure
              // offline mode works the same with regards to truncation, perform the
              // truncation immediately without waiting for the backend to do that.
              n = new j(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
              return {
                  timestampValue: In(e.R, n)
              };
          }
          if (t instanceof ya$1) return {
              geoPointValue: {
                  latitude: t.latitude,
                  longitude: t.longitude
              }
          };
          if (t instanceof da$1) return {
              bytesValue: Tn(e.R, t._byteString)
          };
          if (t instanceof $u) {
              n = e.databaseId;
              var r = t.firestore._databaseId;
              if (!r.isEqual(n)) throw e.Lc("Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n.projectId + "/" + n.database);
              return {
                  referenceValue: Sn(t.firestore._databaseId || e.databaseId, t._key.path)
              };
          }
          throw e.Lc("Unsupported field value: " + Gu(t));
      }(t, e);
  }

  function Oa$1(t, e) {
      var n = {};
      return z$1(t) ? 
      // If we encounter an empty object, we explicitly add it to the update
      // mask to ensure that the server creates a map entry.
      e.path && e.path.length > 0 && e.fieldMask.push(e.path) : G(t, (function(t, r) {
          var i = La$1(r, e.kc(t));
          null != i && (n[t] = i);
      })), {
          mapValue: {
              fields: n
          }
      };
  }

  function Pa$1(t) {
      return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof j || t instanceof ya$1 || t instanceof da$1 || t instanceof $u || t instanceof pa$1);
  }

  function Fa$1(t, e, n) {
      if (!Pa$1(n) || !function(t) {
          return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
      }(n)) {
          var r = Gu(n);
          throw "an object" === r ? e.Lc(t + " a custom object") : e.Lc(t + " " + r);
      }
  }

  /**
   * Helper that calls fromDotSeparatedString() but wraps any error thrown.
   */ function Ma$1(t, e, n) {
      if (
      // If required, replace the FieldPath Compat class with with the firestore-exp
      // FieldPath.
      (e = getModularInstance(e)) instanceof la$1) return e._internalPath;
      if ("string" == typeof e) return qa$1(t, e);
      throw Ua$1("Field path arguments must be of type string or FieldPath.", t, 
      /* hasConverter= */ !1, 
      /* path= */ void 0, n);
  }

  /**
   * Matches any characters in a field path string that are reserved.
   */ var Va$1 = new RegExp("[~\\*/\\[\\]]");

  /**
   * Wraps fromDotSeparatedString with an error message about the method that
   * was thrown.
   * @param methodName - The publicly visible method name
   * @param path - The dot-separated string form of a field path which will be
   * split on dots.
   * @param targetDoc - The document against which the field path will be
   * evaluated.
   */ function qa$1(t, n, r) {
      if (n.search(Va$1) >= 0) throw Ua$1("Invalid field path (" + n + "). Paths must not contain '~', '*', '/', '[', or ']'", t, 
      /* hasConverter= */ !1, 
      /* path= */ void 0, r);
      try {
          return (new (la$1.bind.apply(la$1, __spreadArray$5([ void 0 ], n.split(".")))))._internalPath;
      } catch (e) {
          throw Ua$1("Invalid field path (" + n + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, 
          /* hasConverter= */ !1, 
          /* path= */ void 0, r);
      }
  }

  function Ua$1(t, e, n, r, i) {
      var o = r && !r.isEmpty(), s = void 0 !== i, u = "Function " + e + "() called with invalid data";
      n && (u += " (via `toFirestore()`)");
      var a = "";
      return (o || s) && (a += " (found", o && (a += " in field " + r), s && (a += " in document " + i), 
      a += ")"), new D$1(N$1.INVALID_ARGUMENT, (u += ". ") + t + a)
      /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */;
  }

  function Ba(t, e) {
      return t.some((function(t) {
          return t.isEqual(e);
      }));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A `DocumentSnapshot` contains data read from a document in your Firestore
   * database. The data can be extracted with `.data()` or `.get(<field>)` to
   * get a specific field.
   *
   * For a `DocumentSnapshot` that points to a non-existing document, any data
   * access will return 'undefined'. You can use the `exists()` method to
   * explicitly verify a document's existence.
   */ var ja$1 = /** @class */ function() {
      // Note: This class is stripped down version of the DocumentSnapshot in
      // the legacy SDK. The changes are:
      // - No support for SnapshotMetadata.
      // - No support for SnapshotOptions.
      /** @hideconstructor protected */
      function t(t, e, n, r, i) {
          this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, 
          this._converter = i;
      }
      return Object.defineProperty(t.prototype, "id", {
          /** Property of the `DocumentSnapshot` that provides the document's ID. */ get: function() {
              return this._key.path.lastSegment();
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "ref", {
          /**
           * The `DocumentReference` for the document included in the `DocumentSnapshot`.
           */
          get: function() {
              return new $u(this._firestore, this._converter, this._key);
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Signals whether or not the document at the snapshot's location exists.
       *
       * @returns true if the document exists.
       */
      t.prototype.exists = function() {
          return null !== this._document;
      }, 
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * @returns An `Object` containing all fields in the document or `undefined`
       * if the document doesn't exist.
       */
      t.prototype.data = function() {
          if (this._document) {
              if (this._converter) {
                  // We only want to use the converter and create a new DocumentSnapshot
                  // if a converter has been provided.
                  var t = new Ka$1(this._firestore, this._userDataWriter, this._key, this._document, 
                  /* converter= */ null);
                  return this._converter.fromFirestore(t);
              }
              return this._userDataWriter.convertValue(this._document.data.value);
          }
      }, 
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.prototype.get = function(t) {
          if (this._document) {
              var e = this._document.data.field(Qa$1("DocumentSnapshot.get", t));
              if (null !== e) return this._userDataWriter.convertValue(e);
          }
      }, t;
  }(), Ka$1 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * @override
       * @returns An `Object` containing all fields in the document.
       */    return __extends$6(n, e), n.prototype.data = function() {
          return e.prototype.data.call(this);
      }, n;
  }(ja$1);

  /**
   * A `QueryDocumentSnapshot` contains data read from a document in your
   * Firestore database as part of a query. The document is guaranteed to exist
   * and its data can be extracted with `.data()` or `.get(<field>)` to get a
   * specific field.
   *
   * A `QueryDocumentSnapshot` offers the same API surface as a
   * `DocumentSnapshot`. Since query results contain only existing documents, the
   * `exists` property will always be true and `data()` will never return
   * 'undefined'.
   */
  /**
   * Helper that calls fromDotSeparatedString() but wraps any error thrown.
   */
  function Qa$1(t, e) {
      return "string" == typeof e ? qa$1(t, e) : e instanceof la$1 ? e._internalPath : e._delegate._internalPath;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Metadata about a snapshot, describing the state of the snapshot.
   */ var Ga$1 = /** @class */ function() {
      /** @hideconstructor */
      function t(t, e) {
          this.hasPendingWrites = t, this.fromCache = e
          /**
       * Returns true if this `SnapshotMetadata` is equal to the provided one.
       *
       * @param other - The `SnapshotMetadata` to compare against.
       * @returns true if this `SnapshotMetadata` is equal to the provided one.
       */;
      }
      return t.prototype.isEqual = function(t) {
          return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
      }, t;
  }(), za$1 = /** @class */ function(e) {
      /** @hideconstructor protected */
      function n(t, n, r, i, o, s) {
          var u = this;
          return (u = e.call(this, t, n, r, i, s) || this)._firestore = t, u._firestoreImpl = t, 
          u.metadata = o, u;
      }
      /**
       * Property of the `DocumentSnapshot` that signals whether or not the data
       * exists. True if the document exists.
       */    return __extends$6(n, e), n.prototype.exists = function() {
          return e.prototype.exists.call(this);
      }, 
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * By default, `FieldValue.serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document or `undefined` if
       * the document doesn't exist.
       */
      n.prototype.data = function(t) {
          if (void 0 === t && (t = {}), this._document) {
              if (this._converter) {
                  // We only want to use the converter and create a new DocumentSnapshot
                  // if a converter has been provided.
                  var e = new Wa$1(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
                  /* converter= */ null);
                  return this._converter.fromFirestore(e, t);
              }
              return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
          }
      }, 
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
       * its final value will be returned as `null`. You can override this by
       * passing an options object.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @param options - An options object to configure how the field is retrieved
       * from the snapshot (for example the desired behavior for server timestamps
       * that have not yet been set to their final value).
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      n.prototype.get = function(t, e) {
          if (void 0 === e && (e = {}), this._document) {
              var n = this._document.data.field(Qa$1("DocumentSnapshot.get", t));
              if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
          }
      }, n;
  }(ja$1), Wa$1 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * By default, `FieldValue.serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @override
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document.
       */    return __extends$6(n, e), n.prototype.data = function(t) {
          return void 0 === t && (t = {}), e.prototype.data.call(this, t);
      }, n;
  }(za$1), Ha$1 = /** @class */ function() {
      /** @hideconstructor */
      function t(t, e, n, r) {
          this._firestore = t, this._userDataWriter = e, this._snapshot = r, this.metadata = new Ga$1(r.hasPendingWrites, r.fromCache), 
          this.query = n;
      }
      return Object.defineProperty(t.prototype, "docs", {
          /** An array of all the documents in the `QuerySnapshot`. */ get: function() {
              var t = [];
              return this.forEach((function(e) {
                  return t.push(e);
              })), t;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "size", {
          /** The number of documents in the `QuerySnapshot`. */ get: function() {
              return this._snapshot.docs.size;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "empty", {
          /** True if there are no documents in the `QuerySnapshot`. */ get: function() {
              return 0 === this.size;
          },
          enumerable: !1,
          configurable: !0
      }), 
      /**
       * Enumerates all of the documents in the `QuerySnapshot`.
       *
       * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
       * each document in the snapshot.
       * @param thisArg - The `this` binding for the callback.
       */
      t.prototype.forEach = function(t, e) {
          var n = this;
          this._snapshot.docs.forEach((function(r) {
              t.call(e, new Wa$1(n._firestore, n._userDataWriter, r.key, r, new Ga$1(n._snapshot.mutatedKeys.has(r.key), n._snapshot.fromCache), n.query.converter));
          }));
      }, 
      /**
       * Returns an array of the documents changes since the last snapshot. If this
       * is the first snapshot, all documents will be in the list as 'added'
       * changes.
       *
       * @param options - `SnapshotListenOptions` that control whether metadata-only
       * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
       * snapshot events.
       */
      t.prototype.docChanges = function(t) {
          void 0 === t && (t = {});
          var e = !!t.includeMetadataChanges;
          if (e && this._snapshot.excludesMetadataChanges) throw new D$1(N$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
          return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = 
          /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
          function(t, e) {
              if (t._snapshot.oldDocs.isEmpty()) {
                  var n = 0;
                  return t._snapshot.docChanges.map((function(e) {
                      return {
                          type: "added",
                          doc: new Wa$1(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Ga$1(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter),
                          oldIndex: -1,
                          newIndex: n++
                      };
                  }));
              }
              // A DocumentSet that is updated incrementally as changes are applied to use
              // to lookup the index of a document.
              var r = t._snapshot.oldDocs;
              return t._snapshot.docChanges.filter((function(t) {
                  return e || 3 /* Metadata */ !== t.type;
              })).map((function(e) {
                  var n = new Wa$1(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Ga$1(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter), i = -1, o = -1;
                  return 0 /* Added */ !== e.type && (i = r.indexOf(e.doc.key), r = r.delete(e.doc.key)), 
                  1 /* Removed */ !== e.type && (o = (r = r.add(e.doc)).indexOf(e.doc.key)), {
                      type: Ya$1(e.type),
                      doc: n,
                      oldIndex: i,
                      newIndex: o
                  };
              }));
          }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
      }, t;
  }();

  /**
   * A `DocumentSnapshot` contains data read from a document in your Firestore
   * database. The data can be extracted with `.data()` or `.get(<field>)` to
   * get a specific field.
   *
   * For a `DocumentSnapshot` that points to a non-existing document, any data
   * access will return 'undefined'. You can use the `exists()` method to
   * explicitly verify a document's existence.
   */ function Ya$1(t) {
      switch (t) {
        case 0 /* Added */ :
          return "added";

        case 2 /* Modified */ :
        case 3 /* Metadata */ :
          return "modified";

        case 1 /* Removed */ :
          return "removed";

        default:
          return O$1();
      }
  }

  // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
  // metadata
  /**
   * Returns true if the provided snapshots are equal.
   *
   * @param left - A snapshot to compare.
   * @param right - A snapshot to compare.
   * @returns true if the snapshots are equal.
   */ function $a$1(t, e) {
      return t instanceof za$1 && e instanceof za$1 ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Ha$1 && e instanceof Ha$1 && t._firestore === e._firestore && na$1(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ function Xa$1(t) {
      if (Xt(t) && 0 === t.explicitOrderBy.length) throw new D$1(N$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
  }

  /**
   * A `QueryConstraint` is used to narrow the set of documents returned by a
   * Firestore query. `QueryConstraint`s are created by invoking {@link where},
   * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
   * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
   * can then be passed to {@link query} to create a new query instance that
   * also contains this `QueryConstraint`.
   */ var Ja$1 = function() {};

  /**
   * Creates a new immutable instance of `Query` that is extended to also include
   * additional query constraints.
   *
   * @param query - The Query instance to use as a base for the new constraints.
   * @param queryConstraints - The list of `QueryConstraint`s to apply.
   * @throws if any of the provided query constraints cannot be combined with the
   * existing or new constraints.
   */ function Za$1(t) {
      for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
      for (var r = 0, i = e; r < i.length; r++) {
          var o = i[r];
          t = o._apply(t);
      }
      return t;
  }

  var tc$1 = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).jc = t, i.Wc = n, i.Gc = r, i.type = "where", 
          i;
      }
      return __extends$6(n, e), n.prototype._apply = function(t) {
          var e = Ta$1(t.firestore), n = function(t, e, n, r, i, o, s) {
              var u;
              if (i.isKeyField()) {
                  if ("array-contains" /* ARRAY_CONTAINS */ === o || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === o) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
                  if ("in" /* IN */ === o || "not-in" /* NOT_IN */ === o) {
                      uc$1(s, o);
                      for (var a = [], c = 0, h = s; c < h.length; c++) {
                          var f = h[c];
                          a.push(sc$1(r, t, f));
                      }
                      u = {
                          arrayValue: {
                              values: a
                          }
                      };
                  } else u = sc$1(r, t, s);
              } else "in" /* IN */ !== o && "not-in" /* NOT_IN */ !== o && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== o || uc$1(s, o), 
              u = Ra$1(n, "where", s, 
              /* allowArrays= */ "in" /* IN */ === o || "not-in" /* NOT_IN */ === o);
              var l = Rt.create(i, o, u);
              return function(t, e) {
                  if (e.g()) {
                      var n = Zt(t);
                      if (null !== n && !n.isEqual(e.field)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
                      var r = Jt(t);
                      null !== r && ac$1(t, e.field, r);
                  }
                  var i = function(t, e) {
                      for (var n = 0, r = t.filters; n < r.length; n++) {
                          var i = r[n];
                          if (e.indexOf(i.op) >= 0) return i.op;
                      }
                      return null;
                  }(t, 
                  /**
   * Given an operator, returns the set of operators that cannot be used with it.
   *
   * Operators in a query must adhere to the following set of rules:
   * 1. Only one array operator is allowed.
   * 2. Only one disjunctive operator is allowed.
   * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
   * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
   *
   * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
   * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
   */
                  function(t) {
                      switch (t) {
                        case "!=" /* NOT_EQUAL */ :
                          return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                        case "array-contains" /* ARRAY_CONTAINS */ :
                          return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                        case "in" /* IN */ :
                          return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                        case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                          return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                        case "not-in" /* NOT_IN */ :
                          return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                        default:
                          return [];
                      }
                  }(e.op));
                  if (null !== i) 
                  // Special case when it's a duplicate op to give a slightly clearer error message.
                  throw i === e.op ? new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
              }(t, l), l;
          }(t._query, 0, e, t.firestore._databaseId, this.jc, this.Wc, this.Gc);
          return new Xu(t.firestore, t.converter, function(t, e) {
              var n = t.filters.concat([ e ]);
              return new Wt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
          }(t._query, n));
      }, n;
  }(Ja$1), ec$1 = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this) || this).jc = t, r.zc = n, r.type = "orderBy", r;
      }
      return __extends$6(n, e), n.prototype._apply = function(t) {
          var e = function(t, e, n) {
              if (null !== t.startAt) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
              if (null !== t.endAt) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
              var r = new Kt(e, n);
              return function(t, e) {
                  if (null === Jt(t)) {
                      // This is the first order by. It must match any inequality.
                      var n = Zt(t);
                      null !== n && ac$1(t, n, e.field);
                  }
              }(t, r), r;
          }(t._query, this.jc, this.zc);
          return new Xu(t.firestore, t.converter, function(t, e) {
              // TODO(dimond): validate that orderBy does not list the same key twice.
              var n = t.explicitOrderBy.concat([ e ]);
              return new Wt(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
          }(t._query, e));
      }, n;
  }(Ja$1), nc$1 = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).type = t, i.Hc = n, i.Jc = r, i;
      }
      return __extends$6(n, e), n.prototype._apply = function(t) {
          return new Xu(t.firestore, t.converter, re(t._query, this.Hc, this.Jc));
      }, n;
  }(Ja$1), rc$1 = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).type = t, i.Yc = n, i.Xc = r, i;
      }
      return __extends$6(n, e), n.prototype._apply = function(t) {
          var e = oc$1(t, this.type, this.Yc, this.Xc);
          return new Xu(t.firestore, t.converter, function(t, e) {
              return new Wt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
          }(t._query, e));
      }, n;
  }(Ja$1), ic$1 = /** @class */ function(e) {
      function n(t, n, r) {
          var i = this;
          return (i = e.call(this) || this).type = t, i.Yc = n, i.Xc = r, i;
      }
      return __extends$6(n, e), n.prototype._apply = function(t) {
          var e = oc$1(t, this.type, this.Yc, this.Xc);
          return new Xu(t.firestore, t.converter, function(t, e) {
              return new Wt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
          }(t._query, e));
      }, n;
  }(Ja$1);

  /**
   * Creates a `QueryConstraint` that enforces that documents must contain the
   * specified field and that the value should satisfy the relation constraint
   * provided.
   *
   * @param fieldPath - The path to compare
   * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
   *   "&lt;=", "!=").
   * @param value - The value for comparison
   * @returns The created `Query`.
   */
  /** Helper function to create a bound from a document or fields */
  function oc$1(t, e, n, r) {
      if (n[0] = getModularInstance(n[0]), n[0] instanceof ja$1) return function(t, e, n, r, i) {
          if (!r) throw new D$1(N$1.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
          // Because people expect to continue/end a query at the exact document
          // provided, we need to use the implicit sort order rather than the explicit
          // sort order, because it's guaranteed to contain the document key. That way
          // the position becomes unambiguous and the query continues/ends exactly at
          // the provided document. Without the key (by using the explicit sort
          // orders), multiple documents could match the position, yielding duplicate
          // results.
          for (var o = [], s = 0, u = ee(t); s < u.length; s++) {
              var a = u[s];
              if (a.field.isKeyField()) o.push(mt(e, r.key)); else {
                  var c = r.data.field(a.field);
                  if (rt(c)) throw new D$1(N$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                  if (null === c) {
                      var h = a.field.canonicalString();
                      throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                  }
                  o.push(c);
              }
          }
          return new Bt(o, i);
      }(t._query, t.firestore._databaseId, e, n[0]._document, r);
      var i = Ta$1(t.firestore);
      return function(t, e, n, r, i, o) {
          // Use explicit order by's because it has to match the query the user made
          var s = t.explicitOrderBy;
          if (i.length > s.length) throw new D$1(N$1.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
          for (var u = [], a = 0; a < i.length; a++) {
              var c = i[a];
              if (s[a].field.isKeyField()) {
                  if ("string" != typeof c) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
                  if (!te(t) && -1 !== c.indexOf("/")) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
                  var h = t.path.child(H$1.fromString(c));
                  if (!ct.isDocumentKey(h)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                  var f = new ct(h);
                  u.push(mt(e, f));
              } else {
                  var l = Ra$1(n, r, c);
                  u.push(l);
              }
          }
          return new Bt(u, o);
      }(t._query, t.firestore._databaseId, i, e, n, r);
  }

  function sc$1(t, e, n) {
      if ("string" == typeof (n = getModularInstance(n))) {
          if ("" === n) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
          if (!te(e) && -1 !== n.indexOf("/")) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
          var r = e.path.child(H$1.fromString(n));
          if (!ct.isDocumentKey(r)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
          return mt(t, new ct(r));
      }
      if (n instanceof $u) return mt(t, n._key);
      throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Gu(n) + ".");
  }

  /**
   * Validates that the value passed into a disjunctive filter satisfies all
   * array requirements.
   */ function uc$1(t, e) {
      if (!Array.isArray(t) || 0 === t.length) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
      if (t.length > 10) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
  }

  function ac$1(t, e, n) {
      if (!n.isEqual(e)) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Converts Firestore's internal types to the JavaScript types that we expose
   * to the user.
   *
   * @internal
   */ var cc$1 = /** @class */ function() {
      function t() {}
      return t.prototype.convertValue = function(t, e) {
          switch (void 0 === e && (e = "none"), ht(t)) {
            case 0 /* NullValue */ :
              return null;

            case 1 /* BooleanValue */ :
              return t.booleanValue;

            case 2 /* NumberValue */ :
              return et(t.integerValue || t.doubleValue);

            case 3 /* TimestampValue */ :
              return this.convertTimestamp(t.timestampValue);

            case 4 /* ServerTimestampValue */ :
              return this.convertServerTimestamp(t, e);

            case 5 /* StringValue */ :
              return t.stringValue;

            case 6 /* BlobValue */ :
              return this.convertBytes(nt(t.bytesValue));

            case 7 /* RefValue */ :
              return this.convertReference(t.referenceValue);

            case 8 /* GeoPointValue */ :
              return this.convertGeoPoint(t.geoPointValue);

            case 9 /* ArrayValue */ :
              return this.convertArray(t.arrayValue, e);

            case 10 /* ObjectValue */ :
              return this.convertObject(t.mapValue, e);

            default:
              throw O$1();
          }
      }, t.prototype.convertObject = function(t, e) {
          var n = this, r = {};
          return G(t.fields, (function(t, i) {
              r[t] = n.convertValue(i, e);
          })), r;
      }, t.prototype.convertGeoPoint = function(t) {
          return new ya$1(et(t.latitude), et(t.longitude));
      }, t.prototype.convertArray = function(t, e) {
          var n = this;
          return (t.values || []).map((function(t) {
              return n.convertValue(t, e);
          }));
      }, t.prototype.convertServerTimestamp = function(t, e) {
          switch (e) {
            case "previous":
              var n = it(t);
              return null == n ? null : this.convertValue(n, e);

            case "estimate":
              return this.convertTimestamp(ot(t));

            default:
              return null;
          }
      }, t.prototype.convertTimestamp = function(t) {
          var e = tt(t);
          return new j(e.seconds, e.nanos);
      }, t.prototype.convertDocumentKey = function(t, e) {
          var n = H$1.fromString(t);
          P$1($n(n));
          var r = new Ru(n.get(1), n.get(3)), i = new ct(n.popFirst(5));
          return r.isEqual(e) || 
          // TODO(b/64130202): Somehow support foreign references.
          x$1("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), 
          i;
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Converts custom model object of type T into DocumentData by applying the
   * converter if it exists.
   *
   * This function is used when converting user objects to DocumentData
   * because we want to provide the user with a more specific error message if
   * their set() or fails due to invalid data originating from a toFirestore()
   * call.
   */ function hc$1(t, e, n) {
      // Cast to `any` in order to satisfy the union type constraint on
      // toFirestore().
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
  }

  var fc$1 = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).firestore = t, n;
      }
      return __extends$6(n, e), n.prototype.convertBytes = function(t) {
          return new da$1(t);
      }, n.prototype.convertReference = function(t) {
          var e = this.convertDocumentKey(t, this.firestore._databaseId);
          return new $u(this.firestore, /* converter= */ null, e);
      }, n;
  }(cc$1), lc$1 = /** @class */ function() {
      /** @hideconstructor */
      function t(t, e) {
          this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, 
          this._dataReader = Ta$1(t);
      }
      return t.prototype.set = function(t, e, n) {
          this._verifyNotCommitted();
          var r = dc$1(t, this._firestore), i = hc$1(r.converter, e, n), o = Ea(this._dataReader, "WriteBatch.set", r._key, i, null !== r.converter, n);
          return this._mutations.push(o.toMutation(r._key, De.none())), this;
      }, t.prototype.update = function(t, e, n) {
          for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
          this._verifyNotCommitted();
          var o, s = dc$1(t, this._firestore);
          // For Compat types, we have to "extract" the underlying types before
          // performing validation.
                  return o = "string" == typeof (e = getModularInstance(e)) || e instanceof la$1 ? xa$1(this._dataReader, "WriteBatch.update", s._key, e, n, r) : Ca$1(this._dataReader, "WriteBatch.update", s._key, e), 
          this._mutations.push(o.toMutation(s._key, De.exists(!0))), this;
      }, 
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `WriteBatch` instance. Used for chaining method calls.
       */
      t.prototype.delete = function(t) {
          this._verifyNotCommitted();
          var e = dc$1(t, this._firestore);
          return this._mutations = this._mutations.concat(new je(e._key, De.none())), this;
      }, 
      /**
       * Commits all of the writes in this write batch as a single atomic unit.
       *
       * The result of these writes will only be reflected in document reads that
       * occur after the returned Promise resolves. If the client is offline, the
       * write fails. If you would like to see local modifications or buffer writes
       * until the client is online, use the full Firestore SDK.
       *
       * @returns A Promise resolved once all of the writes in the batch have been
       * successfully written to the backend as an atomic unit (note that it won't
       * resolve while you're offline).
       */
      t.prototype.commit = function() {
          return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
      }, t.prototype._verifyNotCommitted = function() {
          if (this._committed) throw new D$1(N$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
      }, t;
  }();

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A write batch, used to perform multiple writes as a single atomic unit.
   *
   * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
   * provides methods for adding writes to the write batch. None of the writes
   * will be committed (or visible locally) until {@link WriteBatch.commit} is
   * called.
   */ function dc$1(t, e) {
      if ((t = getModularInstance(t)).firestore !== e) throw new D$1(N$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
      return t;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
  // legacy SDK.
  /**
   * A reference to a transaction.
   *
   * The `Transaction` object passed to a transaction's `updateFunction` provides
   * the methods to read and write data within the transaction context. See
   * {@link runTransaction}.
   */ var pc$1 = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).firestore = t, n;
      }
      return __extends$6(n, e), n.prototype.convertBytes = function(t) {
          return new da$1(t);
      }, n.prototype.convertReference = function(t) {
          var e = this.convertDocumentKey(t, this.firestore._databaseId);
          return new $u(this.firestore, /* converter= */ null, e);
      }, n;
  }(cc$1);

  /**
   * Reads the document referred to by this `DocumentReference` from cache.
   * Returns an error if the document is not currently cached.
   *
   * @returns A Promise resolved with a `DocumentSnapshot` containing the
   * current document contents.
   */ function yc$1(t, e, n) {
      for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
      t = zu(t, $u);
      var o = zu(t.firestore, ua$1), s = Ta$1(o);
      return mc$1(o, [ ("string" == typeof (
      // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      e = getModularInstance(e)) || e instanceof la$1 ? xa$1(s, "updateDoc", t._key, e, n, r) : Ca$1(s, "updateDoc", t._key, e)).toMutation(t._key, De.exists(!0)) ]);
  }

  /**
   * Deletes the document referred to by the specified `DocumentReference`.
   *
   * @param reference - A reference to the document to delete.
   * @returns A Promise resolved once the document has been successfully
   * deleted from the backend (note that it won't resolve while you're offline).
   */ function vc$1(t) {
      for (var e, i, o, s = [], u = 1; u < arguments.length; u++) s[u - 1] = arguments[u];
      t = getModularInstance(t);
      var a = {
          includeMetadataChanges: !1
      }, c = 0;
      "object" != typeof s[c] || ia$1(s[c]) || (a = s[c], c++);
      var h, f, d, p = {
          includeMetadataChanges: a.includeMetadataChanges
      };
      if (ia$1(s[c])) {
          var y = s[c];
          s[c] = null === (e = y.next) || void 0 === e ? void 0 : e.bind(y), s[c + 1] = null === (i = y.error) || void 0 === i ? void 0 : i.bind(y), 
          s[c + 2] = null === (o = y.complete) || void 0 === o ? void 0 : o.bind(y);
      }
      if (t instanceof $u) f = zu(t.firestore, ua$1), d = Yt(t._key.path), h = {
          next: function(e) {
              s[c] && s[c](gc$1(f, t, e));
          },
          error: s[c + 1],
          complete: s[c + 2]
      }; else {
          var v = zu(t, Xu);
          f = zu(v.firestore, ua$1), d = v._query;
          var m = new pc$1(f);
          h = {
              next: function(t) {
                  s[c] && s[c](new Ha$1(f, m, v, t));
              },
              error: s[c + 1],
              complete: s[c + 2]
          }, Xa$1(t._query);
      }
      return function(t, e, i, o) {
          var s = this, u = new yu(o), a = new Is(e, u, i);
          return t.asyncQueue.enqueueAndForget((function() {
              return __awaiter$6(s, void 0, void 0, (function() {
                  var e;
                  return __generator$6(this, (function(n) {
                      switch (n.label) {
                        case 0:
                          return e = vs, [ 4 /*yield*/ , Au(t) ];

                        case 1:
                          return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), a ]) ];
                      }
                  }));
              }));
          })), function() {
              u.Wo(), t.asyncQueue.enqueueAndForget((function() {
                  return __awaiter$6(s, void 0, void 0, (function() {
                      var e;
                      return __generator$6(this, (function(n) {
                          switch (n.label) {
                            case 0:
                              return e = ms, [ 4 /*yield*/ , Au(t) ];

                            case 1:
                              return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), a ]) ];
                          }
                      }));
                  }));
              }));
          };
      }(aa$1(f), d, p, h);
  }

  /**
   * Locally writes `mutations` on the async queue.
   * @internal
   */ function mc$1(t, e) {
      return function(t, e) {
          var i = this, o = new br;
          return t.asyncQueue.enqueueAndForget((function() {
              return __awaiter$6(i, void 0, void 0, (function() {
                  var n;
                  return __generator$6(this, (function(r) {
                      switch (r.label) {
                        case 0:
                          return n = Ps, [ 4 /*yield*/ , Du(t) ];

                        case 1:
                          return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), e, o ]) ];
                      }
                  }));
              }));
          })), o.promise;
      }(aa$1(t), e);
  }

  /**
   * Converts a ViewSnapshot that contains the single document specified by `ref`
   * to a DocumentSnapshot.
   */ function gc$1(t, e, n) {
      var r = n.docs.get(e._key), i = new pc$1(t);
      return new za$1(t, i, e._key, r, new Ga$1(n.hasPendingWrites, n.fromCache), e.converter);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A reference to a transaction.
   *
   * The `Transaction` object passed to a transaction's `updateFunction` provides
   * the methods to read and write data within the transaction context. See
   * {@link runTransaction}.
   */ var wc$1 = /** @class */ function(e) {
      // This class implements the same logic as the Transaction API in the Lite SDK
      // but is subclassed in order to return its own DocumentSnapshot types.
      /** @hideconstructor */
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t, n) || this)._firestore = t, r;
      }
      /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */    return __extends$6(n, e), n.prototype.get = function(t) {
          var n = this, r = dc$1(t, this._firestore), i = new pc$1(this._firestore);
          return e.prototype.get.call(this, t).then((function(t) {
              return new za$1(n._firestore, i, r._key, t._document, new Ga$1(
              /* hasPendingWrites= */ !1, 
              /* fromCache= */ !1), r.converter);
          }));
      }, n;
  }(/** @class */ function() {
      /** @hideconstructor */
      function t(t, e) {
          this._firestore = t, this._transaction = e, this._dataReader = Ta$1(t)
          /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */;
      }
      return t.prototype.get = function(t) {
          var e = this, n = dc$1(t, this._firestore), r = new fc$1(this._firestore);
          return this._transaction.lookup([ n._key ]).then((function(t) {
              if (!t || 1 !== t.length) return O$1();
              var i = t[0];
              if (i.isFoundDocument()) return new ja$1(e._firestore, r, i.key, i, n.converter);
              if (i.isNoDocument()) return new ja$1(e._firestore, r, n._key, null, n.converter);
              throw O$1();
          }));
      }, t.prototype.set = function(t, e, n) {
          var r = dc$1(t, this._firestore), i = hc$1(r.converter, e, n), o = Ea(this._dataReader, "Transaction.set", r._key, i, null !== r.converter, n);
          return this._transaction.set(r._key, o), this;
      }, t.prototype.update = function(t, e, n) {
          for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
          var o, s = dc$1(t, this._firestore);
          // For Compat types, we have to "extract" the underlying types before
          // performing validation.
                  return o = "string" == typeof (e = getModularInstance(e)) || e instanceof la$1 ? xa$1(this._dataReader, "Transaction.update", s._key, e, n, r) : Ca$1(this._dataReader, "Transaction.update", s._key, e), 
          this._transaction.update(s._key, o), this;
      }, 
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `Transaction` instance. Used for chaining method calls.
       */
      t.prototype.delete = function(t) {
          var e = dc$1(t, this._firestore);
          return this._transaction.delete(e._key), this;
      }, t;
  }());

  /**
   * Executes the given `updateFunction` and then attempts to commit the changes
   * applied within the transaction. If any document read within the transaction
   * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
   * commit after 5 attempts, the transaction fails.
   *
   * The maximum number of writes allowed in a single transaction is 500.
   *
   * @param firestore - A reference to the Firestore database to run this
   * transaction against.
   * @param updateFunction - The function to execute within the transaction
   * context.
   * @returns If the transaction completed successfully or was explicitly aborted
   * (the `updateFunction` returned a failed promise), the promise returned by the
   * `updateFunction `is returned here. Otherwise, if the transaction failed, a
   * rejected promise with the corresponding failure error is returned.
   */
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Helper function to assert Uint8Array is available at runtime. */ function bc$1() {
      if ("undefined" == typeof Uint8Array) throw new D$1(N$1.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
  }

  /** Helper function to assert Base64 functions are available at runtime. */ function Ic$1() {
      if ("undefined" == typeof atob) throw new D$1(N$1.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
  }

  /** Immutable class holding a blob (binary data) */ var Tc$1 = /** @class */ function() {
      function t(t) {
          this._delegate = t;
      }
      return t.fromBase64String = function(e) {
          return Ic$1(), new t(da$1.fromBase64String(e));
      }, t.fromUint8Array = function(e) {
          return bc$1(), new t(da$1.fromUint8Array(e));
      }, t.prototype.toBase64 = function() {
          return Ic$1(), this._delegate.toBase64();
      }, t.prototype.toUint8Array = function() {
          return bc$1(), this._delegate.toUint8Array();
      }, t.prototype.isEqual = function(t) {
          return this._delegate.isEqual(t._delegate);
      }, t.prototype.toString = function() {
          return "Blob(base64: " + this.toBase64() + ")";
      }, t;
  }(), Ec$1 = /** @class */ function() {
      function t() {}
      return t.prototype.enableIndexedDbPersistence = function(t, e) {
          return function(t, e) {
              fa$1(t = zu(t, ua$1));
              var n = aa$1(t), r = t._freezeSettings(), i = new du;
              return ha$1(n, i, new fu(i, r.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
          }(t._delegate, {
              forceOwnership: e
          });
      }, t.prototype.enableMultiTabIndexedDbPersistence = function(t) {
          return function(t) {
              fa$1(t = zu(t, ua$1));
              var e = aa$1(t), n = t._freezeSettings(), r = new du;
              return ha$1(e, r, new lu(r, n.cacheSizeBytes));
          }(t._delegate);
      }, t.prototype.clearIndexedDbPersistence = function(t) {
          return function(t) {
              var e = this;
              if (t._initialized && !t._terminated) throw new D$1(N$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
              var i = new br;
              return t._queue.enqueueAndForgetEvenWhileRestricted((function() {
                  return __awaiter$6(e, void 0, void 0, (function() {
                      var e;
                      return __generator$6(this, (function(o) {
                          switch (o.label) {
                            case 0:
                              return o.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t) {
                                  return __awaiter$6(this, void 0, void 0, (function() {
                                      var e;
                                      return __generator$6(this, (function(n) {
                                          switch (n.label) {
                                            case 0:
                                              return Er.yt() ? (e = t + "main", [ 4 /*yield*/ , Er.delete(e) ]) : [ 2 /*return*/ , Promise.resolve() ];

                                            case 1:
                                              return n.sent(), [ 2 /*return*/ ];
                                          }
                                      }));
                                  }));
                              }(Oi(t._databaseId, t._persistenceKey)) ];

                            case 1:
                              return o.sent(), i.resolve(), [ 3 /*break*/ , 3 ];

                            case 2:
                              return e = o.sent(), i.reject(e), [ 3 /*break*/ , 3 ];

                            case 3:
                              return [ 2 /*return*/ ];
                          }
                      }));
                  }));
              })), i.promise
              /**
   * Waits until all currently pending writes for the active user have been
   * acknowledged by the backend.
   *
   * The returned Promise resolves immediately if there are no outstanding writes.
   * Otherwise, the Promise waits for all previously issued writes (including
   * those written in a previous app session), but it does not wait for writes
   * that were added after the function is called. If you want to wait for
   * additional writes, call `waitForPendingWrites()` again.
   *
   * Any outstanding `waitForPendingWrites()` Promises are rejected during user
   * changes.
   *
   * @returns A Promise which resolves when all currently pending writes have been
   * acknowledged by the backend.
   */;
          }(t._delegate);
      }, t;
  }(), _c = /** @class */ function() {
      function t(t, e, n) {
          var r = this;
          this._delegate = e, this.Zc = n, this.INTERNAL = {
              delete: function() {
                  return r.terminate();
              }
          }, t instanceof Ru || (this.tu = t);
      }
      return Object.defineProperty(t.prototype, "_databaseId", {
          get: function() {
              return this._delegate._databaseId;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.settings = function(t) {
          var e = this._delegate._getSettings();
          t.merge || e.host === t.host || R$1("You are overriding the original host. If you did not intend to override your settings, use {merge: true}."), 
          t.merge && 
          // Remove the property from the settings once the merge is completed
          delete (t = Object.assign(Object.assign({}, e), t)).merge, this._delegate._setSettings(t);
      }, t.prototype.useEmulator = function(t, e, n) {
          void 0 === n && (n = {}), function(t, e, n, r) {
              var i;
              void 0 === r && (r = {});
              var o = (t = zu(t, Yu))._getSettings();
              if ("firestore.googleapis.com" !== o.host && o.host !== e && R$1("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
              t._setSettings(Object.assign(Object.assign({}, o), {
                  host: e + ":" + n,
                  ssl: !1
              })), r.mockUserToken) {
                  var s, u;
                  if ("string" == typeof r.mockUserToken) s = r.mockUserToken, u = fo.MOCK_USER; else {
                      // Let createMockUserToken validate first (catches common mistakes like
                      // invalid field "uid" and missing field "sub" / "user_id".)
                      s = createMockUserToken(r.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
                      var a = r.mockUserToken.sub || r.mockUserToken.user_id;
                      if (!a) throw new D$1(N$1.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
                      u = new fo(a);
                  }
                  t._credentials = new Fu(new Ou(s, u));
              }
          }(this._delegate, t, e, n);
      }, t.prototype.enableNetwork = function() {
          return function(t) {
              var e = this;
              return t.asyncQueue.enqueue((function() {
                  return __awaiter$6(e, void 0, void 0, (function() {
                      var e, n;
                      return __generator$6(this, (function(r) {
                          switch (r.label) {
                            case 0:
                              return [ 4 /*yield*/ , _u(t) ];

                            case 1:
                              return e = r.sent(), [ 4 /*yield*/ , Nu(t) ];

                            case 2:
                              return n = r.sent(), [ 2 /*return*/ , (e.setNetworkEnabled(!0), function(t) {
                                  var e = F$1(t);
                                  return e.Or.delete(0 /* UserDisabled */), Vo(e);
                              }(n)) ];
                          }
                      }));
                  }));
              }));
          }
          /** Disables the network connection. Pending operations will not complete. */ (aa$1(zu(this._delegate, ua$1)));
      }, t.prototype.disableNetwork = function() {
          return function(t) {
              var e = this;
              return t.asyncQueue.enqueue((function() {
                  return __awaiter$6(e, void 0, void 0, (function() {
                      var e, i;
                      return __generator$6(this, (function(o) {
                          switch (o.label) {
                            case 0:
                              return [ 4 /*yield*/ , _u(t) ];

                            case 1:
                              return e = o.sent(), [ 4 /*yield*/ , Nu(t) ];

                            case 2:
                              return i = o.sent(), [ 2 /*return*/ , (e.setNetworkEnabled(!1), function(t) {
                                  return __awaiter$6(this, void 0, void 0, (function() {
                                      var e;
                                      return __generator$6(this, (function(n) {
                                          switch (n.label) {
                                            case 0:
                                              return (e = F$1(t)).Or.add(0 /* UserDisabled */), [ 4 /*yield*/ , qo(e) ];

                                            case 1:
                                              return n.sent(), 
                                              // Set the OnlineState to Offline so get()s return from cache, etc.
                                              e.Br.set("Offline" /* Offline */), [ 2 /*return*/ ];
                                          }
                                      }));
                                  }));
                              }(i)) ];
                          }
                      }));
                  }));
              }));
          }
          /**
   * Returns a Promise that resolves when all writes that were pending at the time
   * this method was called received server acknowledgement. An acknowledgement
   * can be either acceptance or rejection.
   */ (aa$1(zu(this._delegate, ua$1)));
      }, t.prototype.enablePersistence = function(t) {
          var e = !1, n = !1;
          return t && ju("synchronizeTabs", e = !!t.synchronizeTabs, "experimentalForceOwningTab", n = !!t.experimentalForceOwningTab), 
          e ? this.Zc.enableMultiTabIndexedDbPersistence(this) : this.Zc.enableIndexedDbPersistence(this, n);
      }, t.prototype.clearPersistence = function() {
          return this.Zc.clearIndexedDbPersistence(this);
      }, t.prototype.terminate = function() {
          return this.tu && (this.tu._removeServiceInstance("firestore"), this.tu._removeServiceInstance("firestore-exp")), 
          this._delegate._delete();
      }, t.prototype.waitForPendingWrites = function() {
          return function(t) {
              var e = this, i = new br;
              return t.asyncQueue.enqueueAndForget((function() {
                  return __awaiter$6(e, void 0, void 0, (function() {
                      var e;
                      return __generator$6(this, (function(n) {
                          switch (n.label) {
                            case 0:
                              return e = Bs, [ 4 /*yield*/ , Du(t) ];

                            case 1:
                              return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), i ]) ];
                          }
                      }));
                  }));
              })), i.promise;
          }(aa$1(zu(this._delegate, ua$1)));
      }, t.prototype.onSnapshotsInSync = function(t) {
          return function(t, e) {
              return function(t, e) {
                  var i = this, o = new yu(e);
                  return t.asyncQueue.enqueueAndForget((function() {
                      return __awaiter$6(i, void 0, void 0, (function() {
                          var e;
                          return __generator$6(this, (function(n) {
                              switch (n.label) {
                                case 0:
                                  return e = function(t, e) {
                                      F$1(t).Gr.add(e), 
                                      // Immediately fire an initial event, indicating all existing listeners
                                      // are in-sync.
                                      e.next();
                                  }, [ 4 /*yield*/ , Au(t) ];

                                case 1:
                                  return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), o ]) ];
                              }
                          }));
                      }));
                  })), function() {
                      o.Wo(), t.asyncQueue.enqueueAndForget((function() {
                          return __awaiter$6(i, void 0, void 0, (function() {
                              var e;
                              return __generator$6(this, (function(n) {
                                  switch (n.label) {
                                    case 0:
                                      return e = function(t, e) {
                                          F$1(t).Gr.delete(e);
                                      }, [ 4 /*yield*/ , Au(t) ];

                                    case 1:
                                      return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), o ]) ];
                                  }
                              }));
                          }));
                      }));
                  }
                  /**
   * Takes an updateFunction in which a set of reads and writes can be performed
   * atomically. In the updateFunction, the client can read and write values
   * using the supplied transaction object. After the updateFunction, all
   * changes will be committed. If a retryable error occurs (ex: some other
   * client has changed any of the data referenced), then the updateFunction
   * will be called again after a backoff. If the updateFunction still fails
   * after all retries, then the transaction will be rejected.
   *
   * The transaction object passed to the updateFunction contains methods for
   * accessing documents and collections. Unlike other datastore access, data
   * accessed with the transaction will not reflect local changes that have not
   * been committed. For this reason, it is required that all reads are
   * performed before any writes. Transactions must be performed while online.
   */;
              }(aa$1(t = zu(t, ua$1)), ia$1(e) ? e : {
                  next: e
              });
          }(this._delegate, t);
      }, Object.defineProperty(t.prototype, "app", {
          get: function() {
              if (!this.tu) throw new D$1(N$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
              return this.tu;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.collection = function(t) {
          try {
              return new qc$1(this, Zu(this._delegate, t));
          } catch (t) {
              throw xc$1(t, "collection()", "Firestore.collection()");
          }
      }, t.prototype.doc = function(t) {
          try {
              return new Cc$1(this, ta$1(this._delegate, t));
          } catch (t) {
              throw xc$1(t, "doc()", "Firestore.doc()");
          }
      }, t.prototype.collectionGroup = function(t) {
          try {
              return new Fc$1(this, function(t, e) {
                  if (t = zu(t, Yu), Uu("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
                  return new Xu(t, 
                  /* converter= */ null, 
                  /**
   * Creates a new Query for a collection group query that matches all documents
   * within the provided collection group.
   */
                  function(t) {
                      return new Wt(H$1.emptyPath(), t);
                  }(e));
              }(this._delegate, t));
          } catch (t) {
              throw xc$1(t, "collectionGroup()", "Firestore.collectionGroup()");
          }
      }, t.prototype.runTransaction = function(t) {
          var e = this;
          return function(t, e) {
              return function(t, e) {
                  var i = this, o = new br;
                  return t.asyncQueue.enqueueAndForget((function() {
                      return __awaiter$6(i, void 0, void 0, (function() {
                          var n;
                          return __generator$6(this, (function(r) {
                              switch (r.label) {
                                case 0:
                                  return [ 4 /*yield*/ , function(t) {
                                      return Eu(t).then((function(t) {
                                          return t.datastore;
                                      }));
                                  }(t) ];

                                case 1:
                                  return n = r.sent(), new gu(t.asyncQueue, n, e, o).run(), [ 2 /*return*/ ];
                              }
                          }));
                      }));
                  })), o.promise;
              }(aa$1(t), (function(n) {
                  return e(new wc$1(t, n));
              }));
          }(this._delegate, (function(n) {
              return t(new Dc$1(e, n));
          }));
      }, t.prototype.batch = function() {
          var t = this;
          return aa$1(this._delegate), new Ac$1(new lc$1(this._delegate, (function(e) {
              return mc$1(t._delegate, e);
          })));
      }, t.prototype.loadBundle = function(t) {
          throw new D$1(N$1.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
      }, t.prototype.namedQuery = function(t) {
          throw new D$1(N$1.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
      }, t;
  }(), Sc$1 = /** @class */ function(e) {
      function n(t) {
          var n = this;
          return (n = e.call(this) || this).firestore = t, n;
      }
      return __extends$6(n, e), n.prototype.convertBytes = function(t) {
          return new Tc$1(new da$1(t));
      }, n.prototype.convertReference = function(t) {
          var e = this.convertDocumentKey(t, this.firestore._databaseId);
          return Cc$1.eu(e, this.firestore, /* converter= */ null);
      }, n;
  }(cc$1);

  /**
   * The persistence provider included with the full Firestore SDK.
   */ function Nc$1(t) {
      var e;
      e = t, A$1.setLogLevel(e);
  }

  /**
   * A reference to a transaction.
   */ var Dc$1 = /** @class */ function() {
      function t(t, e) {
          this._firestore = t, this._delegate = e, this._userDataWriter = new Sc$1(t);
      }
      return t.prototype.get = function(t) {
          var e = this, n = Uc$1(t);
          return this._delegate.get(n).then((function(t) {
              return new Oc$1(e._firestore, new za$1(e._firestore._delegate, e._userDataWriter, t._key, t._document, t.metadata, n.converter));
          }));
      }, t.prototype.set = function(t, e, n) {
          var r = Uc$1(t);
          return n ? (Bu("Transaction.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), 
          this;
      }, t.prototype.update = function(t, n, r) {
          for (var i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
          var u = Uc$1(t);
          return 2 === arguments.length ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray$5([ u, n, r ], o)), 
          this;
      }, t.prototype.delete = function(t) {
          var e = Uc$1(t);
          return this._delegate.delete(e), this;
      }, t;
  }(), Ac$1 = /** @class */ function() {
      function t(t) {
          this._delegate = t;
      }
      return t.prototype.set = function(t, e, n) {
          var r = Uc$1(t);
          return n ? (Bu("WriteBatch.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), 
          this;
      }, t.prototype.update = function(t, n, r) {
          for (var i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
          var u = Uc$1(t);
          return 2 === arguments.length ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray$5([ u, n, r ], o)), 
          this;
      }, t.prototype.delete = function(t) {
          var e = Uc$1(t);
          return this._delegate.delete(e), this;
      }, t.prototype.commit = function() {
          return this._delegate.commit();
      }, t;
  }(), kc$1 = /** @class */ function() {
      function t(t, e, n) {
          this._firestore = t, this._userDataWriter = e, this._delegate = n;
      }
      return t.prototype.fromFirestore = function(t, e) {
          var n = new Wa$1(this._firestore._delegate, this._userDataWriter, t._key, t._document, t.metadata, 
          /* converter= */ null);
          return this._delegate.fromFirestore(new Pc$1(this._firestore, n), null != e ? e : {});
      }, t.prototype.toFirestore = function(t, e) {
          return e ? this._delegate.toFirestore(t, e) : this._delegate.toFirestore(t);
      }, 
      // Use the same instance of `FirestoreDataConverter` for the given instances
      // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
      // compare equal for two objects created with the same converter instance.
      t.nu = function(e, n) {
          var r = t.su, i = r.get(e);
          i || (i = new WeakMap, r.set(e, i));
          var o = i.get(n);
          return o || (o = new t(e, new Sc$1(e), n), i.set(n, o)), o;
      }, t;
  }();

  kc$1.su = new WeakMap;

  /**
   * A reference to a particular document in a collection in the database.
   */
  var Cc$1 = /** @class */ function() {
      function t(t, e) {
          this.firestore = t, this._delegate = e, this._userDataWriter = new Sc$1(t);
      }
      return t.iu = function(e, n, r) {
          if (e.length % 2 != 0) throw new D$1(N$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e.canonicalString() + " has " + e.length);
          return new t(n, new $u(n._delegate, r, new ct(e)));
      }, t.eu = function(e, n, r) {
          return new t(n, new $u(n._delegate, r, e));
      }, Object.defineProperty(t.prototype, "id", {
          get: function() {
              return this._delegate.id;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "parent", {
          get: function() {
              return new qc$1(this.firestore, this._delegate.parent);
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "path", {
          get: function() {
              return this._delegate.path;
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.collection = function(t) {
          try {
              return new qc$1(this.firestore, Zu(this._delegate, t));
          } catch (t) {
              throw xc$1(t, "collection()", "DocumentReference.collection()");
          }
      }, t.prototype.isEqual = function(t) {
          return (t = getModularInstance(t)) instanceof $u && ea$1(this._delegate, t);
      }, t.prototype.set = function(t, e) {
          e = Bu("DocumentReference.set", e);
          try {
              return function(t, e, n) {
                  t = zu(t, $u);
                  var r = zu(t.firestore, ua$1), i = hc$1(t.converter, e, n);
                  return mc$1(r, [ Ea(Ta$1(r), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, De.none()) ]);
              }(this._delegate, t, e);
          } catch (t) {
              throw xc$1(t, "setDoc()", "DocumentReference.set()");
          }
      }, t.prototype.update = function(t, n) {
          for (var r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
          try {
              return 1 === arguments.length ? yc$1(this._delegate, t) : yc$1.apply(void 0, __spreadArray$5([ this._delegate, t, n ], r));
          } catch (t) {
              throw xc$1(t, "updateDoc()", "DocumentReference.update()");
          }
      }, t.prototype.delete = function() {
          return mc$1(zu((t = this._delegate).firestore, ua$1), [ new je(t._key, De.none()) ]);
          var t;
          /**
   * Add a new document to specified `CollectionReference` with the given data,
   * assigning it a document ID automatically.
   *
   * @param reference - A reference to the collection to add this document to.
   * @param data - An Object containing the data for the new document.
   * @returns A Promise resolved with a `DocumentReference` pointing to the
   * newly created document after it has been written to the backend (Note that it
   * won't resolve while you're offline).
   */    }, t.prototype.onSnapshot = function() {
          for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          var r = Rc$1(e), i = Lc$1(e, (function(e) {
              return new Oc$1(t.firestore, new za$1(t.firestore._delegate, t._userDataWriter, e._key, e._document, e.metadata, t._delegate.converter));
          }));
          return vc$1(this._delegate, r, i);
      }, t.prototype.get = function(t) {
          var e = this;
          return ("cache" === (null == t ? void 0 : t.source) ? function(t) {
              t = zu(t, $u);
              var e = zu(t.firestore, ua$1), i = aa$1(e), o = new pc$1(e);
              return function(t, e) {
                  var i = this, o = new br;
                  return t.asyncQueue.enqueueAndForget((function() {
                      return __awaiter$6(i, void 0, void 0, (function() {
                          var i;
                          return __generator$6(this, (function(s) {
                              switch (s.label) {
                                case 0:
                                  return i = function(t, e, i) {
                                      return __awaiter$6(this, void 0, void 0, (function() {
                                          var n, o;
                                          return __generator$6(this, (function(r) {
                                              switch (r.label) {
                                                case 0:
                                                  return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t, e) {
                                                      var n = F$1(t);
                                                      return n.persistence.runTransaction("read document", "readonly", (function(t) {
                                                          return n.Mn.mn(t, e);
                                                      }));
                                                  }(t, e) ];

                                                case 1:
                                                  return (o = r.sent()).isFoundDocument() ? i.resolve(o) : o.isNoDocument() ? i.resolve(null) : i.reject(new D$1(N$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), 
                                                  [ 3 /*break*/ , 3 ];

                                                case 2:
                                                  return n = r.sent(), o = hs(n, "Failed to get document '" + e + " from cache"), 
                                                  i.reject(o), [ 3 /*break*/ , 3 ];

                                                case 3:
                                                  return [ 2 /*return*/ ];
                                              }
                                          }));
                                      }));
                                  }, [ 4 /*yield*/ , Su(t) ];

                                case 1:
                                  return [ 2 /*return*/ , i.apply(void 0, [ s.sent(), e, o ]) ];
                              }
                          }));
                      }));
                  })), o.promise;
              }(i, t._key).then((function(n) {
                  return new za$1(e, o, t._key, n, new Ga$1(null !== n && n.hasLocalMutations, 
                  /* fromCache= */ !0), t.converter);
              }));
          }(this._delegate) : "server" === (null == t ? void 0 : t.source) ? function(t) {
              t = zu(t, $u);
              var e = zu(t.firestore, ua$1);
              return ku(aa$1(e), t._key, {
                  source: "server"
              }).then((function(n) {
                  return gc$1(e, t, n);
              }));
          }(this._delegate) : function(t) {
              t = zu(t, $u);
              var e = zu(t.firestore, ua$1);
              return ku(aa$1(e), t._key).then((function(n) {
                  return gc$1(e, t, n);
              }));
          }(this._delegate)).then((function(t) {
              return new Oc$1(e.firestore, new za$1(e.firestore._delegate, e._userDataWriter, t._key, t._document, t.metadata, e._delegate.converter));
          }));
      }, t.prototype.withConverter = function(e) {
          return new t(this.firestore, e ? this._delegate.withConverter(kc$1.nu(this.firestore, e)) : this._delegate.withConverter(null));
      }, t;
  }();

  /**
   * Replaces the function name in an error thrown by the firestore-exp API
   * with the function names used in the classic API.
   */ function xc$1(t, e, n) {
      return t.message = t.message.replace(e, n), t
      /**
   * Iterates the list of arguments from an `onSnapshot` call and returns the
   * first argument that may be an `SnapshotListenOptions` object. Returns an
   * empty object if none is found.
   */;
  }

  function Rc$1(t) {
      for (var e = 0, n = t; e < n.length; e++) {
          var r = n[e];
          if ("object" == typeof r && !ia$1(r)) return r;
      }
      return {};
  }

  /**
   * Creates an observer that can be passed to the firestore-exp SDK. The
   * observer converts all observed values into the format expected by the classic
   * SDK.
   *
   * @param args - The list of arguments from an `onSnapshot` call.
   * @param wrapper - The function that converts the firestore-exp type into the
   * type used by this shim.
   */ function Lc$1(t, e) {
      var n, r, i;
      return {
          next: function(t) {
              i.next && i.next(e(t));
          },
          error: null === (n = (i = ia$1(t[0]) ? t[0] : ia$1(t[1]) ? t[1] : "function" == typeof t[0] ? {
              next: t[0],
              error: t[1],
              complete: t[2]
          } : {
              next: t[1],
              error: t[2],
              complete: t[3]
          }).error) || void 0 === n ? void 0 : n.bind(i),
          complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
      };
  }

  var Oc$1 = /** @class */ function() {
      function t(t, e) {
          this._firestore = t, this._delegate = e;
      }
      return Object.defineProperty(t.prototype, "ref", {
          get: function() {
              return new Cc$1(this._firestore, this._delegate.ref);
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "id", {
          get: function() {
              return this._delegate.id;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "metadata", {
          get: function() {
              return this._delegate.metadata;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "exists", {
          get: function() {
              return this._delegate.exists();
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.data = function(t) {
          return this._delegate.data(t);
      }, t.prototype.get = function(t, e) {
          return this._delegate.get(t, e);
      }, t.prototype.isEqual = function(t) {
          return $a$1(this._delegate, t._delegate);
      }, t;
  }(), Pc$1 = /** @class */ function(e) {
      function n() {
          return null !== e && e.apply(this, arguments) || this;
      }
      return __extends$6(n, e), n.prototype.data = function(t) {
          return this._delegate.data(t);
      }, n;
  }(Oc$1), Fc$1 = /** @class */ function() {
      function t(t, e) {
          this.firestore = t, this._delegate = e, this._userDataWriter = new Sc$1(t);
      }
      return t.prototype.where = function(e, n, r) {
          try {
              // The "as string" cast is a little bit of a hack. `where` accepts the
              // FieldPath Compat type as input, but is not typed as such in order to
              // not expose this via our public typings file.
              return new t(this.firestore, Za$1(this._delegate, function(t, e, n) {
                  var r = e, i = Qa$1("where", t);
                  return new tc$1(i, r, n);
              }(e, n, r)));
          } catch (e) {
              throw xc$1(e, /(orderBy|where)\(\)/, "Query.$1()");
          }
      }, t.prototype.orderBy = function(e, n) {
          try {
              // The "as string" cast is a little bit of a hack. `orderBy` accepts the
              // FieldPath Compat type as input, but is not typed as such in order to
              // not expose this via our public typings file.
              return new t(this.firestore, Za$1(this._delegate, function(t, e) {
                  void 0 === e && (e = "asc");
                  var n = e, r = Qa$1("orderBy", t);
                  return new ec$1(r, n);
              }(e, n)));
          } catch (e) {
              throw xc$1(e, /(orderBy|where)\(\)/, "Query.$1()");
          }
      }, t.prototype.limit = function(e) {
          try {
              return new t(this.firestore, Za$1(this._delegate, function(t) {
                  return Wu("limit", t), new nc$1("limit", t, "F" /* First */);
              }(e)));
          } catch (e) {
              throw xc$1(e, "limit()", "Query.limit()");
          }
      }, t.prototype.limitToLast = function(e) {
          try {
              return new t(this.firestore, Za$1(this._delegate, function(t) {
                  return Wu("limitToLast", t), new nc$1("limitToLast", t, "L" /* Last */);
              }(e)));
          } catch (e) {
              throw xc$1(e, "limitToLast()", "Query.limitToLast()");
          }
      }, t.prototype.startAt = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          try {
              return new t(this.firestore, Za$1(this._delegate, function() {
                  for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                  return new rc$1("startAt", t, /*before=*/ !0);
              }.apply(void 0, e)));
          } catch (e) {
              throw xc$1(e, "startAt()", "Query.startAt()");
          }
      }, t.prototype.startAfter = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          try {
              return new t(this.firestore, Za$1(this._delegate, function() {
                  for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                  return new rc$1("startAfter", t, 
                  /*before=*/ !1);
              }.apply(void 0, e)));
          } catch (e) {
              throw xc$1(e, "startAfter()", "Query.startAfter()");
          }
      }, t.prototype.endBefore = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          try {
              return new t(this.firestore, Za$1(this._delegate, function() {
                  for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                  return new ic$1("endBefore", t, /*before=*/ !0);
              }.apply(void 0, e)));
          } catch (e) {
              throw xc$1(e, "endBefore()", "Query.endBefore()");
          }
      }, t.prototype.endAt = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          try {
              return new t(this.firestore, Za$1(this._delegate, function() {
                  for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                  return new ic$1("endAt", t, /*before=*/ !1);
              }.apply(void 0, e)));
          } catch (e) {
              throw xc$1(e, "endAt()", "Query.endAt()");
          }
      }, t.prototype.isEqual = function(t) {
          return na$1(this._delegate, t._delegate);
      }, t.prototype.get = function(t) {
          var e = this;
          return ("cache" === (null == t ? void 0 : t.source) ? 
          /**
       * Executes the query and returns the results as a `QuerySnapshot` from cache.
       * Returns an error if the document is not currently cached.
       *
       * @returns A Promise that will be resolved with the results of the query.
       */
          function(t) {
              t = zu(t, Xu);
              var e = zu(t.firestore, ua$1), i = aa$1(e), o = new pc$1(e);
              return function(t, e) {
                  var i = this, o = new br;
                  return t.asyncQueue.enqueueAndForget((function() {
                      return __awaiter$6(i, void 0, void 0, (function() {
                          var i;
                          return __generator$6(this, (function(s) {
                              switch (s.label) {
                                case 0:
                                  return i = function(t, e, i) {
                                      return __awaiter$6(this, void 0, void 0, (function() {
                                          var n, o, s, u, a;
                                          return __generator$6(this, (function(r) {
                                              switch (r.label) {
                                                case 0:
                                                  return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , Yi(t, e, 
                                                  /* usePreviousResults= */ !0) ];

                                                case 1:
                                                  return a = r.sent(), n = new As(e, a.Bn), o = n._o(a.documents), s = n.applyChanges(o, 
                                                  /* updateLimboDocuments= */ !1), i.resolve(s.snapshot), [ 3 /*break*/ , 3 ];

                                                case 2:
                                                  return u = r.sent(), a = hs(u, "Failed to execute query '" + e + " against cache"), 
                                                  i.reject(a), [ 3 /*break*/ , 3 ];

                                                case 3:
                                                  return [ 2 /*return*/ ];
                                              }
                                          }));
                                      }));
                                  }, [ 4 /*yield*/ , Su(t) ];

                                case 1:
                                  return [ 2 /*return*/ , i.apply(void 0, [ s.sent(), e, o ]) ];
                              }
                          }));
                      }));
                  })), o.promise;
              }(i, t._query).then((function(n) {
                  return new Ha$1(e, o, t, n);
              }));
          }(this._delegate) : "server" === (null == t ? void 0 : t.source) ? function(t) {
              t = zu(t, Xu);
              var e = zu(t.firestore, ua$1), n = aa$1(e), r = new pc$1(e);
              return Cu(n, t._query, {
                  source: "server"
              }).then((function(n) {
                  return new Ha$1(e, r, t, n);
              }));
          }(this._delegate) : function(t) {
              t = zu(t, Xu);
              var e = zu(t.firestore, ua$1), n = aa$1(e), r = new pc$1(e);
              return Xa$1(t._query), Cu(n, t._query).then((function(n) {
                  return new Ha$1(e, r, t, n);
              }));
          }(this._delegate)).then((function(t) {
              return new Vc$1(e.firestore, new Ha$1(e.firestore._delegate, e._userDataWriter, e._delegate, t._snapshot));
          }));
      }, t.prototype.onSnapshot = function() {
          for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          var r = Rc$1(e), i = Lc$1(e, (function(e) {
              return new Vc$1(t.firestore, new Ha$1(t.firestore._delegate, t._userDataWriter, t._delegate, e._snapshot));
          }));
          return vc$1(this._delegate, r, i);
      }, t.prototype.withConverter = function(e) {
          return new t(this.firestore, e ? this._delegate.withConverter(kc$1.nu(this.firestore, e)) : this._delegate.withConverter(null));
      }, t;
  }(), Mc$1 = /** @class */ function() {
      function t(t, e) {
          this._firestore = t, this._delegate = e;
      }
      return Object.defineProperty(t.prototype, "type", {
          get: function() {
              return this._delegate.type;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "doc", {
          get: function() {
              return new Pc$1(this._firestore, this._delegate.doc);
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "oldIndex", {
          get: function() {
              return this._delegate.oldIndex;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "newIndex", {
          get: function() {
              return this._delegate.newIndex;
          },
          enumerable: !1,
          configurable: !0
      }), t;
  }(), Vc$1 = /** @class */ function() {
      function t(t, e) {
          this._firestore = t, this._delegate = e;
      }
      return Object.defineProperty(t.prototype, "query", {
          get: function() {
              return new Fc$1(this._firestore, this._delegate.query);
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "metadata", {
          get: function() {
              return this._delegate.metadata;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "size", {
          get: function() {
              return this._delegate.size;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "empty", {
          get: function() {
              return this._delegate.empty;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(t.prototype, "docs", {
          get: function() {
              var t = this;
              return this._delegate.docs.map((function(e) {
                  return new Pc$1(t._firestore, e);
              }));
          },
          enumerable: !1,
          configurable: !0
      }), t.prototype.docChanges = function(t) {
          var e = this;
          return this._delegate.docChanges(t).map((function(t) {
              return new Mc$1(e._firestore, t);
          }));
      }, t.prototype.forEach = function(t, e) {
          var n = this;
          this._delegate.forEach((function(r) {
              t.call(e, new Pc$1(n._firestore, r));
          }));
      }, t.prototype.isEqual = function(t) {
          return $a$1(this._delegate, t._delegate);
      }, t;
  }(), qc$1 = /** @class */ function(e) {
      function n(t, n) {
          var r = this;
          return (r = e.call(this, t, n) || this).firestore = t, r._delegate = n, r;
      }
      return __extends$6(n, e), Object.defineProperty(n.prototype, "id", {
          get: function() {
              return this._delegate.id;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(n.prototype, "path", {
          get: function() {
              return this._delegate.path;
          },
          enumerable: !1,
          configurable: !0
      }), Object.defineProperty(n.prototype, "parent", {
          get: function() {
              var t = this._delegate.parent;
              return t ? new Cc$1(this.firestore, t) : null;
          },
          enumerable: !1,
          configurable: !0
      }), n.prototype.doc = function(t) {
          try {
              return new Cc$1(this.firestore, void 0 === t ? ta$1(this._delegate) : ta$1(this._delegate, t));
          } catch (t) {
              throw xc$1(t, "doc()", "CollectionReference.doc()");
          }
      }, n.prototype.add = function(t) {
          var e = this;
          return function(t, e) {
              var n = zu(t.firestore, ua$1), r = ta$1(t), i = hc$1(t.converter, e);
              return mc$1(n, [ Ea(Ta$1(t.firestore), "addDoc", r._key, i, null !== t.converter, {}).toMutation(r._key, De.exists(!1)) ]).then((function() {
                  return r;
              }));
          }(this._delegate, t).then((function(t) {
              return new Cc$1(e.firestore, t);
          }));
      }, n.prototype.isEqual = function(t) {
          return ea$1(this._delegate, t._delegate);
      }, n.prototype.withConverter = function(t) {
          return new n(this.firestore, t ? this._delegate.withConverter(kc$1.nu(this.firestore, t)) : this._delegate.withConverter(null));
      }, n;
  }(Fc$1);

  function Uc$1(t) {
      return zu(t, $u);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // The objects that are a part of this API are exposed to third-parties as
  // compiled javascript so we want to flag our private members with a leading
  // underscore to discourage their use.
  /**
   * A `FieldPath` refers to a field in a document. The path may consist of a
   * single field name (referring to a top-level field in the document), or a list
   * of field names (referring to a nested field in the document).
   */ var Bc$1 = /** @class */ function() {
      /**
       * Creates a FieldPath from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      function t() {
          for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
          this._delegate = new (la$1.bind.apply(la$1, __spreadArray$5([ void 0 ], t)));
      }
      return t.documentId = function() {
          /**
           * Internal Note: The backend doesn't technically support querying by
           * document ID. Instead it queries by the entire document name (full path
           * included), but in the cases we currently support documentId(), the net
           * effect is the same.
           */
          return new t($.keyField().canonicalString());
      }, t.prototype.isEqual = function(t) {
          return (t = getModularInstance(t)) instanceof la$1 && this._delegate._internalPath.isEqual(t._internalPath);
      }, t;
  }(), jc$1 = /** @class */ function() {
      function t(t) {
          this._delegate = t;
      }
      return t.serverTimestamp = function() {
          var e = new Na$1("serverTimestamp");
          return e._methodName = "FieldValue.serverTimestamp", new t(e);
      }, t.delete = function() {
          var e = new _a$3("deleteField");
          return e._methodName = "FieldValue.delete", new t(e);
      }, t.arrayUnion = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          var r = 
          /**
   * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
   * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
   * value that already exists on the server. Each specified element that doesn't
   * already exist in the array will be added to the end. If the field being
   * modified is not already an array it will be overwritten with an array
   * containing exactly the specified elements.
   *
   * @param elements - The elements to union into the array.
   * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
   * `updateDoc()`.
   */
          function() {
              for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
              // NOTE: We don't actually parse the data until it's used in set() or
              // update() since we'd need the Firestore instance to do this.
                          return new Da("arrayUnion", t);
          }.apply(void 0, e);
          return r._methodName = "FieldValue.arrayUnion", new t(r);
      }, t.arrayRemove = function() {
          for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
          var r = function() {
              for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
              // NOTE: We don't actually parse the data until it's used in set() or
              // update() since we'd need the Firestore instance to do this.
                          return new Aa$1("arrayRemove", t);
          }.apply(void 0, e);
          return r._methodName = "FieldValue.arrayRemove", new t(r);
      }, t.increment = function(e) {
          var n = function(t) {
              return new ka$1("increment", t);
          }(e);
          return n._methodName = "FieldValue.increment", new t(n);
      }, t.prototype.isEqual = function(t) {
          return this._delegate.isEqual(t._delegate);
      }, t;
  }();

  var C$2 = {
      Firestore: _c,
      GeoPoint: ya$1,
      Timestamp: j,
      Blob: Tc$1,
      Transaction: Dc$1,
      WriteBatch: Ac$1,
      DocumentReference: Cc$1,
      DocumentSnapshot: Oc$1,
      Query: Fc$1,
      QueryDocumentSnapshot: Pc$1,
      QuerySnapshot: Vc$1,
      CollectionReference: qc$1,
      FieldPath: Bc$1,
      FieldValue: jc$1,
      setLogLevel: Nc$1,
      CACHE_SIZE_UNLIMITED: sa$1
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Registers the main Firestore build with the components framework.
   * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
   */
  function I$1(e) {
      !
      /**
   * Configures Firestore as part of the Firebase SDK by calling registerService.
   *
   * @param firebase - The FirebaseNamespace to register Firestore with
   * @param firestoreFactory - A factory function that returns a new Firestore
   *    instance.
   */
      function(e, r$$1) {
          e.INTERNAL.registerComponent(new Component("firestore", (function(e) {
              var t$$1 = e.getProvider("app").getImmediate();
              return r$$1(t$$1, e.getProvider("auth-internal"));
          }), "PUBLIC" /* PUBLIC */).setServiceProps(Object.assign({}, C$2)));
      }(e, (function(e, s$$1) {
          return new _c(e, new ua$1(e, s$$1), new Ec$1);
      })), e.registerVersion("@firebase/firestore", "2.4.0");
  }

  I$1(firebase);

  const config$1 = {
      apiKey: "AIzaSyB0TkZ83Fj0CIzn8AAmE-Osc92s3ER8hy8",
      authDomain: "neurosity-device.firebaseapp.com",
      databaseURL: "https://neurosity-device.firebaseio.com",
      projectId: "neurosity-device",
      storageBucket: "neurosity-device.appspot.com",
      messagingSenderId: "212595049674"
  };

  const SERVER_TIMESTAMP$1 = firebase.database.ServerValue.TIMESTAMP;
  /**
   * @hidden
   */
  class FirebaseApp {
      constructor(options) {
          this.app = this.getApp(options.deviceId);
          this.standalone = this.app.name === options.deviceId;
          if (options.emulator) {
              this.connectEmulators(options);
          }
      }
      getApp(deviceId) {
          const moduleApps = firebase.apps;
          const browserApps = typeof window !== "undefined" &&
              "firebase" in window &&
              "apps" in window.firebase
              ? window["firebase"]["apps"]
              : [];
          const neurosityApp = [...moduleApps, ...browserApps].find((app) => app.name === "[DEFAULT]" &&
              app.options.databaseURL === config$1.databaseURL);
          if (neurosityApp) {
              return neurosityApp;
          }
          if (deviceId) {
              const notionAppName = deviceId;
              const notionApp = moduleApps.find((app) => app.name === notionAppName);
              return notionApp
                  ? notionApp
                  : firebase.initializeApp(config$1, notionAppName);
          }
          return firebase.initializeApp(config$1);
      }
      connectEmulators(options) {
          const { emulatorHost, emulatorAuthPort, emulatorDatabasePort, emulatorFunctionsPort, emulatorFirestorePort, emulatorOptions } = options;
          this.app
              .auth()
              .useEmulator(`http://${emulatorHost}:${emulatorAuthPort}`);
          this.app
              .database()
              .useEmulator(emulatorHost, emulatorDatabasePort, emulatorOptions);
          this.app
              .functions()
              .useEmulator(emulatorHost, emulatorFunctionsPort);
          this.app
              .firestore()
              .useEmulator(emulatorHost, emulatorFirestorePort, emulatorOptions);
      }
      goOnline() {
          this.app.database().goOnline();
      }
      goOffline() {
          this.app.database().goOffline();
      }
      disconnect() {
          if (this.standalone) {
              return this.app.delete();
          }
          return Promise.resolve();
      }
  }

  var __awaiter$7 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const SERVER_TIMESTAMP$2 = firebase.database.ServerValue.TIMESTAMP;
  /**
   * @hidden
   */
  const credentialWithLink = firebase.auth.EmailAuthProvider.credentialWithLink;
  /**
   * @hidden
   */
  function createUser(...args) {
      return new firebase.User(...args);
  }
  /**
   * @hidden
   */
  class FirebaseUser {
      constructor(firebaseApp) {
          this.app = firebaseApp.app;
          this.app.auth().onAuthStateChanged((user) => {
              this.user = user;
          });
      }
      auth() {
          return this.app.auth();
      }
      createAccount(credentials) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const { email, password } = credentials;
              const [error, user] = yield this.app
                  .auth()
                  .createUserWithEmailAndPassword(email, password)
                  .then((user) => [null, user])
                  .catch((error) => [error, null]);
              if (error) {
                  return Promise.reject(error);
              }
              return user;
          });
      }
      deleteAccount() {
          return __awaiter$7(this, void 0, void 0, function* () {
              const user = this.app.auth().currentUser;
              if (!user) {
                  return Promise.reject(new Error(`You are trying to delete an account that is not authenticated. To delete an account, the account must have signed in recently.`));
              }
              const [devicesError, devices] = yield this.getDevices()
                  .then((response) => [null, response])
                  .catch((error) => [error, null]);
              if (devicesError) {
                  return Promise.reject(devicesError);
              }
              if (devices.length) {
                  const removeDeviceError = yield Promise.all(devices.map((device) => this.removeDevice(device.deviceId)))
                      .then(() => null)
                      .catch((error) => error);
                  if (removeDeviceError) {
                      return Promise.reject(removeDeviceError);
                  }
              }
              return user.delete();
          });
      }
      onAuthStateChanged() {
          return new Observable((subscriber) => {
              try {
                  this.app.auth().onAuthStateChanged((user) => {
                      subscriber.next(user);
                  }, (error) => {
                      subscriber.error(error);
                  });
              }
              catch (error) {
                  subscriber.error(error);
              }
          });
      }
      onLogin() {
          return new Observable((subscriber) => {
              const unsubscribe = this.app
                  .auth()
                  .onAuthStateChanged((user) => {
                  if (!!user) {
                      subscriber.next(user);
                      subscriber.complete();
                  }
              });
              return () => unsubscribe();
          });
      }
      login(credentials) {
          if ("customToken" in credentials) {
              const { customToken } = credentials;
              return this.app.auth().signInWithCustomToken(customToken);
          }
          if ("idToken" in credentials && "providerId" in credentials) {
              const provider = new firebase.auth.OAuthProvider(credentials.providerId);
              const oAuthCredential = provider.credential(credentials.idToken);
              return this.app.auth().signInWithCredential(oAuthCredential);
          }
          if ("email" in credentials && "password" in credentials) {
              const { email, password } = credentials;
              return this.app
                  .auth()
                  .signInWithEmailAndPassword(email, password);
          }
          throw new Error(`Either {email,password}, {customToken}, or {idToken,providerId} is required`);
      }
      logout() {
          return this.app.auth().signOut();
      }
      createCustomToken() {
          return __awaiter$7(this, void 0, void 0, function* () {
              const [error, customToken] = yield this.app
                  .functions()
                  .httpsCallable("createCustomToken")()
                  .then(({ data }) => [null, data])
                  .catch((error) => [error, null]);
              if (error) {
                  return Promise.reject(error);
              }
              return customToken;
          });
      }
      removeOAuthAccess() {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const userId = (_a = this.user) === null || _a === void 0 ? void 0 : _a.uid;
              if (!userId) {
                  return Promise.reject(`OAuth access can only be removed while logged in via OAuth.`);
              }
              const [error, response] = yield this.app
                  .functions()
                  .httpsCallable("removeAccessOAuthApp")()
                  .then(({ data }) => [null, data])
                  .catch((error) => [error, null]);
              if (error) {
                  return Promise.reject(error);
              }
              const logoutError = yield this.logout()
                  .then(() => false)
                  .catch((error) => error);
              if (logoutError) {
                  return Promise.reject(logoutError);
              }
              return response;
          });
      }
      getDevices() {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const userId = (_a = this.user) === null || _a === void 0 ? void 0 : _a.uid;
              if (!userId) {
                  return Promise.reject(`Please login.`);
              }
              const snapshot = yield this.app
                  .database()
                  .ref(this.getUserDevicesPath())
                  .once("value");
              const userDevices = snapshot.val();
              return this.userDevicesToDeviceInfoList(userDevices);
          });
      }
      addDevice(deviceId) {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const userId = (_a = this.user) === null || _a === void 0 ? void 0 : _a.uid;
              if (!userId) {
                  return Promise.reject(`Please login.`);
              }
              const devices = yield this.getDevices().catch((error) => {
                  console.log(error);
              });
              const deviceAlreadyInAccount = devices &&
                  devices.length &&
                  devices.map(({ deviceId }) => deviceId).includes(deviceId);
              if (deviceAlreadyInAccount) {
                  return Promise.reject(`The device is already added to this account.`);
              }
              const [isValid, invalidErrorMessage] = yield this.isDeviceIdValid(deviceId)
                  .then((isValid) => [isValid])
                  .catch((error) => [false, error]);
              if (!isValid) {
                  return Promise.reject(invalidErrorMessage);
              }
              const claimedByPath = this.getDeviceClaimedByPath(deviceId);
              const userDevicePath = this.getUserClaimedDevicePath(deviceId);
              const [hasError, errorMessage] = yield this.app
                  .database()
                  .ref()
                  .update({
                  [claimedByPath]: userId,
                  [userDevicePath]: {
                      claimedOn: SERVER_TIMESTAMP$2
                  }
              })
                  .then(() => [false])
                  .catch((error) => [true, error]);
              if (hasError) {
                  return Promise.reject(errorMessage);
              }
          });
      }
      removeDevice(deviceId) {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const userId = (_a = this.user) === null || _a === void 0 ? void 0 : _a.uid;
              if (!userId) {
                  return Promise.reject(`Please login.`);
              }
              const claimedByPath = this.getDeviceClaimedByPath(deviceId);
              const userDevicePath = this.getUserClaimedDevicePath(deviceId);
              const claimedByRef = this.app.database().ref(claimedByPath);
              const userDeviceRef = this.app.database().ref(userDevicePath);
              const [hasError, errorMessage] = yield Promise.all([
                  claimedByRef.remove(),
                  userDeviceRef.remove()
              ])
                  .then(() => [false])
                  .catch((error) => [true, error]);
              if (hasError) {
                  return Promise.reject(errorMessage);
              }
          });
      }
      transferDevice(options) {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const userId = (_a = this.user) === null || _a === void 0 ? void 0 : _a.uid;
              if (!userId) {
                  return Promise.reject(new Error(`transferDevice: auth is required.`));
              }
              if (!("recipientsEmail" in options) &&
                  !("recipientsUserId" in options)) {
                  return Promise.reject(new Error(`transferDevice: either 'recipientsEmail' or 'recipientsUserId' key is required.`));
              }
              if (!(options === null || options === void 0 ? void 0 : options.deviceId)) {
                  return Promise.reject(new Error(`transferDevice: a deviceId is required.`));
              }
              const [error, response] = yield this.app
                  .functions()
                  .httpsCallable("transferDeviceOwnership")(options)
                  .then(({ data }) => [null, data])
                  .catch((error) => [error, null]);
              if (error) {
                  return Promise.reject(error);
              }
          });
      }
      isDeviceIdValid(deviceId) {
          return __awaiter$7(this, void 0, void 0, function* () {
              // hex string of 32 characters
              const hexRegEx = /[0-9A-Fa-f]{32}/g;
              if (!deviceId ||
                  deviceId.length !== 32 ||
                  !hexRegEx.test(deviceId)) {
                  return Promise.reject("The device id is incorrectly formatted.");
              }
              const claimedByPath = this.getDeviceClaimedByPath(deviceId);
              const claimedByRef = this.app.database().ref(claimedByPath);
              const claimedBySnapshot = yield claimedByRef
                  .once("value")
                  .catch(() => null);
              if (!claimedBySnapshot || claimedBySnapshot.exists()) {
                  return Promise.reject("The device has already been claimed.");
              }
              return true;
          });
      }
      onUserDevicesChange() {
          return this.onAuthStateChanged().pipe(switchMap((user) => {
              if (!user) {
                  return empty$1();
              }
              const userDevicesPath = this.getUserDevicesPath();
              const userDevicesRef = this.app.database().ref(userDevicesPath);
              return fromEventPattern((handler) => userDevicesRef.on("value", handler), (handler) => userDevicesRef.off("value", handler)).pipe(map(([snapshot]) => snapshot.val()), switchMap((userDevices) => {
                  return from(this.userDevicesToDeviceInfoList(userDevices));
              }));
          }));
      }
      onUserClaimsChange() {
          return this.onAuthStateChanged().pipe(switchMap((user) => {
              if (!user) {
                  return empty$1();
              }
              const claimsUpdatedOnPath = this.getUserClaimsUpdatedOnPath();
              const claimsUpdatedOnRef = this.app
                  .database()
                  .ref(claimsUpdatedOnPath);
              return fromEventPattern((handler) => claimsUpdatedOnRef.on("value", handler), (handler) => claimsUpdatedOnRef.off("value", handler)).pipe(map(([snapshot]) => snapshot.val()), switchMap(() => {
                  // Force refresh of auth id token
                  return from(this.getIdToken(true)).pipe(switchMap(() => from(this.getClaims())));
              }));
          }));
      }
      getIdToken(forceRefresh = false) {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const user = (_a = this.app.auth()) === null || _a === void 0 ? void 0 : _a.currentUser;
              if (!user) {
                  return Promise.reject(`getUserIdToken: unable to get currentUser`);
              }
              yield user.getIdToken(forceRefresh).catch((error) => {
                  console.error(error);
              });
          });
      }
      getClaims() {
          var _a;
          const user = (_a = this.app.auth()) === null || _a === void 0 ? void 0 : _a.currentUser;
          if (!user) {
              return Promise.reject(`getUserClaims: unable to get currentUser`);
          }
          return user
              .getIdTokenResult()
              .then((token) => token.claims)
              .catch((error) => {
              console.error(error);
              return null;
          });
      }
      userDevicesToDeviceInfoList(userDevices) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const devicesInfoSnapshots = Object.keys(userDevices !== null && userDevices !== void 0 ? userDevices : {}).map((deviceId) => this.app
                  .database()
                  .ref(this.getDeviceInfoPath(deviceId))
                  .once("value"));
              const devicesList = yield Promise.all(devicesInfoSnapshots).then((snapshots) => snapshots.map((snapshot) => snapshot.val()));
              const validDevices = devicesList.filter((device) => !!device);
              validDevices.sort((a, b) => {
                  return (userDevices[a.deviceId].claimedOn -
                      userDevices[b.deviceId].claimedOn);
              });
              return validDevices;
          });
      }
      hasDevicePermission(deviceId) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const deviceInfoPath = this.getDeviceInfoPath(deviceId);
              const hasPermission = yield this.app
                  .database()
                  .ref(deviceInfoPath)
                  .once("value")
                  .then(() => true)
                  .catch(() => false);
              return hasPermission;
          });
      }
      getDeviceClaimedByPath(deviceId) {
          return `devices/${deviceId}/status/claimedBy`;
      }
      getUserClaimedDevicePath(deviceId) {
          const userId = this.user.uid;
          return `users/${userId}/devices/${deviceId}`;
      }
      getUserDevicesPath() {
          const userId = this.user.uid;
          return `users/${userId}/devices`;
      }
      getUserClaimsUpdatedOnPath() {
          const userId = this.user.uid;
          return `users/${userId}/claimsUpdatedOn`;
      }
      getDeviceInfoPath(deviceId) {
          return `devices/${deviceId}/info`;
      }
      onUserExperiments() {
          return this.onAuthStateChanged().pipe(switchMap((user) => {
              if (!user) {
                  return empty$1();
              }
              const userId = this.user.uid;
              const userExperimentsRef = this.app
                  .database()
                  .ref("experiments")
                  .orderByChild("userId")
                  .equalTo(userId)
                  .limitToFirst(100);
              return fromEventPattern((handler) => userExperimentsRef.on("value", handler), (handler) => userExperimentsRef.off("value", handler)).pipe(map(([snapshot]) => snapshot.val()), 
              // transform experiments map into sorted list
              map((experimentsMaps) => {
                  return Object.entries(experimentsMaps !== null && experimentsMaps !== void 0 ? experimentsMaps : {})
                      .map(([id, value]) => {
                      var _a;
                      return (Object.assign({ id: (_a = value === null || value === void 0 ? void 0 : value.id) !== null && _a !== void 0 ? _a : id }, value));
                  })
                      .sort((a, b) => new Date(b === null || b === void 0 ? void 0 : b.timestamp).getTime() -
                      new Date(a === null || a === void 0 ? void 0 : a.timestamp).getTime());
              }));
          }));
      }
      deleteUserExperiment(experimentId) {
          return __awaiter$7(this, void 0, void 0, function* () {
              if (!experimentId) {
                  return Promise.reject(`deleteUserExperiment: please provide an experiment id`);
              }
              const removeExperiment = (experimentId) => {
                  return this.app
                      .database()
                      .ref("experiments")
                      .child(experimentId)
                      .remove();
              };
              const removeRelations = (experimentId) => {
                  return this.app.functions().httpsCallable("removeRelations")({
                      experimentId
                  });
              };
              yield Promise.all([
                  removeExperiment(experimentId),
                  removeRelations(experimentId)
              ]).catch(() => { });
          });
      }
  }

  var __awaiter$8 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const SERVER_TIMESTAMP$3 = firebase.database.ServerValue.TIMESTAMP;
  /**
   * @hidden
   */
  const createDeviceStore = (app, deviceId, subscriptionManager) => {
      const deviceRef = app.database().ref(`devices/${deviceId}`);
      const clientId = deviceRef.child("subscriptions").push().key;
      const clientRef = deviceRef.child(`clients/${clientId}`);
      let listenersToRemove = [];
      const set = (namespace, payload) => {
          return deviceRef.child(namespace).set(payload);
      };
      const push = (namespace, payload) => {
          return deviceRef.child(namespace).push(payload);
      };
      const update = (namespace, payload) => {
          return deviceRef.child(namespace).update(payload);
      };
      const on = (eventType = "value", namespace, callback) => {
          const listener = deviceRef
              .child(namespace)
              .on(eventType, (snapshot) => {
              callback(snapshot.val(), snapshot);
          });
          listenersToRemove.push(() => {
              deviceRef.child(namespace).off(eventType, listener);
          });
          return listener;
      };
      const off = (namespace, eventType, listener) => {
          if (listener) {
              deviceRef.child(namespace).off(eventType, listener);
          }
          else {
              deviceRef.child(namespace).off(eventType);
          }
      };
      const once = (namespace, eventType = "value") => __awaiter$8(void 0, void 0, void 0, function* () {
          const snapshot = yield deviceRef.child(namespace).once(eventType);
          return snapshot.val();
      });
      const remove = (namespace) => {
          deviceRef.child(namespace).remove();
      };
      const bindListener = (eventType, namespace, callback, overrideResponse) => {
          on(eventType, namespace, (data) => {
              if (data !== null) {
                  off(namespace, eventType);
                  const response = overrideResponse ? overrideResponse : data;
                  callback(response);
              }
          });
      };
      const lastOfChildValue = (namespace, key, value) => __awaiter$8(void 0, void 0, void 0, function* () {
          const snapshot = yield deviceRef
              .child(namespace)
              .orderByChild(key)
              .equalTo(value)
              .limitToLast(1)
              .once("value");
          const results = snapshot.val();
          const [match] = Object.values(results || {});
          return match || null;
      });
      // Add client connections and subscriptions to db and remove them when offline
      const connectedListener = app
          .database()
          .ref(".info/connected")
          .on("value", (snapshot) => {
          if (!snapshot.val()) {
              return;
          }
          clientRef
              .onDisconnect()
              .remove()
              .then(() => {
              clientRef.set(SERVER_TIMESTAMP$3);
              // NOTION-115: Re-subscribe when internet connection is lost and regained
              update("subscriptions", subscriptionManager.get()).then(() => {
                  subscriptionManager.toList().forEach((subscription) => {
                      const childPath = `subscriptions/${subscription.id}`;
                      deviceRef.child(childPath).onDisconnect().remove();
                  });
              });
          });
      });
      listenersToRemove.push(() => {
          app
              .database()
              .ref(".info/connected")
              .off("value", connectedListener);
      });
      return {
          set,
          once,
          update,
          lastOfChildValue,
          onNamespace: (namespace, callback) => {
              return on("value", namespace, (data) => {
                  callback(data);
              });
          },
          offNamespace: (namespace, listener) => {
              off(namespace, "value", listener);
          },
          dispatchAction: (action) => __awaiter$8(void 0, void 0, void 0, function* () {
              const snapshot = yield push("actions", action);
              const actionId = snapshot.key;
              const actionPath = `actions/${actionId}`;
              snapshot.onDisconnect().remove();
              if (action.responseRequired) {
                  const responseTimeout = action.responseTimeout || 600000; // defaults to 10 minutes
                  const timeout = new Promise((_, reject) => {
                      const id = setTimeout(() => {
                          clearTimeout(id);
                          snapshot.remove();
                          reject(`Action response timed out in ${responseTimeout}ms.`);
                      }, responseTimeout);
                  });
                  const response = new Promise((resolve) => {
                      bindListener("value", `${actionPath}/response`, resolve);
                  });
                  return Promise.race([response, timeout]);
              }
              return actionId;
          }),
          nextMetric: (metricName, metricValue) => __awaiter$8(void 0, void 0, void 0, function* () {
              set(`metrics/${metricName}`, metricValue);
          }),
          onMetric: (subscription, callback) => {
              const { atomic, metric, labels } = subscription;
              const child = atomic
                  ? `metrics/${metric}`
                  : `metrics/${metric}/${labels[0]}`;
              return on("value", child, (data) => {
                  if (data !== null) {
                      callback(data);
                  }
              });
          },
          subscribeToMetric: (subscription) => {
              const id = deviceRef.child("subscriptions").push().key;
              const childPath = `subscriptions/${id}`;
              const subscriptionCreated = Object.assign({ id,
                  clientId }, subscription);
              set(childPath, subscriptionCreated);
              deviceRef.child(childPath).onDisconnect().remove();
              return subscriptionCreated;
          },
          unsubscribeFromMetric: (subscription) => {
              remove(`subscriptions/${subscription.id}`);
          },
          removeMetricListener(subscription, listener) {
              const { atomic, metric, labels } = subscription;
              const child = atomic
                  ? `metrics/${metric}`
                  : `metrics/${metric}/${labels[0]}`;
              off(child, "value", listener);
          },
          disconnect() {
              clientRef.remove();
              listenersToRemove.forEach((removeListener) => {
                  removeListener();
              });
              subscriptionManager
                  .toList()
                  .filter((subscription) => subscription.clientId === clientId)
                  .forEach((subscription) => {
                  const childPath = `subscriptions/${subscription.id}`;
                  deviceRef.child(childPath).remove();
              });
          }
      };
  };

  var __awaiter$9 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const SERVER_TIMESTAMP$4 = firebase.database.ServerValue.TIMESTAMP;
  /**
   * @hidden
   */
  class FirebaseDevice {
      constructor({ deviceId, firebaseApp, dependencies }) {
          this.app = firebaseApp.app;
          this.deviceStore = createDeviceStore(this.app, deviceId, dependencies.subscriptionManager);
      }
      get timestamp() {
          return SERVER_TIMESTAMP$4;
      }
      dispatchAction(action) {
          return this.deviceStore.dispatchAction(action);
      }
      getInfo() {
          return __awaiter$9(this, void 0, void 0, function* () {
              return yield this.deviceStore.once("info");
          });
      }
      onNamespace(namespace, callback) {
          return this.deviceStore.onNamespace(namespace, callback);
      }
      onceNamespace(namespace) {
          return __awaiter$9(this, void 0, void 0, function* () {
              return yield this.deviceStore.once(namespace);
          });
      }
      offNamespace(namespace, listener) {
          this.deviceStore.offNamespace(namespace, listener);
      }
      getTimesync() {
          return __awaiter$9(this, void 0, void 0, function* () {
              const response = yield this.dispatchAction({
                  command: "timesync",
                  action: "get",
                  responseRequired: true,
                  responseTimeout: 250
              });
              return response.timestamp;
          });
      }
      /**
       * Pushes metric for each subscriptions in path:
       * /devices/:deviceId/metrics/:metricName
       */
      nextMetric(metricName, metricValue) {
          this.deviceStore.nextMetric(metricName, metricValue);
      }
      /**
       * Listens for metrics in path:
       * /devices/:deviceId/metrics/:metricName
       */
      onMetric(subscription, callback) {
          return this.deviceStore.onMetric(subscription, callback);
      }
      /**
       * Creates a new and unique subscription in path:
       * /devices/:deviceId/subscriptions/:subscriptionId
       * E.g. /devices/device1/subscriptions/subscription3
       *
       * @param subscription
       * @returns subscriptionId
       */
      subscribeToMetric(subscription) {
          const subscriptionId = this.deviceStore.subscribeToMetric(subscription);
          return subscriptionId;
      }
      /**
       * Removes subscription in path:
       * /devices/:deviceId/subscriptions/:subscriptionId
       *
       * @param subscription
       */
      unsubscribeFromMetric(subscription) {
          this.deviceStore.unsubscribeFromMetric(subscription);
      }
      /**
       * Removes metric listener
       * /devices/:deviceId/metric
       * or
       * /devices/:deviceId/metric/label
       *
       * @param subscription
       * @param listener
       */
      removeMetricListener(subscription, listener) {
          this.deviceStore.removeMetricListener(subscription, listener);
      }
      changeSettings(settings) {
          return __awaiter$9(this, void 0, void 0, function* () {
              return this.deviceStore.update("settings", settings);
          });
      }
      getSkill(bundleId) {
          return __awaiter$9(this, void 0, void 0, function* () {
              return yield this.deviceStore.lastOfChildValue("skills", "bundleId", bundleId);
          });
      }
      disconnect() {
          this.deviceStore.disconnect();
      }
  }
  FirebaseDevice.serverType = "firebase";

  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /**
   * Parses an URI
   *
   * @author Steven Levithan <stevenlevithan.com> (MIT license)
   * @api private
   */

  var re$1 = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

  var parts = [
      'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
  ];

  var parseuri = function parseuri(str) {
      var src = str,
          b = str.indexOf('['),
          e = str.indexOf(']');

      if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }

      var m = re$1.exec(str || ''),
          uri = {},
          i = 14;

      while (i--) {
          uri[parts[i]] = m[i] || '';
      }

      if (b != -1 && e != -1) {
          uri.source = src;
          uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
          uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
          uri.ipv6uri = true;
      }

      return uri;
  };

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y$1 = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$1 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$1;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    return plural(ms, d, 'day') ||
      plural(ms, h, 'hour') ||
      plural(ms, m, 'minute') ||
      plural(ms, s, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$1;

  /**
   * Active `debug` instances.
   */
  exports.instances = [];

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    var prevTime;

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);

    return debug;
  }

  function destroy () {
    var index = exports.instances.indexOf(this);
    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1 = debug.coerce;
  var debug_2 = debug.disable;
  var debug_3 = debug.enable;
  var debug_4 = debug.enabled;
  var debug_5 = debug.humanize;
  var debug_6 = debug.instances;
  var debug_7 = debug.names;
  var debug_8 = debug.skips;
  var debug_9 = debug.formatters;

  var browser$1 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
    '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
    '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
    '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
    '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
    '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
    '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
    '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
    '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
    '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
    '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1 = browser$1.log;
  var browser_2 = browser$1.formatArgs;
  var browser_3 = browser$1.save;
  var browser_4 = browser$1.load;
  var browser_5 = browser$1.useColors;
  var browser_6 = browser$1.storage;
  var browser_7 = browser$1.colors;

  /**
   * Module dependencies.
   */


  var debug$1 = browser$1('socket.io-client:url');

  /**
   * Module exports.
   */

  var url_1 = url;

  /**
   * URL parser.
   *
   * @param {String} url
   * @param {Object} An object meant to mimic window.location.
   *                 Defaults to window.location.
   * @api public
   */

  function url (uri, loc) {
    var obj = uri;

    // default to window.location
    loc = loc || (typeof location !== 'undefined' && location);
    if (null == uri) uri = loc.protocol + '//' + loc.host;

    // relative path support
    if ('string' === typeof uri) {
      if ('/' === uri.charAt(0)) {
        if ('/' === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }

      if (!/^(https?|wss?):\/\//.test(uri)) {
        debug$1('protocol-less url %s', uri);
        if ('undefined' !== typeof loc) {
          uri = loc.protocol + '//' + uri;
        } else {
          uri = 'https://' + uri;
        }
      }

      // parse
      debug$1('parse %s', uri);
      obj = parseuri(uri);
    }

    // make sure we treat `localhost:80` and `localhost` equally
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = '80';
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = '443';
      }
    }

    obj.path = obj.path || '/';

    var ipv6 = obj.host.indexOf(':') !== -1;
    var host = ipv6 ? '[' + obj.host + ']' : obj.host;

    // define unique id
    obj.id = obj.protocol + '://' + host + ':' + obj.port;
    // define href
    obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

    return obj;
  }

  var componentEmitter = createCommonjsModule(function (module) {
  /**
   * Expose `Emitter`.
   */

  {
    module.exports = Emitter;
  }

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }
  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
  Emitter.prototype.addEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
      .push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
  Emitter.prototype.removeListener =
  Emitter.prototype.removeAllListeners =
  Emitter.prototype.removeEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1)
      , callbacks = this._callbacks['$' + event];

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };
  });

  var toString$1 = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  var isBuffer = isBuf;

  var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
  var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

  var isView = function (obj) {
    return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
  };

  /**
   * Returns true if obj is a buffer or an arraybuffer.
   *
   * @api private
   */

  function isBuf(obj) {
    return (withNativeBuffer && Buffer.isBuffer(obj)) ||
            (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
  }

  /*global Blob,File*/

  /**
   * Module requirements
   */



  var toString$2 = Object.prototype.toString;
  var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString$2.call(Blob) === '[object BlobConstructor]');
  var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString$2.call(File) === '[object FileConstructor]');

  /**
   * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
   * Anything with blobs or files should be fed through removeBlobs before coming
   * here.
   *
   * @param {Object} packet - socket.io event packet
   * @return {Object} with deconstructed packet and list of buffers
   * @api public
   */

  var deconstructPacket = function(packet) {
    var buffers = [];
    var packetData = packet.data;
    var pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return {packet: pack, buffers: buffers};
  };

  function _deconstructPacket(data, buffers) {
    if (!data) return data;

    if (isBuffer(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isarray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i], buffers);
      }
      return newData;
    } else if (typeof data === 'object' && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key], buffers);
      }
      return newData;
    }
    return data;
  }

  /**
   * Reconstructs a binary packet from its placeholder packet and buffers
   *
   * @param {Object} packet - event packet with placeholders
   * @param {Array} buffers - binary buffers to put in placeholder positions
   * @return {Object} reconstructed packet
   * @api public
   */

  var reconstructPacket = function(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = undefined; // no longer useful
    return packet;
  };

  function _reconstructPacket(data, buffers) {
    if (!data) return data;

    if (data && data._placeholder) {
      return buffers[data.num]; // appropriate buffer (should be natural order anyway)
    } else if (isarray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i], buffers);
      }
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key], buffers);
      }
    }

    return data;
  }

  /**
   * Asynchronously removes Blobs or Files from data via
   * FileReader's readAsArrayBuffer method. Used before encoding
   * data as msgpack. Calls callback with the blobless data.
   *
   * @param {Object} data
   * @param {Function} callback
   * @api private
   */

  var removeBlobs = function(data, callback) {
    function _removeBlobs(obj, curKey, containingObject) {
      if (!obj) return obj;

      // convert any blob
      if ((withNativeBlob && obj instanceof Blob) ||
          (withNativeFile && obj instanceof File)) {
        pendingBlobs++;

        // async filereader
        var fileReader = new FileReader();
        fileReader.onload = function() { // this.result == arraybuffer
          if (containingObject) {
            containingObject[curKey] = this.result;
          }
          else {
            bloblessData = this.result;
          }

          // if nothing pending its callback time
          if(! --pendingBlobs) {
            callback(bloblessData);
          }
        };

        fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
      } else if (isarray(obj)) { // handle array
        for (var i = 0; i < obj.length; i++) {
          _removeBlobs(obj[i], i, obj);
        }
      } else if (typeof obj === 'object' && !isBuffer(obj)) { // and object
        for (var key in obj) {
          _removeBlobs(obj[key], key, obj);
        }
      }
    }

    var pendingBlobs = 0;
    var bloblessData = data;
    _removeBlobs(bloblessData);
    if (!pendingBlobs) {
      callback(bloblessData);
    }
  };

  var binary = {
  	deconstructPacket: deconstructPacket,
  	reconstructPacket: reconstructPacket,
  	removeBlobs: removeBlobs
  };

  var socket_ioParser = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */

  var debug = browser$1('socket.io-parser');





  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = 4;

  /**
   * Packet types.
   *
   * @api public
   */

  exports.types = [
    'CONNECT',
    'DISCONNECT',
    'EVENT',
    'ACK',
    'ERROR',
    'BINARY_EVENT',
    'BINARY_ACK'
  ];

  /**
   * Packet type `connect`.
   *
   * @api public
   */

  exports.CONNECT = 0;

  /**
   * Packet type `disconnect`.
   *
   * @api public
   */

  exports.DISCONNECT = 1;

  /**
   * Packet type `event`.
   *
   * @api public
   */

  exports.EVENT = 2;

  /**
   * Packet type `ack`.
   *
   * @api public
   */

  exports.ACK = 3;

  /**
   * Packet type `error`.
   *
   * @api public
   */

  exports.ERROR = 4;

  /**
   * Packet type 'binary event'
   *
   * @api public
   */

  exports.BINARY_EVENT = 5;

  /**
   * Packet type `binary ack`. For acks with binary arguments.
   *
   * @api public
   */

  exports.BINARY_ACK = 6;

  /**
   * Encoder constructor.
   *
   * @api public
   */

  exports.Encoder = Encoder;

  /**
   * Decoder constructor.
   *
   * @api public
   */

  exports.Decoder = Decoder;

  /**
   * A socket.io Encoder instance
   *
   * @api public
   */

  function Encoder() {}

  var ERROR_PACKET = exports.ERROR + '"encode error"';

  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   * @param {Function} callback - function to handle encodings (likely engine.write)
   * @return Calls callback with Array of encodings
   * @api public
   */

  Encoder.prototype.encode = function(obj, callback){
    debug('encoding packet %j', obj);

    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      encodeAsBinary(obj, callback);
    } else {
      var encoding = encodeAsString(obj);
      callback([encoding]);
    }
  };

  /**
   * Encode packet as string.
   *
   * @param {Object} packet
   * @return {String} encoded
   * @api private
   */

  function encodeAsString(obj) {

    // first is type
    var str = '' + obj.type;

    // attachments if we have them
    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      str += obj.attachments + '-';
    }

    // if we have a namespace other than `/`
    // we append it followed by a comma `,`
    if (obj.nsp && '/' !== obj.nsp) {
      str += obj.nsp + ',';
    }

    // immediately followed by the id
    if (null != obj.id) {
      str += obj.id;
    }

    // json data
    if (null != obj.data) {
      var payload = tryStringify(obj.data);
      if (payload !== false) {
        str += payload;
      } else {
        return ERROR_PACKET;
      }
    }

    debug('encoded %j as %s', obj, str);
    return str;
  }

  function tryStringify(str) {
    try {
      return JSON.stringify(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   *
   * @param {Object} packet
   * @return {Buffer} encoded
   * @api private
   */

  function encodeAsBinary(obj, callback) {

    function writeEncoding(bloblessData) {
      var deconstruction = binary.deconstructPacket(bloblessData);
      var pack = encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;

      buffers.unshift(pack); // add packet info to beginning of data list
      callback(buffers); // write all the buffers
    }

    binary.removeBlobs(obj, writeEncoding);
  }

  /**
   * A socket.io Decoder instance
   *
   * @return {Object} decoder
   * @api public
   */

  function Decoder() {
    this.reconstructor = null;
  }

  /**
   * Mix in `Emitter` with Decoder.
   */

  componentEmitter(Decoder.prototype);

  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   * @return {Object} packet
   * @api public
   */

  Decoder.prototype.add = function(obj) {
    var packet;
    if (typeof obj === 'string') {
      packet = decodeString(obj);
      if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
        this.reconstructor = new BinaryReconstructor(packet);

        // no attachments, labeled binary but no binary data to follow
        if (this.reconstructor.reconPack.attachments === 0) {
          this.emit('decoded', packet);
        }
      } else { // non-binary full packet
        this.emit('decoded', packet);
      }
    } else if (isBuffer(obj) || obj.base64) { // raw binary data
      if (!this.reconstructor) {
        throw new Error('got binary data when not reconstructing a packet');
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) { // received final buffer
          this.reconstructor = null;
          this.emit('decoded', packet);
        }
      }
    } else {
      throw new Error('Unknown type: ' + obj);
    }
  };

  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   * @api private
   */

  function decodeString(str) {
    var i = 0;
    // look up type
    var p = {
      type: Number(str.charAt(0))
    };

    if (null == exports.types[p.type]) {
      return error('unknown packet type ' + p.type);
    }

    // look up attachments if type binary
    if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
      var buf = '';
      while (str.charAt(++i) !== '-') {
        buf += str.charAt(i);
        if (i == str.length) break;
      }
      if (buf != Number(buf) || str.charAt(i) !== '-') {
        throw new Error('Illegal attachments');
      }
      p.attachments = Number(buf);
    }

    // look up namespace (if any)
    if ('/' === str.charAt(i + 1)) {
      p.nsp = '';
      while (++i) {
        var c = str.charAt(i);
        if (',' === c) break;
        p.nsp += c;
        if (i === str.length) break;
      }
    } else {
      p.nsp = '/';
    }

    // look up id
    var next = str.charAt(i + 1);
    if ('' !== next && Number(next) == next) {
      p.id = '';
      while (++i) {
        var c = str.charAt(i);
        if (null == c || Number(c) != c) {
          --i;
          break;
        }
        p.id += str.charAt(i);
        if (i === str.length) break;
      }
      p.id = Number(p.id);
    }

    // look up json data
    if (str.charAt(++i)) {
      var payload = tryParse(str.substr(i));
      var isPayloadValid = payload !== false && (p.type === exports.ERROR || isarray(payload));
      if (isPayloadValid) {
        p.data = payload;
      } else {
        return error('invalid payload');
      }
    }

    debug('decoded %s as %j', str, p);
    return p;
  }

  function tryParse(str) {
    try {
      return JSON.parse(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Deallocates a parser's resources
   *
   * @api public
   */

  Decoder.prototype.destroy = function() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
    }
  };

  /**
   * A manager of a binary event's 'buffer sequence'. Should
   * be constructed whenever a packet of type BINARY_EVENT is
   * decoded.
   *
   * @param {Object} packet
   * @return {BinaryReconstructor} initialized reconstructor
   * @api private
   */

  function BinaryReconstructor(packet) {
    this.reconPack = packet;
    this.buffers = [];
  }

  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   * @api private
   */

  BinaryReconstructor.prototype.takeBinaryData = function(binData) {
    this.buffers.push(binData);
    if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
      var packet = binary.reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  };

  /**
   * Cleans up binary packet reconstruction variables.
   *
   * @api private
   */

  BinaryReconstructor.prototype.finishedReconstruction = function() {
    this.reconPack = null;
    this.buffers = [];
  };

  function error(msg) {
    return {
      type: exports.ERROR,
      data: 'parser error: ' + msg
    };
  }
  });
  var socket_ioParser_1 = socket_ioParser.protocol;
  var socket_ioParser_2 = socket_ioParser.types;
  var socket_ioParser_3 = socket_ioParser.CONNECT;
  var socket_ioParser_4 = socket_ioParser.DISCONNECT;
  var socket_ioParser_5 = socket_ioParser.EVENT;
  var socket_ioParser_6 = socket_ioParser.ACK;
  var socket_ioParser_7 = socket_ioParser.ERROR;
  var socket_ioParser_8 = socket_ioParser.BINARY_EVENT;
  var socket_ioParser_9 = socket_ioParser.BINARY_ACK;
  var socket_ioParser_10 = socket_ioParser.Encoder;
  var socket_ioParser_11 = socket_ioParser.Decoder;

  var hasCors = createCommonjsModule(function (module) {
  /**
   * Module exports.
   *
   * Logic borrowed from Modernizr:
   *
   *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
   */

  try {
    module.exports = typeof XMLHttpRequest !== 'undefined' &&
      'withCredentials' in new XMLHttpRequest();
  } catch (err) {
    // if XMLHttp support is disabled in IE then it will throw
    // when trying to create
    module.exports = false;
  }
  });

  // browser shim for xmlhttprequest module



  var xmlhttprequest = function (opts) {
    var xdomain = opts.xdomain;

    // scheme must be same when usign XDomainRequest
    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
    var xscheme = opts.xscheme;

    // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
    // https://github.com/Automattic/engine.io-client/pull/217
    var enablesXDR = opts.enablesXDR;

    // XMLHttpRequest can be disabled on IE
    try {
      if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCors)) {
        return new XMLHttpRequest();
      }
    } catch (e) { }

    // Use XDomainRequest for IE8 if enablesXDR is true
    // because loading bar keeps flashing when using jsonp-polling
    // https://github.com/yujiosaka/socke.io-ie8-loading-example
    try {
      if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
        return new XDomainRequest();
      }
    } catch (e) { }

    if (!xdomain) {
      try {
        return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
      } catch (e) { }
    }
  };

  /**
   * Gets the keys for an object.
   *
   * @return {Array} keys
   * @api private
   */

  var keys = Object.keys || function keys (obj){
    var arr = [];
    var has = Object.prototype.hasOwnProperty;

    for (var i in obj) {
      if (has.call(obj, i)) {
        arr.push(i);
      }
    }
    return arr;
  };

  /* global Blob File */

  /*
   * Module requirements.
   */



  var toString$3 = Object.prototype.toString;
  var withNativeBlob$1 = typeof Blob === 'function' ||
                          typeof Blob !== 'undefined' && toString$3.call(Blob) === '[object BlobConstructor]';
  var withNativeFile$1 = typeof File === 'function' ||
                          typeof File !== 'undefined' && toString$3.call(File) === '[object FileConstructor]';

  /**
   * Module exports.
   */

  var hasBinary2 = hasBinary;

  /**
   * Checks for binary data.
   *
   * Supports Buffer, ArrayBuffer, Blob and File.
   *
   * @param {Object} anything
   * @api public
   */

  function hasBinary (obj) {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (isarray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (hasBinary(obj[i])) {
          return true;
        }
      }
      return false;
    }

    if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
      (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
      (withNativeBlob$1 && obj instanceof Blob) ||
      (withNativeFile$1 && obj instanceof File)
    ) {
      return true;
    }

    // see: https://github.com/Automattic/has-binary/pull/4
    if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }

    return false;
  }

  /**
   * An abstraction for slicing an arraybuffer even when
   * ArrayBuffer.prototype.slice is not supported
   *
   * @api public
   */

  var arraybuffer_slice = function(arraybuffer, start, end) {
    var bytes = arraybuffer.byteLength;
    start = start || 0;
    end = end || bytes;

    if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

    if (start < 0) { start += bytes; }
    if (end < 0) { end += bytes; }
    if (end > bytes) { end = bytes; }

    if (start >= bytes || start >= end || bytes === 0) {
      return new ArrayBuffer(0);
    }

    var abv = new Uint8Array(arraybuffer);
    var result = new Uint8Array(end - start);
    for (var i = start, ii = 0; i < end; i++, ii++) {
      result[ii] = abv[i];
    }
    return result.buffer;
  };

  var after_1 = after;

  function after(count, callback, err_cb) {
      var bail = false;
      err_cb = err_cb || noop$2;
      proxy.count = count;

      return (count === 0) ? callback() : proxy

      function proxy(err, result) {
          if (proxy.count <= 0) {
              throw new Error('after called too many times')
          }
          --proxy.count;

          // after first error, rest are passed to err_cb
          if (err) {
              bail = true;
              callback(err);
              // future error callbacks will go to error handler
              callback = err_cb;
          } else if (proxy.count === 0 && !bail) {
              callback(null, result);
          }
      }
  }

  function noop$2() {}

  /*! https://mths.be/utf8js v2.1.2 by @mathias */

  var stringFromCharCode = String.fromCharCode;

  // Taken from https://mths.be/punycode
  function ucs2decode(string) {
  	var output = [];
  	var counter = 0;
  	var length = string.length;
  	var value;
  	var extra;
  	while (counter < length) {
  		value = string.charCodeAt(counter++);
  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  			// high surrogate, and there is a next character
  			extra = string.charCodeAt(counter++);
  			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  			} else {
  				// unmatched surrogate; only append this code unit, in case the next
  				// code unit is the high surrogate of a surrogate pair
  				output.push(value);
  				counter--;
  			}
  		} else {
  			output.push(value);
  		}
  	}
  	return output;
  }

  // Taken from https://mths.be/punycode
  function ucs2encode(array) {
  	var length = array.length;
  	var index = -1;
  	var value;
  	var output = '';
  	while (++index < length) {
  		value = array[index];
  		if (value > 0xFFFF) {
  			value -= 0x10000;
  			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  			value = 0xDC00 | value & 0x3FF;
  		}
  		output += stringFromCharCode(value);
  	}
  	return output;
  }

  function checkScalarValue(codePoint, strict) {
  	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  		if (strict) {
  			throw Error(
  				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  				' is not a scalar value'
  			);
  		}
  		return false;
  	}
  	return true;
  }
  /*--------------------------------------------------------------------------*/

  function createByte(codePoint, shift) {
  	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  }

  function encodeCodePoint(codePoint, strict) {
  	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  		return stringFromCharCode(codePoint);
  	}
  	var symbol = '';
  	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  	}
  	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  		if (!checkScalarValue(codePoint, strict)) {
  			codePoint = 0xFFFD;
  		}
  		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  		symbol += createByte(codePoint, 6);
  	}
  	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  		symbol += createByte(codePoint, 12);
  		symbol += createByte(codePoint, 6);
  	}
  	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  	return symbol;
  }

  function utf8encode(string, opts) {
  	opts = opts || {};
  	var strict = false !== opts.strict;

  	var codePoints = ucs2decode(string);
  	var length = codePoints.length;
  	var index = -1;
  	var codePoint;
  	var byteString = '';
  	while (++index < length) {
  		codePoint = codePoints[index];
  		byteString += encodeCodePoint(codePoint, strict);
  	}
  	return byteString;
  }

  /*--------------------------------------------------------------------------*/

  function readContinuationByte() {
  	if (byteIndex >= byteCount) {
  		throw Error('Invalid byte index');
  	}

  	var continuationByte = byteArray[byteIndex] & 0xFF;
  	byteIndex++;

  	if ((continuationByte & 0xC0) == 0x80) {
  		return continuationByte & 0x3F;
  	}

  	// If we end up here, it’s not a continuation byte
  	throw Error('Invalid continuation byte');
  }

  function decodeSymbol(strict) {
  	var byte1;
  	var byte2;
  	var byte3;
  	var byte4;
  	var codePoint;

  	if (byteIndex > byteCount) {
  		throw Error('Invalid byte index');
  	}

  	if (byteIndex == byteCount) {
  		return false;
  	}

  	// Read first byte
  	byte1 = byteArray[byteIndex] & 0xFF;
  	byteIndex++;

  	// 1-byte sequence (no continuation bytes)
  	if ((byte1 & 0x80) == 0) {
  		return byte1;
  	}

  	// 2-byte sequence
  	if ((byte1 & 0xE0) == 0xC0) {
  		byte2 = readContinuationByte();
  		codePoint = ((byte1 & 0x1F) << 6) | byte2;
  		if (codePoint >= 0x80) {
  			return codePoint;
  		} else {
  			throw Error('Invalid continuation byte');
  		}
  	}

  	// 3-byte sequence (may include unpaired surrogates)
  	if ((byte1 & 0xF0) == 0xE0) {
  		byte2 = readContinuationByte();
  		byte3 = readContinuationByte();
  		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  		if (codePoint >= 0x0800) {
  			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
  		} else {
  			throw Error('Invalid continuation byte');
  		}
  	}

  	// 4-byte sequence
  	if ((byte1 & 0xF8) == 0xF0) {
  		byte2 = readContinuationByte();
  		byte3 = readContinuationByte();
  		byte4 = readContinuationByte();
  		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
  			(byte3 << 0x06) | byte4;
  		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  			return codePoint;
  		}
  	}

  	throw Error('Invalid UTF-8 detected');
  }

  var byteArray;
  var byteCount;
  var byteIndex;
  function utf8decode(byteString, opts) {
  	opts = opts || {};
  	var strict = false !== opts.strict;

  	byteArray = ucs2decode(byteString);
  	byteCount = byteArray.length;
  	byteIndex = 0;
  	var codePoints = [];
  	var tmp;
  	while ((tmp = decodeSymbol(strict)) !== false) {
  		codePoints.push(tmp);
  	}
  	return ucs2encode(codePoints);
  }

  var utf8 = {
  	version: '2.1.2',
  	encode: utf8encode,
  	decode: utf8decode
  };

  var base64Arraybuffer = createCommonjsModule(function (module, exports) {
  /*
   * base64-arraybuffer
   * https://github.com/niklasvh/base64-arraybuffer
   *
   * Copyright (c) 2012 Niklas von Hertzen
   * Licensed under the MIT license.
   */
  (function(){

    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    // Use a lookup table to find the index.
    var lookup = new Uint8Array(256);
    for (var i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }

    exports.encode = function(arraybuffer) {
      var bytes = new Uint8Array(arraybuffer),
      i, len = bytes.length, base64 = "";

      for (i = 0; i < len; i+=3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
        base64 += chars[bytes[i + 2] & 63];
      }

      if ((len % 3) === 2) {
        base64 = base64.substring(0, base64.length - 1) + "=";
      } else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + "==";
      }

      return base64;
    };

    exports.decode =  function(base64) {
      var bufferLength = base64.length * 0.75,
      len = base64.length, i, p = 0,
      encoded1, encoded2, encoded3, encoded4;

      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }

      var arraybuffer = new ArrayBuffer(bufferLength),
      bytes = new Uint8Array(arraybuffer);

      for (i = 0; i < len; i+=4) {
        encoded1 = lookup[base64.charCodeAt(i)];
        encoded2 = lookup[base64.charCodeAt(i+1)];
        encoded3 = lookup[base64.charCodeAt(i+2)];
        encoded4 = lookup[base64.charCodeAt(i+3)];

        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
      }

      return arraybuffer;
    };
  })();
  });
  var base64Arraybuffer_1 = base64Arraybuffer.encode;
  var base64Arraybuffer_2 = base64Arraybuffer.decode;

  /**
   * Create a blob builder even when vendor prefixes exist
   */

  var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
    typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
    typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
    typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
    false;

  /**
   * Check if Blob constructor is supported
   */

  var blobSupported = (function() {
    try {
      var a = new Blob(['hi']);
      return a.size === 2;
    } catch(e) {
      return false;
    }
  })();

  /**
   * Check if Blob constructor supports ArrayBufferViews
   * Fails in Safari 6, so we need to map to ArrayBuffers there.
   */

  var blobSupportsArrayBufferView = blobSupported && (function() {
    try {
      var b = new Blob([new Uint8Array([1,2])]);
      return b.size === 2;
    } catch(e) {
      return false;
    }
  })();

  /**
   * Check if BlobBuilder is supported
   */

  var blobBuilderSupported = BlobBuilder
    && BlobBuilder.prototype.append
    && BlobBuilder.prototype.getBlob;

  /**
   * Helper function that maps ArrayBufferViews to ArrayBuffers
   * Used by BlobBuilder constructor and old browsers that didn't
   * support it in the Blob constructor.
   */

  function mapArrayBufferViews(ary) {
    return ary.map(function(chunk) {
      if (chunk.buffer instanceof ArrayBuffer) {
        var buf = chunk.buffer;

        // if this is a subarray, make a copy so we only
        // include the subarray region from the underlying buffer
        if (chunk.byteLength !== buf.byteLength) {
          var copy = new Uint8Array(chunk.byteLength);
          copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
          buf = copy.buffer;
        }

        return buf;
      }

      return chunk;
    });
  }

  function BlobBuilderConstructor(ary, options) {
    options = options || {};

    var bb = new BlobBuilder();
    mapArrayBufferViews(ary).forEach(function(part) {
      bb.append(part);
    });

    return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
  }
  function BlobConstructor(ary, options) {
    return new Blob(mapArrayBufferViews(ary), options || {});
  }
  if (typeof Blob !== 'undefined') {
    BlobBuilderConstructor.prototype = Blob.prototype;
    BlobConstructor.prototype = Blob.prototype;
  }

  var blob = (function() {
    if (blobSupported) {
      return blobSupportsArrayBufferView ? Blob : BlobConstructor;
    } else if (blobBuilderSupported) {
      return BlobBuilderConstructor;
    } else {
      return undefined;
    }
  })();

  var browser$2 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */







  var base64encoder;
  if (typeof ArrayBuffer !== 'undefined') {
    base64encoder = base64Arraybuffer;
  }

  /**
   * Check if we are running an android browser. That requires us to use
   * ArrayBuffer with polling transports...
   *
   * http://ghinda.net/jpeg-blob-ajax-android/
   */

  var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

  /**
   * Check if we are running in PhantomJS.
   * Uploading a Blob with PhantomJS does not work correctly, as reported here:
   * https://github.com/ariya/phantomjs/issues/11395
   * @type boolean
   */
  var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

  /**
   * When true, avoids using Blobs to encode payloads.
   * @type boolean
   */
  var dontSendBlobs = isAndroid || isPhantomJS;

  /**
   * Current protocol version.
   */

  exports.protocol = 3;

  /**
   * Packet types.
   */

  var packets = exports.packets = {
      open:     0    // non-ws
    , close:    1    // non-ws
    , ping:     2
    , pong:     3
    , message:  4
    , upgrade:  5
    , noop:     6
  };

  var packetslist = keys(packets);

  /**
   * Premade error packet.
   */

  var err = { type: 'error', data: 'parser error' };

  /**
   * Create a blob api even for blob builder when vendor prefixes exist
   */



  /**
   * Encodes a packet.
   *
   *     <packet type id> [ <data> ]
   *
   * Example:
   *
   *     5hello world
   *     3
   *     4
   *
   * Binary is encoded in an identical principle
   *
   * @api private
   */

  exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = false;
    }

    if (typeof utf8encode === 'function') {
      callback = utf8encode;
      utf8encode = null;
    }

    var data = (packet.data === undefined)
      ? undefined
      : packet.data.buffer || packet.data;

    if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
      return encodeArrayBuffer(packet, supportsBinary, callback);
    } else if (typeof blob !== 'undefined' && data instanceof blob) {
      return encodeBlob(packet, supportsBinary, callback);
    }

    // might be an object with { base64: true, data: dataAsBase64String }
    if (data && data.base64) {
      return encodeBase64Object(packet, callback);
    }

    // Sending data as a utf-8 string
    var encoded = packets[packet.type];

    // data fragment is optional
    if (undefined !== packet.data) {
      encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
    }

    return callback('' + encoded);

  };

  function encodeBase64Object(packet, callback) {
    // packet data is an object { base64: true, data: dataAsBase64String }
    var message = 'b' + exports.packets[packet.type] + packet.data.data;
    return callback(message);
  }

  /**
   * Encode packet helpers for binary types
   */

  function encodeArrayBuffer(packet, supportsBinary, callback) {
    if (!supportsBinary) {
      return exports.encodeBase64Packet(packet, callback);
    }

    var data = packet.data;
    var contentArray = new Uint8Array(data);
    var resultBuffer = new Uint8Array(1 + data.byteLength);

    resultBuffer[0] = packets[packet.type];
    for (var i = 0; i < contentArray.length; i++) {
      resultBuffer[i+1] = contentArray[i];
    }

    return callback(resultBuffer.buffer);
  }

  function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
    if (!supportsBinary) {
      return exports.encodeBase64Packet(packet, callback);
    }

    var fr = new FileReader();
    fr.onload = function() {
      exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
    };
    return fr.readAsArrayBuffer(packet.data);
  }

  function encodeBlob(packet, supportsBinary, callback) {
    if (!supportsBinary) {
      return exports.encodeBase64Packet(packet, callback);
    }

    if (dontSendBlobs) {
      return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
    }

    var length = new Uint8Array(1);
    length[0] = packets[packet.type];
    var blob$$1 = new blob([length.buffer, packet.data]);

    return callback(blob$$1);
  }

  /**
   * Encodes a packet with binary data in a base64 string
   *
   * @param {Object} packet, has `type` and `data`
   * @return {String} base64 encoded message
   */

  exports.encodeBase64Packet = function(packet, callback) {
    var message = 'b' + exports.packets[packet.type];
    if (typeof blob !== 'undefined' && packet.data instanceof blob) {
      var fr = new FileReader();
      fr.onload = function() {
        var b64 = fr.result.split(',')[1];
        callback(message + b64);
      };
      return fr.readAsDataURL(packet.data);
    }

    var b64data;
    try {
      b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
    } catch (e) {
      // iPhone Safari doesn't let you apply with typed arrays
      var typed = new Uint8Array(packet.data);
      var basic = new Array(typed.length);
      for (var i = 0; i < typed.length; i++) {
        basic[i] = typed[i];
      }
      b64data = String.fromCharCode.apply(null, basic);
    }
    message += btoa(b64data);
    return callback(message);
  };

  /**
   * Decodes a packet. Changes format to Blob if requested.
   *
   * @return {Object} with `type` and `data` (if any)
   * @api private
   */

  exports.decodePacket = function (data, binaryType, utf8decode) {
    if (data === undefined) {
      return err;
    }
    // String data
    if (typeof data === 'string') {
      if (data.charAt(0) === 'b') {
        return exports.decodeBase64Packet(data.substr(1), binaryType);
      }

      if (utf8decode) {
        data = tryDecode(data);
        if (data === false) {
          return err;
        }
      }
      var type = data.charAt(0);

      if (Number(type) != type || !packetslist[type]) {
        return err;
      }

      if (data.length > 1) {
        return { type: packetslist[type], data: data.substring(1) };
      } else {
        return { type: packetslist[type] };
      }
    }

    var asArray = new Uint8Array(data);
    var type = asArray[0];
    var rest = arraybuffer_slice(data, 1);
    if (blob && binaryType === 'blob') {
      rest = new blob([rest]);
    }
    return { type: packetslist[type], data: rest };
  };

  function tryDecode(data) {
    try {
      data = utf8.decode(data, { strict: false });
    } catch (e) {
      return false;
    }
    return data;
  }

  /**
   * Decodes a packet encoded in a base64 string
   *
   * @param {String} base64 encoded message
   * @return {Object} with `type` and `data` (if any)
   */

  exports.decodeBase64Packet = function(msg, binaryType) {
    var type = packetslist[msg.charAt(0)];
    if (!base64encoder) {
      return { type: type, data: { base64: true, data: msg.substr(1) } };
    }

    var data = base64encoder.decode(msg.substr(1));

    if (binaryType === 'blob' && blob) {
      data = new blob([data]);
    }

    return { type: type, data: data };
  };

  /**
   * Encodes multiple messages (payload).
   *
   *     <length>:data
   *
   * Example:
   *
   *     11:hello world2:hi
   *
   * If any contents are binary, they will be encoded as base64 strings. Base64
   * encoded strings are marked with a b before the length specifier
   *
   * @param {Array} packets
   * @api private
   */

  exports.encodePayload = function (packets, supportsBinary, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = null;
    }

    var isBinary = hasBinary2(packets);

    if (supportsBinary && isBinary) {
      if (blob && !dontSendBlobs) {
        return exports.encodePayloadAsBlob(packets, callback);
      }

      return exports.encodePayloadAsArrayBuffer(packets, callback);
    }

    if (!packets.length) {
      return callback('0:');
    }

    function setLengthHeader(message) {
      return message.length + ':' + message;
    }

    function encodeOne(packet, doneCallback) {
      exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
        doneCallback(null, setLengthHeader(message));
      });
    }

    map(packets, encodeOne, function(err, results) {
      return callback(results.join(''));
    });
  };

  /**
   * Async array map using after
   */

  function map(ary, each, done) {
    var result = new Array(ary.length);
    var next = after_1(ary.length, done);

    var eachWithIndex = function(i, el, cb) {
      each(el, function(error, msg) {
        result[i] = msg;
        cb(error, result);
      });
    };

    for (var i = 0; i < ary.length; i++) {
      eachWithIndex(i, ary[i], next);
    }
  }

  /*
   * Decodes data when a payload is maybe expected. Possible binary contents are
   * decoded from their base64 representation
   *
   * @param {String} data, callback method
   * @api public
   */

  exports.decodePayload = function (data, binaryType, callback) {
    if (typeof data !== 'string') {
      return exports.decodePayloadAsBinary(data, binaryType, callback);
    }

    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    var packet;
    if (data === '') {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    var length = '', n, msg;

    for (var i = 0, l = data.length; i < l; i++) {
      var chr = data.charAt(i);

      if (chr !== ':') {
        length += chr;
        continue;
      }

      if (length === '' || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, false);

        if (err.type === packet.type && err.data === packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }

    if (length !== '') {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

  };

  /**
   * Encodes multiple messages (payload) as binary.
   *
   * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
   * 255><data>
   *
   * Example:
   * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
   *
   * @param {Array} packets
   * @return {ArrayBuffer} encoded payload
   * @api private
   */

  exports.encodePayloadAsArrayBuffer = function(packets, callback) {
    if (!packets.length) {
      return callback(new ArrayBuffer(0));
    }

    function encodeOne(packet, doneCallback) {
      exports.encodePacket(packet, true, true, function(data) {
        return doneCallback(null, data);
      });
    }

    map(packets, encodeOne, function(err, encodedPackets) {
      var totalLength = encodedPackets.reduce(function(acc, p) {
        var len;
        if (typeof p === 'string'){
          len = p.length;
        } else {
          len = p.byteLength;
        }
        return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
      }, 0);

      var resultArray = new Uint8Array(totalLength);

      var bufferIndex = 0;
      encodedPackets.forEach(function(p) {
        var isString = typeof p === 'string';
        var ab = p;
        if (isString) {
          var view = new Uint8Array(p.length);
          for (var i = 0; i < p.length; i++) {
            view[i] = p.charCodeAt(i);
          }
          ab = view.buffer;
        }

        if (isString) { // not true binary
          resultArray[bufferIndex++] = 0;
        } else { // true binary
          resultArray[bufferIndex++] = 1;
        }

        var lenStr = ab.byteLength.toString();
        for (var i = 0; i < lenStr.length; i++) {
          resultArray[bufferIndex++] = parseInt(lenStr[i]);
        }
        resultArray[bufferIndex++] = 255;

        var view = new Uint8Array(ab);
        for (var i = 0; i < view.length; i++) {
          resultArray[bufferIndex++] = view[i];
        }
      });

      return callback(resultArray.buffer);
    });
  };

  /**
   * Encode as Blob
   */

  exports.encodePayloadAsBlob = function(packets, callback) {
    function encodeOne(packet, doneCallback) {
      exports.encodePacket(packet, true, true, function(encoded) {
        var binaryIdentifier = new Uint8Array(1);
        binaryIdentifier[0] = 1;
        if (typeof encoded === 'string') {
          var view = new Uint8Array(encoded.length);
          for (var i = 0; i < encoded.length; i++) {
            view[i] = encoded.charCodeAt(i);
          }
          encoded = view.buffer;
          binaryIdentifier[0] = 0;
        }

        var len = (encoded instanceof ArrayBuffer)
          ? encoded.byteLength
          : encoded.size;

        var lenStr = len.toString();
        var lengthAry = new Uint8Array(lenStr.length + 1);
        for (var i = 0; i < lenStr.length; i++) {
          lengthAry[i] = parseInt(lenStr[i]);
        }
        lengthAry[lenStr.length] = 255;

        if (blob) {
          var blob$$1 = new blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
          doneCallback(null, blob$$1);
        }
      });
    }

    map(packets, encodeOne, function(err, results) {
      return callback(new blob(results));
    });
  };

  /*
   * Decodes data when a payload is maybe expected. Strings are decoded by
   * interpreting each byte as a key code for entries marked to start with 0. See
   * description of encodePayloadAsBinary
   *
   * @param {ArrayBuffer} data, callback method
   * @api public
   */

  exports.decodePayloadAsBinary = function (data, binaryType, callback) {
    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    var bufferTail = data;
    var buffers = [];

    while (bufferTail.byteLength > 0) {
      var tailArray = new Uint8Array(bufferTail);
      var isString = tailArray[0] === 0;
      var msgLength = '';

      for (var i = 1; ; i++) {
        if (tailArray[i] === 255) break;

        // 310 = char length of Number.MAX_VALUE
        if (msgLength.length > 310) {
          return callback(err, 0, 1);
        }

        msgLength += tailArray[i];
      }

      bufferTail = arraybuffer_slice(bufferTail, 2 + msgLength.length);
      msgLength = parseInt(msgLength);

      var msg = arraybuffer_slice(bufferTail, 0, msgLength);
      if (isString) {
        try {
          msg = String.fromCharCode.apply(null, new Uint8Array(msg));
        } catch (e) {
          // iPhone Safari doesn't let you apply to typed arrays
          var typed = new Uint8Array(msg);
          msg = '';
          for (var i = 0; i < typed.length; i++) {
            msg += String.fromCharCode(typed[i]);
          }
        }
      }

      buffers.push(msg);
      bufferTail = arraybuffer_slice(bufferTail, msgLength);
    }

    var total = buffers.length;
    buffers.forEach(function(buffer, i) {
      callback(exports.decodePacket(buffer, binaryType, true), i, total);
    });
  };
  });
  var browser_1$1 = browser$2.protocol;
  var browser_2$1 = browser$2.packets;
  var browser_3$1 = browser$2.encodePacket;
  var browser_4$1 = browser$2.encodeBase64Packet;
  var browser_5$1 = browser$2.decodePacket;
  var browser_6$1 = browser$2.decodeBase64Packet;
  var browser_7$1 = browser$2.encodePayload;
  var browser_8 = browser$2.decodePayload;
  var browser_9 = browser$2.encodePayloadAsArrayBuffer;
  var browser_10 = browser$2.encodePayloadAsBlob;
  var browser_11 = browser$2.decodePayloadAsBinary;

  /**
   * Module dependencies.
   */




  /**
   * Module exports.
   */

  var transport = Transport;

  /**
   * Transport abstract constructor.
   *
   * @param {Object} options.
   * @api private
   */

  function Transport (opts) {
    this.path = opts.path;
    this.hostname = opts.hostname;
    this.port = opts.port;
    this.secure = opts.secure;
    this.query = opts.query;
    this.timestampParam = opts.timestampParam;
    this.timestampRequests = opts.timestampRequests;
    this.readyState = '';
    this.agent = opts.agent || false;
    this.socket = opts.socket;
    this.enablesXDR = opts.enablesXDR;

    // SSL options for Node.js client
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;
    this.forceNode = opts.forceNode;

    // results of ReactNative environment detection
    this.isReactNative = opts.isReactNative;

    // other options for Node.js client
    this.extraHeaders = opts.extraHeaders;
    this.localAddress = opts.localAddress;
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Transport.prototype);

  /**
   * Emits an error.
   *
   * @param {String} str
   * @return {Transport} for chaining
   * @api public
   */

  Transport.prototype.onError = function (msg, desc) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
    return this;
  };

  /**
   * Opens the transport.
   *
   * @api public
   */

  Transport.prototype.open = function () {
    if ('closed' === this.readyState || '' === this.readyState) {
      this.readyState = 'opening';
      this.doOpen();
    }

    return this;
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  Transport.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.doClose();
      this.onClose();
    }

    return this;
  };

  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   * @api private
   */

  Transport.prototype.send = function (packets) {
    if ('open' === this.readyState) {
      this.write(packets);
    } else {
      throw new Error('Transport not open');
    }
  };

  /**
   * Called upon open
   *
   * @api private
   */

  Transport.prototype.onOpen = function () {
    this.readyState = 'open';
    this.writable = true;
    this.emit('open');
  };

  /**
   * Called with data.
   *
   * @param {String} data
   * @api private
   */

  Transport.prototype.onData = function (data) {
    var packet = browser$2.decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  };

  /**
   * Called with a decoded packet.
   */

  Transport.prototype.onPacket = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon close.
   *
   * @api private
   */

  Transport.prototype.onClose = function () {
    this.readyState = 'closed';
    this.emit('close');
  };

  /**
   * Compiles a querystring
   * Returns string representation of the object
   *
   * @param {Object}
   * @api private
   */

  var encode = function (obj) {
    var str = '';

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        if (str.length) str += '&';
        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
    }

    return str;
  };

  /**
   * Parses a simple querystring into an object
   *
   * @param {String} qs
   * @api private
   */

  var decode$1 = function(qs){
    var qry = {};
    var pairs = qs.split('&');
    for (var i = 0, l = pairs.length; i < l; i++) {
      var pair = pairs[i].split('=');
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  };

  var parseqs = {
  	encode: encode,
  	decode: decode$1
  };

  var componentInherit = function(a, b){
    var fn = function(){};
    fn.prototype = b.prototype;
    a.prototype = new fn;
    a.prototype.constructor = a;
  };

  var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
    , length = 64
    , map$2 = {}
    , seed = 0
    , i = 0
    , prev;

  /**
   * Return a string representing the specified number.
   *
   * @param {Number} num The number to convert.
   * @returns {String} The string representation of the number.
   * @api public
   */
  function encode$1(num) {
    var encoded = '';

    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);

    return encoded;
  }

  /**
   * Return the integer value specified by the given string.
   *
   * @param {String} str The string to convert.
   * @returns {Number} The integer value represented by the string.
   * @api public
   */
  function decode$2(str) {
    var decoded = 0;

    for (i = 0; i < str.length; i++) {
      decoded = decoded * length + map$2[str.charAt(i)];
    }

    return decoded;
  }

  /**
   * Yeast: A tiny growing id generator.
   *
   * @returns {String} A unique id.
   * @api public
   */
  function yeast() {
    var now = encode$1(+new Date());

    if (now !== prev) return seed = 0, prev = now;
    return now +'.'+ encode$1(seed++);
  }

  //
  // Map each character to its index.
  //
  for (; i < length; i++) map$2[alphabet[i]] = i;

  //
  // Expose the `yeast`, `encode` and `decode` functions.
  //
  yeast.encode = encode$1;
  yeast.decode = decode$2;
  var yeast_1 = yeast;

  /**
   * Module dependencies.
   */






  var debug$2 = browser$1('engine.io-client:polling');

  /**
   * Module exports.
   */

  var polling = Polling;

  /**
   * Is XHR2 supported?
   */

  var hasXHR2 = (function () {
    var XMLHttpRequest = xmlhttprequest;
    var xhr = new XMLHttpRequest({ xdomain: false });
    return null != xhr.responseType;
  })();

  /**
   * Polling interface.
   *
   * @param {Object} opts
   * @api private
   */

  function Polling (opts) {
    var forceBase64 = (opts && opts.forceBase64);
    if (!hasXHR2 || forceBase64) {
      this.supportsBinary = false;
    }
    transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  componentInherit(Polling, transport);

  /**
   * Transport name.
   */

  Polling.prototype.name = 'polling';

  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @api private
   */

  Polling.prototype.doOpen = function () {
    this.poll();
  };

  /**
   * Pauses polling.
   *
   * @param {Function} callback upon buffers are flushed and transport is paused
   * @api private
   */

  Polling.prototype.pause = function (onPause) {
    var self = this;

    this.readyState = 'pausing';

    function pause () {
      debug$2('paused');
      self.readyState = 'paused';
      onPause();
    }

    if (this.polling || !this.writable) {
      var total = 0;

      if (this.polling) {
        debug$2('we are currently polling - waiting to pause');
        total++;
        this.once('pollComplete', function () {
          debug$2('pre-pause polling complete');
          --total || pause();
        });
      }

      if (!this.writable) {
        debug$2('we are currently writing - waiting to pause');
        total++;
        this.once('drain', function () {
          debug$2('pre-pause writing complete');
          --total || pause();
        });
      }
    } else {
      pause();
    }
  };

  /**
   * Starts polling cycle.
   *
   * @api public
   */

  Polling.prototype.poll = function () {
    debug$2('polling');
    this.polling = true;
    this.doPoll();
    this.emit('poll');
  };

  /**
   * Overloads onData to detect payloads.
   *
   * @api private
   */

  Polling.prototype.onData = function (data) {
    var self = this;
    debug$2('polling got data %s', data);
    var callback = function (packet, index, total) {
      // if its the first message we consider the transport open
      if ('opening' === self.readyState) {
        self.onOpen();
      }

      // if its a close packet, we close the ongoing requests
      if ('close' === packet.type) {
        self.onClose();
        return false;
      }

      // otherwise bypass onData and handle the message
      self.onPacket(packet);
    };

    // decode payload
    browser$2.decodePayload(data, this.socket.binaryType, callback);

    // if an event did not trigger closing
    if ('closed' !== this.readyState) {
      // if we got data we're not polling
      this.polling = false;
      this.emit('pollComplete');

      if ('open' === this.readyState) {
        this.poll();
      } else {
        debug$2('ignoring poll - transport state "%s"', this.readyState);
      }
    }
  };

  /**
   * For polling, send a close packet.
   *
   * @api private
   */

  Polling.prototype.doClose = function () {
    var self = this;

    function close () {
      debug$2('writing close packet');
      self.write([{ type: 'close' }]);
    }

    if ('open' === this.readyState) {
      debug$2('transport open - closing');
      close();
    } else {
      // in case we're trying to close while
      // handshaking is in progress (GH-164)
      debug$2('transport not open - deferring close');
      this.once('open', close);
    }
  };

  /**
   * Writes a packets payload.
   *
   * @param {Array} data packets
   * @param {Function} drain callback
   * @api private
   */

  Polling.prototype.write = function (packets) {
    var self = this;
    this.writable = false;
    var callbackfn = function () {
      self.writable = true;
      self.emit('drain');
    };

    browser$2.encodePayload(packets, this.supportsBinary, function (data) {
      self.doWrite(data, callbackfn);
    });
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  Polling.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'https' : 'http';
    var port = '';

    // cache busting is forced
    if (false !== this.timestampRequests) {
      query[this.timestampParam] = yeast_1();
    }

    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // avoid port if default for schema
    if (this.port && (('https' === schema && Number(this.port) !== 443) ||
       ('http' === schema && Number(this.port) !== 80))) {
      port = ':' + this.port;
    }

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };

  /* global attachEvent */

  /**
   * Module requirements.
   */





  var debug$3 = browser$1('engine.io-client:polling-xhr');

  /**
   * Module exports.
   */

  var pollingXhr = XHR;
  var Request_1 = Request$1;

  /**
   * Empty function
   */

  function empty$2 () {}

  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @api public
   */

  function XHR (opts) {
    polling.call(this, opts);
    this.requestTimeout = opts.requestTimeout;
    this.extraHeaders = opts.extraHeaders;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      // some user agents have empty `location.port`
      if (!port) {
        port = isSSL ? 443 : 80;
      }

      this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
        port !== opts.port;
      this.xs = opts.secure !== isSSL;
    }
  }

  /**
   * Inherits from Polling.
   */

  componentInherit(XHR, polling);

  /**
   * XHR supports binary
   */

  XHR.prototype.supportsBinary = true;

  /**
   * Creates a request.
   *
   * @param {String} method
   * @api private
   */

  XHR.prototype.request = function (opts) {
    opts = opts || {};
    opts.uri = this.uri();
    opts.xd = this.xd;
    opts.xs = this.xs;
    opts.agent = this.agent || false;
    opts.supportsBinary = this.supportsBinary;
    opts.enablesXDR = this.enablesXDR;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
    opts.requestTimeout = this.requestTimeout;

    // other options for Node.js client
    opts.extraHeaders = this.extraHeaders;

    return new Request$1(opts);
  };

  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @api private
   */

  XHR.prototype.doWrite = function (data, fn) {
    var isBinary = typeof data !== 'string' && data !== undefined;
    var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
    var self = this;
    req.on('success', fn);
    req.on('error', function (err) {
      self.onError('xhr post error', err);
    });
    this.sendXhr = req;
  };

  /**
   * Starts a poll cycle.
   *
   * @api private
   */

  XHR.prototype.doPoll = function () {
    debug$3('xhr poll');
    var req = this.request();
    var self = this;
    req.on('data', function (data) {
      self.onData(data);
    });
    req.on('error', function (err) {
      self.onError('xhr poll error', err);
    });
    this.pollXhr = req;
  };

  /**
   * Request constructor
   *
   * @param {Object} options
   * @api public
   */

  function Request$1 (opts) {
    this.method = opts.method || 'GET';
    this.uri = opts.uri;
    this.xd = !!opts.xd;
    this.xs = !!opts.xs;
    this.async = false !== opts.async;
    this.data = undefined !== opts.data ? opts.data : null;
    this.agent = opts.agent;
    this.isBinary = opts.isBinary;
    this.supportsBinary = opts.supportsBinary;
    this.enablesXDR = opts.enablesXDR;
    this.requestTimeout = opts.requestTimeout;

    // SSL options for Node.js client
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;

    // other options for Node.js client
    this.extraHeaders = opts.extraHeaders;

    this.create();
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Request$1.prototype);

  /**
   * Creates the XHR object and sends the request.
   *
   * @api private
   */

  Request$1.prototype.create = function () {
    var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;

    var xhr = this.xhr = new xmlhttprequest(opts);
    var self = this;

    try {
      debug$3('xhr open %s: %s', this.method, this.uri);
      xhr.open(this.method, this.uri, this.async);
      try {
        if (this.extraHeaders) {
          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
          for (var i in this.extraHeaders) {
            if (this.extraHeaders.hasOwnProperty(i)) {
              xhr.setRequestHeader(i, this.extraHeaders[i]);
            }
          }
        }
      } catch (e) {}

      if ('POST' === this.method) {
        try {
          if (this.isBinary) {
            xhr.setRequestHeader('Content-type', 'application/octet-stream');
          } else {
            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
          }
        } catch (e) {}
      }

      try {
        xhr.setRequestHeader('Accept', '*/*');
      } catch (e) {}

      // ie6 check
      if ('withCredentials' in xhr) {
        xhr.withCredentials = true;
      }

      if (this.requestTimeout) {
        xhr.timeout = this.requestTimeout;
      }

      if (this.hasXDR()) {
        xhr.onload = function () {
          self.onLoad();
        };
        xhr.onerror = function () {
          self.onError(xhr.responseText);
        };
      } else {
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 2) {
            try {
              var contentType = xhr.getResponseHeader('Content-Type');
              if (self.supportsBinary && contentType === 'application/octet-stream') {
                xhr.responseType = 'arraybuffer';
              }
            } catch (e) {}
          }
          if (4 !== xhr.readyState) return;
          if (200 === xhr.status || 1223 === xhr.status) {
            self.onLoad();
          } else {
            // make sure the `error` event handler that's user-set
            // does not throw in the same tick and gets caught here
            setTimeout(function () {
              self.onError(xhr.status);
            }, 0);
          }
        };
      }

      debug$3('xhr data %s', this.data);
      xhr.send(this.data);
    } catch (e) {
      // Need to defer since .create() is called directly fhrom the constructor
      // and thus the 'error' event can only be only bound *after* this exception
      // occurs.  Therefore, also, we cannot throw here at all.
      setTimeout(function () {
        self.onError(e);
      }, 0);
      return;
    }

    if (typeof document !== 'undefined') {
      this.index = Request$1.requestsCount++;
      Request$1.requests[this.index] = this;
    }
  };

  /**
   * Called upon successful response.
   *
   * @api private
   */

  Request$1.prototype.onSuccess = function () {
    this.emit('success');
    this.cleanup();
  };

  /**
   * Called if we have data.
   *
   * @api private
   */

  Request$1.prototype.onData = function (data) {
    this.emit('data', data);
    this.onSuccess();
  };

  /**
   * Called upon error.
   *
   * @api private
   */

  Request$1.prototype.onError = function (err) {
    this.emit('error', err);
    this.cleanup(true);
  };

  /**
   * Cleans up house.
   *
   * @api private
   */

  Request$1.prototype.cleanup = function (fromError) {
    if ('undefined' === typeof this.xhr || null === this.xhr) {
      return;
    }
    // xmlhttprequest
    if (this.hasXDR()) {
      this.xhr.onload = this.xhr.onerror = empty$2;
    } else {
      this.xhr.onreadystatechange = empty$2;
    }

    if (fromError) {
      try {
        this.xhr.abort();
      } catch (e) {}
    }

    if (typeof document !== 'undefined') {
      delete Request$1.requests[this.index];
    }

    this.xhr = null;
  };

  /**
   * Called upon load.
   *
   * @api private
   */

  Request$1.prototype.onLoad = function () {
    var data;
    try {
      var contentType;
      try {
        contentType = this.xhr.getResponseHeader('Content-Type');
      } catch (e) {}
      if (contentType === 'application/octet-stream') {
        data = this.xhr.response || this.xhr.responseText;
      } else {
        data = this.xhr.responseText;
      }
    } catch (e) {
      this.onError(e);
    }
    if (null != data) {
      this.onData(data);
    }
  };

  /**
   * Check if it has XDomainRequest.
   *
   * @api private
   */

  Request$1.prototype.hasXDR = function () {
    return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
  };

  /**
   * Aborts the request.
   *
   * @api public
   */

  Request$1.prototype.abort = function () {
    this.cleanup();
  };

  /**
   * Aborts pending requests when unloading the window. This is needed to prevent
   * memory leaks (e.g. when using IE) and to ensure that no spurious error is
   * emitted.
   */

  Request$1.requestsCount = 0;
  Request$1.requests = {};

  if (typeof document !== 'undefined') {
    if (typeof attachEvent === 'function') {
      attachEvent('onunload', unloadHandler);
    } else if (typeof addEventListener === 'function') {
      var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }

  function unloadHandler () {
    for (var i in Request$1.requests) {
      if (Request$1.requests.hasOwnProperty(i)) {
        Request$1.requests[i].abort();
      }
    }
  }
  pollingXhr.Request = Request_1;

  /**
   * Module requirements.
   */




  /**
   * Module exports.
   */

  var pollingJsonp = JSONPPolling;

  /**
   * Cached regular expressions.
   */

  var rNewline = /\n/g;
  var rEscapedNewline = /\\n/g;

  /**
   * Global JSONP callbacks.
   */

  var callbacks;

  /**
   * Noop.
   */

  function empty$3 () { }

  /**
   * Until https://github.com/tc39/proposal-global is shipped.
   */
  function glob () {
    return typeof self !== 'undefined' ? self
        : typeof window !== 'undefined' ? window
        : typeof commonjsGlobal$1 !== 'undefined' ? commonjsGlobal$1 : {};
  }

  /**
   * JSONP Polling constructor.
   *
   * @param {Object} opts.
   * @api public
   */

  function JSONPPolling (opts) {
    polling.call(this, opts);

    this.query = this.query || {};

    // define global callbacks array if not present
    // we do this here (lazily) to avoid unneeded global pollution
    if (!callbacks) {
      // we need to consider multiple engines in the same page
      var global = glob();
      callbacks = global.___eio = (global.___eio || []);
    }

    // callback identifier
    this.index = callbacks.length;

    // add callback to jsonp global
    var self = this;
    callbacks.push(function (msg) {
      self.onData(msg);
    });

    // append to query string
    this.query.j = this.index;

    // prevent spurious errors from being emitted when the window is unloaded
    if (typeof addEventListener === 'function') {
      addEventListener('beforeunload', function () {
        if (self.script) self.script.onerror = empty$3;
      }, false);
    }
  }

  /**
   * Inherits from Polling.
   */

  componentInherit(JSONPPolling, polling);

  /*
   * JSONP only supports binary as base64 encoded strings
   */

  JSONPPolling.prototype.supportsBinary = false;

  /**
   * Closes the socket.
   *
   * @api private
   */

  JSONPPolling.prototype.doClose = function () {
    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    if (this.form) {
      this.form.parentNode.removeChild(this.form);
      this.form = null;
      this.iframe = null;
    }

    polling.prototype.doClose.call(this);
  };

  /**
   * Starts a poll cycle.
   *
   * @api private
   */

  JSONPPolling.prototype.doPoll = function () {
    var self = this;
    var script = document.createElement('script');

    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    script.async = true;
    script.src = this.uri();
    script.onerror = function (e) {
      self.onError('jsonp poll error', e);
    };

    var insertAt = document.getElementsByTagName('script')[0];
    if (insertAt) {
      insertAt.parentNode.insertBefore(script, insertAt);
    } else {
      (document.head || document.body).appendChild(script);
    }
    this.script = script;

    var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

    if (isUAgecko) {
      setTimeout(function () {
        var iframe = document.createElement('iframe');
        document.body.appendChild(iframe);
        document.body.removeChild(iframe);
      }, 100);
    }
  };

  /**
   * Writes with a hidden iframe.
   *
   * @param {String} data to send
   * @param {Function} called upon flush.
   * @api private
   */

  JSONPPolling.prototype.doWrite = function (data, fn) {
    var self = this;

    if (!this.form) {
      var form = document.createElement('form');
      var area = document.createElement('textarea');
      var id = this.iframeId = 'eio_iframe_' + this.index;
      var iframe;

      form.className = 'socketio';
      form.style.position = 'absolute';
      form.style.top = '-1000px';
      form.style.left = '-1000px';
      form.target = id;
      form.method = 'POST';
      form.setAttribute('accept-charset', 'utf-8');
      area.name = 'd';
      form.appendChild(area);
      document.body.appendChild(form);

      this.form = form;
      this.area = area;
    }

    this.form.action = this.uri();

    function complete () {
      initIframe();
      fn();
    }

    function initIframe () {
      if (self.iframe) {
        try {
          self.form.removeChild(self.iframe);
        } catch (e) {
          self.onError('jsonp polling iframe removal error', e);
        }
      }

      try {
        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
        var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
        iframe = document.createElement(html);
      } catch (e) {
        iframe = document.createElement('iframe');
        iframe.name = self.iframeId;
        iframe.src = 'javascript:0';
      }

      iframe.id = self.iframeId;

      self.form.appendChild(iframe);
      self.iframe = iframe;
    }

    initIframe();

    // escape \n to prevent it from being converted into \r\n by some UAs
    // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
    data = data.replace(rEscapedNewline, '\\\n');
    this.area.value = data.replace(rNewline, '\\n');

    try {
      this.form.submit();
    } catch (e) {}

    if (this.iframe.attachEvent) {
      this.iframe.onreadystatechange = function () {
        if (self.iframe.readyState === 'complete') {
          complete();
        }
      };
    } else {
      this.iframe.onload = complete;
    }
  };

  var require$$1 = {};

  /**
   * Module dependencies.
   */






  var debug$4 = browser$1('engine.io-client:websocket');

  var BrowserWebSocket, NodeWebSocket;

  if (typeof WebSocket !== 'undefined') {
    BrowserWebSocket = WebSocket;
  } else if (typeof self !== 'undefined') {
    BrowserWebSocket = self.WebSocket || self.MozWebSocket;
  } else {
    try {
      NodeWebSocket = require$$1;
    } catch (e) { }
  }

  /**
   * Get either the `WebSocket` or `MozWebSocket` globals
   * in the browser or try to resolve WebSocket-compatible
   * interface exposed by `ws` for Node-like environment.
   */

  var WebSocketImpl$1 = BrowserWebSocket || NodeWebSocket;

  /**
   * Module exports.
   */

  var websocket = WS;

  /**
   * WebSocket transport constructor.
   *
   * @api {Object} connection options
   * @api public
   */

  function WS (opts) {
    var forceBase64 = (opts && opts.forceBase64);
    if (forceBase64) {
      this.supportsBinary = false;
    }
    this.perMessageDeflate = opts.perMessageDeflate;
    this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
    this.protocols = opts.protocols;
    if (!this.usingBrowserWebSocket) {
      WebSocketImpl$1 = NodeWebSocket;
    }
    transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  componentInherit(WS, transport);

  /**
   * Transport name.
   *
   * @api public
   */

  WS.prototype.name = 'websocket';

  /*
   * WebSockets support binary
   */

  WS.prototype.supportsBinary = true;

  /**
   * Opens socket.
   *
   * @api private
   */

  WS.prototype.doOpen = function () {
    if (!this.check()) {
      // let probe timeout
      return;
    }

    var uri = this.uri();
    var protocols = this.protocols;
    var opts = {
      agent: this.agent,
      perMessageDeflate: this.perMessageDeflate
    };

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
    if (this.extraHeaders) {
      opts.headers = this.extraHeaders;
    }
    if (this.localAddress) {
      opts.localAddress = this.localAddress;
    }

    try {
      this.ws =
        this.usingBrowserWebSocket && !this.isReactNative
          ? protocols
            ? new WebSocketImpl$1(uri, protocols)
            : new WebSocketImpl$1(uri)
          : new WebSocketImpl$1(uri, protocols, opts);
    } catch (err) {
      return this.emit('error', err);
    }

    if (this.ws.binaryType === undefined) {
      this.supportsBinary = false;
    }

    if (this.ws.supports && this.ws.supports.binary) {
      this.supportsBinary = true;
      this.ws.binaryType = 'nodebuffer';
    } else {
      this.ws.binaryType = 'arraybuffer';
    }

    this.addEventListeners();
  };

  /**
   * Adds event listeners to the socket
   *
   * @api private
   */

  WS.prototype.addEventListeners = function () {
    var self = this;

    this.ws.onopen = function () {
      self.onOpen();
    };
    this.ws.onclose = function () {
      self.onClose();
    };
    this.ws.onmessage = function (ev) {
      self.onData(ev.data);
    };
    this.ws.onerror = function (e) {
      self.onError('websocket error', e);
    };
  };

  /**
   * Writes data to socket.
   *
   * @param {Array} array of packets.
   * @api private
   */

  WS.prototype.write = function (packets) {
    var self = this;
    this.writable = false;

    // encodePacket efficient as it uses WS framing
    // no need for encodePayload
    var total = packets.length;
    for (var i = 0, l = total; i < l; i++) {
      (function (packet) {
        browser$2.encodePacket(packet, self.supportsBinary, function (data) {
          if (!self.usingBrowserWebSocket) {
            // always create a new object (GH-437)
            var opts = {};
            if (packet.options) {
              opts.compress = packet.options.compress;
            }

            if (self.perMessageDeflate) {
              var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
              if (len < self.perMessageDeflate.threshold) {
                opts.compress = false;
              }
            }
          }

          // Sometimes the websocket has already been closed but the browser didn't
          // have a chance of informing us about it yet, in that case send will
          // throw an error
          try {
            if (self.usingBrowserWebSocket) {
              // TypeError is thrown when passing the second argument on Safari
              self.ws.send(data);
            } else {
              self.ws.send(data, opts);
            }
          } catch (e) {
            debug$4('websocket closed before onclose event');
          }

          --total || done();
        });
      })(packets[i]);
    }

    function done () {
      self.emit('flush');

      // fake drain
      // defer to next tick to allow Socket to clear writeBuffer
      setTimeout(function () {
        self.writable = true;
        self.emit('drain');
      }, 0);
    }
  };

  /**
   * Called upon close
   *
   * @api private
   */

  WS.prototype.onClose = function () {
    transport.prototype.onClose.call(this);
  };

  /**
   * Closes socket.
   *
   * @api private
   */

  WS.prototype.doClose = function () {
    if (typeof this.ws !== 'undefined') {
      this.ws.close();
    }
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  WS.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'wss' : 'ws';
    var port = '';

    // avoid port if default for schema
    if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
      ('ws' === schema && Number(this.port) !== 80))) {
      port = ':' + this.port;
    }

    // append timestamp to URI
    if (this.timestampRequests) {
      query[this.timestampParam] = yeast_1();
    }

    // communicate binary support capabilities
    if (!this.supportsBinary) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };

  /**
   * Feature detection for WebSocket.
   *
   * @return {Boolean} whether this transport is available.
   * @api public
   */

  WS.prototype.check = function () {
    return !!WebSocketImpl$1 && !('__initialize' in WebSocketImpl$1 && this.name === WS.prototype.name);
  };

  /**
   * Module dependencies
   */






  /**
   * Export transports.
   */

  var polling_1 = polling$1;
  var websocket_1 = websocket;

  /**
   * Polling transport polymorphic constructor.
   * Decides on xhr vs jsonp based on feature detection.
   *
   * @api private
   */

  function polling$1 (opts) {
    var xhr;
    var xd = false;
    var xs = false;
    var jsonp = false !== opts.jsonp;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      // some user agents have empty `location.port`
      if (!port) {
        port = isSSL ? 443 : 80;
      }

      xd = opts.hostname !== location.hostname || port !== opts.port;
      xs = opts.secure !== isSSL;
    }

    opts.xdomain = xd;
    opts.xscheme = xs;
    xhr = new xmlhttprequest(opts);

    if ('open' in xhr && !opts.forceJSONP) {
      return new pollingXhr(opts);
    } else {
      if (!jsonp) throw new Error('JSONP disabled');
      return new pollingJsonp(opts);
    }
  }

  var transports = {
  	polling: polling_1,
  	websocket: websocket_1
  };

  var indexOf = [].indexOf;

  var indexof = function(arr, obj){
    if (indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };

  /**
   * Module dependencies.
   */



  var debug$5 = browser$1('engine.io-client:socket');





  /**
   * Module exports.
   */

  var socket = Socket;

  /**
   * Socket constructor.
   *
   * @param {String|Object} uri or options
   * @param {Object} options
   * @api public
   */

  function Socket (uri, opts) {
    if (!(this instanceof Socket)) return new Socket(uri, opts);

    opts = opts || {};

    if (uri && 'object' === typeof uri) {
      opts = uri;
      uri = null;
    }

    if (uri) {
      uri = parseuri(uri);
      opts.hostname = uri.host;
      opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
      opts.port = uri.port;
      if (uri.query) opts.query = uri.query;
    } else if (opts.host) {
      opts.hostname = parseuri(opts.host).host;
    }

    this.secure = null != opts.secure ? opts.secure
      : (typeof location !== 'undefined' && 'https:' === location.protocol);

    if (opts.hostname && !opts.port) {
      // if no port is specified manually, use the protocol default
      opts.port = this.secure ? '443' : '80';
    }

    this.agent = opts.agent || false;
    this.hostname = opts.hostname ||
      (typeof location !== 'undefined' ? location.hostname : 'localhost');
    this.port = opts.port || (typeof location !== 'undefined' && location.port
        ? location.port
        : (this.secure ? 443 : 80));
    this.query = opts.query || {};
    if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
    this.upgrade = false !== opts.upgrade;
    this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
    this.forceJSONP = !!opts.forceJSONP;
    this.jsonp = false !== opts.jsonp;
    this.forceBase64 = !!opts.forceBase64;
    this.enablesXDR = !!opts.enablesXDR;
    this.timestampParam = opts.timestampParam || 't';
    this.timestampRequests = opts.timestampRequests;
    this.transports = opts.transports || ['polling', 'websocket'];
    this.transportOptions = opts.transportOptions || {};
    this.readyState = '';
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.policyPort = opts.policyPort || 843;
    this.rememberUpgrade = opts.rememberUpgrade || false;
    this.binaryType = null;
    this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
    this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

    if (true === this.perMessageDeflate) this.perMessageDeflate = {};
    if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
      this.perMessageDeflate.threshold = 1024;
    }

    // SSL options for Node.js client
    this.pfx = opts.pfx || null;
    this.key = opts.key || null;
    this.passphrase = opts.passphrase || null;
    this.cert = opts.cert || null;
    this.ca = opts.ca || null;
    this.ciphers = opts.ciphers || null;
    this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
    this.forceNode = !!opts.forceNode;

    // detect ReactNative environment
    this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

    // other options for Node.js or ReactNative client
    if (typeof self === 'undefined' || this.isReactNative) {
      if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
        this.extraHeaders = opts.extraHeaders;
      }

      if (opts.localAddress) {
        this.localAddress = opts.localAddress;
      }
    }

    // set on handshake
    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;

    // set on heartbeat
    this.pingIntervalTimer = null;
    this.pingTimeoutTimer = null;

    this.open();
  }

  Socket.priorWebsocketSuccess = false;

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Socket.prototype);

  /**
   * Protocol version.
   *
   * @api public
   */

  Socket.protocol = browser$2.protocol; // this is an int

  /**
   * Expose deps for legacy compatibility
   * and standalone browser access.
   */

  Socket.Socket = Socket;
  Socket.Transport = transport;
  Socket.transports = transports;
  Socket.parser = browser$2;

  /**
   * Creates transport of the given type.
   *
   * @param {String} transport name
   * @return {Transport}
   * @api private
   */

  Socket.prototype.createTransport = function (name) {
    debug$5('creating transport "%s"', name);
    var query = clone(this.query);

    // append engine.io protocol identifier
    query.EIO = browser$2.protocol;

    // transport name
    query.transport = name;

    // per-transport options
    var options = this.transportOptions[name] || {};

    // session id if we already have one
    if (this.id) query.sid = this.id;

    var transport$$1 = new transports[name]({
      query: query,
      socket: this,
      agent: options.agent || this.agent,
      hostname: options.hostname || this.hostname,
      port: options.port || this.port,
      secure: options.secure || this.secure,
      path: options.path || this.path,
      forceJSONP: options.forceJSONP || this.forceJSONP,
      jsonp: options.jsonp || this.jsonp,
      forceBase64: options.forceBase64 || this.forceBase64,
      enablesXDR: options.enablesXDR || this.enablesXDR,
      timestampRequests: options.timestampRequests || this.timestampRequests,
      timestampParam: options.timestampParam || this.timestampParam,
      policyPort: options.policyPort || this.policyPort,
      pfx: options.pfx || this.pfx,
      key: options.key || this.key,
      passphrase: options.passphrase || this.passphrase,
      cert: options.cert || this.cert,
      ca: options.ca || this.ca,
      ciphers: options.ciphers || this.ciphers,
      rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
      perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
      extraHeaders: options.extraHeaders || this.extraHeaders,
      forceNode: options.forceNode || this.forceNode,
      localAddress: options.localAddress || this.localAddress,
      requestTimeout: options.requestTimeout || this.requestTimeout,
      protocols: options.protocols || void (0),
      isReactNative: this.isReactNative
    });

    return transport$$1;
  };

  function clone (obj) {
    var o = {};
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        o[i] = obj[i];
      }
    }
    return o;
  }

  /**
   * Initializes transport to use and starts probe.
   *
   * @api private
   */
  Socket.prototype.open = function () {
    var transport$$1;
    if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
      transport$$1 = 'websocket';
    } else if (0 === this.transports.length) {
      // Emit error on next tick so it can be listened to
      var self = this;
      setTimeout(function () {
        self.emit('error', 'No transports available');
      }, 0);
      return;
    } else {
      transport$$1 = this.transports[0];
    }
    this.readyState = 'opening';

    // Retry with the next transport if the transport is disabled (jsonp: false)
    try {
      transport$$1 = this.createTransport(transport$$1);
    } catch (e) {
      this.transports.shift();
      this.open();
      return;
    }

    transport$$1.open();
    this.setTransport(transport$$1);
  };

  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @api private
   */

  Socket.prototype.setTransport = function (transport$$1) {
    debug$5('setting transport %s', transport$$1.name);
    var self = this;

    if (this.transport) {
      debug$5('clearing existing transport %s', this.transport.name);
      this.transport.removeAllListeners();
    }

    // set up transport
    this.transport = transport$$1;

    // set up transport listeners
    transport$$1
    .on('drain', function () {
      self.onDrain();
    })
    .on('packet', function (packet) {
      self.onPacket(packet);
    })
    .on('error', function (e) {
      self.onError(e);
    })
    .on('close', function () {
      self.onClose('transport close');
    });
  };

  /**
   * Probes a transport.
   *
   * @param {String} transport name
   * @api private
   */

  Socket.prototype.probe = function (name) {
    debug$5('probing transport "%s"', name);
    var transport$$1 = this.createTransport(name, { probe: 1 });
    var failed = false;
    var self = this;

    Socket.priorWebsocketSuccess = false;

    function onTransportOpen () {
      if (self.onlyBinaryUpgrades) {
        var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
        failed = failed || upgradeLosesBinary;
      }
      if (failed) return;

      debug$5('probe transport "%s" opened', name);
      transport$$1.send([{ type: 'ping', data: 'probe' }]);
      transport$$1.once('packet', function (msg) {
        if (failed) return;
        if ('pong' === msg.type && 'probe' === msg.data) {
          debug$5('probe transport "%s" pong', name);
          self.upgrading = true;
          self.emit('upgrading', transport$$1);
          if (!transport$$1) return;
          Socket.priorWebsocketSuccess = 'websocket' === transport$$1.name;

          debug$5('pausing current transport "%s"', self.transport.name);
          self.transport.pause(function () {
            if (failed) return;
            if ('closed' === self.readyState) return;
            debug$5('changing transport and sending upgrade packet');

            cleanup();

            self.setTransport(transport$$1);
            transport$$1.send([{ type: 'upgrade' }]);
            self.emit('upgrade', transport$$1);
            transport$$1 = null;
            self.upgrading = false;
            self.flush();
          });
        } else {
          debug$5('probe transport "%s" failed', name);
          var err = new Error('probe error');
          err.transport = transport$$1.name;
          self.emit('upgradeError', err);
        }
      });
    }

    function freezeTransport () {
      if (failed) return;

      // Any callback called by transport should be ignored since now
      failed = true;

      cleanup();

      transport$$1.close();
      transport$$1 = null;
    }

    // Handle any error that happens while probing
    function onerror (err) {
      var error = new Error('probe error: ' + err);
      error.transport = transport$$1.name;

      freezeTransport();

      debug$5('probe transport "%s" failed because of error: %s', name, err);

      self.emit('upgradeError', error);
    }

    function onTransportClose () {
      onerror('transport closed');
    }

    // When the socket is closed while we're probing
    function onclose () {
      onerror('socket closed');
    }

    // When the socket is upgraded while we're probing
    function onupgrade (to) {
      if (transport$$1 && to.name !== transport$$1.name) {
        debug$5('"%s" works - aborting "%s"', to.name, transport$$1.name);
        freezeTransport();
      }
    }

    // Remove all listeners on the transport and on self
    function cleanup () {
      transport$$1.removeListener('open', onTransportOpen);
      transport$$1.removeListener('error', onerror);
      transport$$1.removeListener('close', onTransportClose);
      self.removeListener('close', onclose);
      self.removeListener('upgrading', onupgrade);
    }

    transport$$1.once('open', onTransportOpen);
    transport$$1.once('error', onerror);
    transport$$1.once('close', onTransportClose);

    this.once('close', onclose);
    this.once('upgrading', onupgrade);

    transport$$1.open();
  };

  /**
   * Called when connection is deemed open.
   *
   * @api public
   */

  Socket.prototype.onOpen = function () {
    debug$5('socket open');
    this.readyState = 'open';
    Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
    this.emit('open');
    this.flush();

    // we check for `readyState` in case an `open`
    // listener already closed the socket
    if ('open' === this.readyState && this.upgrade && this.transport.pause) {
      debug$5('starting upgrade probes');
      for (var i = 0, l = this.upgrades.length; i < l; i++) {
        this.probe(this.upgrades[i]);
      }
    }
  };

  /**
   * Handles a packet.
   *
   * @api private
   */

  Socket.prototype.onPacket = function (packet) {
    if ('opening' === this.readyState || 'open' === this.readyState ||
        'closing' === this.readyState) {
      debug$5('socket receive: type "%s", data "%s"', packet.type, packet.data);

      this.emit('packet', packet);

      // Socket is live - any packet counts
      this.emit('heartbeat');

      switch (packet.type) {
        case 'open':
          this.onHandshake(JSON.parse(packet.data));
          break;

        case 'pong':
          this.setPing();
          this.emit('pong');
          break;

        case 'error':
          var err = new Error('server error');
          err.code = packet.data;
          this.onError(err);
          break;

        case 'message':
          this.emit('data', packet.data);
          this.emit('message', packet.data);
          break;
      }
    } else {
      debug$5('packet received with socket readyState "%s"', this.readyState);
    }
  };

  /**
   * Called upon handshake completion.
   *
   * @param {Object} handshake obj
   * @api private
   */

  Socket.prototype.onHandshake = function (data) {
    this.emit('handshake', data);
    this.id = data.sid;
    this.transport.query.sid = data.sid;
    this.upgrades = this.filterUpgrades(data.upgrades);
    this.pingInterval = data.pingInterval;
    this.pingTimeout = data.pingTimeout;
    this.onOpen();
    // In case open handler closes socket
    if ('closed' === this.readyState) return;
    this.setPing();

    // Prolong liveness of socket on heartbeat
    this.removeListener('heartbeat', this.onHeartbeat);
    this.on('heartbeat', this.onHeartbeat);
  };

  /**
   * Resets ping timeout.
   *
   * @api private
   */

  Socket.prototype.onHeartbeat = function (timeout) {
    clearTimeout(this.pingTimeoutTimer);
    var self = this;
    self.pingTimeoutTimer = setTimeout(function () {
      if ('closed' === self.readyState) return;
      self.onClose('ping timeout');
    }, timeout || (self.pingInterval + self.pingTimeout));
  };

  /**
   * Pings server every `this.pingInterval` and expects response
   * within `this.pingTimeout` or closes connection.
   *
   * @api private
   */

  Socket.prototype.setPing = function () {
    var self = this;
    clearTimeout(self.pingIntervalTimer);
    self.pingIntervalTimer = setTimeout(function () {
      debug$5('writing ping packet - expecting pong within %sms', self.pingTimeout);
      self.ping();
      self.onHeartbeat(self.pingTimeout);
    }, self.pingInterval);
  };

  /**
  * Sends a ping packet.
  *
  * @api private
  */

  Socket.prototype.ping = function () {
    var self = this;
    this.sendPacket('ping', function () {
      self.emit('ping');
    });
  };

  /**
   * Called on `drain` event
   *
   * @api private
   */

  Socket.prototype.onDrain = function () {
    this.writeBuffer.splice(0, this.prevBufferLen);

    // setting prevBufferLen = 0 is very important
    // for example, when upgrading, upgrade packet is sent over,
    // and a nonzero prevBufferLen could cause problems on `drain`
    this.prevBufferLen = 0;

    if (0 === this.writeBuffer.length) {
      this.emit('drain');
    } else {
      this.flush();
    }
  };

  /**
   * Flush write buffers.
   *
   * @api private
   */

  Socket.prototype.flush = function () {
    if ('closed' !== this.readyState && this.transport.writable &&
      !this.upgrading && this.writeBuffer.length) {
      debug$5('flushing %d packets in socket', this.writeBuffer.length);
      this.transport.send(this.writeBuffer);
      // keep track of current length of writeBuffer
      // splice writeBuffer and callbackBuffer on `drain`
      this.prevBufferLen = this.writeBuffer.length;
      this.emit('flush');
    }
  };

  /**
   * Sends a message.
   *
   * @param {String} message.
   * @param {Function} callback function.
   * @param {Object} options.
   * @return {Socket} for chaining.
   * @api public
   */

  Socket.prototype.write =
  Socket.prototype.send = function (msg, options, fn) {
    this.sendPacket('message', msg, options, fn);
    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {String} packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} callback function.
   * @api private
   */

  Socket.prototype.sendPacket = function (type, data, options, fn) {
    if ('function' === typeof data) {
      fn = data;
      data = undefined;
    }

    if ('function' === typeof options) {
      fn = options;
      options = null;
    }

    if ('closing' === this.readyState || 'closed' === this.readyState) {
      return;
    }

    options = options || {};
    options.compress = false !== options.compress;

    var packet = {
      type: type,
      data: data,
      options: options
    };
    this.emit('packetCreate', packet);
    this.writeBuffer.push(packet);
    if (fn) this.once('flush', fn);
    this.flush();
  };

  /**
   * Closes the connection.
   *
   * @api private
   */

  Socket.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.readyState = 'closing';

      var self = this;

      if (this.writeBuffer.length) {
        this.once('drain', function () {
          if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        });
      } else if (this.upgrading) {
        waitForUpgrade();
      } else {
        close();
      }
    }

    function close () {
      self.onClose('forced close');
      debug$5('socket closing - telling transport to close');
      self.transport.close();
    }

    function cleanupAndClose () {
      self.removeListener('upgrade', cleanupAndClose);
      self.removeListener('upgradeError', cleanupAndClose);
      close();
    }

    function waitForUpgrade () {
      // wait for upgrade to finish since we can't send packets while pausing a transport
      self.once('upgrade', cleanupAndClose);
      self.once('upgradeError', cleanupAndClose);
    }

    return this;
  };

  /**
   * Called upon transport error
   *
   * @api private
   */

  Socket.prototype.onError = function (err) {
    debug$5('socket error %j', err);
    Socket.priorWebsocketSuccess = false;
    this.emit('error', err);
    this.onClose('transport error', err);
  };

  /**
   * Called upon transport close.
   *
   * @api private
   */

  Socket.prototype.onClose = function (reason, desc) {
    if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
      debug$5('socket close with reason: "%s"', reason);
      var self = this;

      // clear timers
      clearTimeout(this.pingIntervalTimer);
      clearTimeout(this.pingTimeoutTimer);

      // stop event from firing again for transport
      this.transport.removeAllListeners('close');

      // ensure transport won't stay open
      this.transport.close();

      // ignore further transport communication
      this.transport.removeAllListeners();

      // set ready state
      this.readyState = 'closed';

      // clear session id
      this.id = null;

      // emit close event
      this.emit('close', reason, desc);

      // clean buffers after, so users can still
      // grab the buffers on `close` event
      self.writeBuffer = [];
      self.prevBufferLen = 0;
    }
  };

  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} server upgrades
   * @api private
   *
   */

  Socket.prototype.filterUpgrades = function (upgrades) {
    var filteredUpgrades = [];
    for (var i = 0, j = upgrades.length; i < j; i++) {
      if (~indexof(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
    }
    return filteredUpgrades;
  };

  var lib = socket;

  /**
   * Exports parser
   *
   * @api public
   *
   */
  var parser = browser$2;
  lib.parser = parser;

  var toArray_1 = toArray$1;

  function toArray$1(list, index) {
      var array = [];

      index = index || 0;

      for (var i = index || 0; i < list.length; i++) {
          array[i - index] = list[i];
      }

      return array
  }

  /**
   * Module exports.
   */

  var on_1 = on$1;

  /**
   * Helper for subscriptions.
   *
   * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
   * @param {String} event name
   * @param {Function} callback
   * @api public
   */

  function on$1 (obj, ev, fn) {
    obj.on(ev, fn);
    return {
      destroy: function () {
        obj.removeListener(ev, fn);
      }
    };
  }

  /**
   * Slice reference.
   */

  var slice = [].slice;

  /**
   * Bind `obj` to `fn`.
   *
   * @param {Object} obj
   * @param {Function|String} fn or string
   * @return {Function}
   * @api public
   */

  var componentBind = function(obj, fn){
    if ('string' == typeof fn) fn = obj[fn];
    if ('function' != typeof fn) throw new Error('bind() requires a function');
    var args = slice.call(arguments, 2);
    return function(){
      return fn.apply(obj, args.concat(slice.call(arguments)));
    }
  };

  var socket$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */






  var debug = browser$1('socket.io-client:socket');



  /**
   * Module exports.
   */

  module.exports = exports = Socket;

  /**
   * Internal events (blacklisted).
   * These events can't be emitted by the user.
   *
   * @api private
   */

  var events = {
    connect: 1,
    connect_error: 1,
    connect_timeout: 1,
    connecting: 1,
    disconnect: 1,
    error: 1,
    reconnect: 1,
    reconnect_attempt: 1,
    reconnect_failed: 1,
    reconnect_error: 1,
    reconnecting: 1,
    ping: 1,
    pong: 1
  };

  /**
   * Shortcut to `Emitter#emit`.
   */

  var emit = componentEmitter.prototype.emit;

  /**
   * `Socket` constructor.
   *
   * @api public
   */

  function Socket (io, nsp, opts) {
    this.io = io;
    this.nsp = nsp;
    this.json = this; // compat
    this.ids = 0;
    this.acks = {};
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.connected = false;
    this.disconnected = true;
    this.flags = {};
    if (opts && opts.query) {
      this.query = opts.query;
    }
    if (this.io.autoConnect) this.open();
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Socket.prototype);

  /**
   * Subscribe to open, close and packet events
   *
   * @api private
   */

  Socket.prototype.subEvents = function () {
    if (this.subs) return;

    var io = this.io;
    this.subs = [
      on_1(io, 'open', componentBind(this, 'onopen')),
      on_1(io, 'packet', componentBind(this, 'onpacket')),
      on_1(io, 'close', componentBind(this, 'onclose'))
    ];
  };

  /**
   * "Opens" the socket.
   *
   * @api public
   */

  Socket.prototype.open =
  Socket.prototype.connect = function () {
    if (this.connected) return this;

    this.subEvents();
    this.io.open(); // ensure open
    if ('open' === this.io.readyState) this.onopen();
    this.emit('connecting');
    return this;
  };

  /**
   * Sends a `message` event.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.send = function () {
    var args = toArray_1(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @param {String} event name
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.emit = function (ev) {
    if (events.hasOwnProperty(ev)) {
      emit.apply(this, arguments);
      return this;
    }

    var args = toArray_1(arguments);
    var packet = {
      type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary2(args)) ? socket_ioParser.BINARY_EVENT : socket_ioParser.EVENT,
      data: args
    };

    packet.options = {};
    packet.options.compress = !this.flags || false !== this.flags.compress;

    // event ack callback
    if ('function' === typeof args[args.length - 1]) {
      debug('emitting packet with ack id %d', this.ids);
      this.acks[this.ids] = args.pop();
      packet.id = this.ids++;
    }

    if (this.connected) {
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }

    this.flags = {};

    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.packet = function (packet) {
    packet.nsp = this.nsp;
    this.io.packet(packet);
  };

  /**
   * Called upon engine `open`.
   *
   * @api private
   */

  Socket.prototype.onopen = function () {
    debug('transport is open - connecting');

    // write connect packet if necessary
    if ('/' !== this.nsp) {
      if (this.query) {
        var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
        debug('sending connect packet with query %s', query);
        this.packet({type: socket_ioParser.CONNECT, query: query});
      } else {
        this.packet({type: socket_ioParser.CONNECT});
      }
    }
  };

  /**
   * Called upon engine `close`.
   *
   * @param {String} reason
   * @api private
   */

  Socket.prototype.onclose = function (reason) {
    debug('close (%s)', reason);
    this.connected = false;
    this.disconnected = true;
    delete this.id;
    this.emit('disconnect', reason);
  };

  /**
   * Called with socket packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onpacket = function (packet) {
    var sameNamespace = packet.nsp === this.nsp;
    var rootNamespaceError = packet.type === socket_ioParser.ERROR && packet.nsp === '/';

    if (!sameNamespace && !rootNamespaceError) return;

    switch (packet.type) {
      case socket_ioParser.CONNECT:
        this.onconnect();
        break;

      case socket_ioParser.EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser.BINARY_EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser.ACK:
        this.onack(packet);
        break;

      case socket_ioParser.BINARY_ACK:
        this.onack(packet);
        break;

      case socket_ioParser.DISCONNECT:
        this.ondisconnect();
        break;

      case socket_ioParser.ERROR:
        this.emit('error', packet.data);
        break;
    }
  };

  /**
   * Called upon a server event.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onevent = function (packet) {
    var args = packet.data || [];
    debug('emitting event %j', args);

    if (null != packet.id) {
      debug('attaching ack callback to event');
      args.push(this.ack(packet.id));
    }

    if (this.connected) {
      emit.apply(this, args);
    } else {
      this.receiveBuffer.push(args);
    }
  };

  /**
   * Produces an ack callback to emit with an event.
   *
   * @api private
   */

  Socket.prototype.ack = function (id) {
    var self = this;
    var sent = false;
    return function () {
      // prevent double callbacks
      if (sent) return;
      sent = true;
      var args = toArray_1(arguments);
      debug('sending ack %j', args);

      self.packet({
        type: hasBinary2(args) ? socket_ioParser.BINARY_ACK : socket_ioParser.ACK,
        id: id,
        data: args
      });
    };
  };

  /**
   * Called upon a server acknowlegement.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onack = function (packet) {
    var ack = this.acks[packet.id];
    if ('function' === typeof ack) {
      debug('calling ack %s with %j', packet.id, packet.data);
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    } else {
      debug('bad ack %s', packet.id);
    }
  };

  /**
   * Called upon server connect.
   *
   * @api private
   */

  Socket.prototype.onconnect = function () {
    this.connected = true;
    this.disconnected = false;
    this.emit('connect');
    this.emitBuffered();
  };

  /**
   * Emit buffered events (received and emitted).
   *
   * @api private
   */

  Socket.prototype.emitBuffered = function () {
    var i;
    for (i = 0; i < this.receiveBuffer.length; i++) {
      emit.apply(this, this.receiveBuffer[i]);
    }
    this.receiveBuffer = [];

    for (i = 0; i < this.sendBuffer.length; i++) {
      this.packet(this.sendBuffer[i]);
    }
    this.sendBuffer = [];
  };

  /**
   * Called upon server disconnect.
   *
   * @api private
   */

  Socket.prototype.ondisconnect = function () {
    debug('server disconnect (%s)', this.nsp);
    this.destroy();
    this.onclose('io server disconnect');
  };

  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @api private.
   */

  Socket.prototype.destroy = function () {
    if (this.subs) {
      // clean subscriptions to avoid reconnections
      for (var i = 0; i < this.subs.length; i++) {
        this.subs[i].destroy();
      }
      this.subs = null;
    }

    this.io.destroy(this);
  };

  /**
   * Disconnects the socket manually.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.close =
  Socket.prototype.disconnect = function () {
    if (this.connected) {
      debug('performing disconnect (%s)', this.nsp);
      this.packet({ type: socket_ioParser.DISCONNECT });
    }

    // remove socket from pool
    this.destroy();

    if (this.connected) {
      // fire events
      this.onclose('io client disconnect');
    }
    return this;
  };

  /**
   * Sets the compress flag.
   *
   * @param {Boolean} if `true`, compresses the sending data
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.compress = function (compress) {
    this.flags.compress = compress;
    return this;
  };

  /**
   * Sets the binary flag
   *
   * @param {Boolean} whether the emitted data contains binary
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.binary = function (binary) {
    this.flags.binary = binary;
    return this;
  };
  });

  /**
   * Expose `Backoff`.
   */

  var backo2 = Backoff;

  /**
   * Initialize backoff timer with `opts`.
   *
   * - `min` initial timeout in milliseconds [100]
   * - `max` max timeout [10000]
   * - `jitter` [0]
   * - `factor` [2]
   *
   * @param {Object} opts
   * @api public
   */

  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }

  /**
   * Return the backoff duration.
   *
   * @return {Number}
   * @api public
   */

  Backoff.prototype.duration = function(){
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand =  Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };

  /**
   * Reset the number of attempts.
   *
   * @api public
   */

  Backoff.prototype.reset = function(){
    this.attempts = 0;
  };

  /**
   * Set the minimum duration
   *
   * @api public
   */

  Backoff.prototype.setMin = function(min){
    this.ms = min;
  };

  /**
   * Set the maximum duration
   *
   * @api public
   */

  Backoff.prototype.setMax = function(max){
    this.max = max;
  };

  /**
   * Set the jitter
   *
   * @api public
   */

  Backoff.prototype.setJitter = function(jitter){
    this.jitter = jitter;
  };

  /**
   * Module dependencies.
   */







  var debug$6 = browser$1('socket.io-client:manager');



  /**
   * IE6+ hasOwnProperty
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Module exports
   */

  var manager = Manager;

  /**
   * `Manager` constructor.
   *
   * @param {String} engine instance or engine uri/opts
   * @param {Object} options
   * @api public
   */

  function Manager (uri, opts) {
    if (!(this instanceof Manager)) return new Manager(uri, opts);
    if (uri && ('object' === typeof uri)) {
      opts = uri;
      uri = undefined;
    }
    opts = opts || {};

    opts.path = opts.path || '/socket.io';
    this.nsps = {};
    this.subs = [];
    this.opts = opts;
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1000);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
    this.randomizationFactor(opts.randomizationFactor || 0.5);
    this.backoff = new backo2({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 20000 : opts.timeout);
    this.readyState = 'closed';
    this.uri = uri;
    this.connecting = [];
    this.lastPing = null;
    this.encoding = false;
    this.packetBuffer = [];
    var _parser = opts.parser || socket_ioParser;
    this.encoder = new _parser.Encoder();
    this.decoder = new _parser.Decoder();
    this.autoConnect = opts.autoConnect !== false;
    if (this.autoConnect) this.open();
  }

  /**
   * Propagate given event to sockets and emit on `this`
   *
   * @api private
   */

  Manager.prototype.emitAll = function () {
    this.emit.apply(this, arguments);
    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
      }
    }
  };

  /**
   * Update `socket.id` of all sockets
   *
   * @api private
   */

  Manager.prototype.updateSocketIds = function () {
    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].id = this.generateId(nsp);
      }
    }
  };

  /**
   * generate `socket.id` for the given `nsp`
   *
   * @param {String} nsp
   * @return {String}
   * @api private
   */

  Manager.prototype.generateId = function (nsp) {
    return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
  };

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Manager.prototype);

  /**
   * Sets the `reconnection` config.
   *
   * @param {Boolean} true/false if it should automatically reconnect
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnection = function (v) {
    if (!arguments.length) return this._reconnection;
    this._reconnection = !!v;
    return this;
  };

  /**
   * Sets the reconnection attempts config.
   *
   * @param {Number} max reconnection attempts before giving up
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionAttempts = function (v) {
    if (!arguments.length) return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  };

  /**
   * Sets the delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelay = function (v) {
    if (!arguments.length) return this._reconnectionDelay;
    this._reconnectionDelay = v;
    this.backoff && this.backoff.setMin(v);
    return this;
  };

  Manager.prototype.randomizationFactor = function (v) {
    if (!arguments.length) return this._randomizationFactor;
    this._randomizationFactor = v;
    this.backoff && this.backoff.setJitter(v);
    return this;
  };

  /**
   * Sets the maximum delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelayMax = function (v) {
    if (!arguments.length) return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    this.backoff && this.backoff.setMax(v);
    return this;
  };

  /**
   * Sets the connection timeout. `false` to disable
   *
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.timeout = function (v) {
    if (!arguments.length) return this._timeout;
    this._timeout = v;
    return this;
  };

  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @api private
   */

  Manager.prototype.maybeReconnectOnOpen = function () {
    // Only try to reconnect if it's the first time we're connecting
    if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
      // keeps reconnection from firing twice for the same reconnection loop
      this.reconnect();
    }
  };

  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} optional, callback
   * @return {Manager} self
   * @api public
   */

  Manager.prototype.open =
  Manager.prototype.connect = function (fn, opts) {
    debug$6('readyState %s', this.readyState);
    if (~this.readyState.indexOf('open')) return this;

    debug$6('opening %s', this.uri);
    this.engine = lib(this.uri, this.opts);
    var socket = this.engine;
    var self = this;
    this.readyState = 'opening';
    this.skipReconnect = false;

    // emit `open`
    var openSub = on_1(socket, 'open', function () {
      self.onopen();
      fn && fn();
    });

    // emit `connect_error`
    var errorSub = on_1(socket, 'error', function (data) {
      debug$6('connect_error');
      self.cleanup();
      self.readyState = 'closed';
      self.emitAll('connect_error', data);
      if (fn) {
        var err = new Error('Connection error');
        err.data = data;
        fn(err);
      } else {
        // Only do this if there is no fn to handle the error
        self.maybeReconnectOnOpen();
      }
    });

    // emit `connect_timeout`
    if (false !== this._timeout) {
      var timeout = this._timeout;
      debug$6('connect attempt will timeout after %d', timeout);

      // set timer
      var timer = setTimeout(function () {
        debug$6('connect attempt timed out after %d', timeout);
        openSub.destroy();
        socket.close();
        socket.emit('error', 'timeout');
        self.emitAll('connect_timeout', timeout);
      }, timeout);

      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }

    this.subs.push(openSub);
    this.subs.push(errorSub);

    return this;
  };

  /**
   * Called upon transport open.
   *
   * @api private
   */

  Manager.prototype.onopen = function () {
    debug$6('open');

    // clear old subs
    this.cleanup();

    // mark as open
    this.readyState = 'open';
    this.emit('open');

    // add new subs
    var socket = this.engine;
    this.subs.push(on_1(socket, 'data', componentBind(this, 'ondata')));
    this.subs.push(on_1(socket, 'ping', componentBind(this, 'onping')));
    this.subs.push(on_1(socket, 'pong', componentBind(this, 'onpong')));
    this.subs.push(on_1(socket, 'error', componentBind(this, 'onerror')));
    this.subs.push(on_1(socket, 'close', componentBind(this, 'onclose')));
    this.subs.push(on_1(this.decoder, 'decoded', componentBind(this, 'ondecoded')));
  };

  /**
   * Called upon a ping.
   *
   * @api private
   */

  Manager.prototype.onping = function () {
    this.lastPing = new Date();
    this.emitAll('ping');
  };

  /**
   * Called upon a packet.
   *
   * @api private
   */

  Manager.prototype.onpong = function () {
    this.emitAll('pong', new Date() - this.lastPing);
  };

  /**
   * Called with data.
   *
   * @api private
   */

  Manager.prototype.ondata = function (data) {
    this.decoder.add(data);
  };

  /**
   * Called when parser fully decodes a packet.
   *
   * @api private
   */

  Manager.prototype.ondecoded = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon socket error.
   *
   * @api private
   */

  Manager.prototype.onerror = function (err) {
    debug$6('error', err);
    this.emitAll('error', err);
  };

  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @api public
   */

  Manager.prototype.socket = function (nsp, opts) {
    var socket = this.nsps[nsp];
    if (!socket) {
      socket = new socket$1(this, nsp, opts);
      this.nsps[nsp] = socket;
      var self = this;
      socket.on('connecting', onConnecting);
      socket.on('connect', function () {
        socket.id = self.generateId(nsp);
      });

      if (this.autoConnect) {
        // manually call here since connecting event is fired before listening
        onConnecting();
      }
    }

    function onConnecting () {
      if (!~indexof(self.connecting, socket)) {
        self.connecting.push(socket);
      }
    }

    return socket;
  };

  /**
   * Called upon a socket close.
   *
   * @param {Socket} socket
   */

  Manager.prototype.destroy = function (socket) {
    var index = indexof(this.connecting, socket);
    if (~index) this.connecting.splice(index, 1);
    if (this.connecting.length) return;

    this.close();
  };

  /**
   * Writes a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Manager.prototype.packet = function (packet) {
    debug$6('writing packet %j', packet);
    var self = this;
    if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

    if (!self.encoding) {
      // encode, then write to engine with result
      self.encoding = true;
      this.encoder.encode(packet, function (encodedPackets) {
        for (var i = 0; i < encodedPackets.length; i++) {
          self.engine.write(encodedPackets[i], packet.options);
        }
        self.encoding = false;
        self.processPacketQueue();
      });
    } else { // add packet to the queue
      self.packetBuffer.push(packet);
    }
  };

  /**
   * If packet buffer is non-empty, begins encoding the
   * next packet in line.
   *
   * @api private
   */

  Manager.prototype.processPacketQueue = function () {
    if (this.packetBuffer.length > 0 && !this.encoding) {
      var pack = this.packetBuffer.shift();
      this.packet(pack);
    }
  };

  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @api private
   */

  Manager.prototype.cleanup = function () {
    debug$6('cleanup');

    var subsLength = this.subs.length;
    for (var i = 0; i < subsLength; i++) {
      var sub = this.subs.shift();
      sub.destroy();
    }

    this.packetBuffer = [];
    this.encoding = false;
    this.lastPing = null;

    this.decoder.destroy();
  };

  /**
   * Close the current socket.
   *
   * @api private
   */

  Manager.prototype.close =
  Manager.prototype.disconnect = function () {
    debug$6('disconnect');
    this.skipReconnect = true;
    this.reconnecting = false;
    if ('opening' === this.readyState) {
      // `onclose` will not fire because
      // an open event never happened
      this.cleanup();
    }
    this.backoff.reset();
    this.readyState = 'closed';
    if (this.engine) this.engine.close();
  };

  /**
   * Called upon engine close.
   *
   * @api private
   */

  Manager.prototype.onclose = function (reason) {
    debug$6('onclose');

    this.cleanup();
    this.backoff.reset();
    this.readyState = 'closed';
    this.emit('close', reason);

    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  };

  /**
   * Attempt a reconnection.
   *
   * @api private
   */

  Manager.prototype.reconnect = function () {
    if (this.reconnecting || this.skipReconnect) return this;

    var self = this;

    if (this.backoff.attempts >= this._reconnectionAttempts) {
      debug$6('reconnect failed');
      this.backoff.reset();
      this.emitAll('reconnect_failed');
      this.reconnecting = false;
    } else {
      var delay = this.backoff.duration();
      debug$6('will wait %dms before reconnect attempt', delay);

      this.reconnecting = true;
      var timer = setTimeout(function () {
        if (self.skipReconnect) return;

        debug$6('attempting reconnect');
        self.emitAll('reconnect_attempt', self.backoff.attempts);
        self.emitAll('reconnecting', self.backoff.attempts);

        // check again for the case socket closed in above events
        if (self.skipReconnect) return;

        self.open(function (err) {
          if (err) {
            debug$6('reconnect attempt error');
            self.reconnecting = false;
            self.reconnect();
            self.emitAll('reconnect_error', err.data);
          } else {
            debug$6('reconnect success');
            self.onreconnect();
          }
        });
      }, delay);

      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }
  };

  /**
   * Called upon successful reconnect.
   *
   * @api private
   */

  Manager.prototype.onreconnect = function () {
    var attempt = this.backoff.attempts;
    this.reconnecting = false;
    this.backoff.reset();
    this.updateSocketIds();
    this.emitAll('reconnect', attempt);
  };

  var lib$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  var debug = browser$1('socket.io-client');

  /**
   * Module exports.
   */

  module.exports = exports = lookup;

  /**
   * Managers cache.
   */

  var cache = exports.managers = {};

  /**
   * Looks up an existing `Manager` for multiplexing.
   * If the user summons:
   *
   *   `io('http://localhost/a');`
   *   `io('http://localhost/b');`
   *
   * We reuse the existing instance based on same scheme/port/host,
   * and we initialize sockets for each namespace.
   *
   * @api public
   */

  function lookup (uri, opts) {
    if (typeof uri === 'object') {
      opts = uri;
      uri = undefined;
    }

    opts = opts || {};

    var parsed = url_1(uri);
    var source = parsed.source;
    var id = parsed.id;
    var path = parsed.path;
    var sameNamespace = cache[id] && path in cache[id].nsps;
    var newConnection = opts.forceNew || opts['force new connection'] ||
                        false === opts.multiplex || sameNamespace;

    var io;

    if (newConnection) {
      debug('ignoring socket cache for %s', source);
      io = manager(source, opts);
    } else {
      if (!cache[id]) {
        debug('new io instance for %s', source);
        cache[id] = manager(source, opts);
      }
      io = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.query;
    }
    return io.socket(parsed.path, opts);
  }

  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = socket_ioParser.protocol;

  /**
   * `connect`.
   *
   * @param {String} uri
   * @api public
   */

  exports.connect = lookup;

  /**
   * Expose constructors for standalone build.
   *
   * @api public
   */

  exports.Manager = manager;
  exports.Socket = socket$1;
  });
  var lib_1 = lib$1.managers;
  var lib_2 = lib$1.protocol;
  var lib_3 = lib$1.connect;
  var lib_4 = lib$1.Manager;
  var lib_5 = lib$1.Socket;

  const defaultOptions = {
      secure: true
  };
  /**
   * @hidden
   */
  class WebsocketClient {
      constructor(options) {
          this.options = Object.freeze(Object.assign(Object.assign({}, defaultOptions), options));
          this.socket = lib$1(this.options.socketUrl, {
              path: `/${this.options.deviceId}`
          });
      }
      onMetric(subscription, callback) {
          return this.socket.on(`metrics/${subscription.id}`, callback);
      }
      removeMetricListener(subscription, listener) {
          this.socket.off(`metrics/${subscription.id}`, listener);
      }
      disconnect() {
          this.socket.removeAllListeners();
          if (this.socket.connected) {
              this.socket.disconnect();
          }
      }
  }
  WebsocketClient.serverType = "websocket";

  /**
   * Module Dependencies
   */

  var isArray$1 = Array.isArray;

  /**
   * Export `outliers`
   */

  var outliers_1 = outliers;

  /**
   * Initialize the outliers
   *
   * @param {Array|String|undefined}
   * @return {Array|Function}
   */

  function outliers(arr) {
    if (isArray$1(arr)) return calc(arr);

    var o = null;
    var k = 'string' == typeof arr && arr;

    return function(v, i, a) {
      if (!o) o = calc(a, k);
      v = k ? v[k] : v;
      return !~o.indexOf(v);
    }
  }

  /**
   * Calculate the outliers
   *
   * @param {Array} arr
   * @param {String} key (optional)
   * @return {Array} outliers
   */

  function calc(arr, key) {
    arr = arr.slice(0);

    if (key) arr = arr.map(function(v) { return v[key]; });

    arr = arr.sort(function(a, b) {
      return a - b;
    });

    var len = arr.length;
    var middle = median(arr);
    var range = iqr(arr);
    var outliers = [];

    for (var i = 0; i < len; i++) {
      Math.abs(arr[i] - middle) > range && outliers.push(arr[i]);
    }

    return outliers;
  }

  /**
   * Find the median
   *
   * @param {Array} arr
   * @return {Number}
   */

  function median(arr) {
    var len = arr.length;
    var half = ~~(len / 2);

    return len % 2
      ? arr[half]
      : (arr[half - 1] + arr[half]) / 2;
  }

  /**
   * Find the range
   *
   * @param {Array} arr
   * @return {Number}
   */

  function iqr(arr) {
    var len = arr.length;
    var q1 = median(arr.slice(0, ~~(len / 2)));
    var q3 = median(arr.slice(Math.ceil(len / 2)));
    var g = 1.5;

    return (q3 - q1) * g;
  }

  function whileOnline({ status$, allowWhileOnSleepMode }) {
      return pipe(withLatestFrom(status$), mergeMap(([value, status]) => shouldAllowMetrics(status, allowWhileOnSleepMode)
          ? of(value)
          : empty$1()));
  }
  function shouldAllowMetrics(status, allowWhileOnSleepMode) {
      return (status.state === "online" &&
          (allowWhileOnSleepMode ? true : !status.sleepMode));
  }

  var __awaiter$a = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const defaultOptions$1 = {
      bufferSize: 100,
      updateInterval: 1 * 60 * 1000 // every minute
  };
  class Timesync {
      constructor(options) {
          this._offset = 0;
          this.options = Object.assign(Object.assign({}, defaultOptions$1), options);
          this.start();
      }
      start() {
          const { bufferSize, updateInterval, status$ } = this.options;
          const burst$ = range(0, bufferSize);
          const timer$ = timer(updateInterval, updateInterval).pipe(map((i) => bufferSize + i), whileOnline({
              status$,
              allowWhileOnSleepMode: true
          }));
          const firstTimeDeviceIsOnline$ = status$.pipe(filter((status) => status.state === "online"), take(1));
          firstTimeDeviceIsOnline$
              .pipe(switchMap(() => {
              return burst$.pipe(concat$1(timer$), this.toOffset(), bufferCount(bufferSize, 1), this.filterOutliers(), map((list) => this.average(list)));
          }))
              .subscribe((offset) => {
              this._offset = offset;
          });
      }
      filterOutliers() {
          return pipe(map((offsets) => {
              return offsets.filter(outliers_1());
          }));
      }
      toOffset() {
          const { getTimesync } = this.options;
          return pipe(concatMap(() => __awaiter$a(this, void 0, void 0, function* () {
              const requestStartTime = Date.now();
              const [error, serverTime] = yield getTimesync()
                  .then((offset) => [null, offset])
                  .catch((error) => [error]);
              if (error) {
                  return 0;
              }
              const responseEndTime = Date.now();
              const oneWayDuration = (responseEndTime - requestStartTime) / 2;
              const offset = responseEndTime - oneWayDuration - serverTime;
              return offset;
          })));
      }
      average(list) {
          return Math.round(list.reduce((acc, number) => acc + number) / list.length);
      }
      get offset() {
          return this._offset;
      }
      get timestamp() {
          return Date.now() + this._offset;
      }
  }

  /**
   * @hidden
   */
  class SubscriptionManager {
      constructor() {
          this._subscriptions = {};
      }
      get() {
          return this._subscriptions;
      }
      toList() {
          return Object.values(this._subscriptions);
      }
      add(subscription) {
          this._subscriptions[subscription.id] = subscription;
      }
      remove(subscription) {
          if (!(subscription.id in this._subscriptions)) {
              return;
          }
          Reflect.deleteProperty(this._subscriptions, subscription.id);
      }
  }

  // `lastHeartbeat` is updated every 30 seconds via os
  const lastHeartbeatUpdateInterval = 30000;
  const maxHeartbeatsSkipped = 3;
  const gracePeriod = 5000;
  // 65 seconds
  const lostHeartbeatThreshold = lastHeartbeatUpdateInterval * maxHeartbeatsSkipped + gracePeriod;
  function offlineIfLostHeartbeat() {
      return pipe(switchMap((status) => timer(0, lostHeartbeatThreshold).pipe(map(() => {
          if (deviceHasLostHeartbeat(status)) {
              return Object.assign(Object.assign({}, status), { state: "offline" });
          }
          return status;
      }))), distinctUntilChanged(didObjectChange));
  }
  function deviceHasLostHeartbeat(status) {
      if (!("lastHeartbeat" in status)) {
          return false;
      }
      const { lastHeartbeat } = status;
      const timeSinceLastHeartbeat = Date.now() - lastHeartbeat;
      const lostHeartbeat = timeSinceLastHeartbeat > lostHeartbeatThreshold;
      return lostHeartbeat;
  }
  function didObjectChange(a, b) {
      return (JSON.stringify(a).split("").sort().join("") ===
          JSON.stringify(b).split("").sort().join(""));
  }

  function filterInternalKeys() {
      return pipe(map((status) => {
          if (!status) {
              return status;
          }
          // remove internal properties that start with "__"
          const filteredStatus = Object.entries(status).reduce((acc, [key, value]) => {
              if (!key.startsWith("__")) {
                  acc[key] = value;
              }
              return acc;
          }, {});
          return filteredStatus;
      }));
  }

  var __awaiter$b = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * @hidden
   */
  class ApiClient {
      constructor(options) {
          this.defaultServerType = FirebaseDevice.serverType;
          this.localServerType = WebsocketClient.serverType;
          /**
           * @internal
           */
          this._selectedDevice = new BehaviorSubject(undefined);
          this.options = options;
          this.subscriptionManager = new SubscriptionManager();
          this.firebaseApp = new FirebaseApp(options);
          this.firebaseUser = new FirebaseUser(this.firebaseApp);
          this.firebaseUser.onAuthStateChanged().subscribe((user) => {
              this.user = user;
          });
          this.firebaseUser.onUserClaimsChange().subscribe((userClaims) => {
              this.userClaims = userClaims;
          });
          this.onDeviceChange().subscribe((device) => {
              if (this.firebaseDevice) {
                  this.firebaseDevice.disconnect();
              }
              if (!device) {
                  return;
              }
              this.firebaseDevice = new FirebaseDevice({
                  deviceId: device.deviceId,
                  firebaseApp: this.firebaseApp,
                  dependencies: {
                      subscriptionManager: this.subscriptionManager
                  }
              });
              if (this.options.timesync) {
                  this.timesync = new Timesync({
                      status$: this.status(),
                      getTimesync: this.firebaseDevice.getTimesync.bind(this.firebaseDevice)
                  });
              }
          });
      }
      onDeviceChange() {
          return this._selectedDevice.asObservable().pipe(shareReplay(1), filter((value) => value !== undefined));
      }
      // Automatically select device when user logs in
      setAutoSelectedDevice() {
          return __awaiter$b(this, void 0, void 0, function* () {
              // Select based on `deviceId` passed
              if (this.options.deviceId) {
                  return yield this.selectDevice((devices) => {
                      return devices.find((device) => device.deviceId === this.options.deviceId);
                  });
              }
              // Auto select first-claimed device
              if (!this.options.deviceId && this.options.autoSelectDevice) {
                  return yield this.selectDevice((devices) => {
                      // Auto select first device
                      return devices[0];
                  });
              }
              return null;
          });
      }
      setWebsocket(socketUrl, deviceId) {
          return __awaiter$b(this, void 0, void 0, function* () {
              this.websocket = new WebsocketClient({ socketUrl, deviceId });
          });
      }
      unsetWebsocket() {
          if (this.websocket) {
              this.websocket.disconnect();
              this.websocket = null;
          }
      }
      get actions() {
          return {
              dispatch: (action) => {
                  return this.firebaseDevice.dispatchAction(action);
              }
          };
      }
      disconnect() {
          return __awaiter$b(this, void 0, void 0, function* () {
              if (this.websocket) {
                  this.websocket.disconnect();
              }
              return this.firebaseApp.disconnect();
          });
      }
      getInfo() {
          return __awaiter$b(this, void 0, void 0, function* () {
              return yield this.firebaseDevice.getInfo();
          });
      }
      login(credentials) {
          return __awaiter$b(this, void 0, void 0, function* () {
              if (this.user) {
                  return Promise.reject(`Already logged in.`);
              }
              const auth = yield this.firebaseUser.login(credentials);
              const selectedDevice = yield this.setAutoSelectedDevice();
              return Object.assign(Object.assign({}, auth), { selectedDevice });
          });
      }
      logout() {
          return __awaiter$b(this, void 0, void 0, function* () {
              if (this.firebaseDevice) {
                  this.firebaseDevice.disconnect();
              }
              return yield this.firebaseUser.logout();
          });
      }
      onAuthStateChanged() {
          return this.firebaseUser.onAuthStateChanged().pipe(switchMap((user) => __awaiter$b(this, void 0, void 0, function* () {
              if (!user) {
                  return null;
              }
              const selectedDevice = this.didSelectDevice()
                  ? yield this.getSelectedDevice()
                  : yield this.setAutoSelectedDevice();
              return Object.assign(Object.assign({}, user), { selectedDevice });
          })));
      }
      getDevices() {
          return this.firebaseUser.getDevices();
      }
      addDevice(deviceId) {
          return this.firebaseUser.addDevice(deviceId);
      }
      removeDevice(deviceId) {
          return __awaiter$b(this, void 0, void 0, function* () {
              const [hasError, errorMessage] = yield this.firebaseUser
                  .removeDevice(deviceId)
                  .then(() => [false])
                  .catch((error) => [true, error]);
              if (hasError) {
                  return Promise.reject(errorMessage);
              }
              const selectedDevice = this._selectedDevice.getValue();
              if ((selectedDevice === null || selectedDevice === void 0 ? void 0 : selectedDevice.deviceId) === deviceId) {
                  this._selectedDevice.next(null);
              }
          });
      }
      transferDevice(options) {
          return __awaiter$b(this, void 0, void 0, function* () {
              const [hasError, error] = yield this.firebaseUser
                  .transferDevice(options)
                  .then(() => [false])
                  .catch((error) => [true, error]);
              if (hasError) {
                  return Promise.reject(error);
              }
              const selectedDevice = this._selectedDevice.getValue();
              if ((selectedDevice === null || selectedDevice === void 0 ? void 0 : selectedDevice.deviceId) === options.deviceId) {
                  this._selectedDevice.next(null);
              }
          });
      }
      onUserDevicesChange() {
          return this.firebaseUser.onUserDevicesChange();
      }
      onUserClaimsChange() {
          return this.firebaseUser.onUserClaimsChange();
      }
      didSelectDevice() {
          return !!this._selectedDevice.getValue();
      }
      selectDevice(deviceSelector) {
          return __awaiter$b(this, void 0, void 0, function* () {
              const devices = yield this.getDevices();
              if (!devices) {
                  return Promise.reject(`Did not find any devices for this user. Make sure your device is claimed by your Neurosity account.`);
              }
              const deviceTupleSelector = (devices) => devices.find((device) => {
                  if (!Array.isArray(deviceSelector)) {
                      return false;
                  }
                  const [deviceKey, deviceValue] = deviceSelector;
                  return (JSON.stringify(device === null || device === void 0 ? void 0 : device[deviceKey]) ===
                      JSON.stringify(deviceValue));
              });
              const device = typeof deviceSelector === "function"
                  ? deviceSelector(devices)
                  : deviceTupleSelector(devices);
              if (!device) {
                  return Promise.reject(`A device was not provided. Try returning a device from the devicesList provided in the callback.`);
              }
              const hasPermission = yield this.firebaseUser.hasDevicePermission(device.deviceId);
              if (!hasPermission) {
                  return Promise.reject(`Rejected device access due to permissions.`);
              }
              this._selectedDevice.next(device);
              return device;
          });
      }
      getSelectedDevice() {
          return __awaiter$b(this, void 0, void 0, function* () {
              const selectedDevice = this._selectedDevice.getValue();
              if (!selectedDevice) {
                  return Promise.reject(`There is no device currently selected.`);
              }
              const devices = yield this.getDevices();
              if (!devices) {
                  return Promise.reject(`Did not find any devices for this user. Make sure your device is claimed by your Neurosity account.`);
              }
              return devices.find((device) => device.deviceId === selectedDevice.deviceId);
          });
      }
      status() {
          return this.observeNamespace("status").pipe(offlineIfLostHeartbeat(), filterInternalKeys());
      }
      observeNamespace(namespace) {
          const namespaceValues$ = fromEventPattern((handler) => this.firebaseDevice.onNamespace(namespace, handler), (handler) => this.firebaseDevice.offNamespace(namespace, handler));
          return this.onDeviceChange().pipe(switchMap((selectedDevice) => {
              return selectedDevice ? namespaceValues$ : empty$1();
          }));
      }
      onceNamespace(namespace) {
          return __awaiter$b(this, void 0, void 0, function* () {
              return yield this.firebaseDevice.onceNamespace(namespace);
          });
      }
      get metrics() {
          const isWebsocketMetric = (subscription) => subscription.serverType === WebsocketClient.serverType;
          return {
              next: (metricName, metricValue) => {
                  this.firebaseDevice.nextMetric(metricName, metricValue);
              },
              on: (subscription, callback) => {
                  if (isWebsocketMetric(subscription)) {
                      return this.websocket.onMetric(subscription, callback);
                  }
                  else {
                      return this.firebaseDevice.onMetric(subscription, callback);
                  }
              },
              subscribe: (subscription) => {
                  const subscriptionCreated = this.firebaseDevice.subscribeToMetric(subscription);
                  this.subscriptionManager.add(subscriptionCreated);
                  return subscriptionCreated;
              },
              unsubscribe: (subscription, listener) => {
                  this.subscriptionManager.remove(subscription);
                  this.firebaseDevice.unsubscribeFromMetric(subscription);
                  if (isWebsocketMetric(subscription)) {
                      if (this.websocket) {
                          this.websocket.removeMetricListener(subscription, listener);
                      }
                  }
                  else {
                      this.firebaseDevice.removeMetricListener(subscription, listener);
                  }
              }
          };
      }
      createAccount(credentials) {
          return this.firebaseUser.createAccount(credentials);
      }
      deleteAccount() {
          return this.firebaseUser.deleteAccount();
      }
      createCustomToken() {
          return this.firebaseUser.createCustomToken();
      }
      removeOAuthAccess() {
          return this.firebaseUser.removeOAuthAccess();
      }
      onUserExperiments() {
          return this.firebaseUser.onUserExperiments();
      }
      deleteUserExperiment(experimentId) {
          return this.firebaseUser.deleteUserExperiment(experimentId);
      }
      get skills() {
          return {
              get: (bundleId) => __awaiter$b(this, void 0, void 0, function* () {
                  return this.firebaseDevice.getSkill(bundleId);
              })
          };
      }
      get timestamp() {
          return this.options.timesync ? this.timesync.timestamp : Date.now();
      }
      getTimesyncOffset() {
          return this.timesync.offset;
      }
      changeSettings(settings) {
          return this.firebaseDevice.changeSettings(settings);
      }
      goOffline() {
          this.firebaseApp.goOffline();
      }
      goOnline() {
          this.firebaseApp.goOnline();
      }
      /**
       * @internal
       */
      __getApp() {
          return this.firebaseApp.app;
      }
  }

  const kinesis = {
      rest: {},
      artifactDetector: {},
      leftArm: {},
      rightArm: {},
      leftHandPinch: {},
      rightHandPinch: {},
      tongue: {},
      jumpingJacks: {},
      leftFoot: {},
      rightFoot: {},
      leftThumbFinger: {},
      leftIndexFinger: {},
      leftMiddleFinger: {},
      leftRingFinger: {},
      leftPinkyFinger: {},
      rightThumbFinger: {},
      rightIndexFinger: {},
      rightMiddleFinger: {},
      rightRingFinger: {},
      rightPinkyFinger: {},
      mentalMath: {},
      bitingALemon: {},
      push: {},
      pull: {},
      lift: {},
      drop: {},
      moveLeft: {},
      moveRight: {},
      moveForward: {},
      moveBackward: {},
      rotateLeft: {},
      rotateRight: {},
      rotateClockwise: {},
      rotateCounterClockwise: {},
      disappear: {}
  };
  const channelNames = {
      CP6: {},
      F6: {},
      C4: {},
      CP4: {},
      CP3: {},
      F5: {},
      C3: {},
      CP5: {}
  };
  const metrics = {
      kinesis,
      predictions: kinesis,
      channelAnalysis: channelNames,
      signalQuality: channelNames,
      status: {
          state: {},
          battery: {},
          charging: {},
          connected: {},
          connectedSince: {},
          connectedLast: {},
          updatingProgress: {},
          simulate: {},
          ssid: {}
      },
      accelerometer: {
          acceleration: {},
          inclination: {},
          orientation: {},
          pitch: {},
          roll: {},
          x: {},
          y: {},
          z: {},
      },
      awareness: {
          creativity: {},
          comprehension: {},
          focus: {},
          meditation: {},
          calm: {}
      },
      brainwaves: {
          raw: {},
          rawUnfiltered: {},
          frequency: {},
          powerByBand: {},
          psd: {}
      },
      emotion: {
          joy: {},
          sadness: {},
          anger: {},
          surprise: {},
          excitement: {},
          disappointment: {},
          fear: {},
          love: {},
          stress: {},
          interest: {}
      },
      facialExpression: {
          smile: {},
          laugh: {},
          frown: {},
          blink: {},
          winkLeft: {},
          winkRight: {}
      }
  };

  const prefix = "Neurosity SDK: ";
  const mustSelectDevice = new Error(`${prefix}A device must be selected. Make sure to call "notion.selectDevice()"`);
  const metricNotSupportedByModel = (metric, modelVersion) => {
      return new Error(`${prefix}${metric} not supported on model version ${modelVersion}. See docs.neurosity.co for more info.`);
  };
  const locationNotFound = (location, modelVersion) => {
      return new Error(`${prefix}${location} location not supported on model version ${modelVersion}. Check spelling or see docs.neurosity.co for more info.`);
  };
  const exceededMaxItems = (maxItems) => {
      return new Error(`${prefix}Maximum items in array is ${maxItems}`);
  };

  const isNotionMetric = (metric) => Object.keys(metrics).includes(metric);
  const getLabels = (metric) => Object.keys(metrics[metric]);
  const hasInvalidLabels = (metric, labels) => {
      const validLabels = getLabels(metric);
      return !labels.every((label) => validLabels.includes(label));
  };
  const isMetricDisallowed = (metricName, options) => "skill" in options &&
      "metrics" in options.skill &&
      !options.skill.metrics.includes(metricName);
  const validate = (metric, labels, options) => {
      const validLabels = getLabels(metric).join(", ");
      if (!labels.length) {
          return new Error(`${prefix}At least one label is required for ${metric} metric. Please add one of the following labels: ${validLabels}`);
      }
      if (isMetricDisallowed(metric, options)) {
          return new Error(`${prefix}No permission to access the ${metric} metric. To access this metric, edit the skill's permissions`);
      }
      if (hasInvalidLabels(metric, labels)) {
          return new Error(`${prefix}One ore more labels provided to ${metric} are invalid. The valid labels for ${metric} are ${validLabels}`);
      }
      return false;
  };

  const MODEL_VERSION_1 = "1";
  const MODEL_VERSION_2 = "2";
  const MODEL_VERSION_3 = "3";
  const FEATURE_HAPTICS = "haptics";
  const FEATURE_ACCEL = "accel";
  const HAPTIC_P7 = "P7";
  const HAPTIC_P8 = "P8";
  const platformFeaturesByModelVersion = {
      [MODEL_VERSION_1]: [],
      [MODEL_VERSION_2]: [FEATURE_HAPTICS, FEATURE_ACCEL],
      [MODEL_VERSION_3]: [FEATURE_HAPTICS, FEATURE_ACCEL]
  };
  const platformConfigByModelVersion = {
      [MODEL_VERSION_1]: {},
      [MODEL_VERSION_2]: {
          motorByMotorName: {
              [HAPTIC_P7]: [],
              [HAPTIC_P8]: []
          }
      },
      [MODEL_VERSION_3]: {
          motorByMotorName: {
              [HAPTIC_P7]: [],
              [HAPTIC_P8]: []
          }
      }
  };
  const supportsHaptics = (modelVersion) => {
      const platformFeaturesForModel = platformFeaturesByModelVersion[modelVersion];
      return platformFeaturesForModel.includes(FEATURE_HAPTICS);
  };
  const supportsAccel = (modelVersion) => {
      const platformFeaturesForModel = platformFeaturesByModelVersion[modelVersion];
      return platformFeaturesForModel.includes(FEATURE_ACCEL);
  };
  const getPlatformHapticMotors = (modelVersion) => {
      var _a;
      const platformConfigForModel = platformConfigByModelVersion[modelVersion];
      const platformMotorByMotorName = (_a = platformConfigForModel === null || platformConfigForModel === void 0 ? void 0 : platformConfigForModel.motorByMotorName) !== null && _a !== void 0 ? _a : {};
      return Object.assign({}, platformMotorByMotorName);
  };

  // All 127ish codes here:
  /// https://cdn-learn.adafruit.com/downloads/pdf/adafruit-drv2605-haptic-controller-breakout.pdf
  const strongClick100 = "strongClick100";
  const strongClick60 = "strongClick60";
  const strongClick30 = "strongClick30";
  const sharpClick100 = "sharpClick100";
  const sharpClick60 = "sharpClick60";
  const sharpClick30 = "sharpClick30";
  const softBump100 = "softBump100";
  const softBump60 = "softBump60";
  const softBump30 = "softBump30";
  const doubleClick100 = "doubleClick100";
  const doubleClick60 = "doubleClick60";
  const tripleClick100 = "tripleClick100";
  const softFuzz60 = "softFuzz60";
  const strongBuzz100 = "strongBuzz100";
  const alert750ms = "alert750ms";
  const alert1000ms = "alert1000ms";
  const strongClick1_100 = "strongClick1_100";
  const strongClick2_80 = "strongClick2_80";
  const strongClick3_60 = "strongClick3_60";
  const strongClick4_30 = "strongClick4_30";
  const mediumClick1_100 = "mediumClick1_100";
  const mediumClick2_80 = "mediumClick2_80";
  const mediumClick3_60 = "mediumClick3_60";
  const sharpTick1_100 = "sharpTick1_100";
  const sharpTick2_80 = "sharpTick2_80";
  const sharpTick3_60 = "sharpTick3_60";
  const shortDoubleClickStrong1_100 = "shortDoubleClickStrong1_100";
  const shortDoubleClickStrong2_80 = "shortDoubleClickStrong2_80";
  const shortDoubleClickStrong3_60 = "shortDoubleClickStrong3_60";
  const shortDoubleClickStrong4_30 = "shortDoubleClickStrong4_30";
  const shortDoubleClickMedium1_100 = "shortDoubleClickMedium1_100";
  const shortDoubleClickMedium2_80 = "shortDoubleClickMedium2_80";
  const shortDoubleClickMedium3_60 = "shortDoubleClickMedium3_60";
  const shortDoubleSharpTick1_100 = "shortDoubleSharpTick1_100";
  const shortDoubleSharpTick2_80 = "shortDoubleSharpTick2_80";
  const shortDoubleSharpTick3_60 = "shortDoubleSharpTick3_60";
  const longDoubleSharpClickStrong1_100 = "longDoubleSharpClickStrong1_100";
  const longDoubleSharpClickStrong2_80 = "longDoubleSharpClickStrong2_80";
  const longDoubleSharpClickStrong3_60 = "longDoubleSharpClickStrong3_60";
  const longDoubleSharpClickStrong4_30 = "longDoubleSharpClickStrong4_30";
  const longDoubleSharpClickMedium1_100 = "longDoubleSharpClickMedium1_100";
  const longDoubleSharpClickMedium2_80 = "longDoubleSharpClickMedium2_80";
  const longDoubleSharpClickMedium3_60 = "longDoubleSharpClickMedium3_60";
  const longDoubleSharpTick1_100 = "longDoubleSharpTick1_100";
  const longDoubleSharpTick2_80 = "longDoubleSharpTick2_80";
  const longDoubleSharpTick3_60 = "longDoubleSharpTick3_60";
  const buzz1_100 = "buzz1_100";
  const buzz2_80 = "buzz2_80";
  const buzz3_60 = "buzz3_60";
  const buzz4_40 = "buzz4_40";
  const buzz5_20 = "buzz5_20";
  const pulsingStong1_100 = "pulsingStong1_100";
  const pulsingStong2_60 = "pulsingStong2_60";
  const pulsingMedium1_100 = "pulsingMedium1_100";
  const pulsingMedium2_60 = "pulsingMedium2_60";
  const pulsingSharp1_100 = "pulsingSharp1_100";
  const pulsingSharp2_60 = "pulsingSharp2_60";
  const transistionClick1_100 = "transistionClick1_100";
  const transistionClick2_80 = "transistionClick2_80";
  const transistionClick3_60 = "transistionClick3_60";
  const transistionClick4_40 = "transistionClick4_40";
  const transistionClick5_20 = "transistionClick5_20";
  const transistionClick6_10 = "transistionClick6_10";
  const transistionHum1_100 = "transistionHum1_100";
  const transistionHum2_80 = "transistionHum2_80";
  const transistionHum3_60 = "transistionHum3_60";
  const transistionHum4_40 = "transistionHum4_40";
  const transistionHum5_20 = "transistionHum5_20";
  const transistionHum6_10 = "transistionHum6_10";
  const transitionRampDownLongSmooth1_100_to_0 = "transitionRampDownLongSmooth1_100_to_0";
  const transitionRampDownLongSmooth2_100_to_0 = "transitionRampDownLongSmooth2_100_to_0";
  const transitionRampDownMediumSmooth1_100_to_0 = "transitionRampDownMediumSmooth1_100_to_0";
  const transitionRampDownMediumSmooth2_100_to_0 = "transitionRampDownMediumSmooth2_100_to_0";
  const transitionRampDownShortSmooth1_100_to_0 = "transitionRampDownShortSmooth1_100_to_0";
  const transitionRampDownShortSmooth2_100_to_0 = "transitionRampDownShortSmooth2_100_to_0";
  const transitionRampDownLongSharp1_100_to_0 = "transitionRampDownLongSharp1_100_to_0";
  const transitionRampDownLongSharp2_100_to_0 = "transitionRampDownLongSharp2_100_to_0";
  const transitionRampDownLongMedium1_100_to_0 = "transitionRampDownLongMedium1_100_to_0";
  const transitionRampDownLongMedium2_100_to_0 = "transitionRampDownLongMedium2_100_to_0";
  const transitionRampDownShortSharp1_100_to_0 = "transitionRampDownShortSharp1_100_to_0";
  const transitionRampDownShortSharp2_100_to_0 = "transitionRampDownShortSharp2_100_to_0";
  const transitionRampUpLongSmooth1_0_to_100 = "transitionRampUpLongSmooth1_0_to_100";
  const transitionRampUpLongSmooth2_0_to_100 = "transitionRampUpLongSmooth2_0_to_100";
  const transitionRampUpMediumSmooth1_0_to_100 = "transitionRampUpMediumSmooth1_0_to_100";
  const transitionRampUpMediumSmooth2_0_to_100 = "transitionRampUpMediumSmooth2_0_to_100";
  const transitionRampUpShortSmooth1_0_to_100 = "transitionRampUpShortSmooth1_0_to_100";
  const transitionRampUpShortSmooth2_0_to_100 = "transitionRampUpShortSmooth2_0_to_100";
  const transitionRampUpLongSharp1_0_to_100 = "transitionRampUpLongSharp1_0_to_100";
  const transitionRampUpLongSharp2_0_to_100 = "transitionRampUpLongSharp2_0_to_100";
  const transitionRampUpMediumSharp1_0_to_100 = "transitionRampUpMediumSharp1_0_to_100";
  const transitionRampUpMediumSharp2_0_to_100 = "transitionRampUpMediumSharp2_0_to_100";
  const transitionRampUpShortSharp1_0_to_100 = "transitionRampUpShortSharp1_0_to_100";
  const transitionRampUpShortSharp2_0_to_100 = "transitionRampUpShortSharp2_0_to_100";
  const transitionRampDownLongSmooth1_50_to_0 = "transitionRampDownLongSmooth1_50_to_0";
  const transitionRampDownLongSmooth2_50_to_0 = "transitionRampDownLongSmooth2_50_to_0";
  const transitionRampDownMediumSmooth1_50_to_0 = "transitionRampDownMediumSmooth1_50_to_0";
  const transitionRampDownMediumSmooth2_50_to_0 = "transitionRampDownMediumSmooth2_50_to_0";
  const transitionRampDownShortSmooth1_50_to_0 = "transitionRampDownShortSmooth1_50_to_0";
  const transitionRampDownShortSmooth2_50_to_0 = "transitionRampDownShortSmooth2_50_to_0";
  const transitionRampDownLongSharp1_50_to_0 = "transitionRampDownLongSharp1_50_to_0";
  const transitionRampDownLongSharp2_50_to_0 = "transitionRampDownLongSharp2_50_to_0";
  const transitionRampDownMediumSharp1_50_to_0 = "transitionRampDownMediumSharp1_50_to_0";
  const transitionRampDownMediumSharp2_50_to_0 = "transitionRampDownMediumSharp2_50_to_0";
  const transitionRampDownShortSharp1_50_to_0 = "transitionRampDownShortSharp1_50_to_0";
  const transitionRampDownShortSharp2_50_to_0 = "transitionRampDownShortSharp2_50_to_0";
  const transitionRampUpLongSmooth1_0_to_50 = "transitionRampUpLongSmooth1_0_to_50";
  const transitionRampUpLongSmooth2_0_to_50 = "transitionRampUpLongSmooth2_0_to_50";
  const transitionRampUpMediumSmooth1_0_to_50 = "transitionRampUpMediumSmooth1_0_to_50";
  const transitionRampUpMediumSmooth2_0_to_50 = "transitionRampUpMediumSmooth2_0_to_50";
  const transitionRampUpShortSmooth1_0_to_50 = "transitionRampUpShortSmooth1_0_to_50";
  const transitionRampUpShortSmooth2_0_to_50 = "transitionRampUpShortSmooth2_0_to_50";
  const transitionRampUpLongSharp1_0_to_50 = "transitionRampUpLongSharp1_0_to_50";
  const transitionRampUpLongSharp2_0_to_50 = "transitionRampUpLongSharp2_0_to_50";
  const transitionRampUpMediumSharp1_0_to_50 = "transitionRampUpMediumSharp1_0_to_50";
  const transitionRampUpMediumSharp2_0_to_50 = "transitionRampUpMediumSharp2_0_to_50";
  const transitionRampUpShortSharp1_0_to_50 = "transitionRampUpShortSharp1_0_to_50";
  const transitionRampUpShortSharp2_0_to_50 = "transitionRampUpShortSharp2_0_to_50";
  const longBuzzForProgrammaticStopping_100 = "longBuzzForProgrammaticStopping_100";
  const smoothHum1_50 = "smoothHum1_50";
  const smoothHum2_40 = "smoothHum2_40";
  const smoothHum3_30 = "smoothHum3_30";
  const smoothHum4_20 = "smoothHum4_20";
  const smoothHum5_10 = "smoothHum5_10";

  var hapticEffects = /*#__PURE__*/Object.freeze({
      strongClick100: strongClick100,
      strongClick60: strongClick60,
      strongClick30: strongClick30,
      sharpClick100: sharpClick100,
      sharpClick60: sharpClick60,
      sharpClick30: sharpClick30,
      softBump100: softBump100,
      softBump60: softBump60,
      softBump30: softBump30,
      doubleClick100: doubleClick100,
      doubleClick60: doubleClick60,
      tripleClick100: tripleClick100,
      softFuzz60: softFuzz60,
      strongBuzz100: strongBuzz100,
      alert750ms: alert750ms,
      alert1000ms: alert1000ms,
      strongClick1_100: strongClick1_100,
      strongClick2_80: strongClick2_80,
      strongClick3_60: strongClick3_60,
      strongClick4_30: strongClick4_30,
      mediumClick1_100: mediumClick1_100,
      mediumClick2_80: mediumClick2_80,
      mediumClick3_60: mediumClick3_60,
      sharpTick1_100: sharpTick1_100,
      sharpTick2_80: sharpTick2_80,
      sharpTick3_60: sharpTick3_60,
      shortDoubleClickStrong1_100: shortDoubleClickStrong1_100,
      shortDoubleClickStrong2_80: shortDoubleClickStrong2_80,
      shortDoubleClickStrong3_60: shortDoubleClickStrong3_60,
      shortDoubleClickStrong4_30: shortDoubleClickStrong4_30,
      shortDoubleClickMedium1_100: shortDoubleClickMedium1_100,
      shortDoubleClickMedium2_80: shortDoubleClickMedium2_80,
      shortDoubleClickMedium3_60: shortDoubleClickMedium3_60,
      shortDoubleSharpTick1_100: shortDoubleSharpTick1_100,
      shortDoubleSharpTick2_80: shortDoubleSharpTick2_80,
      shortDoubleSharpTick3_60: shortDoubleSharpTick3_60,
      longDoubleSharpClickStrong1_100: longDoubleSharpClickStrong1_100,
      longDoubleSharpClickStrong2_80: longDoubleSharpClickStrong2_80,
      longDoubleSharpClickStrong3_60: longDoubleSharpClickStrong3_60,
      longDoubleSharpClickStrong4_30: longDoubleSharpClickStrong4_30,
      longDoubleSharpClickMedium1_100: longDoubleSharpClickMedium1_100,
      longDoubleSharpClickMedium2_80: longDoubleSharpClickMedium2_80,
      longDoubleSharpClickMedium3_60: longDoubleSharpClickMedium3_60,
      longDoubleSharpTick1_100: longDoubleSharpTick1_100,
      longDoubleSharpTick2_80: longDoubleSharpTick2_80,
      longDoubleSharpTick3_60: longDoubleSharpTick3_60,
      buzz1_100: buzz1_100,
      buzz2_80: buzz2_80,
      buzz3_60: buzz3_60,
      buzz4_40: buzz4_40,
      buzz5_20: buzz5_20,
      pulsingStong1_100: pulsingStong1_100,
      pulsingStong2_60: pulsingStong2_60,
      pulsingMedium1_100: pulsingMedium1_100,
      pulsingMedium2_60: pulsingMedium2_60,
      pulsingSharp1_100: pulsingSharp1_100,
      pulsingSharp2_60: pulsingSharp2_60,
      transistionClick1_100: transistionClick1_100,
      transistionClick2_80: transistionClick2_80,
      transistionClick3_60: transistionClick3_60,
      transistionClick4_40: transistionClick4_40,
      transistionClick5_20: transistionClick5_20,
      transistionClick6_10: transistionClick6_10,
      transistionHum1_100: transistionHum1_100,
      transistionHum2_80: transistionHum2_80,
      transistionHum3_60: transistionHum3_60,
      transistionHum4_40: transistionHum4_40,
      transistionHum5_20: transistionHum5_20,
      transistionHum6_10: transistionHum6_10,
      transitionRampDownLongSmooth1_100_to_0: transitionRampDownLongSmooth1_100_to_0,
      transitionRampDownLongSmooth2_100_to_0: transitionRampDownLongSmooth2_100_to_0,
      transitionRampDownMediumSmooth1_100_to_0: transitionRampDownMediumSmooth1_100_to_0,
      transitionRampDownMediumSmooth2_100_to_0: transitionRampDownMediumSmooth2_100_to_0,
      transitionRampDownShortSmooth1_100_to_0: transitionRampDownShortSmooth1_100_to_0,
      transitionRampDownShortSmooth2_100_to_0: transitionRampDownShortSmooth2_100_to_0,
      transitionRampDownLongSharp1_100_to_0: transitionRampDownLongSharp1_100_to_0,
      transitionRampDownLongSharp2_100_to_0: transitionRampDownLongSharp2_100_to_0,
      transitionRampDownLongMedium1_100_to_0: transitionRampDownLongMedium1_100_to_0,
      transitionRampDownLongMedium2_100_to_0: transitionRampDownLongMedium2_100_to_0,
      transitionRampDownShortSharp1_100_to_0: transitionRampDownShortSharp1_100_to_0,
      transitionRampDownShortSharp2_100_to_0: transitionRampDownShortSharp2_100_to_0,
      transitionRampUpLongSmooth1_0_to_100: transitionRampUpLongSmooth1_0_to_100,
      transitionRampUpLongSmooth2_0_to_100: transitionRampUpLongSmooth2_0_to_100,
      transitionRampUpMediumSmooth1_0_to_100: transitionRampUpMediumSmooth1_0_to_100,
      transitionRampUpMediumSmooth2_0_to_100: transitionRampUpMediumSmooth2_0_to_100,
      transitionRampUpShortSmooth1_0_to_100: transitionRampUpShortSmooth1_0_to_100,
      transitionRampUpShortSmooth2_0_to_100: transitionRampUpShortSmooth2_0_to_100,
      transitionRampUpLongSharp1_0_to_100: transitionRampUpLongSharp1_0_to_100,
      transitionRampUpLongSharp2_0_to_100: transitionRampUpLongSharp2_0_to_100,
      transitionRampUpMediumSharp1_0_to_100: transitionRampUpMediumSharp1_0_to_100,
      transitionRampUpMediumSharp2_0_to_100: transitionRampUpMediumSharp2_0_to_100,
      transitionRampUpShortSharp1_0_to_100: transitionRampUpShortSharp1_0_to_100,
      transitionRampUpShortSharp2_0_to_100: transitionRampUpShortSharp2_0_to_100,
      transitionRampDownLongSmooth1_50_to_0: transitionRampDownLongSmooth1_50_to_0,
      transitionRampDownLongSmooth2_50_to_0: transitionRampDownLongSmooth2_50_to_0,
      transitionRampDownMediumSmooth1_50_to_0: transitionRampDownMediumSmooth1_50_to_0,
      transitionRampDownMediumSmooth2_50_to_0: transitionRampDownMediumSmooth2_50_to_0,
      transitionRampDownShortSmooth1_50_to_0: transitionRampDownShortSmooth1_50_to_0,
      transitionRampDownShortSmooth2_50_to_0: transitionRampDownShortSmooth2_50_to_0,
      transitionRampDownLongSharp1_50_to_0: transitionRampDownLongSharp1_50_to_0,
      transitionRampDownLongSharp2_50_to_0: transitionRampDownLongSharp2_50_to_0,
      transitionRampDownMediumSharp1_50_to_0: transitionRampDownMediumSharp1_50_to_0,
      transitionRampDownMediumSharp2_50_to_0: transitionRampDownMediumSharp2_50_to_0,
      transitionRampDownShortSharp1_50_to_0: transitionRampDownShortSharp1_50_to_0,
      transitionRampDownShortSharp2_50_to_0: transitionRampDownShortSharp2_50_to_0,
      transitionRampUpLongSmooth1_0_to_50: transitionRampUpLongSmooth1_0_to_50,
      transitionRampUpLongSmooth2_0_to_50: transitionRampUpLongSmooth2_0_to_50,
      transitionRampUpMediumSmooth1_0_to_50: transitionRampUpMediumSmooth1_0_to_50,
      transitionRampUpMediumSmooth2_0_to_50: transitionRampUpMediumSmooth2_0_to_50,
      transitionRampUpShortSmooth1_0_to_50: transitionRampUpShortSmooth1_0_to_50,
      transitionRampUpShortSmooth2_0_to_50: transitionRampUpShortSmooth2_0_to_50,
      transitionRampUpLongSharp1_0_to_50: transitionRampUpLongSharp1_0_to_50,
      transitionRampUpLongSharp2_0_to_50: transitionRampUpLongSharp2_0_to_50,
      transitionRampUpMediumSharp1_0_to_50: transitionRampUpMediumSharp1_0_to_50,
      transitionRampUpMediumSharp2_0_to_50: transitionRampUpMediumSharp2_0_to_50,
      transitionRampUpShortSharp1_0_to_50: transitionRampUpShortSharp1_0_to_50,
      transitionRampUpShortSharp2_0_to_50: transitionRampUpShortSharp2_0_to_50,
      longBuzzForProgrammaticStopping_100: longBuzzForProgrammaticStopping_100,
      smoothHum1_50: smoothHum1_50,
      smoothHum2_40: smoothHum2_40,
      smoothHum3_30: smoothHum3_30,
      smoothHum4_20: smoothHum4_20,
      smoothHum5_10: smoothHum5_10
  });

  const scopeRequiredByAction = {
      "marker/add": "write:brainwave-markers",
      "brainwaves/record": "write:brainwaves",
      "haptics/queue": "write:haptics",
      "training/record": "write:kinesis",
      "training/stop": "write:kinesis",
      "training/stopAll": "write:kinesis",
      "wifi/reset": "write:wifi-settings"
  };
  const scopeRequiredByFunctionName = {
      //metrics
      accelerometer: "read:accelerometer",
      brainwaves: "read:brainwaves",
      calm: "read:calm",
      focus: "read:focus",
      kinesis: "read:kinesis",
      predictions: "read:kinesis",
      signalQuality: "read:signal-quality",
      // end of metrics
      // device info
      getInfo: "read:devices-info",
      getSelectedDevice: "read:devices-info",
      selectDevice: "read:devices-info",
      onDeviceChange: "read:devices-info",
      onUserDevicesChange: "read:devices-info",
      // end device info
      settings: "read:devices-settings",
      changeSettings: "write:devices-settings",
      status: "read:devices-status",
      addDevice: "write:devices-add",
      removeDevice: "write:devices-remove",
      transferDevice: "write:devices-remove"
  };
  function validateOAuthScopeForAction(userClaims, action) {
      const { oauth, scopes: scopesString } = userClaims !== null && userClaims !== void 0 ? userClaims : {};
      if (!oauth) {
          return [false, null];
      }
      const scopes = scopesString.split(",");
      const { command, action: actionName } = action;
      const requiredScope = scopeRequiredByAction[`${command}/${actionName}`];
      const hasRequireScopes = scopes.includes(requiredScope);
      if (hasRequireScopes) {
          return [false, null];
      }
      return [true, getScopeError(requiredScope)];
  }
  function validateOAuthScopeForFunctionName(userClaims, functionName) {
      const { oauth, scopes: scopesString } = userClaims !== null && userClaims !== void 0 ? userClaims : {};
      if (!oauth) {
          return [false, null];
      }
      const scopes = scopesString.split(",");
      const requiredScope = scopeRequiredByFunctionName[functionName];
      const hasRequireScopes = scopes.includes(requiredScope);
      if (hasRequireScopes) {
          return [false, null];
      }
      return [true, getScopeError(requiredScope)];
  }
  function getScopeError(...requiredScopes) {
      return new Error(`${prefix}You are trying to access data with an OAuth token without access to the following scopes: ${requiredScopes.join(", ")}.`);
  }

  var bind = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      return fn.apply(thisArg, args);
    };
  };

  // utils is a library of generic helper functions non-specific to axios

  var toString$4 = Object.prototype.toString;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Array, otherwise false
   */
  function isArray$2(val) {
    return Array.isArray(val);
  }

  /**
   * Determine if a value is undefined
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  /**
   * Determine if a value is a Buffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer$1(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  function isArrayBuffer(val) {
    return toString$4.call(val) === '[object ArrayBuffer]';
  }

  /**
   * Determine if a value is a FormData
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  function isFormData(val) {
    return toString$4.call(val) === '[object FormData]';
  }

  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    var result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a String, otherwise false
   */
  function isString(val) {
    return typeof val === 'string';
  }

  /**
   * Determine if a value is a Number
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Number, otherwise false
   */
  function isNumber(val) {
    return typeof val === 'number';
  }

  /**
   * Determine if a value is an Object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Object, otherwise false
   */
  function isObject$2(val) {
    return val !== null && typeof val === 'object';
  }

  /**
   * Determine if a value is a plain Object
   *
   * @param {Object} val The value to test
   * @return {boolean} True if value is a plain Object, otherwise false
   */
  function isPlainObject(val) {
    if (toString$4.call(val) !== '[object Object]') {
      return false;
    }

    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
  }

  /**
   * Determine if a value is a Date
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Date, otherwise false
   */
  function isDate$1(val) {
    return toString$4.call(val) === '[object Date]';
  }

  /**
   * Determine if a value is a File
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a File, otherwise false
   */
  function isFile(val) {
    return toString$4.call(val) === '[object File]';
  }

  /**
   * Determine if a value is a Blob
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  function isBlob(val) {
    return toString$4.call(val) === '[object Blob]';
  }

  /**
   * Determine if a value is a Function
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  function isFunction$1(val) {
    return toString$4.call(val) === '[object Function]';
  }

  /**
   * Determine if a value is a Stream
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  function isStream(val) {
    return isObject$2(val) && isFunction$1(val.pipe);
  }

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  function isURLSearchParams(val) {
    return toString$4.call(val) === '[object URLSearchParams]';
  }

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   * @returns {String} The String freed of excess whitespace
   */
  function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
  }

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   */
  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                             navigator.product === 'NativeScript' ||
                                             navigator.product === 'NS')) {
      return false;
    }
    return (
      typeof window !== 'undefined' &&
      typeof document !== 'undefined'
    );
  }

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   */
  function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray$2(obj)) {
      // Iterate over array values
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */
  function merge$2(/* obj1, obj2, obj3, ... */) {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject(result[key]) && isPlainObject(val)) {
        result[key] = merge$2(result[key], val);
      } else if (isPlainObject(val)) {
        result[key] = merge$2({}, val);
      } else if (isArray$2(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   * @return {Object} The resulting value of object a
   */
  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   * @return {string} content value without BOM
   */
  function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  }

  var utils = {
    isArray: isArray$2,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer$1,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject$2,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate$1,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction$1,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge$2,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
  };

  function encode$2(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @returns {string} The formatted url
   */
  var buildURL = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }

    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];

      utils.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils.forEach(val, function parseValue(v) {
          if (utils.isDate(v)) {
            v = v.toISOString();
          } else if (utils.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode$2(key) + '=' + encode$2(v));
        });
      });

      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };

  function InterceptorManager() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  };

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   */
  InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   */
  InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  var InterceptorManager_1 = InterceptorManager;

  var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };

  /**
   * Update an Error with the specified config, error code, and response.
   *
   * @param {Error} error The error to update.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The error.
   */
  var enhanceError = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    };
    return error;
  };

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The created error.
   */
  var createError = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  };

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   */
  var settle = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError(
        'Request failed with status code ' + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };

  var cookies = (
    utils.isStandardBrowserEnv() ?

    // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return (match ? decodeURIComponent(match[3]) : null);
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        };
      })() :

    // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() { return null; },
          remove: function remove() {}
        };
      })()
  );

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  var isAbsoluteURL = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   * @returns {string} The combined URL
   */
  var combineURLs = function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  };

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   * @returns {string} The combined full path
   */
  var buildFullPath = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };

  // Headers whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  var ignoreDuplicateOf = [
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ];

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} headers Headers needing to be parsed
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) { return parsed; }

    utils.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils.trim(line.substr(0, i)).toLowerCase();
      val = utils.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });

    return parsed;
  };

  var isURLSameOrigin = (
    utils.isStandardBrowserEnv() ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement('a');
        var originURL;

        /**
      * Parse a URL to discover it's components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */
        function resolveURL(url) {
          var href = url;

          if (msie) {
          // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */
        return function isURLSameOrigin(requestURL) {
          var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

    // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })()
  );

  /**
   * A `Cancel` is an object that is thrown when an operation is canceled.
   *
   * @class
   * @param {string=} message The message.
   */
  function Cancel(message) {
    this.message = message;
  }

  Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel.prototype.__CANCEL__ = true;

  var Cancel_1 = Cancel;

  var xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;
      var onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }

        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }

      if (utils.isFormData(requestData)) {
        delete requestHeaders['Content-Type']; // Let the browser set it
      }

      var request = new XMLHttpRequest();

      // HTTP basic authentication
      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

      // Set the request timeout in MS
      request.timeout = config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
          request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };

        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(createError('Network Error', config, null, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        var transitional = config.transitional || defaults_1.transitional;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError(
          timeoutErrorMessage,
          config,
          transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
          request));

        // Clean up request
        request = null;
      };

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if (utils.isStandardBrowserEnv()) {
        // Add xsrf header
        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            // Remove Content-Type if data is undefined
            delete requestHeaders[key];
          } else {
            // Otherwise add header to the request
            request.setRequestHeader(key, val);
          }
        });
      }

      // Add withCredentials to request if needed
      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }

      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken || config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = function(cancel) {
          if (!request) {
            return;
          }
          reject(!cancel || (cancel && cancel.type) ? new Cancel_1('canceled') : cancel);
          request.abort();
          request = null;
        };

        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
      }

      if (!requestData) {
        requestData = null;
      }

      // Send the request
      request.send(requestData);
    });
  };

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = xhr;
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = xhr;
    }
    return adapter;
  }

  function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  var defaults = {

    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },

    adapter: getDefaultAdapter(),

    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Accept');
      normalizeHeaderName(headers, 'Content-Type');

      if (utils.isFormData(data) ||
        utils.isArrayBuffer(data) ||
        utils.isBuffer(data) ||
        utils.isStream(data) ||
        utils.isFile(data) ||
        utils.isBlob(data)
      ) {
        return data;
      }
      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }
      if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
        setContentTypeIfUnset(headers, 'application/json');
        return stringifySafely(data);
      }
      return data;
    }],

    transformResponse: [function transformResponse(data) {
      var transitional = this.transitional || defaults.transitional;
      var silentJSONParsing = transitional && transitional.silentJSONParsing;
      var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

      if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw enhanceError(e, this, 'E_JSON_PARSE');
            }
            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },

    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    }
  };

  utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  });

  var defaults_1 = defaults;

  /**
   * Transform the data for a request or a response
   *
   * @param {Object|String} data The data to be transformed
   * @param {Array} headers The headers for the request or response
   * @param {Array|Function} fns A single function or Array of functions
   * @returns {*} The resulting transformed data
   */
  var transformData = function transformData(data, headers, fns) {
    var context = this || defaults_1;
    /*eslint no-param-reassign:0*/
    utils.forEach(fns, function transform(fn) {
      data = fn.call(context, data, headers);
    });

    return data;
  };

  var isCancel = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new Cancel_1('canceled');
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   * @returns {Promise} The Promise to be fulfilled
   */
  var dispatchRequest = function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    // Ensure headers exist
    config.headers = config.headers || {};

    // Transform request data
    config.data = transformData.call(
      config,
      config.data,
      config.headers,
      config.transformRequest
    );

    // Flatten headers
    config.headers = utils.merge(
      config.headers.common || {},
      config.headers[config.method] || {},
      config.headers
    );

    utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      function cleanHeaderConfig(method) {
        delete config.headers[method];
      }
    );

    var adapter = config.adapter || defaults_1.adapter;

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData.call(
        config,
        response.data,
        response.headers,
        config.transformResponse
      );

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            reason.response.data,
            reason.response.headers,
            config.transformResponse
          );
        }
      }

      return Promise.reject(reason);
    });
  };

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   * @returns {Object} New object resulting from merging config2 to config1
   */
  var mergeConfig = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};

    function getMergedValue(target, source) {
      if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
        return utils.merge(target, source);
      } else if (utils.isPlainObject(source)) {
        return utils.merge({}, source);
      } else if (utils.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
      if (!utils.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    var mergeMap = {
      'url': valueFromConfig2,
      'method': valueFromConfig2,
      'data': valueFromConfig2,
      'baseURL': defaultToConfig2,
      'transformRequest': defaultToConfig2,
      'transformResponse': defaultToConfig2,
      'paramsSerializer': defaultToConfig2,
      'timeout': defaultToConfig2,
      'timeoutMessage': defaultToConfig2,
      'withCredentials': defaultToConfig2,
      'adapter': defaultToConfig2,
      'responseType': defaultToConfig2,
      'xsrfCookieName': defaultToConfig2,
      'xsrfHeaderName': defaultToConfig2,
      'onUploadProgress': defaultToConfig2,
      'onDownloadProgress': defaultToConfig2,
      'decompress': defaultToConfig2,
      'maxContentLength': defaultToConfig2,
      'maxBodyLength': defaultToConfig2,
      'transport': defaultToConfig2,
      'httpAgent': defaultToConfig2,
      'httpsAgent': defaultToConfig2,
      'cancelToken': defaultToConfig2,
      'socketPath': defaultToConfig2,
      'responseEncoding': defaultToConfig2,
      'validateStatus': mergeDirectKeys
    };

    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      var merge = mergeMap[prop] || mergeDeepProperties;
      var configValue = merge(prop);
      (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });

    return config;
  };

  var data = {
    "version": "0.25.0"
  };

  var VERSION = data.version;

  var validators = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
    validators[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  var deprecatedWarnings = {};

  /**
   * Transitional option validator
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   * @returns {function}
   */
  validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
      if (validator === false) {
        throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  /**
   * Assert object's properties type
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new TypeError('options must be an object');
    }
    var keys = Object.keys(options);
    var i = keys.length;
    while (i-- > 0) {
      var opt = keys[i];
      var validator = schema[opt];
      if (validator) {
        var value = options[opt];
        var result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new TypeError('option ' + opt + ' must be ' + result);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw Error('Unknown option ' + opt);
      }
    }
  }

  var validator = {
    assertOptions: assertOptions,
    validators: validators
  };

  var validators$1 = validator.validators;
  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   */
  function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_1(),
      response: new InterceptorManager_1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {Object} config The config specific for this request (merged with this.defaults)
   */
  Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    if (!config.url) {
      throw new Error('Provided config url is not valid');
    }

    config = mergeConfig(this.defaults, config);

    // Set config.method
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    var transitional = config.transitional;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators$1.transitional(validators$1.boolean),
        forcedJSONParsing: validators$1.transitional(validators$1.boolean),
        clarifyTimeoutError: validators$1.transitional(validators$1.boolean)
      }, false);
    }

    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    var promise;

    if (!synchronousRequestInterceptors) {
      var chain = [dispatchRequest, undefined];

      Array.prototype.unshift.apply(chain, requestInterceptorChain);
      chain = chain.concat(responseInterceptorChain);

      promise = Promise.resolve(config);
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    }


    var newConfig = config;
    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }

    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }

    return promise;
  };

  Axios.prototype.getUri = function getUri(config) {
    if (!config.url) {
      throw new Error('Provided config url is not valid');
    }
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  };

  // Provide aliases for supported request methods
  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        url: url,
        data: (config || {}).data
      }));
    };
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });

  var Axios_1 = Axios;

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @class
   * @param {Function} executor The executor function.
   */
  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    var token = this;

    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
      if (!token._listeners) return;

      var i;
      var l = token._listeners.length;

      for (i = 0; i < l; i++) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
      var _resolve;
      // eslint-disable-next-line func-names
      var promise = new Promise(function(resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new Cancel_1(message);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  /**
   * Subscribe to the cancel signal
   */

  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };

  /**
   * Unsubscribe from the cancel signal
   */

  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    var index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  };

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  var CancelToken_1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   * @returns {Function}
   */
  var spread = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  var isAxiosError = function isAxiosError(payload) {
    return utils.isObject(payload) && (payload.isAxiosError === true);
  };

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   * @return {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    var context = new Axios_1(defaultConfig);
    var instance = bind(Axios_1.prototype.request, context);

    // Copy axios.prototype to instance
    utils.extend(instance, Axios_1.prototype, context);

    // Copy context to instance
    utils.extend(instance, context);

    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };

    return instance;
  }

  // Create the default instance to be exported
  var axios = createInstance(defaults_1);

  // Expose Axios class to allow class inheritance
  axios.Axios = Axios_1;

  // Expose Cancel & CancelToken
  axios.Cancel = Cancel_1;
  axios.CancelToken = CancelToken_1;
  axios.isCancel = isCancel;
  axios.VERSION = data.version;

  // Expose all/spread
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;

  // Expose isAxiosError
  axios.isAxiosError = isAxiosError;

  var axios_1 = axios;

  // Allow use of default import syntax in TypeScript
  var default_1 = axios;
  axios_1.default = default_1;

  var axios$1 = axios_1;

  const prodFunctionsBaseUrl = "https://us-central1-neurosity-device.cloudfunctions.net";

  function getFunctionsBaseURL(sdkOptions) {
      if (!sdkOptions.emulator) {
          return prodFunctionsBaseUrl;
      }
      const { emulatorHost, emulatorFunctionsPort } = sdkOptions;
      const emulatorFunctionsBaseUrl = `http://${emulatorHost}:${emulatorFunctionsPort}/neurosity-device/us-central1`;
      return emulatorFunctionsBaseUrl;
  }

  function createOAuthURL(config, sdkOptions) {
      const { clientId, clientSecret, responseType, redirectUri, scope, state } = config;
      const baseUrl = getFunctionsBaseURL(sdkOptions);
      return axios$1
          .get(`${baseUrl}/authorize/entry`, {
          params: Object.assign(Object.assign({ client_id: clientId }, (clientSecret ? { client_secret: clientSecret } : {})), { response_type: responseType, redirect_uri: redirectUri, scope: scope.join(","), state: state, redirect: "false" })
      })
          .then((response) => `${baseUrl}${response.data.url}`);
  }

  var __awaiter$c = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getOAuthToken(query, sdkOptions) {
      return __awaiter$c(this, void 0, void 0, function* () {
          const baseUrl = getFunctionsBaseURL(sdkOptions);
          // Get refresh token
          const refreshResponse = yield axios$1.post(`${baseUrl}/getOAuthRefreshToken`, query);
          const refreshToken = refreshResponse.data;
          return axios$1
              .post(`${baseUrl}/token`, {
              grant_type: "refresh_token",
              refresh_token: refreshToken.data,
              client_id: query.clientId,
              client_secret: query.clientSecret
          })
              .then((response) => JSON.parse(response.data)["access_token"]);
      });
  }

  function isNode$1() {
      return (typeof process !== "undefined" &&
          process.versions != null &&
          process.versions.node != null);
  }

  /**
   * @internal
   */
  function getMetric(dependencies, subscription) {
      const { options, api, onDeviceChange, isLocalMode, socketUrl, status } = dependencies;
      const { metric, labels, atomic } = subscription;
      const metricError = validate(metric, labels, options);
      if (metricError) {
          return throwError(metricError);
      }
      const subscribeTo = (serverType) => new Observable((observer) => {
          const subscriptions = atomic
              ? [
                  api.metrics.subscribe({
                      metric: metric,
                      labels: labels,
                      atomic: atomic,
                      serverType: serverType
                  })
              ]
              : labels.map((label) => {
                  return api.metrics.subscribe({
                      metric: metric,
                      labels: [label],
                      atomic: atomic,
                      serverType: serverType
                  });
              });
          const subscriptionWithListeners = subscriptions.map((subscription) => ({
              subscription,
              listener: api.metrics.on(subscription, (...data) => {
                  observer.next(...data);
              })
          }));
          return () => {
              subscriptionWithListeners.forEach(({ subscription, listener }) => {
                  api.metrics.unsubscribe(subscription, listener);
              });
          };
      });
      return onDeviceChange().pipe(switchMap((device) => {
          if (!device) {
              return empty$1();
          }
          const { deviceId } = device;
          return isLocalMode().pipe(switchMap((isLocalMode) => {
              if (isLocalMode && isNotionMetric(metric)) {
                  return socketUrl().pipe(switchMap((socketUrl) => api.setWebsocket(socketUrl, deviceId)), switchMap(() => subscribeTo(api.localServerType)));
              }
              api.unsetWebsocket();
              return subscribeTo(api.defaultServerType);
          }));
      }), whileOnline({
          status$: status(),
          allowWhileOnSleepMode: false
      }));
  }

  var __awaiter$d = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const defaultOptions$2 = {
      timesync: false,
      autoSelectDevice: true,
      emulator: false,
      emulatorHost: "localhost",
      emulatorAuthPort: 9099,
      emulatorDatabasePort: 9000,
      emulatorFunctionsPort: 5001,
      emulatorFirestorePort: 8080,
      emulatorOptions: {}
  };
  /**
   * Example
   * ```typescript
   * import { Notion } from "@neurosity/notion";
   *
   * const notion = new Notion();
   * ```
   */
  class Notion {
      /**
       * Creates new instance of Notion
       *
       * ```typescript
       * const notion = new Notion();
       * ```
    
       * @param options
       */
      constructor(options = {}) {
          /**
           * @internal
           */
          this._localModeSubject = new BehaviorSubject(false);
          this.options = Object.freeze(Object.assign(Object.assign({}, defaultOptions$2), options));
          this.api = new ApiClient(this.options);
      }
      /**
       *
       * @hidden
       */
      _getMetricDependencies() {
          return {
              options: this.options,
              api: this.api,
              onDeviceChange: this.onDeviceChange.bind(this),
              isLocalMode: this.isLocalMode.bind(this),
              socketUrl: this.socketUrl.bind(this),
              status: this.status.bind(this)
          };
      }
      /**
       * Starts user session
       *
       * ```typescript
       * await notion.login({
       *   email: "...",
       *   password: "..."
       * });
       * ```
       *
       * @param credentials
       */
      login(credentials) {
          return __awaiter$d(this, void 0, void 0, function* () {
              return yield this.api.login(credentials);
          });
      }
      /**
       * Ends user session
       *
       * ```typescript
       * await notion.logout();
       * // session has ended
       * ```
       *
       */
      logout() {
          return __awaiter$d(this, void 0, void 0, function* () {
              return yield this.api.logout();
          });
      }
      /**
       * @internal
       * Not user facing.
       */
      __getApp() {
          return this.api.__getApp();
      }
      /**
       * Subscribe to auth state changes
       *
       * Streams the state of the auth session. If user has logged in, the user object will be set. When logged out, the user object will be null.
       *
       * ```typescript
       * notion.onAuthStateChanged().subscribe((user) => {
       *   console.log(user);
       * });
       * ```
       */
      onAuthStateChanged() {
          return this.api.onAuthStateChanged();
      }
      /**
       * @internal
       * Not user facing yet
       */
      addDevice(deviceId) {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "addDevice");
          if (hasOAuthError) {
              return Promise.reject(OAuthError);
          }
          return this.api.addDevice(deviceId);
      }
      /**
       * @internal
       * Not user facing yet
       */
      removeDevice(deviceId) {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "removeDevice");
          if (hasOAuthError) {
              return Promise.reject(OAuthError);
          }
          return this.api.removeDevice(deviceId);
      }
      /**
       * @internal
       * Not user facing yet
       */
      transferDevice(options) {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "transferDevice");
          if (hasOAuthError) {
              return Promise.reject(OAuthError);
          }
          return this.api.transferDevice(options);
      }
      /**
       * @internal
       * Not user facing yet
       */
      onUserDevicesChange() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "onUserDevicesChange");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return this.api.onUserDevicesChange();
      }
      /**
       * @internal
       * Not user facing yet
       */
      onUserClaimsChange() {
          return this.api.onUserClaimsChange();
      }
      /**
       * Get user devices
       *
       * Returns a list of devices claimed by the user authenticated.
       *
       * ```typescript
       * const devices = await notion.getDevices();
       * console.log(devices);
       * ```
       */
      getDevices() {
          return __awaiter$d(this, void 0, void 0, function* () {
              return yield this.api.getDevices();
          });
      }
      /**
       * Select Device
       *
       * Rarely necessary, but useful when the user owns multiple devices.
       *
       * A common use case for manually selecting a device is when you wish to build a device dropdown a user can select from, instead of collecting the Device Id from the user ahead of time.
       *
       * The 3 steps to manually selecting a device are:
       *
       * - Set `autoSelectDevice` to false when instantiating `Notion`.
       * - Authenticate with your Neurosity account to access your devices by calling the `notion.login(...)` function.
       * - Call the `notion.selectDevice(...)` function with a device selector function.
       *
       * ```typescript
       * const devices = await notion.selectDevice((devices) =>
       *   devices.find((device) => device.deviceNickname === "Notion-A1B")
       * );
       *
       * console.log(devices);
       * ```
       *
       * > If you own multiple devices, and don't pass `autoSelectDevice`, then the first device on the list will be automatically selected.
       *
       * For more info, check out the "Device Selection" guide.
       */
      selectDevice(deviceSelector) {
          return __awaiter$d(this, void 0, void 0, function* () {
              const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "selectDevice");
              if (hasOAuthError) {
                  return Promise.reject(OAuthError);
              }
              return yield this.api.selectDevice(deviceSelector);
          });
      }
      /**
       * Get selected device
       *
       * ```typescript
       * const selectedDevice = await notion.getSelectedDevice();
       * console.log(selectedDevice);
       * ```
       */
      getSelectedDevice() {
          return __awaiter$d(this, void 0, void 0, function* () {
              const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "getSelectedDevice");
              if (hasOAuthError) {
                  return Promise.reject(OAuthError);
              }
              return yield this.api.getSelectedDevice();
          });
      }
      /**
       * ```typescript
       * const info = await notion.getInfo();
       * ```
       */
      getInfo() {
          return __awaiter$d(this, void 0, void 0, function* () {
              if (!this.api.didSelectDevice()) {
                  return Promise.reject(mustSelectDevice);
              }
              const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "getInfo");
              if (hasOAuthError) {
                  return Promise.reject(OAuthError);
              }
              return yield this.api.getInfo();
          });
      }
      /**
       * Observes Local Mode changes
       *
       * ```typescript
       * notion.isLocalMode().subscribe(isLocalMode => {
       *  console.log(isLocalMode);
       * });
       * ```
       */
      isLocalMode() {
          return this._localModeSubject.asObservable().pipe(share());
      }
      /**
       * Observes selected device
       *
       * ```typescript
       * notion.onDeviceChange().subscribe(device => {
       *  console.log(device);
       * });
       * ```
       */
      onDeviceChange() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "onDeviceChange");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return this.api.onDeviceChange();
      }
      /**
       * Enables/disables local mode
       *
       * With local mode, device metrics like brainwaves, calm, focus, etc will stream
       * via your local WiFi network and not the default cloud server.
       *
       * Local Mode is disabled by default, to enable it:
       *
       * ```typescript
       * await notion.enableLocalMode(true);
       * ```
       *
       * To disable it:
       *
       * ```typescript
       * await notion.enableLocalMode(false);
       * ```
       *
       * Keep in mind:
       *  - Activity Logging will <em>not work</em> while this setting is enabled.
       *  - Your Notion must be connected to the same WiFi network as this device to establish communication.
       *  - An internet connection is still needed to authenticate, get device status and add metric subscriptions.
       *  - This setting is not global and needs to be set for every Notion app you wish to affect.
       */
      enableLocalMode(shouldEnable) {
          return __awaiter$d(this, void 0, void 0, function* () {
              if (typeof shouldEnable !== "boolean") {
                  return Promise.reject(new TypeError("enableLocalMode can only accept a boolean"));
              }
              if (!shouldEnable) {
                  this._localModeSubject.next(shouldEnable);
                  return shouldEnable;
              }
              const [localModeSupported, error] = yield this.api
                  .onceNamespace("context/socketUrl")
                  .then((socketUrl) => {
                  if (!socketUrl) {
                      const error = `${prefix}Your device's OS does not support localMode. Try updating to the latest OS.`;
                      return [false, new Error(error)];
                  }
                  return [true, null];
              })
                  .catch((error) => [false, error]);
              if (!localModeSupported) {
                  return Promise.reject(error);
              }
              this._localModeSubject.next(shouldEnable);
              return shouldEnable;
          });
      }
      /**
       * Ends database connection
       *
       * ```typescript
       * await notion.disconnect();
       * ```
       */
      disconnect() {
          return __awaiter$d(this, void 0, void 0, function* () {
              return yield this.api.disconnect();
          });
      }
      /**
       * @internal
       * Not user facing
       */
      socketUrl() {
          const { onDeviceSocketUrl } = this.options;
          if (onDeviceSocketUrl) {
              return of(onDeviceSocketUrl);
          }
          return this.api.observeNamespace("context/socketUrl");
      }
      /**
       * @internal
       * Not user facing
       */
      dispatchAction(action) {
          if (!this.api.didSelectDevice()) {
              return Promise.reject(mustSelectDevice);
          }
          const [hasOAuthError, OAuthError] = validateOAuthScopeForAction(this.api.userClaims, action);
          if (hasOAuthError) {
              return Promise.reject(OAuthError);
          }
          return this.api.actions.dispatch(action);
      }
      /**
       * Injects an EEG marker to data stream
       *
       * ```typescript
       * notion.addMarker("eyes-closed");
       *
       * // later...
       *
       * notion.addMarker("eyes-open");
       * ```
       *
       * @param label Name the label to inject
       */
      addMarker(label) {
          if (!this.api.didSelectDevice()) {
              throw mustSelectDevice;
          }
          if (!label) {
              throw new Error(`${prefix}A label is required for addMarker`);
          }
          return this.dispatchAction({
              command: "marker",
              action: "add",
              message: {
                  label,
                  timestamp: this.api.timestamp
              }
          });
      }
      /**
       * Queue haptic motor commands
       *
       * To queue haptic P7 only,
       * ```typescript
       * await notion.haptics({
       *   P7: ["tripleClick100"]
       * });
       * ```
       *
       * To queue both motors at the same time
       * ```typescript
       * await notion.haptics({
       *   P7: [notion.getHapticEffects().strongClick100],
       *   P8: [notion.getHapticEffects().strongClick100]
       * });
       * ```
       *
       * You can queue different commands to the motors too
       * ```typescript
       * const effects = notion.getHapticEffects();
       * await notion.haptics({
       *   P7: [effects.transitionRampUpLongSmooth1_0_to_100,
       *         effects.transitionRampDownLongSmooth1_100_to_0],
       *   P8: [effects.strongClick100]
       * });
       * ```
       *
       * @param effects Effects to queue. The key of the object passed should be the location of the motor
       *  to queue. Each key can be an array of up to 7 commands. There is no haptic support on model
       *  version 1, Notion DK1. The Haptic motor's location is positioned in reference to the 10-10 EEG
       *  system used to label the channels of the Crown's EEG sensors. Notion 2 and Crown have haptics
       *  at P7 and P8. A list of haptic commands can be found on ./utils/hapticCodes.ts - there
       *  are about 127 of them!
       */
      haptics(effects) {
          return __awaiter$d(this, void 0, void 0, function* () {
              const metric = "haptics";
              if (!this.api.didSelectDevice()) {
                  return Promise.reject(mustSelectDevice);
              }
              const modelVersion = (yield this.getSelectedDevice()).modelVersion;
              const supportsHaptics$$1 = supportsHaptics(modelVersion);
              if (!supportsHaptics$$1) {
                  return Promise.reject(metricNotSupportedByModel(metric, modelVersion));
              }
              const newPlatformHapticRequest = getPlatformHapticMotors(modelVersion);
              for (const key in effects) {
                  if (!Object.keys(newPlatformHapticRequest).includes(key)) {
                      return Promise.reject(locationNotFound(key, modelVersion));
                  }
                  const singleMotorEffects = effects[key];
                  const maxItems = 7;
                  if (singleMotorEffects.length > maxItems) {
                      return Promise.reject(exceededMaxItems(maxItems));
                  }
                  newPlatformHapticRequest[key] = singleMotorEffects;
              }
              return this.dispatchAction({
                  command: metric,
                  action: "queue",
                  responseRequired: true,
                  responseTimeout: 1000,
                  message: { effects: newPlatformHapticRequest }
              });
          });
      }
      /**
       * ```typescript
       * const effects = notion.getHapticEffects();
       * ```
       */
      getHapticEffects() {
          return hapticEffects;
      }
      /**
       * Observes accelerometer data
       * Supported by Notion 2 and the Crown.
       *
       * ```typescript
       * notion.accelerometer().subscribe(accelerometer => {
       *   console.log(accelerometer);
       * });
       *
       * // { acceleration: ..., inclination: ..., orientation: ..., pitch: ..., roll: ..., x: ..., y: ..., z: ... }
       * ```
       *
       * @returns Observable of accelerometer metric events
       */
      accelerometer() {
          const metric = "accelerometer";
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, metric);
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return from(this.getSelectedDevice()).pipe(switchMap((selectedDevice) => {
              const modelVersion = (selectedDevice === null || selectedDevice === void 0 ? void 0 : selectedDevice.modelVersion) || MODEL_VERSION_1;
              const supportsAccel$$1 = supportsAccel(modelVersion);
              if (!supportsAccel$$1) {
                  return throwError(metricNotSupportedByModel(metric, modelVersion));
              }
              return getMetric(this._getMetricDependencies(), {
                  metric,
                  labels: getLabels(metric),
                  atomic: true
              });
          }));
      }
      /**
       * The `raw` brainwaves parameter emits epochs of 16 samples for Crown and 25 for Notion 1 and 2.
       *
       * Example
       * ```typescript
       * notion.brainwaves("raw").subscribe(brainwaves => {
       *   console.log(brainwaves);
       * });
       * ```
       *
       * Raw Unfiltered - The `rawUnfiltered` brainwaves parameter emits epochs of 16 samples for Crown and 25 for Notion 1 and 2.
    
       * Example
       * ```typescript
       * notion.brainwaves("rawUnfiltered").subscribe(brainwaves => {
       *   console.log(brainwaves);
       * });
       * ```
       *
       * Power By Band - The `powerByBand` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. beta) contains an average power value per channel.
       *
       * Example
       * ```typescript
       * notion.brainwaves("powerByBand").subscribe(brainwaves => {
       *   console.log(brainwaves);
       * });
       * ```
       *
       * Power Spectral Density (PSD) - The `psd` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. alpha) contains the computed FFT (Fast Fourier transform) value per channel (see the `psd` property), as well as the frequency ranges (see the `freqs` property).
       *
       * Example
       * ```typescript
       * notion.brainwaves("psd").subscribe(brainwaves => {
       *   console.log(brainwaves);
       * });
       * ```
       *
       * @param labels Name of metric properties to filter by
       * @returns Observable of brainwaves metric events
       */
      brainwaves(label, ...otherLabels) {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "brainwaves");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric: "brainwaves",
              labels: label ? [label, ...otherLabels] : [],
              atomic: false
          });
      }
      /**
       * Example
       * ```typescript
       * notion.calm().subscribe(calm => {
       *   console.log(calm.probability);
       * });
       *
       * // 0.45
       * // 0.47
       * // 0.53
       * // 0.51
       * // ...
       * ```
       *
       * @returns Observable of calm events - awareness/calm alias
       */
      calm() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "calm");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric: "awareness",
              labels: ["calm"],
              atomic: false
          });
      }
      /**
       * Observes signal quality data where each property is the name
       * of the channel and the value includes the standard deviation and
       * a status set by the device
       *
       * ```typescript
       * notion.signalQuality().subscribe(signalQuality => {
       *   console.log(signalQuality);
       * });
       *
       * // { FC6: { standardDeviation: 3.5, status: "good" }, C3: {...}, ... }
       * ```
       *
       * @returns Observable of signalQuality metric events
       */
      signalQuality() {
          const metric = "signalQuality";
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, metric);
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric,
              labels: getLabels(metric),
              atomic: true
          });
      }
      /**
       * Observes last state of `settings` and all subsequent `settings` changes
       *
       * ```typescript
       * notion.settings().subscribe(settings => {
       *   console.log(settings.lsl);
       * });
       *
       * // true
       * // ...
       * ```
       *
       * @returns Observable of `settings` metric events
       */
      settings() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "settings");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return this.api.observeNamespace("settings");
      }
      /**
       * Example
       * ```typescript
       * notion.focus().subscribe(focus => {
       *   console.log(focus.probability);
       * });
       *
       * // 0.56
       * // 0.46
       * // 0.31
       * // 0.39
       * // ...
       * ```
       *
       * @returns Observable of focus events - awareness/focus alias
       */
      focus() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "focus");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric: "awareness",
              labels: ["focus"],
              atomic: false
          });
      }
      /**
       * @param labels Name of metric properties to filter by
       * @returns Observable of kinesis metric events
       */
      kinesis(label, ...otherLabels) {
          const metric = "kinesis";
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, metric);
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric,
              labels: label ? [label, ...otherLabels] : [],
              atomic: false
          });
      }
      /**
       * @param labels Name of metric properties to filter by
       * @returns Observable of predictions metric events
       */
      predictions(label, ...otherLabels) {
          const metric = "predictions";
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, metric);
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return getMetric(this._getMetricDependencies(), {
              metric,
              labels: label ? [label, ...otherLabels] : [],
              atomic: false
          });
      }
      /**
       * Observes last state of `status` and all subsequent `status` changes
       *
       * ```typescript
       * notion.status().subscribe(status => {
       *   console.log(status.state);
       * });
       *
       * // "online"
       * // ...
       * ```
       *
       * @returns Observable of `status` metric events
       */
      status() {
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "status");
          if (hasOAuthError) {
              return throwError(OAuthError);
          }
          return this.api.status();
      }
      /**
       * @internal
       * Not user facing yet
       *
       * Changes device settings programmatically. These settings can be
       * also changed from the developer console under device settings.
       *
       * Available settings [[ChangeSettings]]
       *
       * Example
       * ```typescript
       * notion.changeSettings({
       *   lsl: true
       * });
       * ```
       */
      changeSettings(settings) {
          if (!this.api.didSelectDevice()) {
              return Promise.reject(mustSelectDevice);
          }
          const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(this.api.userClaims, "changeSettings");
          if (hasOAuthError) {
              return Promise.reject(OAuthError);
          }
          return this.api.changeSettings(settings);
      }
      /**
       *
       * ```typescript
       * notion.training.record({
       *   metric: "kinesis",
       *   label: "push"
       * });
       *
       * notion.training.stop({
       *   metric: "kinesis",
       *   label: "push"
       * });
       * ```
       *
       * @returns Training methods
       */
      get training() {
          return {
              /**
               * Records a training for a metric/label pair
               * @category Training
               */
              record: (training) => {
                  if (!this.api.didSelectDevice()) {
                      throw mustSelectDevice;
                  }
                  const userId = this.api.user && "uid" in this.api.user
                      ? this.api.user.uid
                      : null;
                  const message = Object.assign(Object.assign({ fit: false, baseline: false, timestamp: this.api.timestamp }, training), { userId });
                  this.api.actions.dispatch({
                      command: "training",
                      action: "record",
                      message
                  });
              },
              /**
               * Stops the training for a metric/label pair
               * @category Training
               */
              stop: (training) => {
                  if (!this.api.didSelectDevice()) {
                      throw mustSelectDevice;
                  }
                  this.api.actions.dispatch({
                      command: "training",
                      action: "stop",
                      message: Object.assign({}, training)
                  });
              },
              /**
               * Stops all trainings
               * @category Training
               */
              stopAll: () => {
                  if (!this.api.didSelectDevice()) {
                      throw mustSelectDevice;
                  }
                  this.api.actions.dispatch({
                      command: "training",
                      action: "stopAll",
                      message: {}
                  });
              }
          };
      }
      /**
       * @internal
       * Proof of Concept for disconnecting db
       */
      goOffline() {
          this.api.goOffline();
      }
      /**
       * @internal
       * Proof of Concept for resuming db connection
       */
      goOnline() {
          this.api.goOnline();
      }
      /**
       * @internal
       * Not user facing yet
       *
       * Creates user account and automatically signs in with same credentials
       *
       * @param emailAndPasswordObject
       * @returns user credential
       */
      createAccount(credentials) {
          return this.api.createAccount(credentials);
      }
      /**
       * @internal
       * Not user facing yet
       *
       * Removes all devices from an account and then deletes the account
       */
      deleteAccount() {
          return this.api.deleteAccount();
      }
      /**
       * @internal
       * Not user facing yet
       *
       * Creates custom token (JWT) to use to login with `{ customToken }`.
       *
       * @returns custom token
       */
      createCustomToken() {
          return this.api.createCustomToken();
      }
      /**
       * @internal
       * Not user facing yet
       *
       * Gets the offset between the device's clock and the client's clock
       * Requires option.timesync to be true
       *
       * @returns timesyncOffset
       */
      getTimesyncOffset() {
          if (!this.options.timesync) {
              console.warn(`getTimesyncOffset() requires options.timesync to be true.`);
          }
          return this.options.timesync ? this.api.getTimesyncOffset() : 0;
      }
      /**
       * Create OAuth URL
       * 💡 OAuth requires developers to register their apps with Neurosity
       * [Read full OAuth guide](/docs/oauth)
       *
       * Creates client-specific OAuth URL. This is the first step of the OAuth workflow. Use this function to create a URL you can use to redirect users to the Neurosity sign-in page.
       * 💡 This function is designed to only run on the server side for security reasons, as it requires your client secret.
       *
       * ```typescript
       * const { Notion } = require("@neurosity/notion");
       *
       * const notion = new Notion({
       *   autoSelectDevice: false
       * });
       *
       * exports.handler = async function (event) {
       *   return notion
       *     .createOAuthURL({
       *       clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
       *       clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
       *       redirectUri: process.env.NEUROSITY_OAUTH_CLIENT_REDIRECT_URI,
       *       responseType: "token",
       *       state: Math.random().toString().split(".")[1],
       *       scope: [
       *         "read:devices-info",
       *         "read:devices-status",
       *         "read:signal-quality",
       *         "read:brainwaves"
       *       ]
       *     })
       *     .then((url) => ({
       *       statusCode: 200,
       *       body: JSON.stringify({ url })
       *     }))
       *     .catch((error) => ({
       *       statusCode: 400,
       *       body: JSON.stringify(error.response.data)
       *     }));
       * };
       * ```
       * @returns custom token
       */
      createOAuthURL(config$$1) {
          if (!isNode$1) {
              return Promise.reject(new Error(`${prefix}the createOAuthURL method must be used on the server side (node.js) for security reasons.`));
          }
          return createOAuthURL(config$$1, this.options);
      }
      /**
       * Get OAuth Token
       * 💡 OAuth requires developers to register their apps with Neurosity
       * [Read full OAuth guide](/docs/oauth)
       *
       * Gets client-specific OAuth token for a given userId.
       *
       * 💡 This function is designed to only run on the server side for security reasons, as it requires your client secret.
       * Here's an example of a cloud function that receives a `userId` via query params and loads the client id and client secret securely via environment variables.
       *
       *
       * ```typescript
       * const { Notion } = require("@neurosity/notion");
       *
       * const notion = new Notion({
       *   autoSelectDevice: false
       * });
       *
       * exports.handler = async function (event) {
       *   const userId = event.queryStringParameters?.userId;
       *
       *   return notion
       *     .getOAuthToken({
       *       clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
       *       clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
       *       userId
       *     })
       *     .then((token) => ({
       *       statusCode: 200,
       *       body: JSON.stringify(token)
       *     }))
       *     .catch((error) => ({
       *       statusCode: 200,
       *       body: JSON.stringify(error.response.data)
       *     }));
       * };
       * ```
       * @returns custom token
       */
      getOAuthToken(query) {
          if (!isNode$1) {
              return Promise.reject(new Error(`${prefix}the getOAuthToken method must be used on the server side (node.js) for security reasons.`));
          }
          return getOAuthToken(query, this.options);
      }
      /**
       * Remove OAuth Access
       * 💡 OAuth requires developers to register their apps with Neurosity
       * [Read full OAuth guide](/docs/oauth)
       *
       * Removes client-specific OAuth token for a given userId. Requires SDK to be signed in with OAuth custom token.
       *
       * ```typescript
       * await notion.removeOAuthAccess().catch((error) => {
       *   // handle error here...
       * });
       * ```
       * @returns custom token
       */
      removeOAuthAccess() {
          return this.api.removeOAuthAccess();
      }
      /**
       * @internal
       * Proof of Concept for Skills - Not user facing yet
       *
       * Accesses a skill by Bundle ID. Additionally, allows to observe
       * and push skill metrics
       *
       * @param bundleId Bundle ID of skill
       * @returns Skill instance
       */
      skill(bundleId) {
          return __awaiter$d(this, void 0, void 0, function* () {
              if (!this.api.didSelectDevice()) {
                  return Promise.reject(mustSelectDevice);
              }
              const skillData = yield this.api.skills.get(bundleId);
              if (skillData === null) {
                  return Promise.reject(new Error(`${prefix}Access denied for: ${bundleId}. Make sure the skill is installed.`));
              }
              return {
                  metric: (label) => {
                      const metricName = `skill~${skillData.id}~${label}`;
                      const subscription = new Observable((observer) => {
                          const subscription = this.api.metrics.subscribe({
                              metric: metricName,
                              labels: [label],
                              atomic: true
                          });
                          const listener = this.api.metrics.on(subscription, (...data) => {
                              observer.next(...data);
                          });
                          return () => {
                              this.api.metrics.unsubscribe(subscription, listener);
                          };
                      }).pipe(map((metric) => metric[label]));
                      Object.defineProperty(subscription, "next", {
                          value: (metricValue) => {
                              this.api.metrics.next(metricName, {
                                  [label]: metricValue
                              });
                          }
                      });
                      return subscription;
                  }
              };
          });
      }
      /**
       * Observes and returns a list of all Kinesis `experiments` and all subsequent experiment changes.
       * Here's an example of how to get a list of all Kinesis labels that have been trained:
       *
       * ```typescript
       *
       * const getUniqueLabels = (experiments) => {
       *   const labels = experiments.flatMap((experiment) => experiment.labels);
       *   // only return unique labels
       *   return [...new Set(labels)];
       * }
       *
       * notion.onUserExperiments().subscribe((experiments) => {
       *   console.log(experiments);
       *   console.log("labels", getUniqueLabels(experiments));
       * });
       *
       * // [{ id: '...', deviceId: '...', labels: [ 'drop' ], name: 'Lightgray cheetah', timestamp: 1577908381552, totalTrials: 16, userId: '...' }]
       * // ["drop", "lift", "push"]
       * ```
       *
       * @returns Observable of `experiments` events
       */
      onUserExperiments() {
          return this.api.onUserExperiments();
      }
      /**
       * Deletes a specific experiment provided an experiment ID
       *
       * ```typescript
       * await notion.deleteUserExperiment(experiment.id);
       * ```
       *
       * @param experimentId The ID of the Experiment
       * @returns void
       */
      deleteUserExperiment(experimentId) {
          return this.api.deleteUserExperiment(experimentId);
      }
  }
  /**
   *
   * @hidden
   */
  Notion.credentialWithLink = credentialWithLink;
  /**
   *
   * @hidden
   */
  Notion.createUser = createUser;
  /**
   *
   * @hidden
   */
  Notion.SERVER_TIMESTAMP = SERVER_TIMESTAMP$1;

  var __awaiter$e = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * @internal
   */
  function createNotionOnDevice(options) {
      return __awaiter$e(this, void 0, void 0, function* () {
          const notion = new Notion(options);
          const skill = Object.assign(Object.assign({}, (yield notion.skill(options.skill.bundleId))), { props: "props" in options.skill ? options.skill.props : {} });
          delete notion.skill;
          return [notion, skill];
      });
  }

  var __awaiter$f = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function createSkill(app) {
      return {
          subscribe: (options) => __awaiter$f(this, void 0, void 0, function* () {
              const [notion, skill] = yield createNotionOnDevice(Object.assign({}, options));
              yield notion
                  .enableLocalMode(true)
                  .catch((error) => console.error(error.message));
              const teardown = app(notion, skill);
              return {
                  unsubscribe: () => __awaiter$f(this, void 0, void 0, function* () {
                      yield notion.disconnect();
                      if (teardown && "then" in teardown) {
                          const cleanUp = yield teardown;
                          if (typeof cleanUp === "function") {
                              cleanUp();
                          }
                      }
                      if (typeof teardown === "function" && "then" in teardown()) {
                          return yield teardown();
                      }
                      if (typeof teardown === "function") {
                          return teardown();
                      }
                      return teardown;
                  })
              };
          })
      };
  }

  exports.Notion = Notion;
  exports.createSkill = createSkill;
  exports.createNotionOnDevice = createNotionOnDevice;

  return exports;

}({}));
