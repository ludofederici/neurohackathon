"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const whileOnline_1 = require("./whileOnline");
const subscription_1 = require("./subscription");
/**
 * @internal
 */
function getMetric(dependencies, subscription) {
    const { options, api, onDeviceChange, isLocalMode, socketUrl, status } = dependencies;
    const { metric, labels, atomic } = subscription;
    const metricError = subscription_1.validate(metric, labels, options);
    if (metricError) {
        return rxjs_1.throwError(metricError);
    }
    const subscribeTo = (serverType) => new rxjs_1.Observable((observer) => {
        const subscriptions = atomic
            ? [
                api.metrics.subscribe({
                    metric: metric,
                    labels: labels,
                    atomic: atomic,
                    serverType: serverType
                })
            ]
            : labels.map((label) => {
                return api.metrics.subscribe({
                    metric: metric,
                    labels: [label],
                    atomic: atomic,
                    serverType: serverType
                });
            });
        const subscriptionWithListeners = subscriptions.map((subscription) => ({
            subscription,
            listener: api.metrics.on(subscription, (...data) => {
                observer.next(...data);
            })
        }));
        return () => {
            subscriptionWithListeners.forEach(({ subscription, listener }) => {
                api.metrics.unsubscribe(subscription, listener);
            });
        };
    });
    return onDeviceChange().pipe(operators_1.switchMap((device) => {
        if (!device) {
            return rxjs_1.empty();
        }
        const { deviceId } = device;
        return isLocalMode().pipe(operators_1.switchMap((isLocalMode) => {
            if (isLocalMode && subscription_1.isNotionMetric(metric)) {
                return socketUrl().pipe(operators_1.switchMap((socketUrl) => api.setWebsocket(socketUrl, deviceId)), operators_1.switchMap(() => subscribeTo(api.localServerType)));
            }
            api.unsetWebsocket();
            return subscribeTo(api.defaultServerType);
        }));
    }), whileOnline_1.whileOnline({
        status$: status(),
        allowWhileOnSleepMode: false
    }));
}
exports.getMetric = getMetric;
