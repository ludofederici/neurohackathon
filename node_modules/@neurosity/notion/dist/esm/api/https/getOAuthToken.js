var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { getFunctionsBaseURL } from "./utils";
export function getOAuthToken(query, sdkOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = getFunctionsBaseURL(sdkOptions);
        // Get refresh token
        const refreshResponse = yield axios.post(`${baseUrl}/getOAuthRefreshToken`, query);
        const refreshToken = refreshResponse.data;
        return axios
            .post(`${baseUrl}/token`, {
            grant_type: "refresh_token",
            refresh_token: refreshToken.data,
            client_id: query.clientId,
            client_secret: query.clientSecret
        })
            .then((response) => JSON.parse(response.data)["access_token"]);
    });
}
