import { pipe, timer } from "rxjs";
import { distinctUntilChanged, map, switchMap } from "rxjs/operators";
// `lastHeartbeat` is updated every 30 seconds via os
const lastHeartbeatUpdateInterval = 30000;
const maxHeartbeatsSkipped = 3;
const gracePeriod = 5000;
// 65 seconds
const lostHeartbeatThreshold = lastHeartbeatUpdateInterval * maxHeartbeatsSkipped + gracePeriod;
export function offlineIfLostHeartbeat() {
    return pipe(switchMap((status) => timer(0, lostHeartbeatThreshold).pipe(map(() => {
        if (deviceHasLostHeartbeat(status)) {
            return Object.assign(Object.assign({}, status), { state: "offline" });
        }
        return status;
    }))), distinctUntilChanged(didObjectChange));
}
export function deviceHasLostHeartbeat(status) {
    if (!("lastHeartbeat" in status)) {
        return false;
    }
    const { lastHeartbeat } = status;
    const timeSinceLastHeartbeat = Date.now() - lastHeartbeat;
    const lostHeartbeat = timeSinceLastHeartbeat > lostHeartbeatThreshold;
    return lostHeartbeat;
}
function didObjectChange(a, b) {
    return (JSON.stringify(a).split("").sort().join("") ===
        JSON.stringify(b).split("").sort().join(""));
}
